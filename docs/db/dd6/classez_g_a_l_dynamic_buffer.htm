<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezGALDynamicBuffer Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('db/dd6/classez_g_a_l_dynamic_buffer.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../dd/d7b/classez_g_a_l_dynamic_buffer-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">ezGALDynamicBuffer Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>A dynamic buffer can be used when a lot of data needs to be stored in a single large buffer with dynamic size.  
 <a href="../../db/dd6/classez_g_a_l_dynamic_buffer.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d4/dc1/_dynamic_buffer_8h_source.htm">DynamicBuffer.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/structez_g_a_l_dynamic_buffer_1_1_allocate_flags.htm">AllocateFlags</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/da6/structez_g_a_l_dynamic_buffer_1_1_changed_allocation.htm">ChangedAllocation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ab0965ee356c2534096bd3ed6b3c180aa" id="r_ab0965ee356c2534096bd3ed6b3c180aa"><td class="memItemLeft" align="right" valign="top"><a id="ab0965ee356c2534096bd3ed6b3c180aa" name="ab0965ee356c2534096bd3ed6b3c180aa"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> ()</td></tr>
<tr class="memdesc:ab0965ee356c2534096bd3ed6b3c180aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deallocates all data. <br /></td></tr>
<tr class="separator:ab0965ee356c2534096bd3ed6b3c180aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa43763f190c10e418c06745f1c3b282f" id="r_aa43763f190c10e418c06745f1c3b282f"><td class="memTemplParams" colspan="2">template&lt;typename U &gt; </td></tr>
<tr class="memitem:aa43763f190c10e418c06745f1c3b282f"><td class="memTemplItemLeft" align="right" valign="top">ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/dd6/classez_g_a_l_dynamic_buffer.htm#aa43763f190c10e418c06745f1c3b282f">Allocate</a> (const U &amp;userData, ezUInt32 uiCount=1, <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; <a class="el" href="../../d1/dc7/structez_g_a_l_dynamic_buffer_1_1_allocate_flags.htm">AllocateFlags</a> &gt; allocateFlags=AllocateFlags::None)</td></tr>
<tr class="memdesc:aa43763f190c10e418c06745f1c3b282f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocates a single or multiple elements and returns the offset to the first element. This offset is used to identify the allocation and should also be used in a shader to read the data from the buffer.  <br /></td></tr>
<tr class="separator:aa43763f190c10e418c06745f1c3b282f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae53871039642480a248450c8c8519941" id="r_ae53871039642480a248450c8c8519941"><td class="memItemLeft" align="right" valign="top"><a id="ae53871039642480a248450c8c8519941" name="ae53871039642480a248450c8c8519941"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Deallocate</b> (ezUInt32 uiOffset)</td></tr>
<tr class="memdesc:ae53871039642480a248450c8c8519941"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes an allocation at the given offset. The offset must have been returned by Allocate. This will create unused space in the buffer that can be filled by subsequent allocations or closed later by compaction. <br /></td></tr>
<tr class="separator:ae53871039642480a248450c8c8519941"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49b73ab389a7b3873aa08c24aa3c3104" id="r_a49b73ab389a7b3873aa08c24aa3c3104"><td class="memTemplParams" colspan="2"><a id="a49b73ab389a7b3873aa08c24aa3c3104" name="a49b73ab389a7b3873aa08c24aa3c3104"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a49b73ab389a7b3873aa08c24aa3c3104"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MapForWriting</b> (ezUInt32 uiOffset)</td></tr>
<tr class="memdesc:a49b73ab389a7b3873aa08c24aa3c3104"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maps a range of elements for writing. <br /></td></tr>
<tr class="separator:a49b73ab389a7b3873aa08c24aa3c3104"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6df0b1478d5130c06bb831c3e993193" id="r_ad6df0b1478d5130c06bb831c3e993193"><td class="memItemLeft" align="right" valign="top"><a id="ad6df0b1478d5130c06bb831c3e993193" name="ad6df0b1478d5130c06bb831c3e993193"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>UploadChangesForNextFrame</b> ()</td></tr>
<tr class="memdesc:ad6df0b1478d5130c06bb831c3e993193"><td class="mdescLeft">&#160;</td><td class="mdescRight">Upload all changed data to the GPU buffer for the next rendering frame, aka the next time BeginFrame is called on the GALDevice. <br /></td></tr>
<tr class="separator:ad6df0b1478d5130c06bb831c3e993193"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c692d412eb7f1713f84939ffa4991ee" id="r_a4c692d412eb7f1713f84939ffa4991ee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dd6/classez_g_a_l_dynamic_buffer.htm#a4c692d412eb7f1713f84939ffa4991ee">RunCompactionSteps</a> (<a class="el" href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray</a>&lt; <a class="el" href="../../d6/da6/structez_g_a_l_dynamic_buffer_1_1_changed_allocation.htm">ChangedAllocation</a> &gt; &amp;out_changedAllocations, ezUInt32 uiMaxSteps=16)</td></tr>
<tr class="memdesc:a4c692d412eb7f1713f84939ffa4991ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to compact the buffer by moving allocations to free ranges. All moved allocations are returned in out_changedAllocations.  <br /></td></tr>
<tr class="separator:a4c692d412eb7f1713f84939ffa4991ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2bad02053b5f09f2dd9bcf3a855d1b0" id="r_ad2bad02053b5f09f2dd9bcf3a855d1b0"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="../../d3/d59/classez_g_a_l_buffer_handle.htm">ezGALBufferHandle</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dd6/classez_g_a_l_dynamic_buffer.htm#ad2bad02053b5f09f2dd9bcf3a855d1b0">GetBufferForRendering</a> () const</td></tr>
<tr class="memdesc:ad2bad02053b5f09f2dd9bcf3a855d1b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">This should be called inside the rendering code to retrieve the underlying buffer for rendering.  <br /></td></tr>
<tr class="separator:ad2bad02053b5f09f2dd9bcf3a855d1b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:aedd88a418f4111b0f670c96423cfd850" id="r_aedd88a418f4111b0f670c96423cfd850"><td class="memItemLeft" align="right" valign="top"><a id="aedd88a418f4111b0f670c96423cfd850" name="aedd88a418f4111b0f670c96423cfd850"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>ezMemoryUtils</b></td></tr>
<tr class="separator:aedd88a418f4111b0f670c96423cfd850"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dcbecd17dea850cbe8b1f3181dacb0f" id="r_a8dcbecd17dea850cbe8b1f3181dacb0f"><td class="memItemLeft" align="right" valign="top"><a id="a8dcbecd17dea850cbe8b1f3181dacb0f" name="a8dcbecd17dea850cbe8b1f3181dacb0f"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>ezGALDevice</b></td></tr>
<tr class="separator:a8dcbecd17dea850cbe8b1f3181dacb0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A dynamic buffer can be used when a lot of data needs to be stored in a single large buffer with dynamic size. </p>
<p>This class supports allocation and deallocation of single elements or ranges of multiple elements. An allocation is identified by an offset and can have additional user data attached. The indented usage patterns is that data is allocated and written to the buffer during game play or extraction code. After all data has been written UploadChangesForNextFrame needs to be called to upload changed data to the GPU buffer. The renderer would then call GetBufferForRendering to get the correct buffer for rendering. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="aa43763f190c10e418c06745f1c3b282f" name="aa43763f190c10e418c06745f1c3b282f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa43763f190c10e418c06745f1c3b282f">&#9670;&#160;</a></span>Allocate()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezGALDynamicBuffer::Allocate </td>
          <td>(</td>
          <td class="paramtype">const U &amp;&#160;</td>
          <td class="paramname"><em>userData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiCount</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; <a class="el" href="../../d1/dc7/structez_g_a_l_dynamic_buffer_1_1_allocate_flags.htm">AllocateFlags</a> &gt;&#160;</td>
          <td class="paramname"><em>allocateFlags</em> = <code>AllocateFlags::None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocates a single or multiple elements and returns the offset to the first element. This offset is used to identify the allocation and should also be used in a shader to read the data from the buffer. </p>
<p>The user data can be used to store additional information, typically the owner of the allocation, like e.g. a component handle. </p>

</div>
</div>
<a id="ad2bad02053b5f09f2dd9bcf3a855d1b0" name="ad2bad02053b5f09f2dd9bcf3a855d1b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2bad02053b5f09f2dd9bcf3a855d1b0">&#9670;&#160;</a></span>GetBufferForRendering()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="../../d3/d59/classez_g_a_l_buffer_handle.htm">ezGALBufferHandle</a> &amp; ezGALDynamicBuffer::GetBufferForRendering </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This should be called inside the rendering code to retrieve the underlying buffer for rendering. </p>
<p>It is ensured that it will always return the same buffer until the next time BeginFrame is called on the GALDevice even if the buffer has been resized due to more allocations on the game play or extraction side. </p>

</div>
</div>
<a id="a4c692d412eb7f1713f84939ffa4991ee" name="a4c692d412eb7f1713f84939ffa4991ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c692d412eb7f1713f84939ffa4991ee">&#9670;&#160;</a></span>RunCompactionSteps()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezGALDynamicBuffer::RunCompactionSteps </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray</a>&lt; <a class="el" href="../../d6/da6/structez_g_a_l_dynamic_buffer_1_1_changed_allocation.htm">ChangedAllocation</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>out_changedAllocations</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiMaxSteps</em> = <code>16</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tries to compact the buffer by moving allocations to free ranges. All moved allocations are returned in out_changedAllocations. </p>
<p>The user data can be used to update the owner of the allocation. To prevent too many changes per frame only uiMaxSteps are executed which corresponds to the number of allocations which can be moved. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/RendererFoundation/Resources/<a class="el" href="../../d4/dc1/_dynamic_buffer_8h_source.htm">DynamicBuffer.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/RendererFoundation/Resources/Implementation/<b>DynamicBuffer.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../db/dd6/classez_g_a_l_dynamic_buffer.htm">ezGALDynamicBuffer</a></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:17:58 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
