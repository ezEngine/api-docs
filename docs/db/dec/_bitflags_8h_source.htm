<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Types/Bitflags.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 24.09</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('db/dec/_bitflags_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Bitflags.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Basics.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;Foundation/Containers/Implementation/BitIterator.h&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;Foundation/Types/Enum.h&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm">   81</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keyword">using</span> Enum = <span class="keyword">typename</span> T::Enum;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keyword">using</span> Bits = <span class="keyword">typename</span> T::Bits;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keyword">using</span> StorageType = <span class="keyword">typename</span> T::StorageType;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../da/d40/structez_bit_iterator.htm">ConstIterator</a> = <a class="code" href="../../da/d40/structez_bit_iterator.htm">ezBitIterator&lt;Enum, false&gt;</a>;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a534f0018f017f682e03fc7467dc972b3">   92</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d1/dec/structez_bitflags.htm#a534f0018f017f682e03fc7467dc972b3">ezBitflags</a>()</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    : m_Value(T::Default) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#ae7c6c0231ec87cdae8d7a5df84554f83">   98</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d1/dec/structez_bitflags.htm#ae7c6c0231ec87cdae8d7a5df84554f83">ezBitflags</a>(Enum flag1) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    m_Value = (StorageType)flag1;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">void</span> operator=(Enum flag1) { m_Value = (StorageType)flag1; }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#ac76811a8868bb96b12e869858e440ef0">  106</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#ac76811a8868bb96b12e869858e440ef0">operator==</a>(<span class="keyword">const</span> StorageType rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> m_Value == rhs;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a85c2f43200acad1a2ee80eb753e949c3">  112</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#a85c2f43200acad1a2ee80eb753e949c3">operator!=</a>(<span class="keyword">const</span> StorageType rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value != rhs; }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#ad45425d14b83634ec19562078affb547">  115</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#ad45425d14b83634ec19562078affb547">operator==</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value == rhs.m_Value; }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#adad1def513992a6158be5bfc47c24719">  118</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#adad1def513992a6158be5bfc47c24719">operator!=</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value != rhs.m_Value; }</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a2864c50a58574d58cf243b6ed1f6a95d">  121</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#a2864c50a58574d58cf243b6ed1f6a95d">Clear</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    m_Value = 0;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a0f23fb5379d0fa6c092c565e44830cbe">  127</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#a0f23fb5379d0fa6c092c565e44830cbe">IsSet</a>(Enum flag) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">return</span> (m_Value &amp; flag) != 0;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  }</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a40e906628358d1029f5645c13410bd56">  133</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#a40e906628358d1029f5645c13410bd56">AreAllSet</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span> (m_Value &amp; rhs.m_Value) == rhs.m_Value;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a45db2d923c911f433c8349ac99ce464a">  139</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#a45db2d923c911f433c8349ac99ce464a">AreNoneSet</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">return</span> (m_Value &amp; rhs.m_Value) == 0;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a10f86da5d9b9d336871ec40b70c38b31">  145</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#a10f86da5d9b9d336871ec40b70c38b31">IsAnySet</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">return</span> (m_Value &amp; rhs.m_Value) != 0;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  }</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">  151</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    m_Value |= rhs.m_Value;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#ab50bc598e312a1f1099ff1297580c019">  157</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#ab50bc598e312a1f1099ff1297580c019">Remove</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    m_Value &amp;= (~rhs.m_Value);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a3f3bccaa5b14b128407ef45c78ef5486">  163</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#a3f3bccaa5b14b128407ef45c78ef5486">Toggle</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    m_Value ^= rhs.m_Value;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a8e0f0af6eb812b75214d919b4707121b">  169</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#a8e0f0af6eb812b75214d919b4707121b">AddOrRemove</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; rhs, <span class="keywordtype">bool</span> bState) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    m_Value = (bState) ? m_Value | rhs.m_Value : m_Value &amp; (~rhs.m_Value);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a3833b7668092c2e865560a215621f8dd">  175</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a> <a class="code" href="../../d1/dec/structez_bitflags.htm#a3833b7668092c2e865560a215621f8dd">operator|</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>(m_Value | rhs.m_Value);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  }</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a20fed040da406448518624132127866f">  181</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a> <a class="code" href="../../d1/dec/structez_bitflags.htm#a20fed040da406448518624132127866f">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>(m_Value &amp; rhs.m_Value);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a833f9f43ff63c65346e844f97d510eb1">  187</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#a833f9f43ff63c65346e844f97d510eb1">operator|=</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    m_Value |= rhs.m_Value;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#ae9aeb290b4dcaa06f8bbf7f4be427439">  193</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#ae9aeb290b4dcaa06f8bbf7f4be427439">operator&amp;=</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    m_Value &amp;= rhs.m_Value;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#aa93ba8c89c9f1c1cd79c87d02f6a3656">  199</a></span>&#160;  EZ_ALWAYS_INLINE StorageType <a class="code" href="../../d1/dec/structez_bitflags.htm#aa93ba8c89c9f1c1cd79c87d02f6a3656">GetValue</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">return</span> m_Value;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#aa0fc77271babcf097032c0992533f1a0">  205</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#aa0fc77271babcf097032c0992533f1a0">SetValue</a>(StorageType value) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    m_Value = value;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a43722efc4ab42293ce264564ff86b894">  211</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#a43722efc4ab42293ce264564ff86b894">IsNoFlagSet</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">return</span> m_Value == 0;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a479a5092574665af3f7c635a4908d9de">  217</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#a479a5092574665af3f7c635a4908d9de">IsAnyFlagSet</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">return</span> m_Value != 0;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#abe97765c065531507027e5e0bdf89d0e">  224</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../da/d40/structez_bit_iterator.htm">ConstIterator</a> <a class="code" href="../../d1/dec/structez_bitflags.htm#abe97765c065531507027e5e0bdf89d0e">GetIterator</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../da/d40/structez_bit_iterator.htm">ConstIterator</a>((Enum)m_Value);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="../../d1/dec/structez_bitflags.htm#a0bc8b9a7dfc5771023980bd143f21330">  230</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../da/d40/structez_bit_iterator.htm">ConstIterator</a> <a class="code" href="../../d1/dec/structez_bitflags.htm#a0bc8b9a7dfc5771023980bd143f21330">GetEndIterator</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  {</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../da/d40/structez_bit_iterator.htm">ConstIterator</a>();</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">explicit</span> <a class="code" href="../../d1/dec/structez_bitflags.htm#a534f0018f017f682e03fc7467dc972b3">ezBitflags</a>(StorageType flags)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    : m_Value(flags)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  {</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  <span class="keyword">union</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    StorageType m_Value;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    Bits m_bits;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  };</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;};</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">// begin() /end() for range-based for-loop support</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../da/d40/structez_bit_iterator.htm">ezBitflags&lt;T&gt;::ConstIterator</a> begin(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d1/dec/structez_bitflags.htm#abe97765c065531507027e5e0bdf89d0e">GetIterator</a>();</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../da/d40/structez_bit_iterator.htm">ezBitflags&lt;T&gt;::ConstIterator</a> cbegin(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;{</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d1/dec/structez_bitflags.htm#abe97765c065531507027e5e0bdf89d0e">GetIterator</a>();</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../da/d40/structez_bit_iterator.htm">ezBitflags&lt;T&gt;::ConstIterator</a> end(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d1/dec/structez_bitflags.htm#a0bc8b9a7dfc5771023980bd143f21330">GetEndIterator</a>();</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../da/d40/structez_bit_iterator.htm">ezBitflags&lt;T&gt;::ConstIterator</a> cend(<span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d1/dec/structez_bitflags.htm#a0bc8b9a7dfc5771023980bd143f21330">GetEndIterator</a>();</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="preprocessor">#define EZ_DECLARE_FLAGS_OPERATORS(FlagsType)                                      \</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="preprocessor">  inline ezBitflags&lt;FlagsType&gt; operator|(FlagsType::Enum lhs, FlagsType::Enum rhs) \</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="preprocessor">  {                                                                                \</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="preprocessor">    return (ezBitflags&lt;FlagsType&gt;(lhs) | ezBitflags&lt;FlagsType&gt;(rhs));              \</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="preprocessor">  }                                                                                \</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="preprocessor">                                                                                   \</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="preprocessor">  inline ezBitflags&lt;FlagsType&gt; operator&amp;(FlagsType::Enum lhs, FlagsType::Enum rhs) \</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="preprocessor">  {                                                                                \</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="preprocessor">    return (ezBitflags&lt;FlagsType&gt;(lhs) &amp; ezBitflags&lt;FlagsType&gt;(rhs));              \</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="preprocessor">  }</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160; </div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="preprocessor">#define EZ_DECLARE_FLAGS_WITH_DEFAULT(InternalStorageType, BitflagsTypeName, DefaultValue, ...) \</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="preprocessor">  struct BitflagsTypeName                                                                       \</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="preprocessor">  {                                                                                             \</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor">    static constexpr ezUInt32 Count = EZ_VA_NUM_ARGS(__VA_ARGS__);                              \</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor">    using StorageType = InternalStorageType;                                                    \</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">    enum Enum                                                                                   \</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="preprocessor">    {                                                                                           \</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="preprocessor">      EZ_EXPAND_ARGS_WITH_INDEX(EZ_DECLARE_FLAGS_ENUM, ##__VA_ARGS__) Default = DefaultValue    \</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="preprocessor">    };                                                                                          \</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="preprocessor">    struct Bits                                                                                 \</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="preprocessor">    {                                                                                           \</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="preprocessor">      EZ_EXPAND_ARGS(EZ_DECLARE_FLAGS_BITS, ##__VA_ARGS__)                                      \</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="preprocessor">    };                                                                                          \</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="preprocessor">    EZ_ENUM_TO_STRING(__VA_ARGS__)                                                              \</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="preprocessor">  };                                                                                            \</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="preprocessor">  EZ_DECLARE_FLAGS_OPERATORS(BitflagsTypeName)</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="preprocessor">#define EZ_DECLARE_FLAGS(InternalStorageType, BitflagsTypeName, ...) \</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="preprocessor">  EZ_DECLARE_FLAGS_WITH_DEFAULT(InternalStorageType, BitflagsTypeName, 0, ##__VA_ARGS__)</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="preprocessor">#define EZ_DECLARE_FLAGS_ENUM(name, n) name = EZ_BIT(n),</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="preprocessor">#define EZ_DECLARE_FLAGS_BITS(name) StorageType name : 1;</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructez_bitflags_htm_a2864c50a58574d58cf243b6ed1f6a95d"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a2864c50a58574d58cf243b6ed1f6a95d">ezBitflags::Clear</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void Clear()</div><div class="ttdoc">Clears all flags.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:121</div></div>
<div class="ttc" id="astructez_bitflags_htm"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm">ezBitflags</a></div><div class="ttdoc">The ezBitflags class allows you to work with type-safe bitflags.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:81</div></div>
<div class="ttc" id="astructez_bitflags_htm_a40e906628358d1029f5645c13410bd56"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a40e906628358d1029f5645c13410bd56">ezBitflags::AreAllSet</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool AreAllSet(const ezBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Returns whether all the given flags are set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:133</div></div>
<div class="ttc" id="astructez_bitflags_htm_a45db2d923c911f433c8349ac99ce464a"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a45db2d923c911f433c8349ac99ce464a">ezBitflags::AreNoneSet</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool AreNoneSet(const ezBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Returns whether none of the given flags is set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:139</div></div>
<div class="ttc" id="astructez_bitflags_htm_ad45425d14b83634ec19562078affb547"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#ad45425d14b83634ec19562078affb547">ezBitflags::operator==</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator==(const ezBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Comparison operator.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:115</div></div>
<div class="ttc" id="astructez_bitflags_htm_a85c2f43200acad1a2ee80eb753e949c3"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a85c2f43200acad1a2ee80eb753e949c3">ezBitflags::operator!=</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator!=(const StorageType rhs) const</div><div class="ttdoc">Comparison operator.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:112</div></div>
<div class="ttc" id="astructez_bitflags_htm_aaa83c1e77b70d0b549604a64c20f8a83"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">ezBitflags::Add</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void Add(const ezBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Sets the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:151</div></div>
<div class="ttc" id="astructez_bitflags_htm_a8e0f0af6eb812b75214d919b4707121b"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a8e0f0af6eb812b75214d919b4707121b">ezBitflags::AddOrRemove</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void AddOrRemove(const ezBitflags&lt; T &gt; &amp;rhs, bool bState)</div><div class="ttdoc">Sets or clears the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:169</div></div>
<div class="ttc" id="astructez_bitflags_htm_a43722efc4ab42293ce264564ff86b894"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a43722efc4ab42293ce264564ff86b894">ezBitflags::IsNoFlagSet</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsNoFlagSet() const</div><div class="ttdoc">Returns true if not a single bit is set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:211</div></div>
<div class="ttc" id="astructez_bit_iterator_htm"><div class="ttname"><a href="../../da/d40/structez_bit_iterator.htm">ezBitIterator</a></div><div class="ttdef"><b>Definition:</b> BitIterator.h:26</div></div>
<div class="ttc" id="astructez_bitflags_htm_ae9aeb290b4dcaa06f8bbf7f4be427439"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#ae9aeb290b4dcaa06f8bbf7f4be427439">ezBitflags::operator&amp;=</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void operator&amp;=(const ezBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Modifies this to only contain the bits that were set in this and rhs.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:193</div></div>
<div class="ttc" id="astructez_bitflags_htm_a0bc8b9a7dfc5771023980bd143f21330"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a0bc8b9a7dfc5771023980bd143f21330">ezBitflags::GetEndIterator</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ConstIterator GetEndIterator() const</div><div class="ttdoc">Returns an invalid iterator. Needed to support range based for loops.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:230</div></div>
<div class="ttc" id="astructez_bitflags_htm_a10f86da5d9b9d336871ec40b70c38b31"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a10f86da5d9b9d336871ec40b70c38b31">ezBitflags::IsAnySet</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsAnySet(const ezBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Returns whether any of the given flags is set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:145</div></div>
<div class="ttc" id="astructez_bitflags_htm_ae7c6c0231ec87cdae8d7a5df84554f83"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#ae7c6c0231ec87cdae8d7a5df84554f83">ezBitflags::ezBitflags</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezBitflags(Enum flag1)</div><div class="ttdoc">Converts the incoming type to ezBitflags&lt;T&gt;</div><div class="ttdef"><b>Definition:</b> Bitflags.h:98</div></div>
<div class="ttc" id="astructez_bitflags_htm_a3f3bccaa5b14b128407ef45c78ef5486"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a3f3bccaa5b14b128407ef45c78ef5486">ezBitflags::Toggle</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void Toggle(const ezBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Toggles the state of the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:163</div></div>
<div class="ttc" id="astructez_bitflags_htm_a3833b7668092c2e865560a215621f8dd"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a3833b7668092c2e865560a215621f8dd">ezBitflags::operator|</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezBitflags&lt; T &gt; operator|(const ezBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Returns an object that has the flags of this and rhs combined.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:175</div></div>
<div class="ttc" id="astructez_bitflags_htm_a20fed040da406448518624132127866f"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a20fed040da406448518624132127866f">ezBitflags::operator&amp;</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezBitflags&lt; T &gt; operator&amp;(const ezBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Returns an object that has the flags that were set both in this and rhs.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:181</div></div>
<div class="ttc" id="astructez_bitflags_htm_ab50bc598e312a1f1099ff1297580c019"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#ab50bc598e312a1f1099ff1297580c019">ezBitflags::Remove</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void Remove(const ezBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Removes the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:157</div></div>
<div class="ttc" id="astructez_bitflags_htm_a479a5092574665af3f7c635a4908d9de"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a479a5092574665af3f7c635a4908d9de">ezBitflags::IsAnyFlagSet</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsAnyFlagSet() const</div><div class="ttdoc">Returns true if any bitflag is set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:217</div></div>
<div class="ttc" id="astructez_bitflags_htm_a534f0018f017f682e03fc7467dc972b3"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a534f0018f017f682e03fc7467dc972b3">ezBitflags::ezBitflags</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezBitflags()</div><div class="ttdoc">Constructor. Initializes the flags to the default value.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:92</div></div>
<div class="ttc" id="astructez_bitflags_htm_abe97765c065531507027e5e0bdf89d0e"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#abe97765c065531507027e5e0bdf89d0e">ezBitflags::GetIterator</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ConstIterator GetIterator() const</div><div class="ttdoc">Returns a constant iterator to the very first set bit. Note that due to the way iterating through bit...</div><div class="ttdef"><b>Definition:</b> Bitflags.h:224</div></div>
<div class="ttc" id="astructez_bitflags_htm_ac76811a8868bb96b12e869858e440ef0"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#ac76811a8868bb96b12e869858e440ef0">ezBitflags::operator==</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator==(const StorageType rhs) const</div><div class="ttdoc">Comparison operator.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:106</div></div>
<div class="ttc" id="astructez_bitflags_htm_a833f9f43ff63c65346e844f97d510eb1"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a833f9f43ff63c65346e844f97d510eb1">ezBitflags::operator|=</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void operator|=(const ezBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Modifies this to also contain the bits from rhs.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:187</div></div>
<div class="ttc" id="astructez_bitflags_htm_aa0fc77271babcf097032c0992533f1a0"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#aa0fc77271babcf097032c0992533f1a0">ezBitflags::SetValue</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void SetValue(StorageType value)</div><div class="ttdoc">Overwrites the flags with a new value.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:205</div></div>
<div class="ttc" id="astructez_bitflags_htm_a0f23fb5379d0fa6c092c565e44830cbe"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a0f23fb5379d0fa6c092c565e44830cbe">ezBitflags::IsSet</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsSet(Enum flag) const</div><div class="ttdoc">Checks if certain flags are set within the bitfield.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:127</div></div>
<div class="ttc" id="astructez_bitflags_htm_aa93ba8c89c9f1c1cd79c87d02f6a3656"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#aa93ba8c89c9f1c1cd79c87d02f6a3656">ezBitflags::GetValue</a></div><div class="ttdeci">EZ_ALWAYS_INLINE StorageType GetValue() const</div><div class="ttdoc">Returns the stored value as the underlying integer type.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:199</div></div>
<div class="ttc" id="astructez_bitflags_htm_adad1def513992a6158be5bfc47c24719"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#adad1def513992a6158be5bfc47c24719">ezBitflags::operator!=</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator!=(const ezBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Comparison operator.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:118</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_f95f7c440efc771b227d40e9293549bd.htm">Types</a></li><li class="navelem"><b>Bitflags.h</b></li>
    <li class="footer">Generated on Sun Aug 25 2024 13:06:21 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
