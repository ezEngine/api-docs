<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezPreprocessor Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('db/dfd/classez_preprocessor.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="../../d8/d48/classez_preprocessor-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezPreprocessor Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="../../db/dfd/classez_preprocessor.htm" title="ezPreprocessor implements a standard C preprocessor. It can be used to pre-process files to get the o...">ezPreprocessor</a> implements a standard C preprocessor. It can be used to pre-process files to get the output after macro expansion and #ifdef handling.  
 <a href="../../db/dfd/classez_preprocessor.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d1/d57/_preprocessor_8h_source.htm">Preprocessor.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d65/structez_preprocessor_1_1_processing_event.htm">ProcessingEvent</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The event data that the processor broadcasts.  <a href="../../d0/d65/structez_preprocessor_1_1_processing_event.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a7e38eb83dc228f6b818a05e46b77d090"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#a7e38eb83dc228f6b818a05e46b77d090">IncludeType</a> { <a class="el" href="../../db/dfd/classez_preprocessor.htm#a7e38eb83dc228f6b818a05e46b77d090a1990a7ae621e487fff226c0c3663ad56">MainFile</a>, 
<a class="el" href="../../db/dfd/classez_preprocessor.htm#a7e38eb83dc228f6b818a05e46b77d090a648a2882ab9c660960eb7c587507e507">RelativeInclude</a>, 
<a class="el" href="../../db/dfd/classez_preprocessor.htm#a7e38eb83dc228f6b818a05e46b77d090a306bf7049e385571f06bc7bb01accf44">GlobalInclude</a>
 }</td></tr>
<tr class="memdesc:a7e38eb83dc228f6b818a05e46b77d090"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes the type of #include that was encountered during preprocessing.  <a href="../../db/dfd/classez_preprocessor.htm#a7e38eb83dc228f6b818a05e46b77d090">More...</a><br /></td></tr>
<tr class="separator:a7e38eb83dc228f6b818a05e46b77d090"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d08f58ec26efb0c647128dbd1daa4fe"><td class="memItemLeft" align="right" valign="top"><a id="a2d08f58ec26efb0c647128dbd1daa4fe"></a>
typedef <a class="el" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>&lt; <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>(const char *szAbsoluteFile, <a class="el" href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray</a>&lt; ezUInt8 &gt; &amp;FileContent, <a class="el" href="../../d9/d88/classez_timestamp.htm">ezTimestamp</a> &amp;out_FileModification)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#a2d08f58ec26efb0c647128dbd1daa4fe">FileOpenCB</a></td></tr>
<tr class="memdesc:a2d08f58ec26efb0c647128dbd1daa4fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">This type of callback is used to read an #include file. <em>szAbsoluteFile</em> is the path that the FileLocatorCB reported, the result needs to be stored in <em>FileContent</em>. <br /></td></tr>
<tr class="separator:a2d08f58ec26efb0c647128dbd1daa4fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67159da7111ff8e71631aa1dccc945dd"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>&lt; <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>(const char *szCurAbsoluteFile, const char *szIncludeFile, <a class="el" href="../../db/dfd/classez_preprocessor.htm#a7e38eb83dc228f6b818a05e46b77d090">IncludeType</a> IncType, <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;out_sAbsoluteFilePath)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#a67159da7111ff8e71631aa1dccc945dd">FileLocatorCB</a></td></tr>
<tr class="memdesc:a67159da7111ff8e71631aa1dccc945dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">This type of callback is used to retrieve the absolute path of the <em>szIncludeFile</em> when #included inside <em>szCurAbsoluteFile</em>.  <a href="../../db/dfd/classez_preprocessor.htm#a67159da7111ff8e71631aa1dccc945dd">More...</a><br /></td></tr>
<tr class="separator:a67159da7111ff8e71631aa1dccc945dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaca1f54b9f566ce82015519cc4462fe"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>&lt; bool(const char *szUnknownCommand)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#adaca1f54b9f566ce82015519cc4462fe">PassThroughUnknownCmdCB</a></td></tr>
<tr class="memdesc:adaca1f54b9f566ce82015519cc4462fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Every time an unknown command (e.g. '#version') is encountered, this callback is used to determine whether the command shall be passed through.  <a href="../../db/dfd/classez_preprocessor.htm#adaca1f54b9f566ce82015519cc4462fe">More...</a><br /></td></tr>
<tr class="separator:adaca1f54b9f566ce82015519cc4462fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94fc5268b9dd8387b6906bfa709bc14d"><td class="memItemLeft" align="right" valign="top"><a id="a94fc5268b9dd8387b6906bfa709bc14d"></a>
typedef <a class="el" href="../../d9/dfe/classez_deque.htm">ezDeque</a>&lt; <a class="el" href="../../d8/deb/classez_hybrid_array.htm">ezTokenParseUtils::TokenStream</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>MacroParameters</b></td></tr>
<tr class="separator:a94fc5268b9dd8387b6906bfa709bc14d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a47b7da7b7e5fa3cb7942bd15472fafa7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#a47b7da7b7e5fa3cb7942bd15472fafa7">SetLogInterface</a> (<a class="el" href="../../d2/d9e/classez_log_interface.htm">ezLogInterface</a> *pLog)</td></tr>
<tr class="memdesc:a47b7da7b7e5fa3cb7942bd15472fafa7"><td class="mdescLeft">&#160;</td><td class="mdescRight">All error output is sent to the given <a class="el" href="../../d2/d9e/classez_log_interface.htm" title="Base class for all logging classes.">ezLogInterface</a>.  <a href="../../db/dfd/classez_preprocessor.htm#a47b7da7b7e5fa3cb7942bd15472fafa7">More...</a><br /></td></tr>
<tr class="separator:a47b7da7b7e5fa3cb7942bd15472fafa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad96b9e4417188ed11e9ad94d348a2f18"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#ad96b9e4417188ed11e9ad94d348a2f18">SetCustomFileCache</a> (<a class="el" href="../../d0/d55/classez_tokenized_file_cache.htm">ezTokenizedFileCache</a> *pFileCache=nullptr)</td></tr>
<tr class="memdesc:ad96b9e4417188ed11e9ad94d348a2f18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows to specify a custom cache object that should be used for storing the tokenized result of files.  <a href="../../db/dfd/classez_preprocessor.htm#ad96b9e4417188ed11e9ad94d348a2f18">More...</a><br /></td></tr>
<tr class="separator:ad96b9e4417188ed11e9ad94d348a2f18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00b290ccf8cc0423d324a6286b1d455e"><td class="memItemLeft" align="right" valign="top"><a id="a00b290ccf8cc0423d324a6286b1d455e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#a00b290ccf8cc0423d324a6286b1d455e">SetPassThroughPragma</a> (bool bPassThrough)</td></tr>
<tr class="memdesc:a00b290ccf8cc0423d324a6286b1d455e"><td class="mdescLeft">&#160;</td><td class="mdescRight">If set to true, all #pragma commands are passed through to the output, otherwise they are removed. <br /></td></tr>
<tr class="separator:a00b290ccf8cc0423d324a6286b1d455e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf837cc3de89fd52b259a0bb87f4c3e0"><td class="memItemLeft" align="right" valign="top"><a id="abf837cc3de89fd52b259a0bb87f4c3e0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#abf837cc3de89fd52b259a0bb87f4c3e0">SetPassThroughLine</a> (bool bPassThrough)</td></tr>
<tr class="memdesc:abf837cc3de89fd52b259a0bb87f4c3e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">If set to true, all #line commands are passed through to the output, otherwise they are removed. <br /></td></tr>
<tr class="separator:abf837cc3de89fd52b259a0bb87f4c3e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc158f7c5d00ac89838a66052d30bda4"><td class="memItemLeft" align="right" valign="top"><a id="afc158f7c5d00ac89838a66052d30bda4"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#afc158f7c5d00ac89838a66052d30bda4">SetPassThroughUnknownCmdsCB</a> (<a class="el" href="../../db/dfd/classez_preprocessor.htm#adaca1f54b9f566ce82015519cc4462fe">PassThroughUnknownCmdCB</a> callback)</td></tr>
<tr class="memdesc:afc158f7c5d00ac89838a66052d30bda4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the callback that is used to determine whether an unknown command is passed through or triggers an error. <br /></td></tr>
<tr class="separator:afc158f7c5d00ac89838a66052d30bda4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1127df0d6061a2cf1243c0a954983e6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#ac1127df0d6061a2cf1243c0a954983e6">SetFileOpenFunction</a> (<a class="el" href="../../db/dfd/classez_preprocessor.htm#a2d08f58ec26efb0c647128dbd1daa4fe">FileOpenCB</a> OpenAbsFileCB)</td></tr>
<tr class="memdesc:ac1127df0d6061a2cf1243c0a954983e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the callback that is needed to read input data.  <a href="../../db/dfd/classez_preprocessor.htm#ac1127df0d6061a2cf1243c0a954983e6">More...</a><br /></td></tr>
<tr class="separator:ac1127df0d6061a2cf1243c0a954983e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6f015440f5d7fb6ab3e6991ebb3389f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#ad6f015440f5d7fb6ab3e6991ebb3389f">SetFileLocatorFunction</a> (<a class="el" href="../../db/dfd/classez_preprocessor.htm#a67159da7111ff8e71631aa1dccc945dd">FileLocatorCB</a> LocateAbsFileCB)</td></tr>
<tr class="memdesc:ad6f015440f5d7fb6ab3e6991ebb3389f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the callback that is needed to locate an input file.  <a href="../../db/dfd/classez_preprocessor.htm#ad6f015440f5d7fb6ab3e6991ebb3389f">More...</a><br /></td></tr>
<tr class="separator:ad6f015440f5d7fb6ab3e6991ebb3389f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b7b99ba13fe7219d286d2f75f946c0e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#a9b7b99ba13fe7219d286d2f75f946c0e">AddCustomDefine</a> (const char *szDefinition)</td></tr>
<tr class="memdesc:a9b7b99ba13fe7219d286d2f75f946c0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a #define to the preprocessor, even before any file is processed.  <a href="../../db/dfd/classez_preprocessor.htm#a9b7b99ba13fe7219d286d2f75f946c0e">More...</a><br /></td></tr>
<tr class="separator:a9b7b99ba13fe7219d286d2f75f946c0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a111632bf48abde1ae9779fe66458ae80"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#a111632bf48abde1ae9779fe66458ae80">Process</a> (const char *szMainFile, <a class="el" href="../../d8/deb/classez_hybrid_array.htm">ezTokenParseUtils::TokenStream</a> &amp;TokenOutput)</td></tr>
<tr class="memdesc:a111632bf48abde1ae9779fe66458ae80"><td class="mdescLeft">&#160;</td><td class="mdescRight">Processes the given file and returns the result as a stream of tokens.  <a href="../../db/dfd/classez_preprocessor.htm#a111632bf48abde1ae9779fe66458ae80">More...</a><br /></td></tr>
<tr class="separator:a111632bf48abde1ae9779fe66458ae80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a1db29a649a54776d15a811226ac947"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#a4a1db29a649a54776d15a811226ac947">Process</a> (const char *szMainFile, <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;sOutput, bool bKeepComments=true, bool bRemoveRedundantWhitespace=false, bool bInsertLine=false)</td></tr>
<tr class="memdesc:a4a1db29a649a54776d15a811226ac947"><td class="mdescLeft">&#160;</td><td class="mdescRight">Processes the given file and returns the result as a string.  <a href="../../db/dfd/classez_preprocessor.htm#a4a1db29a649a54776d15a811226ac947">More...</a><br /></td></tr>
<tr class="separator:a4a1db29a649a54776d15a811226ac947"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a90cf299e7247004c11be6fb6d23b679a"><td class="memItemLeft" align="right" valign="top"><a id="a90cf299e7247004c11be6fb6d23b679a"></a>
static <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>DefaultFileLocator</b> (const char *szCurAbsoluteFile, const char *szIncludeFile, <a class="el" href="../../db/dfd/classez_preprocessor.htm#a7e38eb83dc228f6b818a05e46b77d090">ezPreprocessor::IncludeType</a> IncType, <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;out_sAbsoluteFilePath)</td></tr>
<tr class="separator:a90cf299e7247004c11be6fb6d23b679a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa46bf6ff503c251572f9065776a1a28"><td class="memItemLeft" align="right" valign="top"><a id="aaa46bf6ff503c251572f9065776a1a28"></a>
static <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>DefaultFileOpen</b> (const char *szAbsoluteFile, <a class="el" href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray</a>&lt; ezUInt8 &gt; &amp;FileContent, <a class="el" href="../../d9/d88/classez_timestamp.htm">ezTimestamp</a> &amp;out_FileModification)</td></tr>
<tr class="separator:aaa46bf6ff503c251572f9065776a1a28"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:ae277dd7ed3f2a4f348a2fdf11a908042"><td class="memItemLeft" align="right" valign="top"><a id="ae277dd7ed3f2a4f348a2fdf11a908042"></a>
<a class="el" href="../../d0/daf/classez_event.htm">ezEvent</a>&lt; const <a class="el" href="../../d0/d65/structez_preprocessor_1_1_processing_event.htm">ProcessingEvent</a> &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dfd/classez_preprocessor.htm#ae277dd7ed3f2a4f348a2fdf11a908042">m_ProcessingEvents</a></td></tr>
<tr class="memdesc:ae277dd7ed3f2a4f348a2fdf11a908042"><td class="mdescLeft">&#160;</td><td class="mdescRight">Broadcasts events during the processing. This can be used to create detailed callstacks when an error is encountered. It also broadcasts errors and warnings with more detailed information than the log interface allows. <br /></td></tr>
<tr class="separator:ae277dd7ed3f2a4f348a2fdf11a908042"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="../../db/dfd/classez_preprocessor.htm" title="ezPreprocessor implements a standard C preprocessor. It can be used to pre-process files to get the o...">ezPreprocessor</a> implements a standard C preprocessor. It can be used to pre-process files to get the output after macro expansion and #ifdef handling. </p>
<p>For a detailed documentation about the C preprocessor, see <a href="https://gcc.gnu.org/onlinedocs/cpp/">https://gcc.gnu.org/onlinedocs/cpp/</a></p>
<p>This class implements all standard features:</p><ul>
<li>object and function macros</li>
<li>Full evaluation of #if, #ifdef etc. including mathematical operations such as #if A &gt; 42</li>
<li>Parameter stringification</li>
<li>Parameter concatenation</li>
<li><b>LINE</b> and <b>FILE</b> macros</li>
<li>Fully correct #line evaluation for error output</li>
<li>Correct handling of <b>VA_ARGS</b></li>
<li>#include handling</li>
<li>#pragma once</li>
<li>#warning and #error for custom failure messages </li>
</ul>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a67159da7111ff8e71631aa1dccc945dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67159da7111ff8e71631aa1dccc945dd">&#9670;&nbsp;</a></span>FileLocatorCB</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>&lt;<a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>(const char* szCurAbsoluteFile, const char* szIncludeFile, <a class="el" href="../../db/dfd/classez_preprocessor.htm#a7e38eb83dc228f6b818a05e46b77d090">IncludeType</a> IncType, <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a>&amp; out_sAbsoluteFilePath)&gt; <a class="el" href="../../db/dfd/classez_preprocessor.htm#a67159da7111ff8e71631aa1dccc945dd">ezPreprocessor::FileLocatorCB</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This type of callback is used to retrieve the absolute path of the <em>szIncludeFile</em> when #included inside <em>szCurAbsoluteFile</em>. </p>
<p>Note that you should ensure that <em>out_sAbsoluteFilePath</em> is always identical (including casing and path slashes) when it is supposed to point to the same file, as this exact name is used for file lookup (and therefore also file caching). If it is not identical, file caching will not work, and on different OSes the file may be found or not. </p>

</div>
</div>
<a id="adaca1f54b9f566ce82015519cc4462fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adaca1f54b9f566ce82015519cc4462fe">&#9670;&nbsp;</a></span>PassThroughUnknownCmdCB</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>&lt;bool(const char* szUnknownCommand)&gt; <a class="el" href="../../db/dfd/classez_preprocessor.htm#adaca1f54b9f566ce82015519cc4462fe">ezPreprocessor::PassThroughUnknownCmdCB</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Every time an unknown command (e.g. '#version') is encountered, this callback is used to determine whether the command shall be passed through. </p>
<p>If the callback returns false, an error is generated and parsing fails. The callback thus acts as a whitelist for all commands that shall be passed through. </p>

</div>
</div>
<h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a7e38eb83dc228f6b818a05e46b77d090"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e38eb83dc228f6b818a05e46b77d090">&#9670;&nbsp;</a></span>IncludeType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../db/dfd/classez_preprocessor.htm#a7e38eb83dc228f6b818a05e46b77d090">ezPreprocessor::IncludeType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Describes the type of #include that was encountered during preprocessing. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a7e38eb83dc228f6b818a05e46b77d090a1990a7ae621e487fff226c0c3663ad56"></a>MainFile&#160;</td><td class="fielddoc"><p>This is used for the very first access to the main source file. </p>
</td></tr>
<tr><td class="fieldname"><a id="a7e38eb83dc228f6b818a05e46b77d090a648a2882ab9c660960eb7c587507e507"></a>RelativeInclude&#160;</td><td class="fielddoc"><p>An #include "file" has been encountered. </p>
</td></tr>
<tr><td class="fieldname"><a id="a7e38eb83dc228f6b818a05e46b77d090a306bf7049e385571f06bc7bb01accf44"></a>GlobalInclude&#160;</td><td class="fielddoc"><p>An #include &lt;file&gt; has been encountered. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a9b7b99ba13fe7219d286d2f75f946c0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b7b99ba13fe7219d286d2f75f946c0e">&#9670;&nbsp;</a></span>AddCustomDefine()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> ezPreprocessor::AddCustomDefine </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szDefinition</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a #define to the preprocessor, even before any file is processed. </p>
<p>This allows to have global macros that are always defined for all processed files, such as the current platform etc. <em>szDefinition</em> must be in the form of the test that follows a #define statement. So to define the macro "WIN32", just pass that string. You can define any macro that could also be defined in the source files.</p>
<p>If the definition is invalid, EZ_FAILURE is returned. Also the preprocessor might end up in an invalid state, so using it any further might fail (including crashing). </p>

</div>
</div>
<a id="a4a1db29a649a54776d15a811226ac947"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a1db29a649a54776d15a811226ac947">&#9670;&nbsp;</a></span>Process() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> ezPreprocessor::Process </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szMainFile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;&#160;</td>
          <td class="paramname"><em>sOutput</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bKeepComments</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bRemoveRedundantWhitespace</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bInsertLine</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Processes the given file and returns the result as a string. </p>
<p>This function creates a string from the tokenized result. If <em>bKeepComments</em> is true, all block and line comments are included in the output string, otherwise they are removed. </p>

</div>
</div>
<a id="a111632bf48abde1ae9779fe66458ae80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a111632bf48abde1ae9779fe66458ae80">&#9670;&nbsp;</a></span>Process() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> ezPreprocessor::Process </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szMainFile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/deb/classez_hybrid_array.htm">ezTokenParseUtils::TokenStream</a> &amp;&#160;</td>
          <td class="paramname"><em>TokenOutput</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Processes the given file and returns the result as a stream of tokens. </p>
<p>This function is useful when you want to further process the output afterwards and thus need it in a tokenized form anyway. </p>

</div>
</div>
<a id="ad96b9e4417188ed11e9ad94d348a2f18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad96b9e4417188ed11e9ad94d348a2f18">&#9670;&nbsp;</a></span>SetCustomFileCache()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezPreprocessor::SetCustomFileCache </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d55/classez_tokenized_file_cache.htm">ezTokenizedFileCache</a> *&#160;</td>
          <td class="paramname"><em>pFileCache</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allows to specify a custom cache object that should be used for storing the tokenized result of files. </p>
<p>This allows to share one cache across multiple instances of <a class="el" href="../../db/dfd/classez_preprocessor.htm" title="ezPreprocessor implements a standard C preprocessor. It can be used to pre-process files to get the o...">ezPreprocessor</a> and across time. E.g. it makes it possible to prevent having to read and tokenize include files that are referenced often. </p>

</div>
</div>
<a id="ad6f015440f5d7fb6ab3e6991ebb3389f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6f015440f5d7fb6ab3e6991ebb3389f">&#9670;&nbsp;</a></span>SetFileLocatorFunction()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezPreprocessor::SetFileLocatorFunction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../db/dfd/classez_preprocessor.htm#a67159da7111ff8e71631aa1dccc945dd">FileLocatorCB</a>&#160;</td>
          <td class="paramname"><em>LocateAbsFileCB</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the callback that is needed to locate an input file. </p>
<p>The default file locator will assume that the main source file and all files #included in angle brackets can be opened without modification. Files #included in "" will be appended as relative paths to the path of the file they appeared in. </p>

</div>
</div>
<a id="ac1127df0d6061a2cf1243c0a954983e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1127df0d6061a2cf1243c0a954983e6">&#9670;&nbsp;</a></span>SetFileOpenFunction()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezPreprocessor::SetFileOpenFunction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../db/dfd/classez_preprocessor.htm#a2d08f58ec26efb0c647128dbd1daa4fe">FileOpenCB</a>&#160;</td>
          <td class="paramname"><em>OpenAbsFileCB</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the callback that is needed to read input data. </p>
<p>The default file open function will just try to open files via <a class="el" href="../../da/d44/classez_file_reader.htm" title="The default class to use to read data from a file, implements the ezStreamReader interface.">ezFileReader</a>. </p>

</div>
</div>
<a id="a47b7da7b7e5fa3cb7942bd15472fafa7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47b7da7b7e5fa3cb7942bd15472fafa7">&#9670;&nbsp;</a></span>SetLogInterface()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezPreprocessor::SetLogInterface </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d2/d9e/classez_log_interface.htm">ezLogInterface</a> *&#160;</td>
          <td class="paramname"><em>pLog</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>All error output is sent to the given <a class="el" href="../../d2/d9e/classez_log_interface.htm" title="Base class for all logging classes.">ezLogInterface</a>. </p>
<p>Note that when the preprocessor encounters any error, it will stop immediately and usually no output is generated. However, there are also a few cases where only a warning is generated, in this case preprocessing will continue without problems.</p>
<p>Additionally errors and warnings are also broadcast through m_ProcessingEvents. So if you want to output more detailed information, that method should be preferred, because the events carry more information about the current file and line number etc. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/CodeUtils/<a class="el" href="../../d1/d57/_preprocessor_8h_source.htm">Preprocessor.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/CodeUtils/Implementation/Conditions.cpp</li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/CodeUtils/Implementation/Defines.cpp</li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/CodeUtils/Implementation/Expand.cpp</li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/CodeUtils/Implementation/FileHandling.cpp</li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/CodeUtils/Implementation/Macros.cpp</li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/CodeUtils/Implementation/Preprocessor.cpp</li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/CodeUtils/Implementation/PreprocessorParseHelper.cpp</li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../db/dfd/classez_preprocessor.htm">ezPreprocessor</a></li>
    <li class="footer">Generated on Mon Oct 18 2021 15:24:20 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
