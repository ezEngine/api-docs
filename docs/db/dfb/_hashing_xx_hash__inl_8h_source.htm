<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Algorithm/Implementation/HashingXxHash_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('db/dfb/_hashing_xx_hash__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">HashingXxHash_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keyword">namespace </span>ezInternal</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;{</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;  constexpr ezUInt32 PRIME32_1 = 0x9E3779B1U;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;  constexpr ezUInt32 PRIME32_2 = 0x85EBCA77U;</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  constexpr ezUInt32 PRIME32_3 = 0xC2B2AE3DU;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;  constexpr ezUInt32 PRIME32_4 = 0x27D4EB2FU;</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  constexpr ezUInt32 PRIME32_5 = 0x165667B1U;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  constexpr ezUInt64 PRIME64_1 = 0x9E3779B185EBCA87ULL;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  constexpr ezUInt64 PRIME64_2 = 0xC2B2AE3D27D4EB4FULL;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  constexpr ezUInt64 PRIME64_3 = 0x165667B19E3779F9ULL;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  constexpr ezUInt64 PRIME64_4 = 0x85EBCA77C2B2AE63ULL;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  constexpr ezUInt64 PRIME64_5 = 0x27D4EB2F165667C5ULL;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;  constexpr ezUInt32 ezRotLeft(ezUInt32 value, ezUInt32 amount) { <span class="keywordflow">return</span> (value &lt;&lt; amount) | (value &gt;&gt; (32 - amount)); }</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  constexpr ezUInt64 ezRotLeft(ezUInt64 value, ezUInt64 amount) { <span class="keywordflow">return</span> (value &lt;&lt; amount) | (value &gt;&gt; (64 - amount)); }</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  <span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  constexpr ezUInt32 CompileTimeXxHash32(<span class="keyword">const</span> <span class="keywordtype">char</span> (&amp;str)[N], ezUInt32 seed)</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  {</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="comment">// Note: N will contain the trailing 0 of a string literal. This needs to be ignored.</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    constexpr ezUInt32 length = <span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(N - 1);</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">if</span> constexpr (length == 0)</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    {</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;      <span class="keywordflow">return</span> 46947589u;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    }</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    {</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;      ezUInt32 acc = 0;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;      ezUInt32 index = 0;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;      <span class="comment">// Perform simple initialization if N &lt; 16</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;      <span class="keywordflow">if</span> constexpr (length &lt; 16)</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;      {</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        acc = seed + PRIME32_5;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;      }</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      {</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        ezUInt32 accs[4] = {seed + PRIME32_1 + PRIME32_2, seed + PRIME32_2, seed, seed - PRIME32_1};</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">for</span> (; length - index &gt;= 16; index += 16)</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        {</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;          <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 4; i++)</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;          {</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            ezUInt32 laneN = (<span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(str[index + i * 4 + 0]) &lt;&lt; 0) | (<span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(str[index + i * 4 + 1]) &lt;&lt; 8) |</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                             (<span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(str[index + i * 4 + 2]) &lt;&lt; 16) | (<span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(str[index + i * 4 + 3]) &lt;&lt; 24);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            accs[i] = accs[i] + (laneN * PRIME32_2);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            accs[i] = ezRotLeft(accs[i], 13);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            accs[i] = accs[i] * PRIME32_1;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;          }</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        acc = ezRotLeft(accs[0], 1) + ezRotLeft(accs[1], 7) + ezRotLeft(accs[2], 12) + ezRotLeft(accs[3], 18);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      }</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      <span class="comment">// Step 4</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      acc = acc + length;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      <span class="comment">// Step 5</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      <span class="keywordflow">for</span> (; length - index &gt;= 4; index += 4)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        ezUInt32 lane = (<span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(str[index + 0]) &lt;&lt; 0) | (<span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(str[index + 1]) &lt;&lt; 8) |</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                        (<span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(str[index + 2]) &lt;&lt; 16) | (<span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(str[index + 3]) &lt;&lt; 24);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        acc = acc + lane * PRIME32_3;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        acc = ezRotLeft(acc, 17) * PRIME32_4;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      <span class="keywordflow">for</span> (; length - index &gt;= 1; index++)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        ezUInt32 lane = <span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(str[index]);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        acc = acc + lane * PRIME32_5;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        acc = ezRotLeft(acc, 11) * PRIME32_1;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      <span class="comment">// Step 6</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      acc = acc ^ (acc &gt;&gt; 15);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      acc = acc * PRIME32_2;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      acc = acc ^ (acc &gt;&gt; 13);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      acc = acc * PRIME32_3;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      acc = acc ^ (acc &gt;&gt; 16);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      <span class="keywordflow">return</span> acc;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  constexpr ezUInt64 CompileTimeXxHash64(<span class="keyword">const</span> <span class="keywordtype">char</span> (&amp;str)[N], ezUInt64 uiSeed)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">// Note: N will contain the trailing 0 of a string literal. This needs to be ignored.</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    constexpr ezUInt32 length = <span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(N - 1);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">if</span> constexpr (length == 0)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      <span class="keywordflow">return</span> 17241709254077376921llu;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      ezUInt64 acc = 0;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      ezUInt32 index = 0;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      <span class="comment">// Step 1</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      <span class="keywordflow">if</span> constexpr (length &lt; 32)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="comment">// simple initialization</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        acc = uiSeed + PRIME64_5;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;      {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        ezUInt64 accs[] = {uiSeed + PRIME64_1 + PRIME64_2, uiSeed + PRIME64_2, uiSeed + 0, uiSeed - PRIME64_1};</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="comment">// Step 2</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">for</span> (; length - index &gt;= 32; index += 32)</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;          <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 4; i++)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;          {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            ezUInt64 laneN = (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 0]) &lt;&lt; 0) | (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 1]) &lt;&lt; 8) |</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                             (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 2]) &lt;&lt; 16) | (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 3]) &lt;&lt; 24) |</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                             (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 4]) &lt;&lt; 32) | (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 5]) &lt;&lt; 40) |</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                             (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 6]) &lt;&lt; 48) | (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 7]) &lt;&lt; 56);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            accs[i] = accs[i] + (laneN * PRIME64_2);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            accs[i] = ezRotLeft(accs[i], 31ULL);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            accs[i] = accs[i] * PRIME64_1;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;          }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="comment">// Step 3</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        acc = ezRotLeft(accs[0], 1ULL) + ezRotLeft(accs[1], 7ULL) + ezRotLeft(accs[2], 12ULL) + ezRotLeft(accs[3], 18ULL);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 4; i++)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;          acc = (acc ^ (ezRotLeft(accs[i] * PRIME64_2, 31ULL) * PRIME64_1)) * PRIME64_1 + PRIME64_4;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        }</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;      }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      <span class="comment">// Step 4</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      acc += length;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;      <span class="comment">// Step 5</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      <span class="keywordflow">for</span> (; length - index &gt;= 8; index += 8)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        ezUInt64 lane = (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + 0]) &lt;&lt; 0) | (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + 1]) &lt;&lt; 8) |</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + 2]) &lt;&lt; 16) | (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + 3]) &lt;&lt; 24) |</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + 4]) &lt;&lt; 32) | (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + 5]) &lt;&lt; 40) |</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                        (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + 6]) &lt;&lt; 48) | (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + 7]) &lt;&lt; 56);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        acc = acc ^ (ezRotLeft(lane * PRIME64_2, 31ULL) * PRIME64_1);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        acc = ezRotLeft(acc, 27ULL) * PRIME64_1;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        acc += PRIME64_4;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      <span class="keywordflow">for</span> (; length - index &gt;= 4; index += 4)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        ezUInt64 lane = (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + 0]) &lt;&lt; 0) | (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + 1]) &lt;&lt; 8) |</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                        (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + 2]) &lt;&lt; 16) | (<span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index + 3]) &lt;&lt; 24);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        acc = acc ^ (lane * PRIME64_1);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        acc = ezRotLeft(acc, 23ULL) * PRIME64_2;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        acc += PRIME64_3;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;      }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      <span class="keywordflow">for</span> (; length - index &gt;= 1; index++)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        ezUInt64 lane = <span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(str[index]);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        acc = acc ^ (lane * PRIME64_5);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        acc = ezRotLeft(acc, 11ULL) * PRIME64_1;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;      }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;      <span class="comment">// Step 6</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;      acc = acc ^ (acc &gt;&gt; 33);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      acc = acc * PRIME64_2;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      acc = acc ^ (acc &gt;&gt; 29);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      acc = acc * PRIME64_3;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      acc = acc ^ (acc &gt;&gt; 32);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      <span class="keywordflow">return</span> acc;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;} <span class="comment">// namespace ezInternal</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;constexpr EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../dd/dd0/classez_hashing_utils.htm#a599ab11dcb317148f81d0bd6ba2e92a5">ezHashingUtils::xxHash32String</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> (&amp;str)[N], ezUInt32 uiSeed)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;{</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keywordflow">return</span> ezInternal::CompileTimeXxHash32(str, uiSeed);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;constexpr EZ_ALWAYS_INLINE ezUInt64 <a class="code" href="../../dd/dd0/classez_hashing_utils.htm#afccea834f0d53f374e5931dc4a4ade12">ezHashingUtils::xxHash64String</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> (&amp;str)[N], ezUInt64 uiSeed)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keywordflow">return</span> ezInternal::CompileTimeXxHash64(str, uiSeed);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="../../dd/dd0/classez_hashing_utils.htm#a4d84dddcecb34a6e85d11fee19c7b1ae">  185</a></span>&#160;EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../dd/dd0/classez_hashing_utils.htm#a599ab11dcb317148f81d0bd6ba2e92a5">ezHashingUtils::xxHash32String</a>(<a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a> str, ezUInt32 uiSeed)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;{</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../dd/dd0/classez_hashing_utils.htm#a5c65d83450f2edff74c18d5b4f894ec8">xxHash32</a>(str.<a class="code" href="../../de/db8/structez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">GetStartPointer</a>(), str.<a class="code" href="../../de/db8/structez_string_view.htm#a64dec920b26c9df50ea139826fcdd448">GetElementCount</a>(), uiSeed);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="../../dd/dd0/classez_hashing_utils.htm#aacd7f5ea337894b92005420c9f4db540">  190</a></span>&#160;EZ_ALWAYS_INLINE ezUInt64 <a class="code" href="../../dd/dd0/classez_hashing_utils.htm#afccea834f0d53f374e5931dc4a4ade12">ezHashingUtils::xxHash64String</a>(<a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a> str, ezUInt64 uiSeed)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../dd/dd0/classez_hashing_utils.htm#a66aa93081eb122cdbc70000b2f82f058">xxHash64</a>(str.<a class="code" href="../../de/db8/structez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">GetStartPointer</a>(), str.<a class="code" href="../../de/db8/structez_string_view.htm#a64dec920b26c9df50ea139826fcdd448">GetElementCount</a>(), uiSeed);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassez_hashing_utils_htm_a66aa93081eb122cdbc70000b2f82f058"><div class="ttname"><a href="../../dd/dd0/classez_hashing_utils.htm#a66aa93081eb122cdbc70000b2f82f058">ezHashingUtils::xxHash64</a></div><div class="ttdeci">static ezUInt64 xxHash64(const void *pKey, size_t uiSizeInByte, ezUInt64 uiSeed=0)</div><div class="ttdoc">Calculates the 64bit xxHash of the given key.</div><div class="ttdef"><b>Definition:</b> HashingUtils.cpp:210</div></div>
<div class="ttc" id="aclassez_hashing_utils_htm_a599ab11dcb317148f81d0bd6ba2e92a5"><div class="ttname"><a href="../../dd/dd0/classez_hashing_utils.htm#a599ab11dcb317148f81d0bd6ba2e92a5">ezHashingUtils::xxHash32String</a></div><div class="ttdeci">constexpr static ezUInt32 xxHash32String(const char(&amp;str)[N], ezUInt32 uiSeed=0)</div><div class="ttdoc">Calculates the 32bit xxHash of the given string literal at compile time.</div></div>
<div class="ttc" id="aclassez_hashing_utils_htm_a5c65d83450f2edff74c18d5b4f894ec8"><div class="ttname"><a href="../../dd/dd0/classez_hashing_utils.htm#a5c65d83450f2edff74c18d5b4f894ec8">ezHashingUtils::xxHash32</a></div><div class="ttdeci">static ezUInt32 xxHash32(const void *pKey, size_t uiSizeInByte, ezUInt32 uiSeed=0)</div><div class="ttdoc">Calculates the 32bit xxHash of the given key.</div><div class="ttdef"><b>Definition:</b> HashingUtils.cpp:204</div></div>
<div class="ttc" id="aclassez_hashing_utils_htm_afccea834f0d53f374e5931dc4a4ade12"><div class="ttname"><a href="../../dd/dd0/classez_hashing_utils.htm#afccea834f0d53f374e5931dc4a4ade12">ezHashingUtils::xxHash64String</a></div><div class="ttdeci">constexpr static ezUInt64 xxHash64String(const char(&amp;str)[N], ezUInt64 uiSeed=0)</div><div class="ttdoc">Calculates the 64bit xxHash of the given string literal at compile time.</div></div>
<div class="ttc" id="astructez_string_view_htm"><div class="ttname"><a href="../../de/db8/structez_string_view.htm">ezStringView</a></div><div class="ttdoc">ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition:</b> StringView.h:20</div></div>
<div class="ttc" id="astructez_string_view_htm_a7e6ab4aebc721857871d822321935d5f"><div class="ttname"><a href="../../de/db8/structez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">ezStringView::GetStartPointer</a></div><div class="ttdeci">const char * GetStartPointer() const</div><div class="ttdoc">Returns the start of the view range.</div><div class="ttdef"><b>Definition:</b> StringView.h:70</div></div>
<div class="ttc" id="astructez_string_view_htm_a64dec920b26c9df50ea139826fcdd448"><div class="ttname"><a href="../../de/db8/structez_string_view.htm#a64dec920b26c9df50ea139826fcdd448">ezStringView::GetElementCount</a></div><div class="ttdeci">ezUInt32 GetElementCount() const</div><div class="ttdoc">Returns the number of bytes from the start position up to its end.</div><div class="ttdef"><b>Definition:</b> StringView.h:61</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_cbf2a2ed1ea35b4af8265ff960a67fbe.htm">Algorithm</a></li><li class="navelem"><a class="el" href="../../dir_f080d51ed4627ba1afc4852adfe2255f.htm">Implementation</a></li><li class="navelem"><b>HashingXxHash_inl.h</b></li>
    <li class="footer">Generated on Tue Jun 8 2021 21:43:07 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
