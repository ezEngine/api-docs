<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: Code/Engine/Foundation/Strings/String.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search','.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('db/db5/_string_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">String.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;Foundation/Algorithm/HashingUtils.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;Foundation/Containers/HybridArray.h&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Strings/Implementation/StringBase.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;Foundation/Strings/StringConversion.h&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;Foundation/Strings/StringUtils.h&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;Foundation/Strings/StringView.h&gt;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">class </span><a class="code" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a>;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">class </span><a class="code" href="../../d2/d19/classez_stream_reader.htm">ezStreamReader</a>;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm">   27</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a> : <span class="keyword">public</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt;ezHybridStringBase&lt;Size&gt;&gt;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a5171d9569cd4cb2689dd3a1b02829f8c">ezHybridStringBase</a>(<a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a5171d9569cd4cb2689dd3a1b02829f8c">ezHybridStringBase</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&amp; rhs, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a5171d9569cd4cb2689dd3a1b02829f8c">ezHybridStringBase</a>(<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&amp;&amp; rhs, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a5171d9569cd4cb2689dd3a1b02829f8c">ezHybridStringBase</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* rhs, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a5171d9569cd4cb2689dd3a1b02829f8c">ezHybridStringBase</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* rhs, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a5171d9569cd4cb2689dd3a1b02829f8c">ezHybridStringBase</a>(<span class="keyword">const</span> <a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a>&amp; rhs, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a5171d9569cd4cb2689dd3a1b02829f8c">ezHybridStringBase</a>(<span class="keyword">const</span> <a class="code" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a>&amp; rhs, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a5171d9569cd4cb2689dd3a1b02829f8c">ezHybridStringBase</a>(<a class="code" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a>&amp;&amp; rhs, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#ae62faf872800bba225ee53e73dff7289">   55</a></span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#ae62faf872800bba225ee53e73dff7289">~ezHybridStringBase</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&amp; rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">operator=</a>(<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&amp;&amp; rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">operator=</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">operator=</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">operator=</a>(<span class="keyword">const</span> <a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a>&amp; rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a>&amp; rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">operator=</a>(<a class="code" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a>&amp;&amp; rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keyword">operator</span> <a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a85492a66f49799e7b46292e00869b8a3">GetView</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#a8800bc535469a4dc5f0d0847fd592934">   86</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">operator</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*() <span class="keyword">const</span> { <span class="keywordflow">return</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a98fb76791e36685a3d4dc2303c50f854">GetData</a>(); }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#aaced07b48ca63da8bd4bacc7ebb1ad86">Clear</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a98fb76791e36685a3d4dc2303c50f854">GetData</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  ezUInt32 <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#ab479457ea5ea6c0c5307003b65661042">GetElementCount</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  ezUInt32 <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#af20ba0a27cc7fd6c9c98f8bad4d4d18f">GetCharacterCount</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a67adf8196229df696cb7d877bcb474ee">GetSubString</a>(ezUInt32 uiFirstCharacter, ezUInt32 uiNumCharacters) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  <a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a57069e63a857e02a96ce058b7e08b5a2">GetFirst</a>(ezUInt32 uiNumCharacters) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a81959562e8f0dc60eb14d5a02b92a608">GetLast</a>(ezUInt32 uiNumCharacters) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#ae6ed257766f300943d9707f716837c76">ReadAll</a>(<a class="code" href="../../d2/d19/classez_stream_reader.htm">ezStreamReader</a>&amp; Stream);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#a451a7e85318f69f8c6715b2d9059aa73">  125</a></span>&#160;  ezUInt64 <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a451a7e85318f69f8c6715b2d9059aa73">GetHeapMemoryUsage</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Data.<a class="code" href="../../d5/d3f/classez_dynamic_array_base.htm#acca6e380b9d2650e4488d2c1753cbc0f">GetHeapMemoryUsage</a>(); }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a>;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <a class="code" href="../../d8/deb/classez_hybrid_array.htm">ezHybridArray&lt;char, Size&gt;</a> m_Data;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  ezUInt32 m_uiCharacterCount = 0;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;};</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper = ezDefaultAllocatorWrapper&gt;</div>
<div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="../../d4/d53/structez_hybrid_string.htm">  137</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a> : <span class="keyword">public</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt;Size&gt;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  EZ_DECLARE_MEM_RELOCATABLE_TYPE();</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>();</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>(<a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>(<span class="keyword">const</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, AllocatorWrapper&gt;</a>&amp; other);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase&lt;Size&gt;</a>&amp; other);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* rhs);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* rhs);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>(<span class="keyword">const</span> <a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a>&amp; rhs);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>(<span class="keyword">const</span> <a class="code" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a>&amp; rhs);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>(<a class="code" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a>&amp;&amp; rhs);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>(<a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, AllocatorWrapper&gt;</a>&amp;&amp; other);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>(<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase&lt;Size&gt;</a>&amp;&amp; other);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, AllocatorWrapper&gt;</a>&amp; rhs);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase&lt;Size&gt;</a>&amp; rhs);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <span class="keywordtype">char</span>* szString);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* szString);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a>&amp; rhs);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a>&amp; rhs);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keywordtype">void</span> operator=(<a class="code" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a>&amp;&amp; rhs);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  <span class="keywordtype">void</span> operator=(<a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, AllocatorWrapper&gt;</a>&amp;&amp; rhs);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <span class="keywordtype">void</span> operator=(<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase&lt;Size&gt;</a>&amp;&amp; rhs);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;};</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword">using</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezDynamicString</a> = <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;1&gt;</a>;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword">using</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezUntrackedString</a> = <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;32, ezStaticAllocatorWrapper&gt;</a>;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keyword">using</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezString</a> = <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;32&gt;</a>;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keyword">using</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezString16</a> = <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;16&gt;</a>;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword">using</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezString24</a> = <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;24&gt;</a>;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keyword">using</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezString32</a> = <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;32&gt;</a>;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keyword">using</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezString48</a> = <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;48&gt;</a>;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword">using</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezString64</a> = <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;64&gt;</a>;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">using</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezString128</a> = <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;128&gt;</a>;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">using</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezString256</a> = <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;256&gt;</a>;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;EZ_CHECK_AT_COMPILETIME_MSG(<a class="code" href="../../d5/d86/structez_get_type_class.htm">ezGetTypeClass&lt;ezString&gt;::value</a> == 2, <span class="stringliteral">&quot;string is not memory relocatable&quot;</span>);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="../../d2/d16/structez_compare_helper_3_01ez_hybrid_string_3_01_size_01_4_01_4.htm">  184</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../df/d11/structez_compare_helper.htm">ezCompareHelper</a>&lt;<a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>&lt;Size&gt;&gt;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../df/d11/structez_compare_helper.htm#a3f394a0862648a3cd5e1f4ade72db74f">Less</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#acdb19aa3ae5704df01d8f7b3649ec8d7">ezStringUtils::Compare</a>(lhs.InternalGetData(), rhs.InternalGetData(), lhs.InternalGetDataEnd(), rhs.InternalGetDataEnd()) &lt; 0;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../df/d11/structez_compare_helper.htm#a3f394a0862648a3cd5e1f4ade72db74f">Less</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">return</span> rhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">Compare</a>(lhs) &gt; 0;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../df/d11/structez_compare_helper.htm#a3f394a0862648a3cd5e1f4ade72db74f">Less</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">return</span> lhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">Compare</a>(rhs) &lt; 0;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../df/d11/structez_compare_helper.htm#acc5fae1663b04e280a3fe57045208c95">Equal</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#aa1b8c125ced33a6a904f741597ecc673">ezStringUtils::IsEqual</a>(lhs.InternalGetData(), rhs.InternalGetData(), lhs.InternalGetDataEnd(), rhs.InternalGetDataEnd());</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../df/d11/structez_compare_helper.htm#acc5fae1663b04e280a3fe57045208c95">Equal</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">return</span> rhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">IsEqual</a>(lhs);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../df/d11/structez_compare_helper.htm#acc5fae1663b04e280a3fe57045208c95">Equal</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">return</span> lhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">IsEqual</a>(rhs);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;};</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="../../dd/daa/structez_compare_string___no_case.htm">  223</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dd/daa/structez_compare_string___no_case.htm">ezCompareString_NoCase</a></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;{</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> Less(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a4411d4f7971834bd9ce1fe0cb39b2c39">ezStringUtils::Compare_NoCase</a>(lhs.InternalGetData(), rhs.InternalGetData(), lhs.InternalGetDataEnd(), rhs.InternalGetDataEnd()) &lt; 0;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> Less(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">return</span> rhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a48e98ad28e9cc6c0a3d436b802149443">Compare_NoCase</a>(lhs) &gt; 0;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> Less(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">return</span> lhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a48e98ad28e9cc6c0a3d436b802149443">Compare_NoCase</a>(rhs) &lt; 0;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> Equal(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a5a375be30fe22c27368c0b2801e6c0b0">ezStringUtils::IsEqual_NoCase</a>(lhs.InternalGetData(), rhs.InternalGetData(), lhs.InternalGetDataEnd(), rhs.InternalGetDataEnd());</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> Equal(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">return</span> rhs.<a class="code" href="../../dd/d69/structez_string_base.htm#aba99a929eb858f565e1fa332b6b03723">IsEqual_NoCase</a>(lhs);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> Equal(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">return</span> lhs.<a class="code" href="../../dd/d69/structez_string_base.htm#aba99a929eb858f565e1fa332b6b03723">IsEqual_NoCase</a>(rhs);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;};</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno"><a class="line" href="../../dc/d66/struct_compare_const_char.htm">  262</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dc/d66/struct_compare_const_char.htm">CompareConstChar</a></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;{</div>
<div class="line"><a name="l00265"></a><span class="lineno"><a class="line" href="../../dc/d66/struct_compare_const_char.htm#af29dbdd76de6c5ac5e680901d45f7f31">  265</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dc/d66/struct_compare_const_char.htm#af29dbdd76de6c5ac5e680901d45f7f31">Less</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* a, <span class="keyword">const</span> <span class="keywordtype">char</span>* b)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#acdb19aa3ae5704df01d8f7b3649ec8d7">ezStringUtils::Compare</a>(a, b) &lt; 0; }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="../../dc/d66/struct_compare_const_char.htm#a2b9e0619cf887f9720591fbfdeee0f63">  268</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dc/d66/struct_compare_const_char.htm#a2b9e0619cf887f9720591fbfdeee0f63">Equal</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* a, <span class="keyword">const</span> <span class="keywordtype">char</span>* b)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#aa1b8c125ced33a6a904f741597ecc673">ezStringUtils::IsEqual</a>(a, b); }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;};</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">// For ezFormatString</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;EZ_FOUNDATION_DLL <a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a> BuildString(<span class="keywordtype">char</span>* tmp, ezUInt32 uiLength, <span class="keyword">const</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezString</a>&amp; arg);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;EZ_FOUNDATION_DLL <a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a> BuildString(<span class="keywordtype">char</span>* tmp, ezUInt32 uiLength, <span class="keyword">const</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezUntrackedString</a>&amp; arg);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160; </div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="preprocessor">#include &lt;Foundation/Strings/Implementation/String_inl.h&gt;</span></div>
<div class="ttc" id="aclassez_allocator_base_htm"><div class="ttname"><a href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> AllocatorBase.h:23</div></div>
<div class="ttc" id="aclassez_dynamic_array_base_htm_acca6e380b9d2650e4488d2c1753cbc0f"><div class="ttname"><a href="../../d5/d3f/classez_dynamic_array_base.htm#acca6e380b9d2650e4488d2c1753cbc0f">ezDynamicArrayBase::GetHeapMemoryUsage</a></div><div class="ttdeci">ezUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition:</b> DynamicArray_inl.h:243</div></div>
<div class="ttc" id="aclassez_hybrid_array_htm"><div class="ttname"><a href="../../d8/deb/classez_hybrid_array.htm">ezHybridArray&lt; char, Size &gt;</a></div></div>
<div class="ttc" id="aclassez_stream_reader_htm"><div class="ttname"><a href="../../d2/d19/classez_stream_reader.htm">ezStreamReader</a></div><div class="ttdoc">Interface for binary in (read) streams.</div><div class="ttdef"><b>Definition:</b> Stream.h:21</div></div>
<div class="ttc" id="aclassez_string_builder_htm"><div class="ttname"><a href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a></div><div class="ttdoc">ezStringBuilder is a class that is meant for creating and modifying strings.</div><div class="ttdef"><b>Definition:</b> StringBuilder.h:35</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a4411d4f7971834bd9ce1fe0cb39b2c39"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a4411d4f7971834bd9ce1fe0cb39b2c39">ezStringUtils::Compare_NoCase</a></div><div class="ttdeci">static ezInt32 Compare_NoCase(const char *pString1, const char *pString2, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Compares two strings for equality, case-insensitive.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:331</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a5a375be30fe22c27368c0b2801e6c0b0"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a5a375be30fe22c27368c0b2801e6c0b0">ezStringUtils::IsEqual_NoCase</a></div><div class="ttdeci">static bool IsEqual_NoCase(const char *pString1, const char *pString2, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (case-insensitive).</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:120</div></div>
<div class="ttc" id="aclassez_string_utils_htm_aa1b8c125ced33a6a904f741597ecc673"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#aa1b8c125ced33a6a904f741597ecc673">ezStringUtils::IsEqual</a></div><div class="ttdeci">static bool IsEqual(const char *pString1, const char *pString2, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (bitwise).</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:109</div></div>
<div class="ttc" id="aclassez_string_utils_htm_acdb19aa3ae5704df01d8f7b3649ec8d7"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#acdb19aa3ae5704df01d8f7b3649ec8d7">ezStringUtils::Compare</a></div><div class="ttdeci">static ezInt32 Compare(const char *pString1, const char *pString2, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Compares two strings for equality.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:263</div></div>
<div class="ttc" id="astruct_compare_const_char_htm"><div class="ttname"><a href="../../dc/d66/struct_compare_const_char.htm">CompareConstChar</a></div><div class="ttdef"><b>Definition:</b> String.h:263</div></div>
<div class="ttc" id="astruct_compare_const_char_htm_a2b9e0619cf887f9720591fbfdeee0f63"><div class="ttname"><a href="../../dc/d66/struct_compare_const_char.htm#a2b9e0619cf887f9720591fbfdeee0f63">CompareConstChar::Equal</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool Equal(const char *a, const char *b) const</div><div class="ttdoc">Returns true if a is equal to b.</div><div class="ttdef"><b>Definition:</b> String.h:268</div></div>
<div class="ttc" id="astruct_compare_const_char_htm_af29dbdd76de6c5ac5e680901d45f7f31"><div class="ttname"><a href="../../dc/d66/struct_compare_const_char.htm#af29dbdd76de6c5ac5e680901d45f7f31">CompareConstChar::Less</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool Less(const char *a, const char *b) const</div><div class="ttdoc">Returns true if a is less than b.</div><div class="ttdef"><b>Definition:</b> String.h:265</div></div>
<div class="ttc" id="astructez_compare_helper_htm"><div class="ttname"><a href="../../df/d11/structez_compare_helper.htm">ezCompareHelper</a></div><div class="ttdoc">A comparer object is used in sorting algorithms to compare to objects of the same type.</div><div class="ttdef"><b>Definition:</b> Comparer.h:7</div></div>
<div class="ttc" id="astructez_compare_helper_htm_a3f394a0862648a3cd5e1f4ade72db74f"><div class="ttname"><a href="../../df/d11/structez_compare_helper.htm#a3f394a0862648a3cd5e1f4ade72db74f">ezCompareHelper::Less</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool Less(const T &amp;a, const T &amp;b) const</div><div class="ttdoc">Returns true if a is less than b.</div><div class="ttdef"><b>Definition:</b> Comparer.h:9</div></div>
<div class="ttc" id="astructez_compare_helper_htm_acc5fae1663b04e280a3fe57045208c95"><div class="ttname"><a href="../../df/d11/structez_compare_helper.htm#acc5fae1663b04e280a3fe57045208c95">ezCompareHelper::Equal</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool Equal(const T &amp;a, const T &amp;b) const</div><div class="ttdoc">Returns true if a is equal to b.</div><div class="ttdef"><b>Definition:</b> Comparer.h:12</div></div>
<div class="ttc" id="astructez_compare_string___no_case_htm"><div class="ttname"><a href="../../dd/daa/structez_compare_string___no_case.htm">ezCompareString_NoCase</a></div><div class="ttdef"><b>Definition:</b> String.h:224</div></div>
<div class="ttc" id="astructez_get_type_class_htm"><div class="ttname"><a href="../../d5/d86/structez_get_type_class.htm">ezGetTypeClass</a></div><div class="ttdoc">If there is an % operator which takes a ezTypeIsMemRelocatable and returns a CompileTimeTrueType T is...</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:68</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a></div><div class="ttdoc">A string class for storing and passing around strings.</div><div class="ttdef"><b>Definition:</b> String.h:28</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_a18183bd86269e0bb7124f5dd4f27b2e5"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase::operator=</a></div><div class="ttdeci">void operator=(const ezHybridStringBase &amp;rhs)</div><div class="ttdoc">Copies the data from rhs.</div><div class="ttdef"><b>Definition:</b> String_inl.h:102</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_a451a7e85318f69f8c6715b2d9059aa73"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#a451a7e85318f69f8c6715b2d9059aa73">ezHybridStringBase::GetHeapMemoryUsage</a></div><div class="ttdeci">ezUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition:</b> String.h:125</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_a5171d9569cd4cb2689dd3a1b02829f8c"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#a5171d9569cd4cb2689dd3a1b02829f8c">ezHybridStringBase::ezHybridStringBase</a></div><div class="ttdeci">ezHybridStringBase(ezAllocatorBase *pAllocator)</div><div class="ttdoc">Creates an empty string.</div><div class="ttdef"><b>Definition:</b> String_inl.h:4</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_a57069e63a857e02a96ce058b7e08b5a2"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#a57069e63a857e02a96ce058b7e08b5a2">ezHybridStringBase::GetFirst</a></div><div class="ttdeci">ezStringView GetFirst(ezUInt32 uiNumCharacters) const</div><div class="ttdoc">Returns an iterator to the sub-string containing the first uiNumCharacters characters of this string.</div><div class="ttdef"><b>Definition:</b> String_inl.h:155</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_a67adf8196229df696cb7d877bcb474ee"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#a67adf8196229df696cb7d877bcb474ee">ezHybridStringBase::GetSubString</a></div><div class="ttdeci">ezStringView GetSubString(ezUInt32 uiFirstCharacter, ezUInt32 uiNumCharacters) const</div><div class="ttdoc">Returns an iterator to a sub-string of this string, starting at character uiFirstCharacter,...</div><div class="ttdef"><b>Definition:</b> String_inl.h:140</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_a81959562e8f0dc60eb14d5a02b92a608"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#a81959562e8f0dc60eb14d5a02b92a608">ezHybridStringBase::GetLast</a></div><div class="ttdeci">ezStringView GetLast(ezUInt32 uiNumCharacters) const</div><div class="ttdoc">Returns an iterator to the sub-string containing the last uiNumCharacters characters of this string.</div><div class="ttdef"><b>Definition:</b> String_inl.h:161</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_a85492a66f49799e7b46292e00869b8a3"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#a85492a66f49799e7b46292e00869b8a3">ezHybridStringBase::GetView</a></div><div class="ttdeci">ezStringView GetView() const</div><div class="ttdoc">Returns a string view to this string's data.</div><div class="ttdef"><b>Definition:</b> String_inl.h:55</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_a98fb76791e36685a3d4dc2303c50f854"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#a98fb76791e36685a3d4dc2303c50f854">ezHybridStringBase::GetData</a></div><div class="ttdeci">const char * GetData() const</div><div class="ttdoc">Returns a pointer to the internal Utf8 string.</div><div class="ttdef"><b>Definition:</b> String_inl.h:69</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_aaced07b48ca63da8bd4bacc7ebb1ad86"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#aaced07b48ca63da8bd4bacc7ebb1ad86">ezHybridStringBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Resets this string to an empty string.</div><div class="ttdef"><b>Definition:</b> String_inl.h:61</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_ab479457ea5ea6c0c5307003b65661042"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#ab479457ea5ea6c0c5307003b65661042">ezHybridStringBase::GetElementCount</a></div><div class="ttdeci">ezUInt32 GetElementCount() const</div><div class="ttdoc">Returns the amount of bytes that this string takes (excluding the '\0' terminator).</div><div class="ttdef"><b>Definition:</b> String_inl.h:78</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_ae62faf872800bba225ee53e73dff7289"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#ae62faf872800bba225ee53e73dff7289">ezHybridStringBase::~ezHybridStringBase</a></div><div class="ttdeci">~ezHybridStringBase()</div><div class="ttdoc">Destructor.</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_ae6ed257766f300943d9707f716837c76"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#ae6ed257766f300943d9707f716837c76">ezHybridStringBase::ReadAll</a></div><div class="ttdeci">void ReadAll(ezStreamReader &amp;Stream)</div><div class="ttdoc">Replaces the current string with the content from the stream. Reads the stream to its end.</div><div class="ttdef"><b>Definition:</b> AllStrings_inl.h:60</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_af20ba0a27cc7fd6c9c98f8bad4d4d18f"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#af20ba0a27cc7fd6c9c98f8bad4d4d18f">ezHybridStringBase::GetCharacterCount</a></div><div class="ttdeci">ezUInt32 GetCharacterCount() const</div><div class="ttdoc">Returns the number of characters in this string.</div><div class="ttdef"><b>Definition:</b> String_inl.h:84</div></div>
<div class="ttc" id="astructez_hybrid_string_htm"><div class="ttname"><a href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a></div><div class="ttdef"><b>Definition:</b> String.h:138</div></div>
<div class="ttc" id="astructez_string_base_htm"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm">ezStringBase</a></div><div class="ttdoc">Base class for strings, which implements all read-only string functions.</div><div class="ttdef"><b>Definition:</b> StringBase.h:19</div></div>
<div class="ttc" id="astructez_string_base_htm_a48e98ad28e9cc6c0a3d436b802149443"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a48e98ad28e9cc6c0a3d436b802149443">ezStringBase::Compare_NoCase</a></div><div class="ttdeci">ezInt32 Compare_NoCase(const char *pString2) const</div><div class="ttdoc">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller',...</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:141</div></div>
<div class="ttc" id="astructez_string_base_htm_a6517806293ce84badc8da6c5d01c67cf"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">ezStringBase::IsEqual</a></div><div class="ttdeci">bool IsEqual(const char *pString2) const</div><div class="ttdoc">Compares this string with the other string for equality.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:153</div></div>
<div class="ttc" id="astructez_string_base_htm_a8db4d1eaa1ad5ad01395f3d08eb1a0c2"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">ezStringBase::Compare</a></div><div class="ttdeci">ezInt32 Compare(const char *pString2) const</div><div class="ttdoc">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller',...</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:129</div></div>
<div class="ttc" id="astructez_string_base_htm_aba99a929eb858f565e1fa332b6b03723"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#aba99a929eb858f565e1fa332b6b03723">ezStringBase::IsEqual_NoCase</a></div><div class="ttdeci">bool IsEqual_NoCase(const char *pString2) const</div><div class="ttdoc">Compares this string with the other string for equality.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:165</div></div>
<div class="ttc" id="astructez_string_view_htm"><div class="ttname"><a href="../../de/db8/structez_string_view.htm">ezStringView</a></div><div class="ttdoc">ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition:</b> StringView.h:21</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_93f3a51c0220f51fc2c286c08d531e1e.htm">Strings</a></li><li class="navelem"><b>String.h</b></li>
    <li class="footer">Generated on Tue Jun 8 2021 14:33:54 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
