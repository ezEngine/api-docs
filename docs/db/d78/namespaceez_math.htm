<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezMath Namespace Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('db/d78/namespaceez_math.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">ezMath Namespace Reference</div></div>
</div><!--header-->
<div class="contents">

<p>This namespace provides common math-functionality as functions.  
<a href="../../db/d78/namespaceez_math.htm#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a2bb652d0912aad52e81a1e6895ce79da" id="r_a2bb652d0912aad52e81a1e6895ce79da"><td class="memTemplParams" colspan="2"><a id="a2bb652d0912aad52e81a1e6895ce79da" name="a2bb652d0912aad52e81a1e6895ce79da"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a2bb652d0912aad52e81a1e6895ce79da"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Pi</b> ()</td></tr>
<tr class="memdesc:a2bb652d0912aad52e81a1e6895ce79da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the natural constant Pi. <br /></td></tr>
<tr class="separator:a2bb652d0912aad52e81a1e6895ce79da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70fa9a79fb67ea653462d2cdbbfd675d" id="r_a70fa9a79fb67ea653462d2cdbbfd675d"><td class="memTemplParams" colspan="2"><a id="a70fa9a79fb67ea653462d2cdbbfd675d" name="a70fa9a79fb67ea653462d2cdbbfd675d"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a70fa9a79fb67ea653462d2cdbbfd675d"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>e</b> ()</td></tr>
<tr class="memdesc:a70fa9a79fb67ea653462d2cdbbfd675d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the natural constant e. <br /></td></tr>
<tr class="separator:a70fa9a79fb67ea653462d2cdbbfd675d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f9d65bf73ab3ee1acb4a279a00a42d3" id="r_a1f9d65bf73ab3ee1acb4a279a00a42d3"><td class="memTemplParams" colspan="2"><a id="a1f9d65bf73ab3ee1acb4a279a00a42d3" name="a1f9d65bf73ab3ee1acb4a279a00a42d3"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a1f9d65bf73ab3ee1acb4a279a00a42d3"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsNaN</b> ()</td></tr>
<tr class="memdesc:a1f9d65bf73ab3ee1acb4a279a00a42d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the template type supports specialized values to represent NaN. <br /></td></tr>
<tr class="separator:a1f9d65bf73ab3ee1acb4a279a00a42d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ded6bdc6257e148fb9c8cc9a3f8e376" id="r_a4ded6bdc6257e148fb9c8cc9a3f8e376"><td class="memTemplParams" colspan="2">template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a4ded6bdc6257e148fb9c8cc9a3f8e376"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a4ded6bdc6257e148fb9c8cc9a3f8e376">NaN</a> ()</td></tr>
<tr class="memdesc:a4ded6bdc6257e148fb9c8cc9a3f8e376"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value for NaN as the template type. Returns zero, if the type does not support NaN.  <br /></td></tr>
<tr class="separator:a4ded6bdc6257e148fb9c8cc9a3f8e376"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a208d07ee5e80c46cbd1be43a00dc960b" id="r_a208d07ee5e80c46cbd1be43a00dc960b"><td class="memTemplParams" colspan="2"><a id="a208d07ee5e80c46cbd1be43a00dc960b" name="a208d07ee5e80c46cbd1be43a00dc960b"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a208d07ee5e80c46cbd1be43a00dc960b"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsInfinity</b> ()</td></tr>
<tr class="memdesc:a208d07ee5e80c46cbd1be43a00dc960b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the template type supports specialized values to represent Infinity. <br /></td></tr>
<tr class="separator:a208d07ee5e80c46cbd1be43a00dc960b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ad01e87f0e218a6e9662e354df16b85" id="r_a6ad01e87f0e218a6e9662e354df16b85"><td class="memTemplParams" colspan="2"><a id="a6ad01e87f0e218a6e9662e354df16b85" name="a6ad01e87f0e218a6e9662e354df16b85"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a6ad01e87f0e218a6e9662e354df16b85"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Infinity</b> ()</td></tr>
<tr class="memdesc:a6ad01e87f0e218a6e9662e354df16b85"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value for Infinity as the template type. Returns zero, if the type does not support Infinity. <br /></td></tr>
<tr class="separator:a6ad01e87f0e218a6e9662e354df16b85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa26019e0e85698d8a3d5ebb5c4d6075c" id="r_aa26019e0e85698d8a3d5ebb5c4d6075c"><td class="memTemplParams" colspan="2"><a id="aa26019e0e85698d8a3d5ebb5c4d6075c" name="aa26019e0e85698d8a3d5ebb5c4d6075c"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:aa26019e0e85698d8a3d5ebb5c4d6075c"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="memdesc:aa26019e0e85698d8a3d5ebb5c4d6075c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the largest possible positive value (that is not infinity). <br /></td></tr>
<tr class="separator:aa26019e0e85698d8a3d5ebb5c4d6075c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c0500e2892248a6465f09dd3494db0f" id="r_a8c0500e2892248a6465f09dd3494db0f"><td class="memTemplParams" colspan="2"><a id="a8c0500e2892248a6465f09dd3494db0f" name="a8c0500e2892248a6465f09dd3494db0f"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a8c0500e2892248a6465f09dd3494db0f"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="memdesc:a8c0500e2892248a6465f09dd3494db0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smallest possible value (that is not -infinity). Usually zero or -<a class="el" href="../../db/d78/namespaceez_math.htm#aa26019e0e85698d8a3d5ebb5c4d6075c" title="Returns the largest possible positive value (that is not infinity).">MaxValue()</a>. For signed integers this will be -<a class="el" href="../../db/d78/namespaceez_math.htm#aa26019e0e85698d8a3d5ebb5c4d6075c" title="Returns the largest possible positive value (that is not infinity).">MaxValue()</a> - 1. <br /></td></tr>
<tr class="separator:a8c0500e2892248a6465f09dd3494db0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3da8103ab828ed4da1f8bc61a966ff1" id="r_aa3da8103ab828ed4da1f8bc61a966ff1"><td class="memTemplParams" colspan="2">template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:aa3da8103ab828ed4da1f8bc61a966ff1"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#aa3da8103ab828ed4da1f8bc61a966ff1">HighValue</a> ()</td></tr>
<tr class="memdesc:aa3da8103ab828ed4da1f8bc61a966ff1"><td class="mdescLeft">&#160;</td><td class="mdescRight">A very large value, that is slightly smaller than sqrt(MaxValue()).  <br /></td></tr>
<tr class="separator:aa3da8103ab828ed4da1f8bc61a966ff1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17212e83459d7284e430bc68397907ac" id="r_a17212e83459d7284e430bc68397907ac"><td class="memTemplParams" colspan="2"><a id="a17212e83459d7284e430bc68397907ac" name="a17212e83459d7284e430bc68397907ac"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a17212e83459d7284e430bc68397907ac"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>FloatEpsilon</b> ()</td></tr>
<tr class="memdesc:a17212e83459d7284e430bc68397907ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">The difference between 1.0 and the next representable value for the given type. <br /></td></tr>
<tr class="separator:a17212e83459d7284e430bc68397907ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab361b088c5248ed267c341a0271ef16e" id="r_ab361b088c5248ed267c341a0271ef16e"><td class="memTemplParams" colspan="2"><a id="ab361b088c5248ed267c341a0271ef16e" name="ab361b088c5248ed267c341a0271ef16e"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:ab361b088c5248ed267c341a0271ef16e"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SmallEpsilon</b> ()</td></tr>
<tr class="separator:ab361b088c5248ed267c341a0271ef16e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee21413ad7f7e39e411519dcabc61954" id="r_aee21413ad7f7e39e411519dcabc61954"><td class="memTemplParams" colspan="2"><a id="aee21413ad7f7e39e411519dcabc61954" name="aee21413ad7f7e39e411519dcabc61954"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:aee21413ad7f7e39e411519dcabc61954"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>DefaultEpsilon</b> ()</td></tr>
<tr class="separator:aee21413ad7f7e39e411519dcabc61954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5afe701a1c53679381b9b94a7e19baea" id="r_a5afe701a1c53679381b9b94a7e19baea"><td class="memTemplParams" colspan="2"><a id="a5afe701a1c53679381b9b94a7e19baea" name="a5afe701a1c53679381b9b94a7e19baea"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a5afe701a1c53679381b9b94a7e19baea"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>LargeEpsilon</b> ()</td></tr>
<tr class="separator:a5afe701a1c53679381b9b94a7e19baea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6755ef5051ed4ac8121329393bd301cb" id="r_a6755ef5051ed4ac8121329393bd301cb"><td class="memTemplParams" colspan="2"><a id="a6755ef5051ed4ac8121329393bd301cb" name="a6755ef5051ed4ac8121329393bd301cb"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a6755ef5051ed4ac8121329393bd301cb"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>HugeEpsilon</b> ()</td></tr>
<tr class="separator:a6755ef5051ed4ac8121329393bd301cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5aa564a40df070112a6d6d5aa95b56f" id="r_ad5aa564a40df070112a6d6d5aa95b56f"><td class="memTemplParams" colspan="2"><a id="ad5aa564a40df070112a6d6d5aa95b56f" name="ad5aa564a40df070112a6d6d5aa95b56f"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:ad5aa564a40df070112a6d6d5aa95b56f"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits</b> ()</td></tr>
<tr class="memdesc:ad5aa564a40df070112a6d6d5aa95b56f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bits in the given type. Mostly useful for unsigned integer types. <br /></td></tr>
<tr class="separator:ad5aa564a40df070112a6d6d5aa95b56f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68b4b41cd53264f4873abb5563dcd64a" id="r_a68b4b41cd53264f4873abb5563dcd64a"><td class="memItemLeft" align="right" valign="top"><a id="a68b4b41cd53264f4873abb5563dcd64a" name="a68b4b41cd53264f4873abb5563dcd64a"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_Linear</b> (double t)</td></tr>
<tr class="separator:a68b4b41cd53264f4873abb5563dcd64a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a652741da5e08fa92baecea8d0777dbfd" id="r_a652741da5e08fa92baecea8d0777dbfd"><td class="memItemLeft" align="right" valign="top"><a id="a652741da5e08fa92baecea8d0777dbfd" name="a652741da5e08fa92baecea8d0777dbfd"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_ConstantZero</b> (double t)</td></tr>
<tr class="separator:a652741da5e08fa92baecea8d0777dbfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd36f799c9e261743f7796e047b388d9" id="r_acd36f799c9e261743f7796e047b388d9"><td class="memItemLeft" align="right" valign="top"><a id="acd36f799c9e261743f7796e047b388d9" name="acd36f799c9e261743f7796e047b388d9"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_ConstantOne</b> (double t)</td></tr>
<tr class="separator:acd36f799c9e261743f7796e047b388d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7ecc59005a95271ac7d8ac421971d0a" id="r_af7ecc59005a95271ac7d8ac421971d0a"><td class="memItemLeft" align="right" valign="top"><a id="af7ecc59005a95271ac7d8ac421971d0a" name="af7ecc59005a95271ac7d8ac421971d0a"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInSine</b> (double t)</td></tr>
<tr class="separator:af7ecc59005a95271ac7d8ac421971d0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afab2185cd9be6369e019bc42956de30e" id="r_afab2185cd9be6369e019bc42956de30e"><td class="memItemLeft" align="right" valign="top"><a id="afab2185cd9be6369e019bc42956de30e" name="afab2185cd9be6369e019bc42956de30e"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutSine</b> (double t)</td></tr>
<tr class="separator:afab2185cd9be6369e019bc42956de30e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43cf253b5ec986e4b69b711cec56be78" id="r_a43cf253b5ec986e4b69b711cec56be78"><td class="memItemLeft" align="right" valign="top"><a id="a43cf253b5ec986e4b69b711cec56be78" name="a43cf253b5ec986e4b69b711cec56be78"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutSine</b> (double t)</td></tr>
<tr class="separator:a43cf253b5ec986e4b69b711cec56be78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cecdc6c212b1d48eab7cf68f75c1520" id="r_a0cecdc6c212b1d48eab7cf68f75c1520"><td class="memItemLeft" align="right" valign="top"><a id="a0cecdc6c212b1d48eab7cf68f75c1520" name="a0cecdc6c212b1d48eab7cf68f75c1520"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInQuad</b> (double t)</td></tr>
<tr class="separator:a0cecdc6c212b1d48eab7cf68f75c1520"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af87cb2cf62e5720227c5112a4ea57fb8" id="r_af87cb2cf62e5720227c5112a4ea57fb8"><td class="memItemLeft" align="right" valign="top"><a id="af87cb2cf62e5720227c5112a4ea57fb8" name="af87cb2cf62e5720227c5112a4ea57fb8"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutQuad</b> (double t)</td></tr>
<tr class="separator:af87cb2cf62e5720227c5112a4ea57fb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acddb5b29f212e90bf1a522f0504b1a70" id="r_acddb5b29f212e90bf1a522f0504b1a70"><td class="memItemLeft" align="right" valign="top"><a id="acddb5b29f212e90bf1a522f0504b1a70" name="acddb5b29f212e90bf1a522f0504b1a70"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutQuad</b> (double t)</td></tr>
<tr class="separator:acddb5b29f212e90bf1a522f0504b1a70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b0aeaa49850d2199fb4c61d250062a5" id="r_a5b0aeaa49850d2199fb4c61d250062a5"><td class="memItemLeft" align="right" valign="top"><a id="a5b0aeaa49850d2199fb4c61d250062a5" name="a5b0aeaa49850d2199fb4c61d250062a5"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInCubic</b> (double t)</td></tr>
<tr class="separator:a5b0aeaa49850d2199fb4c61d250062a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd3f2fd47fa514cc574076dd62301175" id="r_abd3f2fd47fa514cc574076dd62301175"><td class="memItemLeft" align="right" valign="top"><a id="abd3f2fd47fa514cc574076dd62301175" name="abd3f2fd47fa514cc574076dd62301175"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutCubic</b> (double t)</td></tr>
<tr class="separator:abd3f2fd47fa514cc574076dd62301175"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab34cdab1db9e0d50687e33048a68289" id="r_aab34cdab1db9e0d50687e33048a68289"><td class="memItemLeft" align="right" valign="top"><a id="aab34cdab1db9e0d50687e33048a68289" name="aab34cdab1db9e0d50687e33048a68289"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutCubic</b> (double t)</td></tr>
<tr class="separator:aab34cdab1db9e0d50687e33048a68289"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbf526c0549020ee39a410afb2da7e47" id="r_acbf526c0549020ee39a410afb2da7e47"><td class="memItemLeft" align="right" valign="top"><a id="acbf526c0549020ee39a410afb2da7e47" name="acbf526c0549020ee39a410afb2da7e47"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInQuartic</b> (double t)</td></tr>
<tr class="separator:acbf526c0549020ee39a410afb2da7e47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba95ee28f223924051c279238d58872e" id="r_aba95ee28f223924051c279238d58872e"><td class="memItemLeft" align="right" valign="top"><a id="aba95ee28f223924051c279238d58872e" name="aba95ee28f223924051c279238d58872e"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutQuartic</b> (double t)</td></tr>
<tr class="separator:aba95ee28f223924051c279238d58872e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8129baca56453195addaa0fc4c4045f2" id="r_a8129baca56453195addaa0fc4c4045f2"><td class="memItemLeft" align="right" valign="top"><a id="a8129baca56453195addaa0fc4c4045f2" name="a8129baca56453195addaa0fc4c4045f2"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutQuartic</b> (double t)</td></tr>
<tr class="separator:a8129baca56453195addaa0fc4c4045f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9e7e34dbd49211f36e75aac8f5d00c4" id="r_aa9e7e34dbd49211f36e75aac8f5d00c4"><td class="memItemLeft" align="right" valign="top"><a id="aa9e7e34dbd49211f36e75aac8f5d00c4" name="aa9e7e34dbd49211f36e75aac8f5d00c4"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInQuintic</b> (double t)</td></tr>
<tr class="separator:aa9e7e34dbd49211f36e75aac8f5d00c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab82ae516534fc9cabf2445dc20ba09b1" id="r_ab82ae516534fc9cabf2445dc20ba09b1"><td class="memItemLeft" align="right" valign="top"><a id="ab82ae516534fc9cabf2445dc20ba09b1" name="ab82ae516534fc9cabf2445dc20ba09b1"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutQuintic</b> (double t)</td></tr>
<tr class="separator:ab82ae516534fc9cabf2445dc20ba09b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6937ecd2112dfdeb6f7edfffc92ed50f" id="r_a6937ecd2112dfdeb6f7edfffc92ed50f"><td class="memItemLeft" align="right" valign="top"><a id="a6937ecd2112dfdeb6f7edfffc92ed50f" name="a6937ecd2112dfdeb6f7edfffc92ed50f"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutQuintic</b> (double t)</td></tr>
<tr class="separator:a6937ecd2112dfdeb6f7edfffc92ed50f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33bf11140288d64800965dfdf6be9765" id="r_a33bf11140288d64800965dfdf6be9765"><td class="memItemLeft" align="right" valign="top"><a id="a33bf11140288d64800965dfdf6be9765" name="a33bf11140288d64800965dfdf6be9765"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInExpo</b> (double t)</td></tr>
<tr class="separator:a33bf11140288d64800965dfdf6be9765"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff28609e122de356f518be83229e7a44" id="r_aff28609e122de356f518be83229e7a44"><td class="memItemLeft" align="right" valign="top"><a id="aff28609e122de356f518be83229e7a44" name="aff28609e122de356f518be83229e7a44"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutExpo</b> (double t)</td></tr>
<tr class="separator:aff28609e122de356f518be83229e7a44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c770b9c5ab18b5ca367808fbf7576b2" id="r_a4c770b9c5ab18b5ca367808fbf7576b2"><td class="memItemLeft" align="right" valign="top"><a id="a4c770b9c5ab18b5ca367808fbf7576b2" name="a4c770b9c5ab18b5ca367808fbf7576b2"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutExpo</b> (double t)</td></tr>
<tr class="separator:a4c770b9c5ab18b5ca367808fbf7576b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12f5b30d2becf8524e0cbf37c9fea778" id="r_a12f5b30d2becf8524e0cbf37c9fea778"><td class="memItemLeft" align="right" valign="top"><a id="a12f5b30d2becf8524e0cbf37c9fea778" name="a12f5b30d2becf8524e0cbf37c9fea778"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInCirc</b> (double t)</td></tr>
<tr class="separator:a12f5b30d2becf8524e0cbf37c9fea778"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a663914b1391ea2efcbdf4181c234e880" id="r_a663914b1391ea2efcbdf4181c234e880"><td class="memItemLeft" align="right" valign="top"><a id="a663914b1391ea2efcbdf4181c234e880" name="a663914b1391ea2efcbdf4181c234e880"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutCirc</b> (double t)</td></tr>
<tr class="separator:a663914b1391ea2efcbdf4181c234e880"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a405fde6c5f908009f27d99fff5e553" id="r_a9a405fde6c5f908009f27d99fff5e553"><td class="memItemLeft" align="right" valign="top"><a id="a9a405fde6c5f908009f27d99fff5e553" name="a9a405fde6c5f908009f27d99fff5e553"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutCirc</b> (double t)</td></tr>
<tr class="separator:a9a405fde6c5f908009f27d99fff5e553"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7ac09e93a8027460f9f6b5c48385218" id="r_ad7ac09e93a8027460f9f6b5c48385218"><td class="memItemLeft" align="right" valign="top"><a id="ad7ac09e93a8027460f9f6b5c48385218" name="ad7ac09e93a8027460f9f6b5c48385218"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInBack</b> (double t)</td></tr>
<tr class="separator:ad7ac09e93a8027460f9f6b5c48385218"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae266e886d02d150903fdfd274582145d" id="r_ae266e886d02d150903fdfd274582145d"><td class="memItemLeft" align="right" valign="top"><a id="ae266e886d02d150903fdfd274582145d" name="ae266e886d02d150903fdfd274582145d"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutBack</b> (double t)</td></tr>
<tr class="separator:ae266e886d02d150903fdfd274582145d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94bd024ed053d8ae43e3f7b3cd1686de" id="r_a94bd024ed053d8ae43e3f7b3cd1686de"><td class="memItemLeft" align="right" valign="top"><a id="a94bd024ed053d8ae43e3f7b3cd1686de" name="a94bd024ed053d8ae43e3f7b3cd1686de"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutBack</b> (double t)</td></tr>
<tr class="separator:a94bd024ed053d8ae43e3f7b3cd1686de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c615cb75a80b3a49fbbae9d1deb420b" id="r_a3c615cb75a80b3a49fbbae9d1deb420b"><td class="memItemLeft" align="right" valign="top"><a id="a3c615cb75a80b3a49fbbae9d1deb420b" name="a3c615cb75a80b3a49fbbae9d1deb420b"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInElastic</b> (double t)</td></tr>
<tr class="separator:a3c615cb75a80b3a49fbbae9d1deb420b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad70783774c1c9d6960467ddcf1a30ff3" id="r_ad70783774c1c9d6960467ddcf1a30ff3"><td class="memItemLeft" align="right" valign="top"><a id="ad70783774c1c9d6960467ddcf1a30ff3" name="ad70783774c1c9d6960467ddcf1a30ff3"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutElastic</b> (double t)</td></tr>
<tr class="separator:ad70783774c1c9d6960467ddcf1a30ff3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1321caab45e085689e63ce319a5d9587" id="r_a1321caab45e085689e63ce319a5d9587"><td class="memItemLeft" align="right" valign="top"><a id="a1321caab45e085689e63ce319a5d9587" name="a1321caab45e085689e63ce319a5d9587"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutElastic</b> (double t)</td></tr>
<tr class="separator:a1321caab45e085689e63ce319a5d9587"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a76cee59a3f50bcbc01e3ec1fc2877c" id="r_a3a76cee59a3f50bcbc01e3ec1fc2877c"><td class="memItemLeft" align="right" valign="top"><a id="a3a76cee59a3f50bcbc01e3ec1fc2877c" name="a3a76cee59a3f50bcbc01e3ec1fc2877c"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInBounce</b> (double t)</td></tr>
<tr class="separator:a3a76cee59a3f50bcbc01e3ec1fc2877c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca812c7fccbc2421954a6426de486fb3" id="r_aca812c7fccbc2421954a6426de486fb3"><td class="memItemLeft" align="right" valign="top"><a id="aca812c7fccbc2421954a6426de486fb3" name="aca812c7fccbc2421954a6426de486fb3"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutBounce</b> (double t)</td></tr>
<tr class="separator:aca812c7fccbc2421954a6426de486fb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a627882b1cef3075085eb18864c69421a" id="r_a627882b1cef3075085eb18864c69421a"><td class="memItemLeft" align="right" valign="top"><a id="a627882b1cef3075085eb18864c69421a" name="a627882b1cef3075085eb18864c69421a"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutBounce</b> (double t)</td></tr>
<tr class="separator:a627882b1cef3075085eb18864c69421a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b8c448b6e0f5b9dd6e97562d5a6a26f" id="r_a9b8c448b6e0f5b9dd6e97562d5a6a26f"><td class="memItemLeft" align="right" valign="top"><a id="a9b8c448b6e0f5b9dd6e97562d5a6a26f" name="a9b8c448b6e0f5b9dd6e97562d5a6a26f"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_Conical</b> (double t)</td></tr>
<tr class="separator:a9b8c448b6e0f5b9dd6e97562d5a6a26f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a978e39ab13b7e7eb9ea03fab8587206b" id="r_a978e39ab13b7e7eb9ea03fab8587206b"><td class="memItemLeft" align="right" valign="top"><a id="a978e39ab13b7e7eb9ea03fab8587206b" name="a978e39ab13b7e7eb9ea03fab8587206b"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_FadeInHoldFadeOut</b> (double t)</td></tr>
<tr class="separator:a978e39ab13b7e7eb9ea03fab8587206b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b1d4b8f79e8c1eec95074bd914d5f4b" id="r_a1b1d4b8f79e8c1eec95074bd914d5f4b"><td class="memItemLeft" align="right" valign="top"><a id="a1b1d4b8f79e8c1eec95074bd914d5f4b" name="a1b1d4b8f79e8c1eec95074bd914d5f4b"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_FadeInFadeOut</b> (double t)</td></tr>
<tr class="separator:a1b1d4b8f79e8c1eec95074bd914d5f4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a256583cc5c0415640a460b5ccd3a9ac7" id="r_a256583cc5c0415640a460b5ccd3a9ac7"><td class="memItemLeft" align="right" valign="top"><a id="a256583cc5c0415640a460b5ccd3a9ac7" name="a256583cc5c0415640a460b5ccd3a9ac7"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_Bell</b> (double t)</td></tr>
<tr class="separator:a256583cc5c0415640a460b5ccd3a9ac7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb4fc4216e5e8ca240a50ef8919156d1" id="r_afb4fc4216e5e8ca240a50ef8919156d1"><td class="memItemLeft" align="right" valign="top"><a id="afb4fc4216e5e8ca240a50ef8919156d1" name="afb4fc4216e5e8ca240a50ef8919156d1"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:afb4fc4216e5e8ca240a50ef8919156d1"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Pi</b> ()</td></tr>
<tr class="separator:afb4fc4216e5e8ca240a50ef8919156d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d5d19be71d0c15f90fc89269bf1be47" id="r_a3d5d19be71d0c15f90fc89269bf1be47"><td class="memItemLeft" align="right" valign="top"><a id="a3d5d19be71d0c15f90fc89269bf1be47" name="a3d5d19be71d0c15f90fc89269bf1be47"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a3d5d19be71d0c15f90fc89269bf1be47"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Pi</b> ()</td></tr>
<tr class="separator:a3d5d19be71d0c15f90fc89269bf1be47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4785f69f12eef7940e5fb2ddfe9ede1" id="r_ae4785f69f12eef7940e5fb2ddfe9ede1"><td class="memItemLeft" align="right" valign="top"><a id="ae4785f69f12eef7940e5fb2ddfe9ede1" name="ae4785f69f12eef7940e5fb2ddfe9ede1"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ae4785f69f12eef7940e5fb2ddfe9ede1"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>e</b> ()</td></tr>
<tr class="separator:ae4785f69f12eef7940e5fb2ddfe9ede1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc41f4d36d3e9b29030c5371c1b7dbcc" id="r_acc41f4d36d3e9b29030c5371c1b7dbcc"><td class="memItemLeft" align="right" valign="top"><a id="acc41f4d36d3e9b29030c5371c1b7dbcc" name="acc41f4d36d3e9b29030c5371c1b7dbcc"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:acc41f4d36d3e9b29030c5371c1b7dbcc"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>e</b> ()</td></tr>
<tr class="separator:acc41f4d36d3e9b29030c5371c1b7dbcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8a2977aa640bdda1ef83b45ccc09ad8" id="r_ad8a2977aa640bdda1ef83b45ccc09ad8"><td class="memItemLeft" align="right" valign="top"><a id="ad8a2977aa640bdda1ef83b45ccc09ad8" name="ad8a2977aa640bdda1ef83b45ccc09ad8"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ad8a2977aa640bdda1ef83b45ccc09ad8"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsNaN&lt; float &gt;</b> ()</td></tr>
<tr class="separator:ad8a2977aa640bdda1ef83b45ccc09ad8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7ff17f0d22db4abe09d4e491b66126b" id="r_ac7ff17f0d22db4abe09d4e491b66126b"><td class="memItemLeft" align="right" valign="top"><a id="ac7ff17f0d22db4abe09d4e491b66126b" name="ac7ff17f0d22db4abe09d4e491b66126b"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ac7ff17f0d22db4abe09d4e491b66126b"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsNaN&lt; double &gt;</b> ()</td></tr>
<tr class="separator:ac7ff17f0d22db4abe09d4e491b66126b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a039fd69e06d66724244acebbd81e7fa2" id="r_a039fd69e06d66724244acebbd81e7fa2"><td class="memItemLeft" align="right" valign="top"><a id="a039fd69e06d66724244acebbd81e7fa2" name="a039fd69e06d66724244acebbd81e7fa2"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a039fd69e06d66724244acebbd81e7fa2"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NaN</b> ()</td></tr>
<tr class="separator:a039fd69e06d66724244acebbd81e7fa2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a969748d4019c81176bd1f7aa314bac1b" id="r_a969748d4019c81176bd1f7aa314bac1b"><td class="memItemLeft" align="right" valign="top"><a id="a969748d4019c81176bd1f7aa314bac1b" name="a969748d4019c81176bd1f7aa314bac1b"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a969748d4019c81176bd1f7aa314bac1b"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NaN</b> ()</td></tr>
<tr class="separator:a969748d4019c81176bd1f7aa314bac1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0a9f10bd4904f4cfb3bd650f6dcca68" id="r_ab0a9f10bd4904f4cfb3bd650f6dcca68"><td class="memItemLeft" align="right" valign="top"><a id="ab0a9f10bd4904f4cfb3bd650f6dcca68" name="ab0a9f10bd4904f4cfb3bd650f6dcca68"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ab0a9f10bd4904f4cfb3bd650f6dcca68"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsInfinity&lt; float &gt;</b> ()</td></tr>
<tr class="separator:ab0a9f10bd4904f4cfb3bd650f6dcca68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff14467b701fba57106d3c805317360e" id="r_aff14467b701fba57106d3c805317360e"><td class="memItemLeft" align="right" valign="top"><a id="aff14467b701fba57106d3c805317360e" name="aff14467b701fba57106d3c805317360e"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:aff14467b701fba57106d3c805317360e"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsInfinity&lt; double &gt;</b> ()</td></tr>
<tr class="separator:aff14467b701fba57106d3c805317360e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a642b2600b79411106f7342d109260e9d" id="r_a642b2600b79411106f7342d109260e9d"><td class="memItemLeft" align="right" valign="top"><a id="a642b2600b79411106f7342d109260e9d" name="a642b2600b79411106f7342d109260e9d"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a642b2600b79411106f7342d109260e9d"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Infinity</b> ()</td></tr>
<tr class="separator:a642b2600b79411106f7342d109260e9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a680ed6a2f769c510192920436fc8e91a" id="r_a680ed6a2f769c510192920436fc8e91a"><td class="memItemLeft" align="right" valign="top"><a id="a680ed6a2f769c510192920436fc8e91a" name="a680ed6a2f769c510192920436fc8e91a"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a680ed6a2f769c510192920436fc8e91a"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Infinity</b> ()</td></tr>
<tr class="separator:a680ed6a2f769c510192920436fc8e91a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acccbacb9fa9014504b7880f6df6bd13f" id="r_acccbacb9fa9014504b7880f6df6bd13f"><td class="memItemLeft" align="right" valign="top"><a id="acccbacb9fa9014504b7880f6df6bd13f" name="acccbacb9fa9014504b7880f6df6bd13f"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:acccbacb9fa9014504b7880f6df6bd13f"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt8&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:acccbacb9fa9014504b7880f6df6bd13f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af727eba52c8e799ec10bce7cd84e55e2" id="r_af727eba52c8e799ec10bce7cd84e55e2"><td class="memItemLeft" align="right" valign="top"><a id="af727eba52c8e799ec10bce7cd84e55e2" name="af727eba52c8e799ec10bce7cd84e55e2"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:af727eba52c8e799ec10bce7cd84e55e2"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt16&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:af727eba52c8e799ec10bce7cd84e55e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad058487795302dc6ec7032962f06d210" id="r_ad058487795302dc6ec7032962f06d210"><td class="memItemLeft" align="right" valign="top"><a id="ad058487795302dc6ec7032962f06d210" name="ad058487795302dc6ec7032962f06d210"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ad058487795302dc6ec7032962f06d210"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:ad058487795302dc6ec7032962f06d210"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88227f985bccf00e66afc0c53923c207" id="r_a88227f985bccf00e66afc0c53923c207"><td class="memItemLeft" align="right" valign="top"><a id="a88227f985bccf00e66afc0c53923c207" name="a88227f985bccf00e66afc0c53923c207"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a88227f985bccf00e66afc0c53923c207"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt64&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:a88227f985bccf00e66afc0c53923c207"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73cca142a836d4b00c13f432f17d93bd" id="r_a73cca142a836d4b00c13f432f17d93bd"><td class="memItemLeft" align="right" valign="top"><a id="a73cca142a836d4b00c13f432f17d93bd" name="a73cca142a836d4b00c13f432f17d93bd"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a73cca142a836d4b00c13f432f17d93bd"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezInt8&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:a73cca142a836d4b00c13f432f17d93bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb0d125c62da7587f94d69e22de354ad" id="r_adb0d125c62da7587f94d69e22de354ad"><td class="memItemLeft" align="right" valign="top"><a id="adb0d125c62da7587f94d69e22de354ad" name="adb0d125c62da7587f94d69e22de354ad"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:adb0d125c62da7587f94d69e22de354ad"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezInt16&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:adb0d125c62da7587f94d69e22de354ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5f80a1d7a0a662b98675bd7d728366a" id="r_ac5f80a1d7a0a662b98675bd7d728366a"><td class="memItemLeft" align="right" valign="top"><a id="ac5f80a1d7a0a662b98675bd7d728366a" name="ac5f80a1d7a0a662b98675bd7d728366a"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ac5f80a1d7a0a662b98675bd7d728366a"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:ac5f80a1d7a0a662b98675bd7d728366a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff807fcdfe7d711a1bdf846df32b1c39" id="r_aff807fcdfe7d711a1bdf846df32b1c39"><td class="memItemLeft" align="right" valign="top"><a id="aff807fcdfe7d711a1bdf846df32b1c39" name="aff807fcdfe7d711a1bdf846df32b1c39"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:aff807fcdfe7d711a1bdf846df32b1c39"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezInt64&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:aff807fcdfe7d711a1bdf846df32b1c39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cab2260fa1f2cfc2e91042cd43c623e" id="r_a1cab2260fa1f2cfc2e91042cd43c623e"><td class="memItemLeft" align="right" valign="top"><a id="a1cab2260fa1f2cfc2e91042cd43c623e" name="a1cab2260fa1f2cfc2e91042cd43c623e"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a1cab2260fa1f2cfc2e91042cd43c623e"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:a1cab2260fa1f2cfc2e91042cd43c623e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc0b00c63d158b7458530f044f3a9807" id="r_abc0b00c63d158b7458530f044f3a9807"><td class="memItemLeft" align="right" valign="top"><a id="abc0b00c63d158b7458530f044f3a9807" name="abc0b00c63d158b7458530f044f3a9807"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:abc0b00c63d158b7458530f044f3a9807"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:abc0b00c63d158b7458530f044f3a9807"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a5fe45cd837b0c16ee0bb1dda2497cb" id="r_a5a5fe45cd837b0c16ee0bb1dda2497cb"><td class="memItemLeft" align="right" valign="top"><a id="a5a5fe45cd837b0c16ee0bb1dda2497cb" name="a5a5fe45cd837b0c16ee0bb1dda2497cb"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a5a5fe45cd837b0c16ee0bb1dda2497cb"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt8&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a5a5fe45cd837b0c16ee0bb1dda2497cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab59bbc8cb6ac97c48937f8e27bbae0c" id="r_aab59bbc8cb6ac97c48937f8e27bbae0c"><td class="memItemLeft" align="right" valign="top"><a id="aab59bbc8cb6ac97c48937f8e27bbae0c" name="aab59bbc8cb6ac97c48937f8e27bbae0c"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:aab59bbc8cb6ac97c48937f8e27bbae0c"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt16&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:aab59bbc8cb6ac97c48937f8e27bbae0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7a736bad701d9b0b80f1feedee916d1" id="r_ac7a736bad701d9b0b80f1feedee916d1"><td class="memItemLeft" align="right" valign="top"><a id="ac7a736bad701d9b0b80f1feedee916d1" name="ac7a736bad701d9b0b80f1feedee916d1"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ac7a736bad701d9b0b80f1feedee916d1"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:ac7a736bad701d9b0b80f1feedee916d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ae3f9ebb4276be3d8bdf39ccc887bae" id="r_a5ae3f9ebb4276be3d8bdf39ccc887bae"><td class="memItemLeft" align="right" valign="top"><a id="a5ae3f9ebb4276be3d8bdf39ccc887bae" name="a5ae3f9ebb4276be3d8bdf39ccc887bae"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a5ae3f9ebb4276be3d8bdf39ccc887bae"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt64&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a5ae3f9ebb4276be3d8bdf39ccc887bae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a000cab1898e873989d781498243db343" id="r_a000cab1898e873989d781498243db343"><td class="memItemLeft" align="right" valign="top"><a id="a000cab1898e873989d781498243db343" name="a000cab1898e873989d781498243db343"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a000cab1898e873989d781498243db343"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezInt8&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a000cab1898e873989d781498243db343"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17cf8a88505bcb07b7ae11329b9ce933" id="r_a17cf8a88505bcb07b7ae11329b9ce933"><td class="memItemLeft" align="right" valign="top"><a id="a17cf8a88505bcb07b7ae11329b9ce933" name="a17cf8a88505bcb07b7ae11329b9ce933"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a17cf8a88505bcb07b7ae11329b9ce933"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezInt16&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a17cf8a88505bcb07b7ae11329b9ce933"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3679a0589e35182e58f2f1540b45679c" id="r_a3679a0589e35182e58f2f1540b45679c"><td class="memItemLeft" align="right" valign="top"><a id="a3679a0589e35182e58f2f1540b45679c" name="a3679a0589e35182e58f2f1540b45679c"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a3679a0589e35182e58f2f1540b45679c"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a3679a0589e35182e58f2f1540b45679c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25614e835e98889ed74339cf1b746a40" id="r_a25614e835e98889ed74339cf1b746a40"><td class="memItemLeft" align="right" valign="top"><a id="a25614e835e98889ed74339cf1b746a40" name="a25614e835e98889ed74339cf1b746a40"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a25614e835e98889ed74339cf1b746a40"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezInt64&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a25614e835e98889ed74339cf1b746a40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a751e4086a2f31206929249982de97e59" id="r_a751e4086a2f31206929249982de97e59"><td class="memItemLeft" align="right" valign="top"><a id="a751e4086a2f31206929249982de97e59" name="a751e4086a2f31206929249982de97e59"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a751e4086a2f31206929249982de97e59"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a751e4086a2f31206929249982de97e59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5593ae0389959c03e23390ed484c7c15" id="r_a5593ae0389959c03e23390ed484c7c15"><td class="memItemLeft" align="right" valign="top"><a id="a5593ae0389959c03e23390ed484c7c15" name="a5593ae0389959c03e23390ed484c7c15"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a5593ae0389959c03e23390ed484c7c15"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a5593ae0389959c03e23390ed484c7c15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbd8a88d3b7493d31f19af0f8377073d" id="r_abbd8a88d3b7493d31f19af0f8377073d"><td class="memItemLeft" align="right" valign="top"><a id="abbd8a88d3b7493d31f19af0f8377073d" name="abbd8a88d3b7493d31f19af0f8377073d"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:abbd8a88d3b7493d31f19af0f8377073d"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>HighValue</b> ()</td></tr>
<tr class="separator:abbd8a88d3b7493d31f19af0f8377073d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52c644041e22758fea18140684ca8d2f" id="r_a52c644041e22758fea18140684ca8d2f"><td class="memItemLeft" align="right" valign="top"><a id="a52c644041e22758fea18140684ca8d2f" name="a52c644041e22758fea18140684ca8d2f"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a52c644041e22758fea18140684ca8d2f"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>HighValue</b> ()</td></tr>
<tr class="separator:a52c644041e22758fea18140684ca8d2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dc6c0697e813cfce6f5cefafa1a80b0" id="r_a8dc6c0697e813cfce6f5cefafa1a80b0"><td class="memItemLeft" align="right" valign="top"><a id="a8dc6c0697e813cfce6f5cefafa1a80b0" name="a8dc6c0697e813cfce6f5cefafa1a80b0"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a8dc6c0697e813cfce6f5cefafa1a80b0"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>FloatEpsilon</b> ()</td></tr>
<tr class="separator:a8dc6c0697e813cfce6f5cefafa1a80b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80bb3c914306eb036f448f73a356cde3" id="r_a80bb3c914306eb036f448f73a356cde3"><td class="memItemLeft" align="right" valign="top"><a id="a80bb3c914306eb036f448f73a356cde3" name="a80bb3c914306eb036f448f73a356cde3"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a80bb3c914306eb036f448f73a356cde3"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>FloatEpsilon</b> ()</td></tr>
<tr class="separator:a80bb3c914306eb036f448f73a356cde3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab14f5d367c601810a7b27f2dd7c2b546" id="r_ab14f5d367c601810a7b27f2dd7c2b546"><td class="memItemLeft" align="right" valign="top"><a id="ab14f5d367c601810a7b27f2dd7c2b546" name="ab14f5d367c601810a7b27f2dd7c2b546"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ab14f5d367c601810a7b27f2dd7c2b546"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezUInt8 &gt;</b> ()</td></tr>
<tr class="separator:ab14f5d367c601810a7b27f2dd7c2b546"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a176a175e74fa1185a4691fce9aea0a" id="r_a8a176a175e74fa1185a4691fce9aea0a"><td class="memItemLeft" align="right" valign="top"><a id="a8a176a175e74fa1185a4691fce9aea0a" name="a8a176a175e74fa1185a4691fce9aea0a"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a8a176a175e74fa1185a4691fce9aea0a"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezUInt16 &gt;</b> ()</td></tr>
<tr class="separator:a8a176a175e74fa1185a4691fce9aea0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c44d0da083adaa3190307c6a617d51f" id="r_a1c44d0da083adaa3190307c6a617d51f"><td class="memItemLeft" align="right" valign="top"><a id="a1c44d0da083adaa3190307c6a617d51f" name="a1c44d0da083adaa3190307c6a617d51f"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a1c44d0da083adaa3190307c6a617d51f"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezUInt32 &gt;</b> ()</td></tr>
<tr class="separator:a1c44d0da083adaa3190307c6a617d51f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf90da429753ff58079270527e2a6aa9" id="r_acf90da429753ff58079270527e2a6aa9"><td class="memItemLeft" align="right" valign="top"><a id="acf90da429753ff58079270527e2a6aa9" name="acf90da429753ff58079270527e2a6aa9"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:acf90da429753ff58079270527e2a6aa9"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezUInt64 &gt;</b> ()</td></tr>
<tr class="separator:acf90da429753ff58079270527e2a6aa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac212ea186518f880a79ffc346657afe1" id="r_ac212ea186518f880a79ffc346657afe1"><td class="memItemLeft" align="right" valign="top"><a id="ac212ea186518f880a79ffc346657afe1" name="ac212ea186518f880a79ffc346657afe1"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ac212ea186518f880a79ffc346657afe1"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezInt8 &gt;</b> ()</td></tr>
<tr class="separator:ac212ea186518f880a79ffc346657afe1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae620c3f528b38fca16bb17d3c26f44d3" id="r_ae620c3f528b38fca16bb17d3c26f44d3"><td class="memItemLeft" align="right" valign="top"><a id="ae620c3f528b38fca16bb17d3c26f44d3" name="ae620c3f528b38fca16bb17d3c26f44d3"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ae620c3f528b38fca16bb17d3c26f44d3"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezInt16 &gt;</b> ()</td></tr>
<tr class="separator:ae620c3f528b38fca16bb17d3c26f44d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0cd5f60b2075d6fec0db195fb4f2a76" id="r_ab0cd5f60b2075d6fec0db195fb4f2a76"><td class="memItemLeft" align="right" valign="top"><a id="ab0cd5f60b2075d6fec0db195fb4f2a76" name="ab0cd5f60b2075d6fec0db195fb4f2a76"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ab0cd5f60b2075d6fec0db195fb4f2a76"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezInt32 &gt;</b> ()</td></tr>
<tr class="separator:ab0cd5f60b2075d6fec0db195fb4f2a76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a959e6331fe18db886f34691d5631190e" id="r_a959e6331fe18db886f34691d5631190e"><td class="memItemLeft" align="right" valign="top"><a id="a959e6331fe18db886f34691d5631190e" name="a959e6331fe18db886f34691d5631190e"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a959e6331fe18db886f34691d5631190e"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezInt64 &gt;</b> ()</td></tr>
<tr class="separator:a959e6331fe18db886f34691d5631190e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0473436dac71af069b8cc5824a593e35" id="r_a0473436dac71af069b8cc5824a593e35"><td class="memItemLeft" align="right" valign="top"><a id="a0473436dac71af069b8cc5824a593e35" name="a0473436dac71af069b8cc5824a593e35"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a0473436dac71af069b8cc5824a593e35"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; float &gt;</b> ()</td></tr>
<tr class="separator:a0473436dac71af069b8cc5824a593e35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a955c71981bd877a87e17705f8730ea6c" id="r_a955c71981bd877a87e17705f8730ea6c"><td class="memItemLeft" align="right" valign="top"><a id="a955c71981bd877a87e17705f8730ea6c" name="a955c71981bd877a87e17705f8730ea6c"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a955c71981bd877a87e17705f8730ea6c"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; double &gt;</b> ()</td></tr>
<tr class="separator:a955c71981bd877a87e17705f8730ea6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfc8bc546fb58a0280cce97f9a40f324" id="r_adfc8bc546fb58a0280cce97f9a40f324"><td class="memTemplParams" colspan="2"><a id="adfc8bc546fb58a0280cce97f9a40f324" name="adfc8bc546fb58a0280cce97f9a40f324"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:adfc8bc546fb58a0280cce97f9a40f324"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Square</b> (T f)</td></tr>
<tr class="memdesc:adfc8bc546fb58a0280cce97f9a40f324"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns f * f. <br /></td></tr>
<tr class="separator:adfc8bc546fb58a0280cce97f9a40f324"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a916b088a06b14fe88660d630f8f63489" id="r_a916b088a06b14fe88660d630f8f63489"><td class="memTemplParams" colspan="2"><a id="a916b088a06b14fe88660d630f8f63489" name="a916b088a06b14fe88660d630f8f63489"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a916b088a06b14fe88660d630f8f63489"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Sign</b> (T f)</td></tr>
<tr class="memdesc:a916b088a06b14fe88660d630f8f63489"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the sign of f (i.e: -1, 1 or 0) <br /></td></tr>
<tr class="separator:a916b088a06b14fe88660d630f8f63489"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a746232810344aec07f7b870fa302fa8f" id="r_a746232810344aec07f7b870fa302fa8f"><td class="memTemplParams" colspan="2"><a id="a746232810344aec07f7b870fa302fa8f" name="a746232810344aec07f7b870fa302fa8f"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a746232810344aec07f7b870fa302fa8f"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Abs</b> (T f)</td></tr>
<tr class="memdesc:a746232810344aec07f7b870fa302fa8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the absolute value of f. <br /></td></tr>
<tr class="separator:a746232810344aec07f7b870fa302fa8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8009b4da9cb427658d71e30576f209e" id="r_ad8009b4da9cb427658d71e30576f209e"><td class="memTemplParams" colspan="2"><a id="ad8009b4da9cb427658d71e30576f209e" name="ad8009b4da9cb427658d71e30576f209e"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad8009b4da9cb427658d71e30576f209e"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Min</b> (T f1, T f2)</td></tr>
<tr class="memdesc:ad8009b4da9cb427658d71e30576f209e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2. <br /></td></tr>
<tr class="separator:ad8009b4da9cb427658d71e30576f209e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11f0b44966982d10d2cdfeb8eb897449" id="r_a11f0b44966982d10d2cdfeb8eb897449"><td class="memTemplParams" colspan="2"><a id="a11f0b44966982d10d2cdfeb8eb897449" name="a11f0b44966982d10d2cdfeb8eb897449"></a>
template&lt;typename T , typename... ARGS&gt; </td></tr>
<tr class="memitem:a11f0b44966982d10d2cdfeb8eb897449"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Min</b> (T f1, T f2, ARGS... f)</td></tr>
<tr class="memdesc:a11f0b44966982d10d2cdfeb8eb897449"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2 or ... <br /></td></tr>
<tr class="separator:a11f0b44966982d10d2cdfeb8eb897449"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f7ee19d0f8e81ff6ae5f394075e3a56" id="r_a6f7ee19d0f8e81ff6ae5f394075e3a56"><td class="memTemplParams" colspan="2"><a id="a6f7ee19d0f8e81ff6ae5f394075e3a56" name="a6f7ee19d0f8e81ff6ae5f394075e3a56"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6f7ee19d0f8e81ff6ae5f394075e3a56"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Max</b> (T f1, T f2)</td></tr>
<tr class="memdesc:a6f7ee19d0f8e81ff6ae5f394075e3a56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the greater value, f1 or f2. <br /></td></tr>
<tr class="separator:a6f7ee19d0f8e81ff6ae5f394075e3a56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c2df0b50d279b0afedb8c14ea698557" id="r_a9c2df0b50d279b0afedb8c14ea698557"><td class="memTemplParams" colspan="2"><a id="a9c2df0b50d279b0afedb8c14ea698557" name="a9c2df0b50d279b0afedb8c14ea698557"></a>
template&lt;typename T , typename... ARGS&gt; </td></tr>
<tr class="memitem:a9c2df0b50d279b0afedb8c14ea698557"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Max</b> (T f1, T f2, ARGS... f)</td></tr>
<tr class="separator:a9c2df0b50d279b0afedb8c14ea698557"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaedc100ad5d35ae5362021b9d1b0e7c" id="r_aaaedc100ad5d35ae5362021b9d1b0e7c"><td class="memTemplParams" colspan="2"><a id="aaaedc100ad5d35ae5362021b9d1b0e7c" name="aaaedc100ad5d35ae5362021b9d1b0e7c"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aaaedc100ad5d35ae5362021b9d1b0e7c"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Clamp</b> (T value, T min_val, T max_val)</td></tr>
<tr class="memdesc:aaaedc100ad5d35ae5362021b9d1b0e7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [min; max]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:aaaedc100ad5d35ae5362021b9d1b0e7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade0bbc96e88750c5d07fed586baa0bd6" id="r_ade0bbc96e88750c5d07fed586baa0bd6"><td class="memTemplParams" colspan="2"><a id="ade0bbc96e88750c5d07fed586baa0bd6" name="ade0bbc96e88750c5d07fed586baa0bd6"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ade0bbc96e88750c5d07fed586baa0bd6"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Saturate</b> (T value)</td></tr>
<tr class="memdesc:ade0bbc96e88750c5d07fed586baa0bd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [0; 1]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:ade0bbc96e88750c5d07fed586baa0bd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0dc1e649849596eedbfa9f54894d779" id="r_ac0dc1e649849596eedbfa9f54894d779"><td class="memTemplParams" colspan="2"><a id="ac0dc1e649849596eedbfa9f54894d779" name="ac0dc1e649849596eedbfa9f54894d779"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ac0dc1e649849596eedbfa9f54894d779"><td class="memTemplItemLeft" align="right" valign="top">constexpr Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Invert</b> (Type f)</td></tr>
<tr class="memdesc:ac0dc1e649849596eedbfa9f54894d779"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 1 / f. <br /></td></tr>
<tr class="separator:ac0dc1e649849596eedbfa9f54894d779"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20cbb5a32d60124534dd65b2871166d0" id="r_a20cbb5a32d60124534dd65b2871166d0"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a20cbb5a32d60124534dd65b2871166d0">FirstBitLow</a> (ezUInt32 uiBitmask)</td></tr>
<tr class="memdesc:a20cbb5a32d60124534dd65b2871166d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the least significant bit set.  <br /></td></tr>
<tr class="separator:a20cbb5a32d60124534dd65b2871166d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15a5da4c47b32ba351aa17ad40b2e8fb" id="r_a15a5da4c47b32ba351aa17ad40b2e8fb"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a15a5da4c47b32ba351aa17ad40b2e8fb">FirstBitLow</a> (ezUInt64 uiBitmask)</td></tr>
<tr class="memdesc:a15a5da4c47b32ba351aa17ad40b2e8fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the least significant bit set.  <br /></td></tr>
<tr class="separator:a15a5da4c47b32ba351aa17ad40b2e8fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35aee647f78c0673015f09c8791c448f" id="r_a35aee647f78c0673015f09c8791c448f"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a35aee647f78c0673015f09c8791c448f">FirstBitHigh</a> (ezUInt32 uiBitmask)</td></tr>
<tr class="memdesc:a35aee647f78c0673015f09c8791c448f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the most significant bit set.  <br /></td></tr>
<tr class="separator:a35aee647f78c0673015f09c8791c448f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afef6820f942a6a313693ba68dfcbaa6c" id="r_afef6820f942a6a313693ba68dfcbaa6c"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#afef6820f942a6a313693ba68dfcbaa6c">FirstBitHigh</a> (ezUInt64 uiBitmask)</td></tr>
<tr class="memdesc:afef6820f942a6a313693ba68dfcbaa6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the most significant bit set.  <br /></td></tr>
<tr class="separator:afef6820f942a6a313693ba68dfcbaa6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a0cd6f0b8682242cb973308553f7b13" id="r_a9a0cd6f0b8682242cb973308553f7b13"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a9a0cd6f0b8682242cb973308553f7b13">CountTrailingZeros</a> (ezUInt32 uiBitmask)</td></tr>
<tr class="separator:a9a0cd6f0b8682242cb973308553f7b13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33ac820872a03d6eae5f59bc0a67f44d" id="r_a33ac820872a03d6eae5f59bc0a67f44d"><td class="memItemLeft" align="right" valign="top"><a id="a33ac820872a03d6eae5f59bc0a67f44d" name="a33ac820872a03d6eae5f59bc0a67f44d"></a>
EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>CountTrailingZeros</b> (ezUInt64 uiBitmask)</td></tr>
<tr class="memdesc:a33ac820872a03d6eae5f59bc0a67f44d"><td class="mdescLeft">&#160;</td><td class="mdescRight">64 bit overload for <a class="el" href="../../db/d78/namespaceez_math.htm#a9a0cd6f0b8682242cb973308553f7b13">CountTrailingZeros()</a> <br /></td></tr>
<tr class="separator:a33ac820872a03d6eae5f59bc0a67f44d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace4ed6e4b2f22c9ef2c8a9666f734807" id="r_ace4ed6e4b2f22c9ef2c8a9666f734807"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ace4ed6e4b2f22c9ef2c8a9666f734807">CountLeadingZeros</a> (ezUInt32 uiBitmask)</td></tr>
<tr class="separator:ace4ed6e4b2f22c9ef2c8a9666f734807"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a78ee109368657dafd74a19d26d6b7c" id="r_a6a78ee109368657dafd74a19d26d6b7c"><td class="memItemLeft" align="right" valign="top"><a id="a6a78ee109368657dafd74a19d26d6b7c" name="a6a78ee109368657dafd74a19d26d6b7c"></a>
EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>CountBits</b> (ezUInt32 value)</td></tr>
<tr class="memdesc:a6a78ee109368657dafd74a19d26d6b7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bits set. <br /></td></tr>
<tr class="separator:a6a78ee109368657dafd74a19d26d6b7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a538c5d18dbeb682d0495ed375be090b7" id="r_a538c5d18dbeb682d0495ed375be090b7"><td class="memItemLeft" align="right" valign="top"><a id="a538c5d18dbeb682d0495ed375be090b7" name="a538c5d18dbeb682d0495ed375be090b7"></a>
EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>CountBits</b> (ezUInt64 value)</td></tr>
<tr class="memdesc:a538c5d18dbeb682d0495ed375be090b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bits set. <br /></td></tr>
<tr class="separator:a538c5d18dbeb682d0495ed375be090b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18f91e6fa7c48aceff06851b518c274d" id="r_a18f91e6fa7c48aceff06851b518c274d"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a18f91e6fa7c48aceff06851b518c274d"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE constexpr Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a18f91e6fa7c48aceff06851b518c274d">Bitmask_LowN</a> (ezUInt32 uiNumBitsToSet)</td></tr>
<tr class="memdesc:a18f91e6fa7c48aceff06851b518c274d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a bitmask in which the low N bits are set. For example for N=5, this would be '0000 ... 0001 1111'.  <br /></td></tr>
<tr class="separator:a18f91e6fa7c48aceff06851b518c274d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a330d587a6c60fec6b038e81a8d0e4bb5" id="r_a330d587a6c60fec6b038e81a8d0e4bb5"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a330d587a6c60fec6b038e81a8d0e4bb5"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE constexpr Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a330d587a6c60fec6b038e81a8d0e4bb5">Bitmask_HighN</a> (ezUInt32 uiNumBitsToSet)</td></tr>
<tr class="memdesc:a330d587a6c60fec6b038e81a8d0e4bb5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a bitmask in which the high N bits are set. For example for N=5, this would be '1111 1000 ... 0000'.  <br /></td></tr>
<tr class="separator:a330d587a6c60fec6b038e81a8d0e4bb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cd624055a97c96719b925cb11e6a08e" id="r_a0cd624055a97c96719b925cb11e6a08e"><td class="memTemplParams" colspan="2"><a id="a0cd624055a97c96719b925cb11e6a08e" name="a0cd624055a97c96719b925cb11e6a08e"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0cd624055a97c96719b925cb11e6a08e"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Swap</b> (T &amp;ref_f1, T &amp;ref_f2)</td></tr>
<tr class="memdesc:a0cd624055a97c96719b925cb11e6a08e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps the values in the two variables f1 and f2. <br /></td></tr>
<tr class="separator:a0cd624055a97c96719b925cb11e6a08e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70aea4554d1be096b314db9f10c9f1fc" id="r_a70aea4554d1be096b314db9f10c9f1fc"><td class="memTemplParams" colspan="2"><a id="a70aea4554d1be096b314db9f10c9f1fc" name="a70aea4554d1be096b314db9f10c9f1fc"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a70aea4554d1be096b314db9f10c9f1fc"><td class="memTemplItemLeft" align="right" valign="top">EZ_FORCE_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Lerp</b> (T f1, T f2, float fFactor)</td></tr>
<tr class="memdesc:a70aea4554d1be096b314db9f10c9f1fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:a70aea4554d1be096b314db9f10c9f1fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11bfb79243b86b575e2f60f7c2eba209" id="r_a11bfb79243b86b575e2f60f7c2eba209"><td class="memTemplParams" colspan="2"><a id="a11bfb79243b86b575e2f60f7c2eba209" name="a11bfb79243b86b575e2f60f7c2eba209"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a11bfb79243b86b575e2f60f7c2eba209"><td class="memTemplItemLeft" align="right" valign="top">EZ_FORCE_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Lerp</b> (T f1, T f2, double fFactor)</td></tr>
<tr class="memdesc:a11bfb79243b86b575e2f60f7c2eba209"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:a11bfb79243b86b575e2f60f7c2eba209"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55c3b33ae909398ee644734ae4ba6b04" id="r_a55c3b33ae909398ee644734ae4ba6b04"><td class="memTemplParams" colspan="2"><a id="a55c3b33ae909398ee644734ae4ba6b04" name="a55c3b33ae909398ee644734ae4ba6b04"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a55c3b33ae909398ee644734ae4ba6b04"><td class="memTemplItemLeft" align="right" valign="top">EZ_FORCE_INLINE constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Unlerp</b> (T fMin, T fMax, T fValue)</td></tr>
<tr class="memdesc:a55c3b33ae909398ee644734ae4ba6b04"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the interpolation factor such that Lerp(fMin, fMax, factor) == fValue. <br /></td></tr>
<tr class="separator:a55c3b33ae909398ee644734ae4ba6b04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3f7bcae4b9569e58e64417ba8b622f5" id="r_ac3f7bcae4b9569e58e64417ba8b622f5"><td class="memTemplParams" colspan="2"><a id="ac3f7bcae4b9569e58e64417ba8b622f5" name="ac3f7bcae4b9569e58e64417ba8b622f5"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac3f7bcae4b9569e58e64417ba8b622f5"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_FORCE_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Step</b> (T value, T edge)</td></tr>
<tr class="memdesc:ac3f7bcae4b9569e58e64417ba8b622f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 0, if value &lt; edge, and 1, if value &gt;= edge. <br /></td></tr>
<tr class="separator:ac3f7bcae4b9569e58e64417ba8b622f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a194e5582f9a01688fc03e4620e231d29" id="r_a194e5582f9a01688fc03e4620e231d29"><td class="memItemLeft" align="right" valign="top"><a id="a194e5582f9a01688fc03e4620e231d29" name="a194e5582f9a01688fc03e4620e231d29"></a>
constexpr EZ_FORCE_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsPowerOf2</b> (ezInt32 value)</td></tr>
<tr class="memdesc:a194e5582f9a01688fc03e4620e231d29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there exists some x with 2^x == value. <br /></td></tr>
<tr class="separator:a194e5582f9a01688fc03e4620e231d29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa96f5ff328740dfa93f287fbf4735f6e" id="r_aa96f5ff328740dfa93f287fbf4735f6e"><td class="memItemLeft" align="right" valign="top"><a id="aa96f5ff328740dfa93f287fbf4735f6e" name="aa96f5ff328740dfa93f287fbf4735f6e"></a>
constexpr EZ_FORCE_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsPowerOf2</b> (ezUInt32 value)</td></tr>
<tr class="memdesc:aa96f5ff328740dfa93f287fbf4735f6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there exists some x with 2^x == value. <br /></td></tr>
<tr class="separator:aa96f5ff328740dfa93f287fbf4735f6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b4f345bc2de80a09539e71e2a560b5e" id="r_a3b4f345bc2de80a09539e71e2a560b5e"><td class="memItemLeft" align="right" valign="top"><a id="a3b4f345bc2de80a09539e71e2a560b5e" name="a3b4f345bc2de80a09539e71e2a560b5e"></a>
constexpr EZ_FORCE_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsPowerOf2</b> (ezUInt64 value)</td></tr>
<tr class="memdesc:a3b4f345bc2de80a09539e71e2a560b5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there exists some x with 2^x == value. <br /></td></tr>
<tr class="separator:a3b4f345bc2de80a09539e71e2a560b5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa15fef5dd09bffb82b0d3ce5d7de3255" id="r_aa15fef5dd09bffb82b0d3ce5d7de3255"><td class="memTemplParams" colspan="2"><a id="aa15fef5dd09bffb82b0d3ce5d7de3255" name="aa15fef5dd09bffb82b0d3ce5d7de3255"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:aa15fef5dd09bffb82b0d3ce5d7de3255"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsEqual</b> (Type lhs, Type rhs, Type fEpsilon)</td></tr>
<tr class="memdesc:aa15fef5dd09bffb82b0d3ce5d7de3255"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks, whether fValue is in the range [fDesired - fMaxImprecision; fDesired + fMaxImprecision]. <br /></td></tr>
<tr class="separator:aa15fef5dd09bffb82b0d3ce5d7de3255"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae076df9c39820ea636c580267e2e379a" id="r_ae076df9c39820ea636c580267e2e379a"><td class="memTemplParams" colspan="2"><a id="ae076df9c39820ea636c580267e2e379a" name="ae076df9c39820ea636c580267e2e379a"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae076df9c39820ea636c580267e2e379a"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsInRange</b> (T value, T minVal, T maxVal)</td></tr>
<tr class="memdesc:ae076df9c39820ea636c580267e2e379a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the value of the first parameter lies between the value of the second and third. <br /></td></tr>
<tr class="separator:ae076df9c39820ea636c580267e2e379a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0c686588a98fa8c07722fc48f1ffd7f" id="r_ad0c686588a98fa8c07722fc48f1ffd7f"><td class="memTemplParams" colspan="2"><a id="ad0c686588a98fa8c07722fc48f1ffd7f" name="ad0c686588a98fa8c07722fc48f1ffd7f"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ad0c686588a98fa8c07722fc48f1ffd7f"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsZero</b> (Type f, Type fEpsilon)</td></tr>
<tr class="memdesc:ad0c686588a98fa8c07722fc48f1ffd7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given number is close to zero. <br /></td></tr>
<tr class="separator:ad0c686588a98fa8c07722fc48f1ffd7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89a5cb364bf8bf76155b42b477e2540a" id="r_a89a5cb364bf8bf76155b42b477e2540a"><td class="memTemplParams" colspan="2"><a id="a89a5cb364bf8bf76155b42b477e2540a" name="a89a5cb364bf8bf76155b42b477e2540a"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a89a5cb364bf8bf76155b42b477e2540a"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Trunc</b> (Type f)</td></tr>
<tr class="memdesc:a89a5cb364bf8bf76155b42b477e2540a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the integer-part of f (removes the fraction). <br /></td></tr>
<tr class="separator:a89a5cb364bf8bf76155b42b477e2540a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6648cbd915168c7e2b5d4a922ee1974" id="r_ab6648cbd915168c7e2b5d4a922ee1974"><td class="memTemplParams" colspan="2"><a id="ab6648cbd915168c7e2b5d4a922ee1974" name="ab6648cbd915168c7e2b5d4a922ee1974"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ab6648cbd915168c7e2b5d4a922ee1974"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Fraction</b> (Type f)</td></tr>
<tr class="memdesc:ab6648cbd915168c7e2b5d4a922ee1974"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the fraction-part of f. <br /></td></tr>
<tr class="separator:ab6648cbd915168c7e2b5d4a922ee1974"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5e77037bdf9e792c81afa239f70ad7a" id="r_ae5e77037bdf9e792c81afa239f70ad7a"><td class="memTemplParams" colspan="2"><a id="ae5e77037bdf9e792c81afa239f70ad7a" name="ae5e77037bdf9e792c81afa239f70ad7a"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ae5e77037bdf9e792c81afa239f70ad7a"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SmoothStep</b> (Type value, Type edge1, Type edge2)</td></tr>
<tr class="memdesc:ae5e77037bdf9e792c81afa239f70ad7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 0, if value is &lt;= edge1, 1 if value &gt;= edge2 and the hermite interpolation in between. <br /></td></tr>
<tr class="separator:ae5e77037bdf9e792c81afa239f70ad7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bdb5031c0d3e896ecb0f5f959b22c01" id="r_a9bdb5031c0d3e896ecb0f5f959b22c01"><td class="memTemplParams" colspan="2"><a id="a9bdb5031c0d3e896ecb0f5f959b22c01" name="a9bdb5031c0d3e896ecb0f5f959b22c01"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a9bdb5031c0d3e896ecb0f5f959b22c01"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SmootherStep</b> (Type value, Type edge1, Type edge2)</td></tr>
<tr class="memdesc:a9bdb5031c0d3e896ecb0f5f959b22c01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 0, if value is &lt;= edge1, 1 if value &gt;= edge2 and the second order hermite interpolation in between. <br /></td></tr>
<tr class="separator:a9bdb5031c0d3e896ecb0f5f959b22c01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18032e3efb5e0895ac6f9c4cb417e8a2" id="r_a18032e3efb5e0895ac6f9c4cb417e8a2"><td class="memTemplParams" colspan="2"><a id="a18032e3efb5e0895ac6f9c4cb417e8a2" name="a18032e3efb5e0895ac6f9c4cb417e8a2"></a>
template&lt;ezUInt32 NumBits&gt; </td></tr>
<tr class="memitem:a18032e3efb5e0895ac6f9c4cb417e8a2"><td class="memTemplItemLeft" align="right" valign="top">ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ColorFloatToUnsignedInt</b> (float value)</td></tr>
<tr class="memdesc:a18032e3efb5e0895ac6f9c4cb417e8a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [0;1] range to unsigned int with the given number of bits, with proper rounding. <br /></td></tr>
<tr class="separator:a18032e3efb5e0895ac6f9c4cb417e8a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a457021bab9536d2908c2a0e3cafed9ac" id="r_a457021bab9536d2908c2a0e3cafed9ac"><td class="memItemLeft" align="right" valign="top"><a id="a457021bab9536d2908c2a0e3cafed9ac" name="a457021bab9536d2908c2a0e3cafed9ac"></a>
EZ_ALWAYS_INLINE ezUInt8&#160;</td><td class="memItemRight" valign="bottom"><b>ColorFloatToByte</b> (float value)</td></tr>
<tr class="memdesc:a457021bab9536d2908c2a0e3cafed9ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [0;1] range to unsigned byte [0;255] range, with proper rounding. <br /></td></tr>
<tr class="separator:a457021bab9536d2908c2a0e3cafed9ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30569f90ca9871c3f39ab6090bfa5d1e" id="r_a30569f90ca9871c3f39ab6090bfa5d1e"><td class="memItemLeft" align="right" valign="top"><a id="a30569f90ca9871c3f39ab6090bfa5d1e" name="a30569f90ca9871c3f39ab6090bfa5d1e"></a>
EZ_ALWAYS_INLINE ezUInt16&#160;</td><td class="memItemRight" valign="bottom"><b>ColorFloatToShort</b> (float value)</td></tr>
<tr class="memdesc:a30569f90ca9871c3f39ab6090bfa5d1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [0;1] range to unsigned short [0;65535] range, with proper rounding. <br /></td></tr>
<tr class="separator:a30569f90ca9871c3f39ab6090bfa5d1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a156f52cf5bf3a533b7a3525aaf0f4f7a" id="r_a156f52cf5bf3a533b7a3525aaf0f4f7a"><td class="memItemLeft" align="right" valign="top"><a id="a156f52cf5bf3a533b7a3525aaf0f4f7a" name="a156f52cf5bf3a533b7a3525aaf0f4f7a"></a>
ezInt8&#160;</td><td class="memItemRight" valign="bottom"><b>ColorFloatToSignedByte</b> (float value)</td></tr>
<tr class="memdesc:a156f52cf5bf3a533b7a3525aaf0f4f7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [-1;1] range to signed byte [-127;127] range, with proper rounding. <br /></td></tr>
<tr class="separator:a156f52cf5bf3a533b7a3525aaf0f4f7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad79cf3137df7949cc1ab78d3c72f785b" id="r_ad79cf3137df7949cc1ab78d3c72f785b"><td class="memItemLeft" align="right" valign="top"><a id="ad79cf3137df7949cc1ab78d3c72f785b" name="ad79cf3137df7949cc1ab78d3c72f785b"></a>
ezInt16&#160;</td><td class="memItemRight" valign="bottom"><b>ColorFloatToSignedShort</b> (float value)</td></tr>
<tr class="memdesc:ad79cf3137df7949cc1ab78d3c72f785b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [-1;1] range to signed short [-32767;32767] range, with proper rounding. <br /></td></tr>
<tr class="separator:ad79cf3137df7949cc1ab78d3c72f785b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cd11d5080a5fa2de5dcb370c52b3df1" id="r_a7cd11d5080a5fa2de5dcb370c52b3df1"><td class="memItemLeft" align="right" valign="top"><a id="a7cd11d5080a5fa2de5dcb370c52b3df1" name="a7cd11d5080a5fa2de5dcb370c52b3df1"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><b>ColorByteToFloat</b> (ezUInt8 value)</td></tr>
<tr class="memdesc:a7cd11d5080a5fa2de5dcb370c52b3df1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from unsigned byte [0;255] range to float [0;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:a7cd11d5080a5fa2de5dcb370c52b3df1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a900c21bd68b35b424f5b9062dc8d01dc" id="r_a900c21bd68b35b424f5b9062dc8d01dc"><td class="memItemLeft" align="right" valign="top"><a id="a900c21bd68b35b424f5b9062dc8d01dc" name="a900c21bd68b35b424f5b9062dc8d01dc"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><b>ColorShortToFloat</b> (ezUInt16 value)</td></tr>
<tr class="memdesc:a900c21bd68b35b424f5b9062dc8d01dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from unsigned short [0;65535] range to float [0;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:a900c21bd68b35b424f5b9062dc8d01dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a808d5693a74e2431e20be639af567135" id="r_a808d5693a74e2431e20be639af567135"><td class="memItemLeft" align="right" valign="top"><a id="a808d5693a74e2431e20be639af567135" name="a808d5693a74e2431e20be639af567135"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><b>ColorSignedByteToFloat</b> (ezInt8 value)</td></tr>
<tr class="memdesc:a808d5693a74e2431e20be639af567135"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from signed byte [-128;127] range to float [-1;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:a808d5693a74e2431e20be639af567135"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5542431bf5124093dcea8d21cff1df7b" id="r_a5542431bf5124093dcea8d21cff1df7b"><td class="memItemLeft" align="right" valign="top"><a id="a5542431bf5124093dcea8d21cff1df7b" name="a5542431bf5124093dcea8d21cff1df7b"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><b>ColorSignedShortToFloat</b> (ezInt16 value)</td></tr>
<tr class="memdesc:a5542431bf5124093dcea8d21cff1df7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from signed short [-32768;32767] range to float [0;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:a5542431bf5124093dcea8d21cff1df7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe0f677cabbc6c19aa2dfdc514e21780" id="r_abe0f677cabbc6c19aa2dfdc514e21780"><td class="memTemplParams" colspan="2"><a id="abe0f677cabbc6c19aa2dfdc514e21780" name="abe0f677cabbc6c19aa2dfdc514e21780"></a>
template&lt;typename T , typename T2 &gt; </td></tr>
<tr class="memitem:abe0f677cabbc6c19aa2dfdc514e21780"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EvaluateBezierCurve</b> (T2 t, const T &amp;startPoint, const T &amp;controlPoint1, const T &amp;controlPoint2, const T &amp;endPoint)</td></tr>
<tr class="memdesc:abe0f677cabbc6c19aa2dfdc514e21780"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluates the cubic spline defined by four control points at time <em>t</em> and returns the interpolated result. Can be used with T as float, vec2, vec3 or vec4. <br /></td></tr>
<tr class="separator:abe0f677cabbc6c19aa2dfdc514e21780"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf4c8d71fab65e51a733dc22534fbd75" id="r_abf4c8d71fab65e51a733dc22534fbd75"><td class="memItemLeft" align="right" valign="top"><a id="abf4c8d71fab65e51a733dc22534fbd75" name="abf4c8d71fab65e51a733dc22534fbd75"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsFinite</b> (double value)</td></tr>
<tr class="separator:abf4c8d71fab65e51a733dc22534fbd75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6622a45e949dcf37a93748fc6962270c" id="r_a6622a45e949dcf37a93748fc6962270c"><td class="memItemLeft" align="right" valign="top"><a id="a6622a45e949dcf37a93748fc6962270c" name="a6622a45e949dcf37a93748fc6962270c"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsNaN</b> (double value)</td></tr>
<tr class="separator:a6622a45e949dcf37a93748fc6962270c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e63d05cb1b3040437b8789037927926" id="r_a1e63d05cb1b3040437b8789037927926"><td class="memItemLeft" align="right" valign="top"><a id="a1e63d05cb1b3040437b8789037927926" name="a1e63d05cb1b3040437b8789037927926"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Floor</b> (double f)</td></tr>
<tr class="separator:a1e63d05cb1b3040437b8789037927926"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0914dcddcb187731f738c303c6534c5b" id="r_a0914dcddcb187731f738c303c6534c5b"><td class="memItemLeft" align="right" valign="top"><a id="a0914dcddcb187731f738c303c6534c5b" name="a0914dcddcb187731f738c303c6534c5b"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Ceil</b> (double f)</td></tr>
<tr class="separator:a0914dcddcb187731f738c303c6534c5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3eaa04e59a8c066cc25b1966f760f08d" id="r_a3eaa04e59a8c066cc25b1966f760f08d"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a3eaa04e59a8c066cc25b1966f760f08d">Round</a> (double f)</td></tr>
<tr class="memdesc:a3eaa04e59a8c066cc25b1966f760f08d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the next integer.  <br /></td></tr>
<tr class="separator:a3eaa04e59a8c066cc25b1966f760f08d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c2327035769c42fcb8d220fa92a55d7" id="r_a7c2327035769c42fcb8d220fa92a55d7"><td class="memItemLeft" align="right" valign="top"><a id="a7c2327035769c42fcb8d220fa92a55d7" name="a7c2327035769c42fcb8d220fa92a55d7"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>RoundDown</b> (double f, double fMultiple)</td></tr>
<tr class="memdesc:a7c2327035769c42fcb8d220fa92a55d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is smaller than f. <br /></td></tr>
<tr class="separator:a7c2327035769c42fcb8d220fa92a55d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40900843c7a836171770b66bf233c4a4" id="r_a40900843c7a836171770b66bf233c4a4"><td class="memItemLeft" align="right" valign="top"><a id="a40900843c7a836171770b66bf233c4a4" name="a40900843c7a836171770b66bf233c4a4"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>RoundUp</b> (double f, double fMultiple)</td></tr>
<tr class="memdesc:a40900843c7a836171770b66bf233c4a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is larger than f. <br /></td></tr>
<tr class="separator:a40900843c7a836171770b66bf233c4a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0722f85d43ba80c523681eb5107b54d9" id="r_a0722f85d43ba80c523681eb5107b54d9"><td class="memItemLeft" align="right" valign="top"><a id="a0722f85d43ba80c523681eb5107b54d9" name="a0722f85d43ba80c523681eb5107b54d9"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>RoundToMultiple</b> (double f, double fMultiple)</td></tr>
<tr class="memdesc:a0722f85d43ba80c523681eb5107b54d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the closest value of multiple. <br /></td></tr>
<tr class="separator:a0722f85d43ba80c523681eb5107b54d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6a0ef509e9e11a5d9e350ff6166906e" id="r_ad6a0ef509e9e11a5d9e350ff6166906e"><td class="memItemLeft" align="right" valign="top"><a id="ad6a0ef509e9e11a5d9e350ff6166906e" name="ad6a0ef509e9e11a5d9e350ff6166906e"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Exp</b> (double f)</td></tr>
<tr class="separator:ad6a0ef509e9e11a5d9e350ff6166906e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4da7a857e17e7ef38330e2f01c5b56f1" id="r_a4da7a857e17e7ef38330e2f01c5b56f1"><td class="memItemLeft" align="right" valign="top"><a id="a4da7a857e17e7ef38330e2f01c5b56f1" name="a4da7a857e17e7ef38330e2f01c5b56f1"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Ln</b> (double f)</td></tr>
<tr class="separator:a4da7a857e17e7ef38330e2f01c5b56f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa026a0d5834fb5c1159fbd7e92be573" id="r_aaa026a0d5834fb5c1159fbd7e92be573"><td class="memItemLeft" align="right" valign="top"><a id="aaa026a0d5834fb5c1159fbd7e92be573" name="aaa026a0d5834fb5c1159fbd7e92be573"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Log2</b> (double f)</td></tr>
<tr class="separator:aaa026a0d5834fb5c1159fbd7e92be573"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6be5c0406583c4ce1687b2cc9920758a" id="r_a6be5c0406583c4ce1687b2cc9920758a"><td class="memItemLeft" align="right" valign="top"><a id="a6be5c0406583c4ce1687b2cc9920758a" name="a6be5c0406583c4ce1687b2cc9920758a"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Log10</b> (double f)</td></tr>
<tr class="separator:a6be5c0406583c4ce1687b2cc9920758a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd80fba992c515b42a7e1de5d976984a" id="r_afd80fba992c515b42a7e1de5d976984a"><td class="memItemLeft" align="right" valign="top"><a id="afd80fba992c515b42a7e1de5d976984a" name="afd80fba992c515b42a7e1de5d976984a"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Log</b> (double fBase, double f)</td></tr>
<tr class="separator:afd80fba992c515b42a7e1de5d976984a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2f8614e753667ee54f81059c8f622f4" id="r_ad2f8614e753667ee54f81059c8f622f4"><td class="memItemLeft" align="right" valign="top"><a id="ad2f8614e753667ee54f81059c8f622f4" name="ad2f8614e753667ee54f81059c8f622f4"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Pow2</b> (double f)</td></tr>
<tr class="separator:ad2f8614e753667ee54f81059c8f622f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94a6e7e817fe9a24c662cd7214a58bc4" id="r_a94a6e7e817fe9a24c662cd7214a58bc4"><td class="memItemLeft" align="right" valign="top"><a id="a94a6e7e817fe9a24c662cd7214a58bc4" name="a94a6e7e817fe9a24c662cd7214a58bc4"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Pow</b> (double fBase, double fExp)</td></tr>
<tr class="separator:a94a6e7e817fe9a24c662cd7214a58bc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51ec53ec077eafbbb21d1c81e0cc8228" id="r_a51ec53ec077eafbbb21d1c81e0cc8228"><td class="memItemLeft" align="right" valign="top"><a id="a51ec53ec077eafbbb21d1c81e0cc8228" name="a51ec53ec077eafbbb21d1c81e0cc8228"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Root</b> (double f, double fNthRoot)</td></tr>
<tr class="separator:a51ec53ec077eafbbb21d1c81e0cc8228"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f4e38e30c7914d11bcc85b0a4b1c09a" id="r_a7f4e38e30c7914d11bcc85b0a4b1c09a"><td class="memItemLeft" align="right" valign="top"><a id="a7f4e38e30c7914d11bcc85b0a4b1c09a" name="a7f4e38e30c7914d11bcc85b0a4b1c09a"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Sqrt</b> (double f)</td></tr>
<tr class="memdesc:a7f4e38e30c7914d11bcc85b0a4b1c09a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the square root of f. <br /></td></tr>
<tr class="separator:a7f4e38e30c7914d11bcc85b0a4b1c09a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a836d8cdcc38eea643d9442df6d4fd3c0" id="r_a836d8cdcc38eea643d9442df6d4fd3c0"><td class="memItemLeft" align="right" valign="top"><a id="a836d8cdcc38eea643d9442df6d4fd3c0" name="a836d8cdcc38eea643d9442df6d4fd3c0"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Mod</b> (double f, double fDiv)</td></tr>
<tr class="memdesc:a836d8cdcc38eea643d9442df6d4fd3c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns "value mod div" for doubles. This also works with negative numbers, both for value and for div. <br /></td></tr>
<tr class="separator:a836d8cdcc38eea643d9442df6d4fd3c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95594529ec436b92437de3d95b7a14a5" id="r_a95594529ec436b92437de3d95b7a14a5"><td class="memItemLeft" align="right" valign="top"><a id="a95594529ec436b92437de3d95b7a14a5" name="a95594529ec436b92437de3d95b7a14a5"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsFinite</b> (float value)</td></tr>
<tr class="separator:a95594529ec436b92437de3d95b7a14a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae25f1ac32d79d0b67c375b0140adabd5" id="r_ae25f1ac32d79d0b67c375b0140adabd5"><td class="memItemLeft" align="right" valign="top"><a id="ae25f1ac32d79d0b67c375b0140adabd5" name="ae25f1ac32d79d0b67c375b0140adabd5"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsNaN</b> (float value)</td></tr>
<tr class="separator:ae25f1ac32d79d0b67c375b0140adabd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f1f04277a5268f8368143df99fcb58d" id="r_a4f1f04277a5268f8368143df99fcb58d"><td class="memItemLeft" align="right" valign="top"><a id="a4f1f04277a5268f8368143df99fcb58d" name="a4f1f04277a5268f8368143df99fcb58d"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Floor</b> (float f)</td></tr>
<tr class="memdesc:a4f1f04277a5268f8368143df99fcb58d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next smaller integer, closest to f. Also the SMALLER value, if f is negative. <br /></td></tr>
<tr class="separator:a4f1f04277a5268f8368143df99fcb58d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9110f05274235ec1582030e30f5b66ab" id="r_a9110f05274235ec1582030e30f5b66ab"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a9110f05274235ec1582030e30f5b66ab">FloorToInt</a> (float f)</td></tr>
<tr class="memdesc:a9110f05274235ec1582030e30f5b66ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next smaller integer, closest to f. Also the SMALLER value, if f is negative.  <br /></td></tr>
<tr class="separator:a9110f05274235ec1582030e30f5b66ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69f658b9dc1a50b90df3dce2c41ddbfe" id="r_a69f658b9dc1a50b90df3dce2c41ddbfe"><td class="memItemLeft" align="right" valign="top"><a id="a69f658b9dc1a50b90df3dce2c41ddbfe" name="a69f658b9dc1a50b90df3dce2c41ddbfe"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Ceil</b> (float f)</td></tr>
<tr class="memdesc:a69f658b9dc1a50b90df3dce2c41ddbfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next higher integer, closest to f. Also the HIGHER value, if f is negative. <br /></td></tr>
<tr class="separator:a69f658b9dc1a50b90df3dce2c41ddbfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad53c88db688345074c3363124b1e770c" id="r_ad53c88db688345074c3363124b1e770c"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ad53c88db688345074c3363124b1e770c">CeilToInt</a> (float f)</td></tr>
<tr class="memdesc:ad53c88db688345074c3363124b1e770c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next higher integer, closest to f. Also the HIGHER value, if f is negative.  <br /></td></tr>
<tr class="separator:ad53c88db688345074c3363124b1e770c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace725c91daf115ff11418655fcf83f0c" id="r_ace725c91daf115ff11418655fcf83f0c"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ace725c91daf115ff11418655fcf83f0c">Round</a> (float f)</td></tr>
<tr class="memdesc:ace725c91daf115ff11418655fcf83f0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the next integer.  <br /></td></tr>
<tr class="separator:ace725c91daf115ff11418655fcf83f0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a877f8338e5a9e70ca0ab22017cff9d12" id="r_a877f8338e5a9e70ca0ab22017cff9d12"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a877f8338e5a9e70ca0ab22017cff9d12">RoundToInt</a> (float f)</td></tr>
<tr class="memdesc:a877f8338e5a9e70ca0ab22017cff9d12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the next integer.  <br /></td></tr>
<tr class="separator:a877f8338e5a9e70ca0ab22017cff9d12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d0896fa18391bd771afac0a9af31ad2" id="r_a0d0896fa18391bd771afac0a9af31ad2"><td class="memItemLeft" align="right" valign="top"><a id="a0d0896fa18391bd771afac0a9af31ad2" name="a0d0896fa18391bd771afac0a9af31ad2"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>RoundToMultiple</b> (float f, float fMultiple)</td></tr>
<tr class="memdesc:a0d0896fa18391bd771afac0a9af31ad2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the closest value of multiple. <br /></td></tr>
<tr class="separator:a0d0896fa18391bd771afac0a9af31ad2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa37de9214425b8b8e412050ab645c51a" id="r_aa37de9214425b8b8e412050ab645c51a"><td class="memItemLeft" align="right" valign="top"><a id="aa37de9214425b8b8e412050ab645c51a" name="aa37de9214425b8b8e412050ab645c51a"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>RoundDown</b> (float f, float fMultiple)</td></tr>
<tr class="memdesc:aa37de9214425b8b8e412050ab645c51a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is smaller than f. <br /></td></tr>
<tr class="separator:aa37de9214425b8b8e412050ab645c51a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67a9c8adeef5f887b65a4056f813867f" id="r_a67a9c8adeef5f887b65a4056f813867f"><td class="memItemLeft" align="right" valign="top"><a id="a67a9c8adeef5f887b65a4056f813867f" name="a67a9c8adeef5f887b65a4056f813867f"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>RoundUp</b> (float f, float fMultiple)</td></tr>
<tr class="memdesc:a67a9c8adeef5f887b65a4056f813867f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is larger than f. <br /></td></tr>
<tr class="separator:a67a9c8adeef5f887b65a4056f813867f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05995060e61c0946e14619b45cd1adef" id="r_a05995060e61c0946e14619b45cd1adef"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a05995060e61c0946e14619b45cd1adef">Sin</a> (<a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> a)</td></tr>
<tr class="memdesc:a05995060e61c0946e14619b45cd1adef"><td class="mdescLeft">&#160;</td><td class="mdescRight">***** Trigonometric Functions *****  <br /></td></tr>
<tr class="separator:a05995060e61c0946e14619b45cd1adef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40cf3173aac40e0e462c57728e9410ab" id="r_a40cf3173aac40e0e462c57728e9410ab"><td class="memItemLeft" align="right" valign="top"><a id="a40cf3173aac40e0e462c57728e9410ab" name="a40cf3173aac40e0e462c57728e9410ab"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Cos</b> (<a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> a)</td></tr>
<tr class="memdesc:a40cf3173aac40e0e462c57728e9410ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes an angle, returns its cosine. <br /></td></tr>
<tr class="separator:a40cf3173aac40e0e462c57728e9410ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade2e0a31251abf869a932b0d038a410b" id="r_ade2e0a31251abf869a932b0d038a410b"><td class="memItemLeft" align="right" valign="top"><a id="ade2e0a31251abf869a932b0d038a410b" name="ade2e0a31251abf869a932b0d038a410b"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Tan</b> (<a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> a)</td></tr>
<tr class="memdesc:ade2e0a31251abf869a932b0d038a410b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes an angle, returns its tangent. <br /></td></tr>
<tr class="separator:ade2e0a31251abf869a932b0d038a410b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40d1040acdbbf0e452767d15d1c7a564" id="r_a40d1040acdbbf0e452767d15d1c7a564"><td class="memItemLeft" align="right" valign="top"><a id="a40d1040acdbbf0e452767d15d1c7a564" name="a40d1040acdbbf0e452767d15d1c7a564"></a>
EZ_ALWAYS_INLINE <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>ASin</b> (float f)</td></tr>
<tr class="memdesc:a40d1040acdbbf0e452767d15d1c7a564"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus sinus of f. <br /></td></tr>
<tr class="separator:a40d1040acdbbf0e452767d15d1c7a564"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcbf5132d5cbfc7070cd6d3086709ceb" id="r_afcbf5132d5cbfc7070cd6d3086709ceb"><td class="memItemLeft" align="right" valign="top"><a id="afcbf5132d5cbfc7070cd6d3086709ceb" name="afcbf5132d5cbfc7070cd6d3086709ceb"></a>
EZ_ALWAYS_INLINE <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>ACos</b> (float f)</td></tr>
<tr class="memdesc:afcbf5132d5cbfc7070cd6d3086709ceb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus cosinus of f. <br /></td></tr>
<tr class="separator:afcbf5132d5cbfc7070cd6d3086709ceb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc8b4b9979785105fb73b9f7f8d58c74" id="r_afc8b4b9979785105fb73b9f7f8d58c74"><td class="memItemLeft" align="right" valign="top"><a id="afc8b4b9979785105fb73b9f7f8d58c74" name="afc8b4b9979785105fb73b9f7f8d58c74"></a>
EZ_ALWAYS_INLINE <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>ATan</b> (float f)</td></tr>
<tr class="memdesc:afc8b4b9979785105fb73b9f7f8d58c74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus tangent of f. <br /></td></tr>
<tr class="separator:afc8b4b9979785105fb73b9f7f8d58c74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41072c694c87f95f34ab5c13b562fcfe" id="r_a41072c694c87f95f34ab5c13b562fcfe"><td class="memItemLeft" align="right" valign="top"><a id="a41072c694c87f95f34ab5c13b562fcfe" name="a41072c694c87f95f34ab5c13b562fcfe"></a>
EZ_ALWAYS_INLINE <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>ATan2</b> (float y, float x)</td></tr>
<tr class="memdesc:a41072c694c87f95f34ab5c13b562fcfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the atan2 of x and y. <br /></td></tr>
<tr class="separator:a41072c694c87f95f34ab5c13b562fcfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93c351504ab4f4235860c9d7f2d6171f" id="r_a93c351504ab4f4235860c9d7f2d6171f"><td class="memItemLeft" align="right" valign="top"><a id="a93c351504ab4f4235860c9d7f2d6171f" name="a93c351504ab4f4235860c9d7f2d6171f"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Exp</b> (float f)</td></tr>
<tr class="memdesc:a93c351504ab4f4235860c9d7f2d6171f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns e^f. <br /></td></tr>
<tr class="separator:a93c351504ab4f4235860c9d7f2d6171f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23e1fdae842b9d178197e896c72e34f2" id="r_a23e1fdae842b9d178197e896c72e34f2"><td class="memItemLeft" align="right" valign="top"><a id="a23e1fdae842b9d178197e896c72e34f2" name="a23e1fdae842b9d178197e896c72e34f2"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Ln</b> (float f)</td></tr>
<tr class="memdesc:a23e1fdae842b9d178197e896c72e34f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the logarithmus naturalis of f. <br /></td></tr>
<tr class="separator:a23e1fdae842b9d178197e896c72e34f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebc3ad877b97ba2123615bf85aec9c6a" id="r_aebc3ad877b97ba2123615bf85aec9c6a"><td class="memItemLeft" align="right" valign="top"><a id="aebc3ad877b97ba2123615bf85aec9c6a" name="aebc3ad877b97ba2123615bf85aec9c6a"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Log2</b> (float f)</td></tr>
<tr class="memdesc:aebc3ad877b97ba2123615bf85aec9c6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base 2. <br /></td></tr>
<tr class="separator:aebc3ad877b97ba2123615bf85aec9c6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8fdca7daed33fbd76b910b0e55694e5" id="r_ae8fdca7daed33fbd76b910b0e55694e5"><td class="memItemLeft" align="right" valign="top"><a id="ae8fdca7daed33fbd76b910b0e55694e5" name="ae8fdca7daed33fbd76b910b0e55694e5"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Log10</b> (float f)</td></tr>
<tr class="memdesc:ae8fdca7daed33fbd76b910b0e55694e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base 10. <br /></td></tr>
<tr class="separator:ae8fdca7daed33fbd76b910b0e55694e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab28c06a7b41b3a10471800114245ecaa" id="r_ab28c06a7b41b3a10471800114245ecaa"><td class="memItemLeft" align="right" valign="top"><a id="ab28c06a7b41b3a10471800114245ecaa" name="ab28c06a7b41b3a10471800114245ecaa"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Log</b> (float fBase, float f)</td></tr>
<tr class="memdesc:ab28c06a7b41b3a10471800114245ecaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base fBase. <br /></td></tr>
<tr class="separator:ab28c06a7b41b3a10471800114245ecaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a764946f655a1beee0f608ceaec62c34a" id="r_a764946f655a1beee0f608ceaec62c34a"><td class="memItemLeft" align="right" valign="top"><a id="a764946f655a1beee0f608ceaec62c34a" name="a764946f655a1beee0f608ceaec62c34a"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Pow2</b> (float f)</td></tr>
<tr class="memdesc:a764946f655a1beee0f608ceaec62c34a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 2^f. <br /></td></tr>
<tr class="separator:a764946f655a1beee0f608ceaec62c34a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95ff8f3c62d49c17356695c4bd8ecca7" id="r_a95ff8f3c62d49c17356695c4bd8ecca7"><td class="memItemLeft" align="right" valign="top"><a id="a95ff8f3c62d49c17356695c4bd8ecca7" name="a95ff8f3c62d49c17356695c4bd8ecca7"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Pow</b> (float fBase, float fExp)</td></tr>
<tr class="memdesc:a95ff8f3c62d49c17356695c4bd8ecca7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns base^exp. <br /></td></tr>
<tr class="separator:a95ff8f3c62d49c17356695c4bd8ecca7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c67fafdb07e8d738b3b3e5cf7e0cf55" id="r_a1c67fafdb07e8d738b3b3e5cf7e0cf55"><td class="memItemLeft" align="right" valign="top"><a id="a1c67fafdb07e8d738b3b3e5cf7e0cf55" name="a1c67fafdb07e8d738b3b3e5cf7e0cf55"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Root</b> (float f, float fNthRoot)</td></tr>
<tr class="memdesc:a1c67fafdb07e8d738b3b3e5cf7e0cf55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the n-th root of f. <br /></td></tr>
<tr class="separator:a1c67fafdb07e8d738b3b3e5cf7e0cf55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2218b9e1098791893b5944d217c72e1" id="r_ad2218b9e1098791893b5944d217c72e1"><td class="memItemLeft" align="right" valign="top"><a id="ad2218b9e1098791893b5944d217c72e1" name="ad2218b9e1098791893b5944d217c72e1"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Sqrt</b> (float f)</td></tr>
<tr class="memdesc:ad2218b9e1098791893b5944d217c72e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the square root of f. <br /></td></tr>
<tr class="separator:ad2218b9e1098791893b5944d217c72e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f9702c1b0c654715c3bcd83103b0fb8" id="r_a1f9702c1b0c654715c3bcd83103b0fb8"><td class="memItemLeft" align="right" valign="top"><a id="a1f9702c1b0c654715c3bcd83103b0fb8" name="a1f9702c1b0c654715c3bcd83103b0fb8"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Mod</b> (float value, float fDiv)</td></tr>
<tr class="memdesc:a1f9702c1b0c654715c3bcd83103b0fb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns "value mod div" for floats. This also works with negative numbers, both for value and for div. <br /></td></tr>
<tr class="separator:a1f9702c1b0c654715c3bcd83103b0fb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4fa6a522fe85f2314b3c8f898a607cd" id="r_ad4fa6a522fe85f2314b3c8f898a607cd"><td class="memItemLeft" align="right" valign="top"><a id="ad4fa6a522fe85f2314b3c8f898a607cd" name="ad4fa6a522fe85f2314b3c8f898a607cd"></a>
constexpr EZ_ALWAYS_INLINE ezInt32&#160;</td><td class="memItemRight" valign="bottom"><b>RoundUp</b> (ezInt32 value, ezUInt16 uiMultiple)</td></tr>
<tr class="memdesc:ad4fa6a522fe85f2314b3c8f898a607cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is larger than or equal to value. <br /></td></tr>
<tr class="separator:ad4fa6a522fe85f2314b3c8f898a607cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cce072a81db482e27debcca09abf83d" id="r_a9cce072a81db482e27debcca09abf83d"><td class="memItemLeft" align="right" valign="top"><a id="a9cce072a81db482e27debcca09abf83d" name="a9cce072a81db482e27debcca09abf83d"></a>
constexpr EZ_ALWAYS_INLINE ezInt32&#160;</td><td class="memItemRight" valign="bottom"><b>RoundDown</b> (ezInt32 value, ezUInt16 uiMultiple)</td></tr>
<tr class="memdesc:a9cce072a81db482e27debcca09abf83d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is smaller than or equal to value. <br /></td></tr>
<tr class="separator:a9cce072a81db482e27debcca09abf83d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f8482764c3d5cf7efbc8d5754aef2c3" id="r_a3f8482764c3d5cf7efbc8d5754aef2c3"><td class="memItemLeft" align="right" valign="top"><a id="a3f8482764c3d5cf7efbc8d5754aef2c3" name="a3f8482764c3d5cf7efbc8d5754aef2c3"></a>
constexpr EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>RoundUp</b> (ezUInt32 value, ezUInt16 uiMultiple)</td></tr>
<tr class="memdesc:a3f8482764c3d5cf7efbc8d5754aef2c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is greater than or equal to value. <br /></td></tr>
<tr class="separator:a3f8482764c3d5cf7efbc8d5754aef2c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5af08048d0358f63d159d97513c0f785" id="r_a5af08048d0358f63d159d97513c0f785"><td class="memItemLeft" align="right" valign="top"><a id="a5af08048d0358f63d159d97513c0f785" name="a5af08048d0358f63d159d97513c0f785"></a>
constexpr EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>RoundDown</b> (ezUInt32 value, ezUInt16 uiMultiple)</td></tr>
<tr class="memdesc:a5af08048d0358f63d159d97513c0f785"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is smaller than or equal to value. <br /></td></tr>
<tr class="separator:a5af08048d0358f63d159d97513c0f785"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9d9df58f7044ddb022783ab558211e2" id="r_ad9d9df58f7044ddb022783ab558211e2"><td class="memItemLeft" align="right" valign="top"><a id="ad9d9df58f7044ddb022783ab558211e2" name="ad9d9df58f7044ddb022783ab558211e2"></a>
constexpr EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsOdd</b> (ezInt32 i)</td></tr>
<tr class="memdesc:ad9d9df58f7044ddb022783ab558211e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if i is an odd number. <br /></td></tr>
<tr class="separator:ad9d9df58f7044ddb022783ab558211e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4b97f95f8efcf2bf31dbc6148cf772d" id="r_ab4b97f95f8efcf2bf31dbc6148cf772d"><td class="memItemLeft" align="right" valign="top"><a id="ab4b97f95f8efcf2bf31dbc6148cf772d" name="ab4b97f95f8efcf2bf31dbc6148cf772d"></a>
constexpr EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEven</b> (ezInt32 i)</td></tr>
<tr class="memdesc:ab4b97f95f8efcf2bf31dbc6148cf772d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if i is an even number. <br /></td></tr>
<tr class="separator:ab4b97f95f8efcf2bf31dbc6148cf772d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83324fcba89f4cb6ed5d1612bfaa0244" id="r_a83324fcba89f4cb6ed5d1612bfaa0244"><td class="memItemLeft" align="right" valign="top"><a id="a83324fcba89f4cb6ed5d1612bfaa0244" name="a83324fcba89f4cb6ed5d1612bfaa0244"></a>
EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>Log2i</b> (ezUInt32 uiVal)</td></tr>
<tr class="memdesc:a83324fcba89f4cb6ed5d1612bfaa0244"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the integral logarithm to the base 2, that comes closest to the given integer. <br /></td></tr>
<tr class="separator:a83324fcba89f4cb6ed5d1612bfaa0244"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b0c281597abd9c3b0e57dc4c996ca4e" id="r_a8b0c281597abd9c3b0e57dc4c996ca4e"><td class="memItemLeft" align="right" valign="top"><a id="a8b0c281597abd9c3b0e57dc4c996ca4e" name="a8b0c281597abd9c3b0e57dc4c996ca4e"></a>
constexpr EZ_ALWAYS_INLINE int&#160;</td><td class="memItemRight" valign="bottom"><b>Pow2</b> (int i)</td></tr>
<tr class="separator:a8b0c281597abd9c3b0e57dc4c996ca4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24e0213bceba3e585658c7bf6b4c7160" id="r_a24e0213bceba3e585658c7bf6b4c7160"><td class="memItemLeft" align="right" valign="top"><a id="a24e0213bceba3e585658c7bf6b4c7160" name="a24e0213bceba3e585658c7bf6b4c7160"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><b>Pow</b> (int iBase, int iExp)</td></tr>
<tr class="separator:a24e0213bceba3e585658c7bf6b4c7160"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d4166855c0c8e460109d3b763be9cd7" id="r_a3d4166855c0c8e460109d3b763be9cd7"><td class="memItemLeft" align="right" valign="top"><a id="a3d4166855c0c8e460109d3b763be9cd7" name="a3d4166855c0c8e460109d3b763be9cd7"></a>
constexpr ezInt32&#160;</td><td class="memItemRight" valign="bottom"><b>Pow2</b> (ezInt32 i)</td></tr>
<tr class="memdesc:a3d4166855c0c8e460109d3b763be9cd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 2^f. <br /></td></tr>
<tr class="separator:a3d4166855c0c8e460109d3b763be9cd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c79fc0f95a5bcd70c38ace7970e26f5" id="r_a5c79fc0f95a5bcd70c38ace7970e26f5"><td class="memItemLeft" align="right" valign="top"><a id="a5c79fc0f95a5bcd70c38ace7970e26f5" name="a5c79fc0f95a5bcd70c38ace7970e26f5"></a>
ezInt32&#160;</td><td class="memItemRight" valign="bottom"><b>Pow</b> (ezInt32 iBase, ezInt32 iExp)</td></tr>
<tr class="memdesc:a5c79fc0f95a5bcd70c38ace7970e26f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns base^exp. <br /></td></tr>
<tr class="separator:a5c79fc0f95a5bcd70c38ace7970e26f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8095066778945106aee5b72279e9daf" id="r_ac8095066778945106aee5b72279e9daf"><td class="memTemplParams" colspan="2"><a id="ac8095066778945106aee5b72279e9daf" name="ac8095066778945106aee5b72279e9daf"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac8095066778945106aee5b72279e9daf"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Square</b> (T f)</td></tr>
<tr class="memdesc:ac8095066778945106aee5b72279e9daf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns f * f. <br /></td></tr>
<tr class="separator:ac8095066778945106aee5b72279e9daf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16900708b1339635f7beae1ed10310db" id="r_a16900708b1339635f7beae1ed10310db"><td class="memTemplParams" colspan="2"><a id="a16900708b1339635f7beae1ed10310db" name="a16900708b1339635f7beae1ed10310db"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a16900708b1339635f7beae1ed10310db"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Sign</b> (T f)</td></tr>
<tr class="memdesc:a16900708b1339635f7beae1ed10310db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the sign of f (i.e: -1, 1 or 0) <br /></td></tr>
<tr class="separator:a16900708b1339635f7beae1ed10310db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a028afb5ac41bc6ca67d592ea0090bf06" id="r_a028afb5ac41bc6ca67d592ea0090bf06"><td class="memTemplParams" colspan="2"><a id="a028afb5ac41bc6ca67d592ea0090bf06" name="a028afb5ac41bc6ca67d592ea0090bf06"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a028afb5ac41bc6ca67d592ea0090bf06"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Abs</b> (T f)</td></tr>
<tr class="memdesc:a028afb5ac41bc6ca67d592ea0090bf06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the absolute value of f. <br /></td></tr>
<tr class="separator:a028afb5ac41bc6ca67d592ea0090bf06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5770a829d6885f2169ba6c9598f7473c" id="r_a5770a829d6885f2169ba6c9598f7473c"><td class="memTemplParams" colspan="2"><a id="a5770a829d6885f2169ba6c9598f7473c" name="a5770a829d6885f2169ba6c9598f7473c"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5770a829d6885f2169ba6c9598f7473c"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Min</b> (T f1, T f2)</td></tr>
<tr class="memdesc:a5770a829d6885f2169ba6c9598f7473c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2. <br /></td></tr>
<tr class="separator:a5770a829d6885f2169ba6c9598f7473c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab989df9ee8187e4224ec8c61fb51bee1" id="r_ab989df9ee8187e4224ec8c61fb51bee1"><td class="memTemplParams" colspan="2"><a id="ab989df9ee8187e4224ec8c61fb51bee1" name="ab989df9ee8187e4224ec8c61fb51bee1"></a>
template&lt;typename T , typename... ARGS&gt; </td></tr>
<tr class="memitem:ab989df9ee8187e4224ec8c61fb51bee1"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Min</b> (T f1, T f2, ARGS... f)</td></tr>
<tr class="memdesc:ab989df9ee8187e4224ec8c61fb51bee1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2 or ... <br /></td></tr>
<tr class="separator:ab989df9ee8187e4224ec8c61fb51bee1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab65962f013f9265ca5e31684e42e14dc" id="r_ab65962f013f9265ca5e31684e42e14dc"><td class="memTemplParams" colspan="2"><a id="ab65962f013f9265ca5e31684e42e14dc" name="ab65962f013f9265ca5e31684e42e14dc"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab65962f013f9265ca5e31684e42e14dc"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Max</b> (T f1, T f2)</td></tr>
<tr class="memdesc:ab65962f013f9265ca5e31684e42e14dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the greater value, f1 or f2. <br /></td></tr>
<tr class="separator:ab65962f013f9265ca5e31684e42e14dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c7e949ebcc9c4eee3d1aeb17787edc8" id="r_a3c7e949ebcc9c4eee3d1aeb17787edc8"><td class="memTemplParams" colspan="2"><a id="a3c7e949ebcc9c4eee3d1aeb17787edc8" name="a3c7e949ebcc9c4eee3d1aeb17787edc8"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3c7e949ebcc9c4eee3d1aeb17787edc8"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Clamp</b> (T value, T min_val, T max_val)</td></tr>
<tr class="memdesc:a3c7e949ebcc9c4eee3d1aeb17787edc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [min; max]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:a3c7e949ebcc9c4eee3d1aeb17787edc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee94c698a69458e451ce2a6d2b0a89dc" id="r_aee94c698a69458e451ce2a6d2b0a89dc"><td class="memItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#aee94c698a69458e451ce2a6d2b0a89dc">WrapUInt</a> (ezUInt32 uiValue, ezUInt32 uiExcludedMaxValue)</td></tr>
<tr class="memdesc:aee94c698a69458e451ce2a6d2b0a89dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wraps uiValue around the maximum value, so that it stays within the range [0; uiExcludedMaxValue-1].  <br /></td></tr>
<tr class="separator:aee94c698a69458e451ce2a6d2b0a89dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0eca0abe9f97f09bb4f192aabbb9255" id="r_aa0eca0abe9f97f09bb4f192aabbb9255"><td class="memItemLeft" align="right" valign="top">constexpr ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#aa0eca0abe9f97f09bb4f192aabbb9255">WrapInt</a> (ezInt32 iValue, ezUInt32 uiExcludedMaxValue)</td></tr>
<tr class="memdesc:aa0eca0abe9f97f09bb4f192aabbb9255"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wraps iValue around the maximum value, so that it stays within the range [0; uiExcludedMaxValue-1].  <br /></td></tr>
<tr class="separator:aa0eca0abe9f97f09bb4f192aabbb9255"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a982b8853ee59277db2ef164b0d92db72" id="r_a982b8853ee59277db2ef164b0d92db72"><td class="memItemLeft" align="right" valign="top">constexpr ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a982b8853ee59277db2ef164b0d92db72">WrapInt</a> (ezInt32 iValue, ezInt32 iMinValue, ezInt32 iExcludedMaxValue)</td></tr>
<tr class="memdesc:a982b8853ee59277db2ef164b0d92db72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wraps iValue around the minimum and maximum value, so that it stays within the range [iMinValue; iExcludedMaxValue-1].  <br /></td></tr>
<tr class="separator:a982b8853ee59277db2ef164b0d92db72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e4b5eef602178ce352c6ba2efa47fa9" id="r_a1e4b5eef602178ce352c6ba2efa47fa9"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a1e4b5eef602178ce352c6ba2efa47fa9">WrapFloat01</a> (float fValue)</td></tr>
<tr class="memdesc:a1e4b5eef602178ce352c6ba2efa47fa9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wraps a float value around to stay within the [0; 1] range.  <br /></td></tr>
<tr class="separator:a1e4b5eef602178ce352c6ba2efa47fa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d7ddb902f81a02e172e9c2cd041754d" id="r_a6d7ddb902f81a02e172e9c2cd041754d"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a6d7ddb902f81a02e172e9c2cd041754d">WrapFloat</a> (float fValue, float fMinValue, float fMaxValue)</td></tr>
<tr class="memdesc:a6d7ddb902f81a02e172e9c2cd041754d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wraps a float value around to stay within the [min; max] range.  <br /></td></tr>
<tr class="separator:a6d7ddb902f81a02e172e9c2cd041754d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6197d5ec11b917a28264a323bd0d9483" id="r_a6197d5ec11b917a28264a323bd0d9483"><td class="memTemplParams" colspan="2"><a id="a6197d5ec11b917a28264a323bd0d9483" name="a6197d5ec11b917a28264a323bd0d9483"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6197d5ec11b917a28264a323bd0d9483"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Saturate</b> (T value)</td></tr>
<tr class="memdesc:a6197d5ec11b917a28264a323bd0d9483"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [0; 1]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:a6197d5ec11b917a28264a323bd0d9483"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ffb0ca4148c7d48e792c95d6a35690c" id="r_a1ffb0ca4148c7d48e792c95d6a35690c"><td class="memTemplParams" colspan="2"><a id="a1ffb0ca4148c7d48e792c95d6a35690c" name="a1ffb0ca4148c7d48e792c95d6a35690c"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a1ffb0ca4148c7d48e792c95d6a35690c"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Trunc</b> (Type f)</td></tr>
<tr class="memdesc:a1ffb0ca4148c7d48e792c95d6a35690c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the integer-part of f (removes the fraction). <br /></td></tr>
<tr class="separator:a1ffb0ca4148c7d48e792c95d6a35690c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9781d1a2a59d4b4e8d453a0321b659ca" id="r_a9781d1a2a59d4b4e8d453a0321b659ca"><td class="memItemLeft" align="right" valign="top">constexpr ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a9781d1a2a59d4b4e8d453a0321b659ca">FloatToInt</a> (float value)</td></tr>
<tr class="memdesc:a9781d1a2a59d4b4e8d453a0321b659ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts the float to an integer, removes the fractional part.  <br /></td></tr>
<tr class="separator:a9781d1a2a59d4b4e8d453a0321b659ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab661467737e33099b0a94eeb07a298e6" id="r_ab661467737e33099b0a94eeb07a298e6"><td class="memItemLeft" align="right" valign="top">constexpr ezInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ab661467737e33099b0a94eeb07a298e6">FloatToInt</a> (double value)</td></tr>
<tr class="memdesc:ab661467737e33099b0a94eeb07a298e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts the float to an integer, removes the fractional part.  <br /></td></tr>
<tr class="separator:ab661467737e33099b0a94eeb07a298e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8c63bd7f60b10407f8b832899d20c7c" id="r_ab8c63bd7f60b10407f8b832899d20c7c"><td class="memTemplParams" colspan="2"><a id="ab8c63bd7f60b10407f8b832899d20c7c" name="ab8c63bd7f60b10407f8b832899d20c7c"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ab8c63bd7f60b10407f8b832899d20c7c"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Fraction</b> (Type f)</td></tr>
<tr class="memdesc:ab8c63bd7f60b10407f8b832899d20c7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the fraction-part of f. <br /></td></tr>
<tr class="separator:ab8c63bd7f60b10407f8b832899d20c7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee8dcee9dc20a48592e9d126d3646cef" id="r_aee8dcee9dc20a48592e9d126d3646cef"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:aee8dcee9dc20a48592e9d126d3646cef"><td class="memTemplItemLeft" align="right" valign="top">constexpr Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#aee8dcee9dc20a48592e9d126d3646cef">Bitmask_LowN</a> (ezUInt32 uiNumBitsToSet)</td></tr>
<tr class="memdesc:aee8dcee9dc20a48592e9d126d3646cef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a bitmask in which the low N bits are set. For example for N=5, this would be '0000 ... 0001 1111'.  <br /></td></tr>
<tr class="separator:aee8dcee9dc20a48592e9d126d3646cef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fa356c4dfab340f3b112d09c6cf7c41" id="r_a6fa356c4dfab340f3b112d09c6cf7c41"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a6fa356c4dfab340f3b112d09c6cf7c41"><td class="memTemplItemLeft" align="right" valign="top">constexpr Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a6fa356c4dfab340f3b112d09c6cf7c41">Bitmask_HighN</a> (ezUInt32 uiNumBitsToSet)</td></tr>
<tr class="memdesc:a6fa356c4dfab340f3b112d09c6cf7c41"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a bitmask in which the high N bits are set. For example for N=5, this would be '1111 1000 ... 0000'.  <br /></td></tr>
<tr class="separator:a6fa356c4dfab340f3b112d09c6cf7c41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a882cad70469d8c061173faaab8757add" id="r_a882cad70469d8c061173faaab8757add"><td class="memTemplParams" colspan="2"><a id="a882cad70469d8c061173faaab8757add" name="a882cad70469d8c061173faaab8757add"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a882cad70469d8c061173faaab8757add"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Swap</b> (T &amp;ref_f1, T &amp;ref_f2)</td></tr>
<tr class="memdesc:a882cad70469d8c061173faaab8757add"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps the values in the two variables f1 and f2. <br /></td></tr>
<tr class="separator:a882cad70469d8c061173faaab8757add"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43503c3049f9ea9ffdae3b24ca52cbd3" id="r_a43503c3049f9ea9ffdae3b24ca52cbd3"><td class="memTemplParams" colspan="2"><a id="a43503c3049f9ea9ffdae3b24ca52cbd3" name="a43503c3049f9ea9ffdae3b24ca52cbd3"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a43503c3049f9ea9ffdae3b24ca52cbd3"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Lerp</b> (T f1, T f2, float fFactor)</td></tr>
<tr class="memdesc:a43503c3049f9ea9ffdae3b24ca52cbd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:a43503c3049f9ea9ffdae3b24ca52cbd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add5db6038ff60bafde7ec43eb147e361" id="r_add5db6038ff60bafde7ec43eb147e361"><td class="memTemplParams" colspan="2"><a id="add5db6038ff60bafde7ec43eb147e361" name="add5db6038ff60bafde7ec43eb147e361"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:add5db6038ff60bafde7ec43eb147e361"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Lerp</b> (T f1, T f2, double fFactor)</td></tr>
<tr class="memdesc:add5db6038ff60bafde7ec43eb147e361"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:add5db6038ff60bafde7ec43eb147e361"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cb8c38e440aa977fcc58f6f4807f131" id="r_a0cb8c38e440aa977fcc58f6f4807f131"><td class="memTemplParams" colspan="2"><a id="a0cb8c38e440aa977fcc58f6f4807f131" name="a0cb8c38e440aa977fcc58f6f4807f131"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0cb8c38e440aa977fcc58f6f4807f131"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Unlerp</b> (T fMin, T fMax, T fValue)</td></tr>
<tr class="memdesc:a0cb8c38e440aa977fcc58f6f4807f131"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the interpolation factor such that Lerp(fMin, fMax, factor) == fValue. <br /></td></tr>
<tr class="separator:a0cb8c38e440aa977fcc58f6f4807f131"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ff7a4d6f62b3a061617690fe04e4433" id="r_a1ff7a4d6f62b3a061617690fe04e4433"><td class="memTemplParams" colspan="2"><a id="a1ff7a4d6f62b3a061617690fe04e4433" name="a1ff7a4d6f62b3a061617690fe04e4433"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1ff7a4d6f62b3a061617690fe04e4433"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Step</b> (T value, T edge)</td></tr>
<tr class="memdesc:a1ff7a4d6f62b3a061617690fe04e4433"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 0, if value &lt; edge, and 1, if value &gt;= edge. <br /></td></tr>
<tr class="separator:a1ff7a4d6f62b3a061617690fe04e4433"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65a9116c394ebb50149efb4b15e3275e" id="r_a65a9116c394ebb50149efb4b15e3275e"><td class="memItemLeft" align="right" valign="top"><a id="a65a9116c394ebb50149efb4b15e3275e" name="a65a9116c394ebb50149efb4b15e3275e"></a>
EZ_FOUNDATION_DLL bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsPowerOf</b> (ezInt32 value, ezInt32 iBase)</td></tr>
<tr class="memdesc:a65a9116c394ebb50149efb4b15e3275e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there exists some x with base^x == value. <br /></td></tr>
<tr class="separator:a65a9116c394ebb50149efb4b15e3275e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae63590d458f167068281fa07e86e7f2c" id="r_ae63590d458f167068281fa07e86e7f2c"><td class="memItemLeft" align="right" valign="top"><a id="ae63590d458f167068281fa07e86e7f2c" name="ae63590d458f167068281fa07e86e7f2c"></a>
EZ_FOUNDATION_DLL ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>PowerOfTwo_Floor</b> (ezUInt32 value)</td></tr>
<tr class="memdesc:ae63590d458f167068281fa07e86e7f2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next power-of-two that is &lt;= value. <br /></td></tr>
<tr class="separator:ae63590d458f167068281fa07e86e7f2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb5401d3dc6d7cee7a624a7fb93d3c59" id="r_abb5401d3dc6d7cee7a624a7fb93d3c59"><td class="memItemLeft" align="right" valign="top"><a id="abb5401d3dc6d7cee7a624a7fb93d3c59" name="abb5401d3dc6d7cee7a624a7fb93d3c59"></a>
EZ_FOUNDATION_DLL ezUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>PowerOfTwo_Floor</b> (ezUInt64 value)</td></tr>
<tr class="memdesc:abb5401d3dc6d7cee7a624a7fb93d3c59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next power-of-two that is &lt;= value. <br /></td></tr>
<tr class="separator:abb5401d3dc6d7cee7a624a7fb93d3c59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac03a1258ad9611e0d8d109e1876e34e2" id="r_ac03a1258ad9611e0d8d109e1876e34e2"><td class="memItemLeft" align="right" valign="top"><a id="ac03a1258ad9611e0d8d109e1876e34e2" name="ac03a1258ad9611e0d8d109e1876e34e2"></a>
EZ_FOUNDATION_DLL ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>PowerOfTwo_Ceil</b> (ezUInt32 value)</td></tr>
<tr class="memdesc:ac03a1258ad9611e0d8d109e1876e34e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next power-of-two that is &gt;= value. <br /></td></tr>
<tr class="separator:ac03a1258ad9611e0d8d109e1876e34e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0688f8dd40fecd6ac0e8ae4e2349333f" id="r_a0688f8dd40fecd6ac0e8ae4e2349333f"><td class="memItemLeft" align="right" valign="top"><a id="a0688f8dd40fecd6ac0e8ae4e2349333f" name="a0688f8dd40fecd6ac0e8ae4e2349333f"></a>
EZ_FOUNDATION_DLL ezUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>PowerOfTwo_Ceil</b> (ezUInt64 value)</td></tr>
<tr class="memdesc:a0688f8dd40fecd6ac0e8ae4e2349333f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next power-of-two that is &gt;= value. <br /></td></tr>
<tr class="separator:a0688f8dd40fecd6ac0e8ae4e2349333f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb6684a23d8bdf2887da1f14243cbca0" id="r_afb6684a23d8bdf2887da1f14243cbca0"><td class="memItemLeft" align="right" valign="top"><a id="afb6684a23d8bdf2887da1f14243cbca0" name="afb6684a23d8bdf2887da1f14243cbca0"></a>
EZ_FOUNDATION_DLL ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GreatestCommonDivisor</b> (ezUInt32 a, ezUInt32 b)</td></tr>
<tr class="memdesc:afb6684a23d8bdf2887da1f14243cbca0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the greatest common divisor. <br /></td></tr>
<tr class="separator:afb6684a23d8bdf2887da1f14243cbca0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ee9639723a86148408e88ba6ca4b834" id="r_a8ee9639723a86148408e88ba6ca4b834"><td class="memItemLeft" align="right" valign="top"><a id="a8ee9639723a86148408e88ba6ca4b834" name="a8ee9639723a86148408e88ba6ca4b834"></a>
EZ_FOUNDATION_DLL <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>TryMultiply32</b> (ezUInt32 &amp;out_uiResult, ezUInt32 a, ezUInt32 b, ezUInt32 c=1, ezUInt32 d=1)</td></tr>
<tr class="memdesc:a8ee9639723a86148408e88ba6ca4b834"><td class="mdescLeft">&#160;</td><td class="mdescRight">out_Result = <em>a</em> * <em>b</em>. If an overflow happens, EZ_FAILURE is returned. <br /></td></tr>
<tr class="separator:a8ee9639723a86148408e88ba6ca4b834"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacf98afd3d0bc523352b1c6da141f78a" id="r_aacf98afd3d0bc523352b1c6da141f78a"><td class="memItemLeft" align="right" valign="top"><a id="aacf98afd3d0bc523352b1c6da141f78a" name="aacf98afd3d0bc523352b1c6da141f78a"></a>
EZ_FOUNDATION_DLL ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>SafeMultiply32</b> (ezUInt32 a, ezUInt32 b, ezUInt32 c=1, ezUInt32 d=1)</td></tr>
<tr class="memdesc:aacf98afd3d0bc523352b1c6da141f78a"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns <em>a</em> * <em>b</em>. If an overflow happens, the program is terminated. <br /></td></tr>
<tr class="separator:aacf98afd3d0bc523352b1c6da141f78a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b9a21046b4ad398fad49a67cc6d94aa" id="r_a8b9a21046b4ad398fad49a67cc6d94aa"><td class="memItemLeft" align="right" valign="top"><a id="a8b9a21046b4ad398fad49a67cc6d94aa" name="a8b9a21046b4ad398fad49a67cc6d94aa"></a>
EZ_FOUNDATION_DLL <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>TryMultiply64</b> (ezUInt64 &amp;out_uiResult, ezUInt64 a, ezUInt64 b, ezUInt64 c=1, ezUInt64 d=1)</td></tr>
<tr class="memdesc:a8b9a21046b4ad398fad49a67cc6d94aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">out_Result = <em>a</em> * <em>b</em>. If an overflow happens, EZ_FAILURE is returned. <br /></td></tr>
<tr class="separator:a8b9a21046b4ad398fad49a67cc6d94aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa782473cf562ce4044652dec9ec0498f" id="r_aa782473cf562ce4044652dec9ec0498f"><td class="memItemLeft" align="right" valign="top"><a id="aa782473cf562ce4044652dec9ec0498f" name="aa782473cf562ce4044652dec9ec0498f"></a>
EZ_FOUNDATION_DLL ezUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>SafeMultiply64</b> (ezUInt64 a, ezUInt64 b, ezUInt64 c=1, ezUInt64 d=1)</td></tr>
<tr class="memdesc:aa782473cf562ce4044652dec9ec0498f"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns <em>a</em> * <em>b</em>. If an overflow happens, the program is terminated. <br /></td></tr>
<tr class="separator:aa782473cf562ce4044652dec9ec0498f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad07e5d240ab190a460120eae06405251" id="r_ad07e5d240ab190a460120eae06405251"><td class="memItemLeft" align="right" valign="top"><a id="ad07e5d240ab190a460120eae06405251" name="ad07e5d240ab190a460120eae06405251"></a>
<a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>TryConvertToSizeT</b> (size_t &amp;out_uiResult, ezUInt64 uiValue)</td></tr>
<tr class="memdesc:ad07e5d240ab190a460120eae06405251"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given 64bit value actually fits into size_t, If it doesn't EZ_FAILURE is returned. <br /></td></tr>
<tr class="separator:ad07e5d240ab190a460120eae06405251"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8448ef254ee34432d1fa3c2718dc1dd7" id="r_a8448ef254ee34432d1fa3c2718dc1dd7"><td class="memItemLeft" align="right" valign="top"><a id="a8448ef254ee34432d1fa3c2718dc1dd7" name="a8448ef254ee34432d1fa3c2718dc1dd7"></a>
EZ_FOUNDATION_DLL size_t&#160;</td><td class="memItemRight" valign="bottom"><b>SafeConvertToSizeT</b> (ezUInt64 uiValue)</td></tr>
<tr class="memdesc:a8448ef254ee34432d1fa3c2718dc1dd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given 64bit value actually fits into size_t, If it doesn't the program is terminated. <br /></td></tr>
<tr class="separator:a8448ef254ee34432d1fa3c2718dc1dd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb86e73a85c63426980452dbf19ea5ff" id="r_adb86e73a85c63426980452dbf19ea5ff"><td class="memItemLeft" align="right" valign="top"><a id="adb86e73a85c63426980452dbf19ea5ff" name="adb86e73a85c63426980452dbf19ea5ff"></a>
EZ_FOUNDATION_DLL float&#160;</td><td class="memItemRight" valign="bottom"><b>ReplaceNaN</b> (float fValue, float fFallback)</td></tr>
<tr class="memdesc:adb86e73a85c63426980452dbf19ea5ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">If 'value' is not-a-number (NaN) 'fallback' is returned, otherwise 'value' is passed through unmodified. <br /></td></tr>
<tr class="separator:adb86e73a85c63426980452dbf19ea5ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3744f6e521fdb849643089a6ee63c0df" id="r_a3744f6e521fdb849643089a6ee63c0df"><td class="memItemLeft" align="right" valign="top"><a id="a3744f6e521fdb849643089a6ee63c0df" name="a3744f6e521fdb849643089a6ee63c0df"></a>
EZ_FOUNDATION_DLL double&#160;</td><td class="memItemRight" valign="bottom"><b>ReplaceNaN</b> (double fValue, double fFallback)</td></tr>
<tr class="memdesc:a3744f6e521fdb849643089a6ee63c0df"><td class="mdescLeft">&#160;</td><td class="mdescRight">If 'value' is not-a-number (NaN) 'fallback' is returned, otherwise 'value' is passed through unmodified. <br /></td></tr>
<tr class="separator:a3744f6e521fdb849643089a6ee63c0df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bd1563f261a70ec903358c87f27bf8e" id="r_a0bd1563f261a70ec903358c87f27bf8e"><td class="memItemLeft" align="right" valign="top"><a id="a0bd1563f261a70ec903358c87f27bf8e" name="a0bd1563f261a70ec903358c87f27bf8e"></a>
constexpr ezUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>MakeUInt64</b> (ezUInt32 uiHigh32, ezUInt32 uiLow32)</td></tr>
<tr class="memdesc:a0bd1563f261a70ec903358c87f27bf8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combines the two 32 bit uint values into one 64 bit value. <br /></td></tr>
<tr class="separator:a0bd1563f261a70ec903358c87f27bf8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab04ad7071d5e0472b537cd6ef65f5f6f" id="r_ab04ad7071d5e0472b537cd6ef65f5f6f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/de6/classez_variant.htm">ezVariant</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ab04ad7071d5e0472b537cd6ef65f5f6f">Lerp</a> (const <a class="el" href="../../de/de6/classez_variant.htm">ezVariant</a> &amp;a, const <a class="el" href="../../de/de6/classez_variant.htm">ezVariant</a> &amp;b, double fFactor)</td></tr>
<tr class="memdesc:ab04ad7071d5e0472b537cd6ef65f5f6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">An overload of <a class="el" href="../../db/d78/namespaceez_math.htm#a70aea4554d1be096b314db9f10c9f1fc" title="Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1.">ezMath::Lerp</a> to interpolate variants. A and b must have the same type.  <br /></td></tr>
<tr class="separator:ab04ad7071d5e0472b537cd6ef65f5f6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This namespace provides common math-functionality as functions. </p>
<p>It is a namespace, instead of a static class, because that allows it to be extended at other locations, which is especially useful when adding custom types. </p>
</div><h2 class="groupheader">Function Documentation</h2>
<a id="a330d587a6c60fec6b038e81a8d0e4bb5" name="a330d587a6c60fec6b038e81a8d0e4bb5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a330d587a6c60fec6b038e81a8d0e4bb5">&#9670;&#160;</a></span>Bitmask_HighN() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">EZ_ALWAYS_INLINE constexpr Type ezMath::Bitmask_HighN </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumBitsToSet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a bitmask in which the high N bits are set. For example for N=5, this would be '1111 1000 ... 0000'. </p>
<p>For N &gt;= 32 all bits will be set. </p>

</div>
</div>
<a id="a6fa356c4dfab340f3b112d09c6cf7c41" name="a6fa356c4dfab340f3b112d09c6cf7c41"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6fa356c4dfab340f3b112d09c6cf7c41">&#9670;&#160;</a></span>Bitmask_HighN() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr Type ezMath::Bitmask_HighN </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumBitsToSet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a bitmask in which the high N bits are set. For example for N=5, this would be '1111 1000 ... 0000'. </p>
<p>For N &gt;= 32 all bits will be set. </p>

</div>
</div>
<a id="a18f91e6fa7c48aceff06851b518c274d" name="a18f91e6fa7c48aceff06851b518c274d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18f91e6fa7c48aceff06851b518c274d">&#9670;&#160;</a></span>Bitmask_LowN() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">EZ_ALWAYS_INLINE constexpr Type ezMath::Bitmask_LowN </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumBitsToSet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a bitmask in which the low N bits are set. For example for N=5, this would be '0000 ... 0001 1111'. </p>
<p>For N &gt;= 32 all bits will be set. </p>

</div>
</div>
<a id="aee8dcee9dc20a48592e9d126d3646cef" name="aee8dcee9dc20a48592e9d126d3646cef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee8dcee9dc20a48592e9d126d3646cef">&#9670;&#160;</a></span>Bitmask_LowN() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr Type ezMath::Bitmask_LowN </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumBitsToSet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a bitmask in which the low N bits are set. For example for N=5, this would be '0000 ... 0001 1111'. </p>
<p>For N &gt;= 32 all bits will be set. </p>

</div>
</div>
<a id="ad53c88db688345074c3363124b1e770c" name="ad53c88db688345074c3363124b1e770c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad53c88db688345074c3363124b1e770c">&#9670;&#160;</a></span>CeilToInt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezInt32 ezMath::CeilToInt </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the next higher integer, closest to f. Also the HIGHER value, if f is negative. </p>
<p>This function is identical to 'Ceil()' except that it already returns the result cast to an int. </p>

</div>
</div>
<a id="ace4ed6e4b2f22c9ef2c8a9666f734807" name="ace4ed6e4b2f22c9ef2c8a9666f734807"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace4ed6e4b2f22c9ef2c8a9666f734807">&#9670;&#160;</a></span>CountLeadingZeros()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezMath::CountLeadingZeros </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the number of zeros at the start (most significant part) of a bitmask.</p>
<p>E.g. 0b0111 -&gt; 29 0b0011 -&gt; 30 0b0001 -&gt; 31 0b0000 -&gt; 32 Returns 32 when the input is 0 </p>

</div>
</div>
<a id="a9a0cd6f0b8682242cb973308553f7b13" name="a9a0cd6f0b8682242cb973308553f7b13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a0cd6f0b8682242cb973308553f7b13">&#9670;&#160;</a></span>CountTrailingZeros()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezMath::CountTrailingZeros </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the number of zeros at the end (least significant part) of a bitmask.</p>
<p>E.g. 0b0111 -&gt; 0 0b0110 -&gt; 1 0b0100 -&gt; 2 Returns 32 when the input is 0 </p>

</div>
</div>
<a id="a35aee647f78c0673015f09c8791c448f" name="a35aee647f78c0673015f09c8791c448f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35aee647f78c0673015f09c8791c448f">&#9670;&#160;</a></span>FirstBitHigh() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezMath::FirstBitHigh </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the index of the most significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="afef6820f942a6a313693ba68dfcbaa6c" name="afef6820f942a6a313693ba68dfcbaa6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afef6820f942a6a313693ba68dfcbaa6c">&#9670;&#160;</a></span>FirstBitHigh() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezMath::FirstBitHigh </td>
          <td>(</td>
          <td class="paramtype">ezUInt64&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the index of the most significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="a20cbb5a32d60124534dd65b2871166d0" name="a20cbb5a32d60124534dd65b2871166d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20cbb5a32d60124534dd65b2871166d0">&#9670;&#160;</a></span>FirstBitLow() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezMath::FirstBitLow </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the index of the least significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="a15a5da4c47b32ba351aa17ad40b2e8fb" name="a15a5da4c47b32ba351aa17ad40b2e8fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15a5da4c47b32ba351aa17ad40b2e8fb">&#9670;&#160;</a></span>FirstBitLow() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezMath::FirstBitLow </td>
          <td>(</td>
          <td class="paramtype">ezUInt64&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the index of the least significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="ab661467737e33099b0a94eeb07a298e6" name="ab661467737e33099b0a94eeb07a298e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab661467737e33099b0a94eeb07a298e6">&#9670;&#160;</a></span>FloatToInt() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr EZ_FORCE_INLINE ezInt64 ezMath::FloatToInt </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Casts the float to an integer, removes the fractional part. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../db/d78/namespaceez_math.htm#a89a5cb364bf8bf76155b42b477e2540a" title="Returns the integer-part of f (removes the fraction).">Trunc</a>, <a class="el" href="../../db/d78/namespaceez_math.htm#a3eaa04e59a8c066cc25b1966f760f08d" title="Rounds f to the next integer.">Round</a>, Floor, Ceil </dd></dl>

</div>
</div>
<a id="a9781d1a2a59d4b4e8d453a0321b659ca" name="a9781d1a2a59d4b4e8d453a0321b659ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9781d1a2a59d4b4e8d453a0321b659ca">&#9670;&#160;</a></span>FloatToInt() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr EZ_FORCE_INLINE ezInt32 ezMath::FloatToInt </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Casts the float to an integer, removes the fractional part. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../db/d78/namespaceez_math.htm#a89a5cb364bf8bf76155b42b477e2540a" title="Returns the integer-part of f (removes the fraction).">Trunc</a>, <a class="el" href="../../db/d78/namespaceez_math.htm#a3eaa04e59a8c066cc25b1966f760f08d" title="Rounds f to the next integer.">Round</a>, Floor, Ceil </dd></dl>

</div>
</div>
<a id="a9110f05274235ec1582030e30f5b66ab" name="a9110f05274235ec1582030e30f5b66ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9110f05274235ec1582030e30f5b66ab">&#9670;&#160;</a></span>FloorToInt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezInt32 ezMath::FloorToInt </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the next smaller integer, closest to f. Also the SMALLER value, if f is negative. </p>
<p>This function is identical to 'Floor()' except that it already returns the result cast to an int. </p>

</div>
</div>
<a id="aa3da8103ab828ed4da1f8bc61a966ff1" name="aa3da8103ab828ed4da1f8bc61a966ff1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3da8103ab828ed4da1f8bc61a966ff1">&#9670;&#160;</a></span>HighValue()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr TYPE ezMath::HighValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A very large value, that is slightly smaller than sqrt(MaxValue()). </p>
<p>Useful to default initialize values, that may get squared in subsequent operations. </p>

</div>
</div>
<a id="ab04ad7071d5e0472b537cd6ef65f5f6f" name="ab04ad7071d5e0472b537cd6ef65f5f6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab04ad7071d5e0472b537cd6ef65f5f6f">&#9670;&#160;</a></span>Lerp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EZ_FOUNDATION_DLL <a class="el" href="../../de/de6/classez_variant.htm">ezVariant</a> ezMath::Lerp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/de6/classez_variant.htm">ezVariant</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../de/de6/classez_variant.htm">ezVariant</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fFactor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>An overload of <a class="el" href="../../db/d78/namespaceez_math.htm#a70aea4554d1be096b314db9f10c9f1fc" title="Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1.">ezMath::Lerp</a> to interpolate variants. A and b must have the same type. </p>
<p>If the type can't be interpolated like e.g. strings, a is returned for a fFactor less than 0.5, b is returned for a fFactor greater or equal to 0.5. </p>

</div>
</div>
<a id="a4ded6bdc6257e148fb9c8cc9a3f8e376" name="a4ded6bdc6257e148fb9c8cc9a3f8e376"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ded6bdc6257e148fb9c8cc9a3f8e376">&#9670;&#160;</a></span>NaN()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr TYPE ezMath::NaN </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the value for NaN as the template type. Returns zero, if the type does not support NaN. </p>
<p>Do not use this for comparisons, it will fail. Use it to initialize data (e.g. in debug builds), to detect uninitialized variables. Use the function IsNaN() to check whether a value is not a number. </p>

</div>
</div>
<a id="a3eaa04e59a8c066cc25b1966f760f08d" name="a3eaa04e59a8c066cc25b1966f760f08d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3eaa04e59a8c066cc25b1966f760f08d">&#9670;&#160;</a></span>Round() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double ezMath::Round </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rounds f to the next integer. </p>
<p>If f is positive 0.5 is rounded UP (i.e. to 1), if f is negative, -0.5 is rounded DOWN (i.e. to -1). </p>

</div>
</div>
<a id="ace725c91daf115ff11418655fcf83f0c" name="ace725c91daf115ff11418655fcf83f0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace725c91daf115ff11418655fcf83f0c">&#9670;&#160;</a></span>Round() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ezMath::Round </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rounds f to the next integer. </p>
<p>If f is positive 0.5 is rounded UP (i.e. to 1), if f is negative, -0.5 is rounded DOWN (i.e. to -1). </p>

</div>
</div>
<a id="a877f8338e5a9e70ca0ab22017cff9d12" name="a877f8338e5a9e70ca0ab22017cff9d12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a877f8338e5a9e70ca0ab22017cff9d12">&#9670;&#160;</a></span>RoundToInt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezInt32 ezMath::RoundToInt </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rounds f to the next integer. </p>
<p>If f is positive 0.5 is rounded UP (i.e. to 1), if f is negative, -0.5 is rounded DOWN (i.e. to -1).</p>
<p>This function is identical to '<a class="el" href="../../db/d78/namespaceez_math.htm#a3eaa04e59a8c066cc25b1966f760f08d" title="Rounds f to the next integer.">Round()</a>' except that it already returns the result cast to an int. </p>

</div>
</div>
<a id="a05995060e61c0946e14619b45cd1adef" name="a05995060e61c0946e14619b45cd1adef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05995060e61c0946e14619b45cd1adef">&#9670;&#160;</a></span>Sin()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ezMath::Sin </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a>&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>***** Trigonometric Functions ***** </p>
<p>Takes an angle, returns its sine </p>

</div>
</div>
<a id="a6d7ddb902f81a02e172e9c2cd041754d" name="a6d7ddb902f81a02e172e9c2cd041754d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d7ddb902f81a02e172e9c2cd041754d">&#9670;&#160;</a></span>WrapFloat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EZ_ALWAYS_INLINE float ezMath::WrapFloat </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fMinValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fMaxValue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wraps a float value around to stay within the [min; max] range. </p>
<p>Both fMinValue and fMaxValue are inclusive. Both values may be negative, but fMinValue has to be strictly smaller than fMaxValue. </p>

</div>
</div>
<a id="a1e4b5eef602178ce352c6ba2efa47fa9" name="a1e4b5eef602178ce352c6ba2efa47fa9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e4b5eef602178ce352c6ba2efa47fa9">&#9670;&#160;</a></span>WrapFloat01()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EZ_ALWAYS_INLINE float ezMath::WrapFloat01 </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fValue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wraps a float value around to stay within the [0; 1] range. </p>
<p>Wrapping happens in both positive and negative direction. Ie -0.1f will be wrapped to 0.9f and 1.1f will be wrapped to 0.1f. Note that here the value 1.0f is included in the range. Only values larger than 1.0f get wrapped back to zero. Therefore it is different to what 'Fraction' would return. </p>

</div>
</div>
<a id="a982b8853ee59277db2ef164b0d92db72" name="a982b8853ee59277db2ef164b0d92db72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a982b8853ee59277db2ef164b0d92db72">&#9670;&#160;</a></span>WrapInt() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">EZ_ALWAYS_INLINE constexpr ezInt32 ezMath::WrapInt </td>
          <td>(</td>
          <td class="paramtype">ezInt32&#160;</td>
          <td class="paramname"><em>iValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezInt32&#160;</td>
          <td class="paramname"><em>iMinValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezInt32&#160;</td>
          <td class="paramname"><em>iExcludedMaxValue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Wraps iValue around the minimum and maximum value, so that it stays within the range [iMinValue; iExcludedMaxValue-1]. </p>
<p>Ie a value of iExcludedMaxValue would be wrapped to iMinValue, and (iExcludedMaxValue+1) to (iMinValue+1), etc. Values below iMinValue are wrapped back around to a large value, ie (iMinValue-1) would be wrapped to (iExcludedMaxValue-1).</p>
<p>Both iMinValue and iExcludedMaxValue can be negative, but iMinValue has to be strictly smaller than iExcludedMaxValue. </p>

</div>
</div>
<a id="aa0eca0abe9f97f09bb4f192aabbb9255" name="aa0eca0abe9f97f09bb4f192aabbb9255"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0eca0abe9f97f09bb4f192aabbb9255">&#9670;&#160;</a></span>WrapInt() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">EZ_ALWAYS_INLINE constexpr ezInt32 ezMath::WrapInt </td>
          <td>(</td>
          <td class="paramtype">ezInt32&#160;</td>
          <td class="paramname"><em>iValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiExcludedMaxValue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Wraps iValue around the maximum value, so that it stays within the range [0; uiExcludedMaxValue-1]. </p>
<p>Ie a value of uiExcludedMaxValue would be wrapped to 0, and (uiExcludedMaxValue+1) to 1, etc. Negative values are wrapped back around to a large value, ie -1 would be wrapped to (uiExcludedMaxValue-1). A value of 0 for uiExcludedMaxValue is invalid and results in a division by zero error. </p>

</div>
</div>
<a id="aee94c698a69458e451ce2a6d2b0a89dc" name="aee94c698a69458e451ce2a6d2b0a89dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee94c698a69458e451ce2a6d2b0a89dc">&#9670;&#160;</a></span>WrapUInt()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">EZ_ALWAYS_INLINE constexpr ezUInt32 ezMath::WrapUInt </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiExcludedMaxValue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Wraps uiValue around the maximum value, so that it stays within the range [0; uiExcludedMaxValue-1]. </p>
<p>Ie a value of uiExcludedMaxValue would be wrapped to 0, and (uiExcludedMaxValue+1) to 1, etc. A value of 0 for uiExcludedMaxValue is invalid and results in a division by zero error. </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../db/d78/namespaceez_math.htm">ezMath</a></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:18:01 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
