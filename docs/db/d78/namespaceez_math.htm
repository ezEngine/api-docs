<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezMath Namespace Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('db/d78/namespaceez_math.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ezMath Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This namespace provides common math-functionality as functions.  
<a href="../../db/d78/namespaceez_math.htm#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a2bb652d0912aad52e81a1e6895ce79da"><td class="memTemplParams" colspan="2"><a id="a2bb652d0912aad52e81a1e6895ce79da"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a2bb652d0912aad52e81a1e6895ce79da"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a2bb652d0912aad52e81a1e6895ce79da">Pi</a> ()</td></tr>
<tr class="memdesc:a2bb652d0912aad52e81a1e6895ce79da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the natural constant Pi. <br /></td></tr>
<tr class="separator:a2bb652d0912aad52e81a1e6895ce79da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70fa9a79fb67ea653462d2cdbbfd675d"><td class="memTemplParams" colspan="2"><a id="a70fa9a79fb67ea653462d2cdbbfd675d"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a70fa9a79fb67ea653462d2cdbbfd675d"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a70fa9a79fb67ea653462d2cdbbfd675d">e</a> ()</td></tr>
<tr class="memdesc:a70fa9a79fb67ea653462d2cdbbfd675d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the natural constant e. <br /></td></tr>
<tr class="separator:a70fa9a79fb67ea653462d2cdbbfd675d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f9d65bf73ab3ee1acb4a279a00a42d3"><td class="memTemplParams" colspan="2"><a id="a1f9d65bf73ab3ee1acb4a279a00a42d3"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a1f9d65bf73ab3ee1acb4a279a00a42d3"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a1f9d65bf73ab3ee1acb4a279a00a42d3">SupportsNaN</a> ()</td></tr>
<tr class="memdesc:a1f9d65bf73ab3ee1acb4a279a00a42d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the template type supports specialized values to represent NaN. <br /></td></tr>
<tr class="separator:a1f9d65bf73ab3ee1acb4a279a00a42d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ded6bdc6257e148fb9c8cc9a3f8e376"><td class="memTemplParams" colspan="2">template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a4ded6bdc6257e148fb9c8cc9a3f8e376"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a4ded6bdc6257e148fb9c8cc9a3f8e376">NaN</a> ()</td></tr>
<tr class="memdesc:a4ded6bdc6257e148fb9c8cc9a3f8e376"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value for NaN as the template type. Returns zero, if the type does not support NaN.  <a href="../../db/d78/namespaceez_math.htm#a4ded6bdc6257e148fb9c8cc9a3f8e376">More...</a><br /></td></tr>
<tr class="separator:a4ded6bdc6257e148fb9c8cc9a3f8e376"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a208d07ee5e80c46cbd1be43a00dc960b"><td class="memTemplParams" colspan="2"><a id="a208d07ee5e80c46cbd1be43a00dc960b"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a208d07ee5e80c46cbd1be43a00dc960b"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a208d07ee5e80c46cbd1be43a00dc960b">SupportsInfinity</a> ()</td></tr>
<tr class="memdesc:a208d07ee5e80c46cbd1be43a00dc960b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the template type supports specialized values to represent Infinity. <br /></td></tr>
<tr class="separator:a208d07ee5e80c46cbd1be43a00dc960b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ad01e87f0e218a6e9662e354df16b85"><td class="memTemplParams" colspan="2"><a id="a6ad01e87f0e218a6e9662e354df16b85"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a6ad01e87f0e218a6e9662e354df16b85"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a6ad01e87f0e218a6e9662e354df16b85">Infinity</a> ()</td></tr>
<tr class="memdesc:a6ad01e87f0e218a6e9662e354df16b85"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value for Infinity as the template type. Returns zero, if the type does not support Infinity. <br /></td></tr>
<tr class="separator:a6ad01e87f0e218a6e9662e354df16b85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa26019e0e85698d8a3d5ebb5c4d6075c"><td class="memTemplParams" colspan="2"><a id="aa26019e0e85698d8a3d5ebb5c4d6075c"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:aa26019e0e85698d8a3d5ebb5c4d6075c"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#aa26019e0e85698d8a3d5ebb5c4d6075c">MaxValue</a> ()</td></tr>
<tr class="memdesc:aa26019e0e85698d8a3d5ebb5c4d6075c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the largest possible positive value (that is not infinity). <br /></td></tr>
<tr class="separator:aa26019e0e85698d8a3d5ebb5c4d6075c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c0500e2892248a6465f09dd3494db0f"><td class="memTemplParams" colspan="2"><a id="a8c0500e2892248a6465f09dd3494db0f"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a8c0500e2892248a6465f09dd3494db0f"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a8c0500e2892248a6465f09dd3494db0f">MinValue</a> ()</td></tr>
<tr class="memdesc:a8c0500e2892248a6465f09dd3494db0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smallest possible value (that is not -infinity). Usually zero or -<a class="el" href="../../db/d78/namespaceez_math.htm#aa26019e0e85698d8a3d5ebb5c4d6075c" title="Returns the largest possible positive value (that is not infinity).">MaxValue()</a>. For signed integers this will be -<a class="el" href="../../db/d78/namespaceez_math.htm#aa26019e0e85698d8a3d5ebb5c4d6075c" title="Returns the largest possible positive value (that is not infinity).">MaxValue()</a> - 1. <br /></td></tr>
<tr class="separator:a8c0500e2892248a6465f09dd3494db0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3da8103ab828ed4da1f8bc61a966ff1"><td class="memTemplParams" colspan="2">template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:aa3da8103ab828ed4da1f8bc61a966ff1"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#aa3da8103ab828ed4da1f8bc61a966ff1">HighValue</a> ()</td></tr>
<tr class="memdesc:aa3da8103ab828ed4da1f8bc61a966ff1"><td class="mdescLeft">&#160;</td><td class="mdescRight">A very large value, that is slightly smaller than sqrt(MaxValue()).  <a href="../../db/d78/namespaceez_math.htm#aa3da8103ab828ed4da1f8bc61a966ff1">More...</a><br /></td></tr>
<tr class="separator:aa3da8103ab828ed4da1f8bc61a966ff1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17212e83459d7284e430bc68397907ac"><td class="memTemplParams" colspan="2"><a id="a17212e83459d7284e430bc68397907ac"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a17212e83459d7284e430bc68397907ac"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a17212e83459d7284e430bc68397907ac">FloatEpsilon</a> ()</td></tr>
<tr class="memdesc:a17212e83459d7284e430bc68397907ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">The difference between 1.0 and the next representable value for the given type. <br /></td></tr>
<tr class="separator:a17212e83459d7284e430bc68397907ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab361b088c5248ed267c341a0271ef16e"><td class="memTemplParams" colspan="2"><a id="ab361b088c5248ed267c341a0271ef16e"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:ab361b088c5248ed267c341a0271ef16e"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SmallEpsilon</b> ()</td></tr>
<tr class="separator:ab361b088c5248ed267c341a0271ef16e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee21413ad7f7e39e411519dcabc61954"><td class="memTemplParams" colspan="2"><a id="aee21413ad7f7e39e411519dcabc61954"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:aee21413ad7f7e39e411519dcabc61954"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>DefaultEpsilon</b> ()</td></tr>
<tr class="separator:aee21413ad7f7e39e411519dcabc61954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5afe701a1c53679381b9b94a7e19baea"><td class="memTemplParams" colspan="2"><a id="a5afe701a1c53679381b9b94a7e19baea"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a5afe701a1c53679381b9b94a7e19baea"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>LargeEpsilon</b> ()</td></tr>
<tr class="separator:a5afe701a1c53679381b9b94a7e19baea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6755ef5051ed4ac8121329393bd301cb"><td class="memTemplParams" colspan="2"><a id="a6755ef5051ed4ac8121329393bd301cb"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a6755ef5051ed4ac8121329393bd301cb"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>HugeEpsilon</b> ()</td></tr>
<tr class="separator:a6755ef5051ed4ac8121329393bd301cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5aa564a40df070112a6d6d5aa95b56f"><td class="memTemplParams" colspan="2"><a id="ad5aa564a40df070112a6d6d5aa95b56f"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:ad5aa564a40df070112a6d6d5aa95b56f"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ad5aa564a40df070112a6d6d5aa95b56f">NumBits</a> ()</td></tr>
<tr class="memdesc:ad5aa564a40df070112a6d6d5aa95b56f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bits in the given type. Mostly useful for unsigned integer types. <br /></td></tr>
<tr class="separator:ad5aa564a40df070112a6d6d5aa95b56f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68b4b41cd53264f4873abb5563dcd64a"><td class="memItemLeft" align="right" valign="top"><a id="a68b4b41cd53264f4873abb5563dcd64a"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_Linear</b> (double t)</td></tr>
<tr class="separator:a68b4b41cd53264f4873abb5563dcd64a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a652741da5e08fa92baecea8d0777dbfd"><td class="memItemLeft" align="right" valign="top"><a id="a652741da5e08fa92baecea8d0777dbfd"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_ConstantZero</b> (double t)</td></tr>
<tr class="separator:a652741da5e08fa92baecea8d0777dbfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd36f799c9e261743f7796e047b388d9"><td class="memItemLeft" align="right" valign="top"><a id="acd36f799c9e261743f7796e047b388d9"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_ConstantOne</b> (double t)</td></tr>
<tr class="separator:acd36f799c9e261743f7796e047b388d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7ecc59005a95271ac7d8ac421971d0a"><td class="memItemLeft" align="right" valign="top"><a id="af7ecc59005a95271ac7d8ac421971d0a"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInSine</b> (double t)</td></tr>
<tr class="separator:af7ecc59005a95271ac7d8ac421971d0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afab2185cd9be6369e019bc42956de30e"><td class="memItemLeft" align="right" valign="top"><a id="afab2185cd9be6369e019bc42956de30e"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutSine</b> (double t)</td></tr>
<tr class="separator:afab2185cd9be6369e019bc42956de30e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43cf253b5ec986e4b69b711cec56be78"><td class="memItemLeft" align="right" valign="top"><a id="a43cf253b5ec986e4b69b711cec56be78"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutSine</b> (double t)</td></tr>
<tr class="separator:a43cf253b5ec986e4b69b711cec56be78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cecdc6c212b1d48eab7cf68f75c1520"><td class="memItemLeft" align="right" valign="top"><a id="a0cecdc6c212b1d48eab7cf68f75c1520"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInQuad</b> (double t)</td></tr>
<tr class="separator:a0cecdc6c212b1d48eab7cf68f75c1520"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af87cb2cf62e5720227c5112a4ea57fb8"><td class="memItemLeft" align="right" valign="top"><a id="af87cb2cf62e5720227c5112a4ea57fb8"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutQuad</b> (double t)</td></tr>
<tr class="separator:af87cb2cf62e5720227c5112a4ea57fb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acddb5b29f212e90bf1a522f0504b1a70"><td class="memItemLeft" align="right" valign="top"><a id="acddb5b29f212e90bf1a522f0504b1a70"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutQuad</b> (double t)</td></tr>
<tr class="separator:acddb5b29f212e90bf1a522f0504b1a70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b0aeaa49850d2199fb4c61d250062a5"><td class="memItemLeft" align="right" valign="top"><a id="a5b0aeaa49850d2199fb4c61d250062a5"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInCubic</b> (double t)</td></tr>
<tr class="separator:a5b0aeaa49850d2199fb4c61d250062a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd3f2fd47fa514cc574076dd62301175"><td class="memItemLeft" align="right" valign="top"><a id="abd3f2fd47fa514cc574076dd62301175"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutCubic</b> (double t)</td></tr>
<tr class="separator:abd3f2fd47fa514cc574076dd62301175"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab34cdab1db9e0d50687e33048a68289"><td class="memItemLeft" align="right" valign="top"><a id="aab34cdab1db9e0d50687e33048a68289"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutCubic</b> (double t)</td></tr>
<tr class="separator:aab34cdab1db9e0d50687e33048a68289"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbf526c0549020ee39a410afb2da7e47"><td class="memItemLeft" align="right" valign="top"><a id="acbf526c0549020ee39a410afb2da7e47"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInQuartic</b> (double t)</td></tr>
<tr class="separator:acbf526c0549020ee39a410afb2da7e47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba95ee28f223924051c279238d58872e"><td class="memItemLeft" align="right" valign="top"><a id="aba95ee28f223924051c279238d58872e"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutQuartic</b> (double t)</td></tr>
<tr class="separator:aba95ee28f223924051c279238d58872e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8129baca56453195addaa0fc4c4045f2"><td class="memItemLeft" align="right" valign="top"><a id="a8129baca56453195addaa0fc4c4045f2"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutQuartic</b> (double t)</td></tr>
<tr class="separator:a8129baca56453195addaa0fc4c4045f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9e7e34dbd49211f36e75aac8f5d00c4"><td class="memItemLeft" align="right" valign="top"><a id="aa9e7e34dbd49211f36e75aac8f5d00c4"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInQuintic</b> (double t)</td></tr>
<tr class="separator:aa9e7e34dbd49211f36e75aac8f5d00c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab82ae516534fc9cabf2445dc20ba09b1"><td class="memItemLeft" align="right" valign="top"><a id="ab82ae516534fc9cabf2445dc20ba09b1"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutQuintic</b> (double t)</td></tr>
<tr class="separator:ab82ae516534fc9cabf2445dc20ba09b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6937ecd2112dfdeb6f7edfffc92ed50f"><td class="memItemLeft" align="right" valign="top"><a id="a6937ecd2112dfdeb6f7edfffc92ed50f"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutQuintic</b> (double t)</td></tr>
<tr class="separator:a6937ecd2112dfdeb6f7edfffc92ed50f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33bf11140288d64800965dfdf6be9765"><td class="memItemLeft" align="right" valign="top"><a id="a33bf11140288d64800965dfdf6be9765"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInExpo</b> (double t)</td></tr>
<tr class="separator:a33bf11140288d64800965dfdf6be9765"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff28609e122de356f518be83229e7a44"><td class="memItemLeft" align="right" valign="top"><a id="aff28609e122de356f518be83229e7a44"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutExpo</b> (double t)</td></tr>
<tr class="separator:aff28609e122de356f518be83229e7a44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c770b9c5ab18b5ca367808fbf7576b2"><td class="memItemLeft" align="right" valign="top"><a id="a4c770b9c5ab18b5ca367808fbf7576b2"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutExpo</b> (double t)</td></tr>
<tr class="separator:a4c770b9c5ab18b5ca367808fbf7576b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12f5b30d2becf8524e0cbf37c9fea778"><td class="memItemLeft" align="right" valign="top"><a id="a12f5b30d2becf8524e0cbf37c9fea778"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInCirc</b> (double t)</td></tr>
<tr class="separator:a12f5b30d2becf8524e0cbf37c9fea778"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a663914b1391ea2efcbdf4181c234e880"><td class="memItemLeft" align="right" valign="top"><a id="a663914b1391ea2efcbdf4181c234e880"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutCirc</b> (double t)</td></tr>
<tr class="separator:a663914b1391ea2efcbdf4181c234e880"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a405fde6c5f908009f27d99fff5e553"><td class="memItemLeft" align="right" valign="top"><a id="a9a405fde6c5f908009f27d99fff5e553"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutCirc</b> (double t)</td></tr>
<tr class="separator:a9a405fde6c5f908009f27d99fff5e553"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7ac09e93a8027460f9f6b5c48385218"><td class="memItemLeft" align="right" valign="top"><a id="ad7ac09e93a8027460f9f6b5c48385218"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInBack</b> (double t)</td></tr>
<tr class="separator:ad7ac09e93a8027460f9f6b5c48385218"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae266e886d02d150903fdfd274582145d"><td class="memItemLeft" align="right" valign="top"><a id="ae266e886d02d150903fdfd274582145d"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutBack</b> (double t)</td></tr>
<tr class="separator:ae266e886d02d150903fdfd274582145d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94bd024ed053d8ae43e3f7b3cd1686de"><td class="memItemLeft" align="right" valign="top"><a id="a94bd024ed053d8ae43e3f7b3cd1686de"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutBack</b> (double t)</td></tr>
<tr class="separator:a94bd024ed053d8ae43e3f7b3cd1686de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c615cb75a80b3a49fbbae9d1deb420b"><td class="memItemLeft" align="right" valign="top"><a id="a3c615cb75a80b3a49fbbae9d1deb420b"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInElastic</b> (double t)</td></tr>
<tr class="separator:a3c615cb75a80b3a49fbbae9d1deb420b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad70783774c1c9d6960467ddcf1a30ff3"><td class="memItemLeft" align="right" valign="top"><a id="ad70783774c1c9d6960467ddcf1a30ff3"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutElastic</b> (double t)</td></tr>
<tr class="separator:ad70783774c1c9d6960467ddcf1a30ff3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1321caab45e085689e63ce319a5d9587"><td class="memItemLeft" align="right" valign="top"><a id="a1321caab45e085689e63ce319a5d9587"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutElastic</b> (double t)</td></tr>
<tr class="separator:a1321caab45e085689e63ce319a5d9587"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a76cee59a3f50bcbc01e3ec1fc2877c"><td class="memItemLeft" align="right" valign="top"><a id="a3a76cee59a3f50bcbc01e3ec1fc2877c"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInBounce</b> (double t)</td></tr>
<tr class="separator:a3a76cee59a3f50bcbc01e3ec1fc2877c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca812c7fccbc2421954a6426de486fb3"><td class="memItemLeft" align="right" valign="top"><a id="aca812c7fccbc2421954a6426de486fb3"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutBounce</b> (double t)</td></tr>
<tr class="separator:aca812c7fccbc2421954a6426de486fb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a627882b1cef3075085eb18864c69421a"><td class="memItemLeft" align="right" valign="top"><a id="a627882b1cef3075085eb18864c69421a"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutBounce</b> (double t)</td></tr>
<tr class="separator:a627882b1cef3075085eb18864c69421a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b8c448b6e0f5b9dd6e97562d5a6a26f"><td class="memItemLeft" align="right" valign="top"><a id="a9b8c448b6e0f5b9dd6e97562d5a6a26f"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_Conical</b> (double t)</td></tr>
<tr class="separator:a9b8c448b6e0f5b9dd6e97562d5a6a26f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a978e39ab13b7e7eb9ea03fab8587206b"><td class="memItemLeft" align="right" valign="top"><a id="a978e39ab13b7e7eb9ea03fab8587206b"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_FadeInHoldFadeOut</b> (double t)</td></tr>
<tr class="separator:a978e39ab13b7e7eb9ea03fab8587206b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b1d4b8f79e8c1eec95074bd914d5f4b"><td class="memItemLeft" align="right" valign="top"><a id="a1b1d4b8f79e8c1eec95074bd914d5f4b"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_FadeInFadeOut</b> (double t)</td></tr>
<tr class="separator:a1b1d4b8f79e8c1eec95074bd914d5f4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a256583cc5c0415640a460b5ccd3a9ac7"><td class="memItemLeft" align="right" valign="top"><a id="a256583cc5c0415640a460b5ccd3a9ac7"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_Bell</b> (double t)</td></tr>
<tr class="separator:a256583cc5c0415640a460b5ccd3a9ac7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d5d19be71d0c15f90fc89269bf1be47"><td class="memItemLeft" align="right" valign="top"><a id="a3d5d19be71d0c15f90fc89269bf1be47"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a3d5d19be71d0c15f90fc89269bf1be47"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a3d5d19be71d0c15f90fc89269bf1be47">Pi</a> ()</td></tr>
<tr class="memdesc:a3d5d19be71d0c15f90fc89269bf1be47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the natural constant Pi. <br /></td></tr>
<tr class="separator:a3d5d19be71d0c15f90fc89269bf1be47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc41f4d36d3e9b29030c5371c1b7dbcc"><td class="memItemLeft" align="right" valign="top"><a id="acc41f4d36d3e9b29030c5371c1b7dbcc"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:acc41f4d36d3e9b29030c5371c1b7dbcc"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#acc41f4d36d3e9b29030c5371c1b7dbcc">e</a> ()</td></tr>
<tr class="memdesc:acc41f4d36d3e9b29030c5371c1b7dbcc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the natural constant e. <br /></td></tr>
<tr class="separator:acc41f4d36d3e9b29030c5371c1b7dbcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8a2977aa640bdda1ef83b45ccc09ad8"><td class="memItemLeft" align="right" valign="top"><a id="ad8a2977aa640bdda1ef83b45ccc09ad8"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ad8a2977aa640bdda1ef83b45ccc09ad8"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsNaN&lt; float &gt;</b> ()</td></tr>
<tr class="separator:ad8a2977aa640bdda1ef83b45ccc09ad8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7ff17f0d22db4abe09d4e491b66126b"><td class="memItemLeft" align="right" valign="top"><a id="ac7ff17f0d22db4abe09d4e491b66126b"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ac7ff17f0d22db4abe09d4e491b66126b"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsNaN&lt; double &gt;</b> ()</td></tr>
<tr class="separator:ac7ff17f0d22db4abe09d4e491b66126b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a969748d4019c81176bd1f7aa314bac1b"><td class="memItemLeft" align="right" valign="top"><a id="a969748d4019c81176bd1f7aa314bac1b"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a969748d4019c81176bd1f7aa314bac1b"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NaN</b> ()</td></tr>
<tr class="separator:a969748d4019c81176bd1f7aa314bac1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0a9f10bd4904f4cfb3bd650f6dcca68"><td class="memItemLeft" align="right" valign="top"><a id="ab0a9f10bd4904f4cfb3bd650f6dcca68"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ab0a9f10bd4904f4cfb3bd650f6dcca68"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsInfinity&lt; float &gt;</b> ()</td></tr>
<tr class="separator:ab0a9f10bd4904f4cfb3bd650f6dcca68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff14467b701fba57106d3c805317360e"><td class="memItemLeft" align="right" valign="top"><a id="aff14467b701fba57106d3c805317360e"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:aff14467b701fba57106d3c805317360e"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsInfinity&lt; double &gt;</b> ()</td></tr>
<tr class="separator:aff14467b701fba57106d3c805317360e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a680ed6a2f769c510192920436fc8e91a"><td class="memItemLeft" align="right" valign="top"><a id="a680ed6a2f769c510192920436fc8e91a"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a680ed6a2f769c510192920436fc8e91a"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Infinity</b> ()</td></tr>
<tr class="separator:a680ed6a2f769c510192920436fc8e91a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc0b00c63d158b7458530f044f3a9807"><td class="memItemLeft" align="right" valign="top"><a id="abc0b00c63d158b7458530f044f3a9807"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:abc0b00c63d158b7458530f044f3a9807"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt8&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#abc0b00c63d158b7458530f044f3a9807">MaxValue</a> ()</td></tr>
<tr class="memdesc:abc0b00c63d158b7458530f044f3a9807"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the largest possible positive value (that is not infinity). <br /></td></tr>
<tr class="separator:abc0b00c63d158b7458530f044f3a9807"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5593ae0389959c03e23390ed484c7c15"><td class="memItemLeft" align="right" valign="top"><a id="a5593ae0389959c03e23390ed484c7c15"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a5593ae0389959c03e23390ed484c7c15"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt8&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a5593ae0389959c03e23390ed484c7c15">MinValue</a> ()</td></tr>
<tr class="memdesc:a5593ae0389959c03e23390ed484c7c15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smallest possible value (that is not -infinity). Usually zero or -<a class="el" href="../../db/d78/namespaceez_math.htm#aa26019e0e85698d8a3d5ebb5c4d6075c" title="Returns the largest possible positive value (that is not infinity).">MaxValue()</a>. For signed integers this will be -<a class="el" href="../../db/d78/namespaceez_math.htm#aa26019e0e85698d8a3d5ebb5c4d6075c" title="Returns the largest possible positive value (that is not infinity).">MaxValue()</a> - 1. <br /></td></tr>
<tr class="separator:a5593ae0389959c03e23390ed484c7c15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52c644041e22758fea18140684ca8d2f"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a52c644041e22758fea18140684ca8d2f"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a52c644041e22758fea18140684ca8d2f">HighValue</a> ()</td></tr>
<tr class="memdesc:a52c644041e22758fea18140684ca8d2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">A very large value, that is slightly smaller than sqrt(MaxValue()).  <a href="../../db/d78/namespaceez_math.htm#a52c644041e22758fea18140684ca8d2f">More...</a><br /></td></tr>
<tr class="separator:a52c644041e22758fea18140684ca8d2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80bb3c914306eb036f448f73a356cde3"><td class="memItemLeft" align="right" valign="top"><a id="a80bb3c914306eb036f448f73a356cde3"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a80bb3c914306eb036f448f73a356cde3"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a80bb3c914306eb036f448f73a356cde3">FloatEpsilon</a> ()</td></tr>
<tr class="memdesc:a80bb3c914306eb036f448f73a356cde3"><td class="mdescLeft">&#160;</td><td class="mdescRight">The difference between 1.0 and the next representable value for the given type. <br /></td></tr>
<tr class="separator:a80bb3c914306eb036f448f73a356cde3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab14f5d367c601810a7b27f2dd7c2b546"><td class="memItemLeft" align="right" valign="top"><a id="ab14f5d367c601810a7b27f2dd7c2b546"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ab14f5d367c601810a7b27f2dd7c2b546"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezUInt8 &gt;</b> ()</td></tr>
<tr class="separator:ab14f5d367c601810a7b27f2dd7c2b546"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a176a175e74fa1185a4691fce9aea0a"><td class="memItemLeft" align="right" valign="top"><a id="a8a176a175e74fa1185a4691fce9aea0a"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a8a176a175e74fa1185a4691fce9aea0a"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezUInt16 &gt;</b> ()</td></tr>
<tr class="separator:a8a176a175e74fa1185a4691fce9aea0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c44d0da083adaa3190307c6a617d51f"><td class="memItemLeft" align="right" valign="top"><a id="a1c44d0da083adaa3190307c6a617d51f"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a1c44d0da083adaa3190307c6a617d51f"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezUInt32 &gt;</b> ()</td></tr>
<tr class="separator:a1c44d0da083adaa3190307c6a617d51f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf90da429753ff58079270527e2a6aa9"><td class="memItemLeft" align="right" valign="top"><a id="acf90da429753ff58079270527e2a6aa9"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:acf90da429753ff58079270527e2a6aa9"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezUInt64 &gt;</b> ()</td></tr>
<tr class="separator:acf90da429753ff58079270527e2a6aa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac212ea186518f880a79ffc346657afe1"><td class="memItemLeft" align="right" valign="top"><a id="ac212ea186518f880a79ffc346657afe1"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ac212ea186518f880a79ffc346657afe1"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezInt8 &gt;</b> ()</td></tr>
<tr class="separator:ac212ea186518f880a79ffc346657afe1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae620c3f528b38fca16bb17d3c26f44d3"><td class="memItemLeft" align="right" valign="top"><a id="ae620c3f528b38fca16bb17d3c26f44d3"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ae620c3f528b38fca16bb17d3c26f44d3"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezInt16 &gt;</b> ()</td></tr>
<tr class="separator:ae620c3f528b38fca16bb17d3c26f44d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0cd5f60b2075d6fec0db195fb4f2a76"><td class="memItemLeft" align="right" valign="top"><a id="ab0cd5f60b2075d6fec0db195fb4f2a76"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ab0cd5f60b2075d6fec0db195fb4f2a76"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezInt32 &gt;</b> ()</td></tr>
<tr class="separator:ab0cd5f60b2075d6fec0db195fb4f2a76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a959e6331fe18db886f34691d5631190e"><td class="memItemLeft" align="right" valign="top"><a id="a959e6331fe18db886f34691d5631190e"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a959e6331fe18db886f34691d5631190e"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; ezInt64 &gt;</b> ()</td></tr>
<tr class="separator:a959e6331fe18db886f34691d5631190e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0473436dac71af069b8cc5824a593e35"><td class="memItemLeft" align="right" valign="top"><a id="a0473436dac71af069b8cc5824a593e35"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a0473436dac71af069b8cc5824a593e35"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; float &gt;</b> ()</td></tr>
<tr class="separator:a0473436dac71af069b8cc5824a593e35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a955c71981bd877a87e17705f8730ea6c"><td class="memItemLeft" align="right" valign="top"><a id="a955c71981bd877a87e17705f8730ea6c"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a955c71981bd877a87e17705f8730ea6c"><td class="memTemplItemLeft" align="right" valign="top">constexpr ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; double &gt;</b> ()</td></tr>
<tr class="separator:a955c71981bd877a87e17705f8730ea6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfc8bc546fb58a0280cce97f9a40f324"><td class="memTemplParams" colspan="2"><a id="adfc8bc546fb58a0280cce97f9a40f324"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:adfc8bc546fb58a0280cce97f9a40f324"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#adfc8bc546fb58a0280cce97f9a40f324">Square</a> (T f)</td></tr>
<tr class="memdesc:adfc8bc546fb58a0280cce97f9a40f324"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns f * f. <br /></td></tr>
<tr class="separator:adfc8bc546fb58a0280cce97f9a40f324"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a916b088a06b14fe88660d630f8f63489"><td class="memTemplParams" colspan="2"><a id="a916b088a06b14fe88660d630f8f63489"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a916b088a06b14fe88660d630f8f63489"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a916b088a06b14fe88660d630f8f63489">Sign</a> (T f)</td></tr>
<tr class="memdesc:a916b088a06b14fe88660d630f8f63489"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the sign of f (i.e: -1, 1 or 0) <br /></td></tr>
<tr class="separator:a916b088a06b14fe88660d630f8f63489"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a746232810344aec07f7b870fa302fa8f"><td class="memTemplParams" colspan="2"><a id="a746232810344aec07f7b870fa302fa8f"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a746232810344aec07f7b870fa302fa8f"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">Abs</a> (T f)</td></tr>
<tr class="memdesc:a746232810344aec07f7b870fa302fa8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the absolute value of f. <br /></td></tr>
<tr class="separator:a746232810344aec07f7b870fa302fa8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8009b4da9cb427658d71e30576f209e"><td class="memTemplParams" colspan="2"><a id="ad8009b4da9cb427658d71e30576f209e"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad8009b4da9cb427658d71e30576f209e"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">Min</a> (T f1, T f2)</td></tr>
<tr class="memdesc:ad8009b4da9cb427658d71e30576f209e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2. <br /></td></tr>
<tr class="separator:ad8009b4da9cb427658d71e30576f209e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11f0b44966982d10d2cdfeb8eb897449"><td class="memTemplParams" colspan="2"><a id="a11f0b44966982d10d2cdfeb8eb897449"></a>
template&lt;typename T , typename... ARGS&gt; </td></tr>
<tr class="memitem:a11f0b44966982d10d2cdfeb8eb897449"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a11f0b44966982d10d2cdfeb8eb897449">Min</a> (T f1, T f2, ARGS... f)</td></tr>
<tr class="memdesc:a11f0b44966982d10d2cdfeb8eb897449"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2 or ... <br /></td></tr>
<tr class="separator:a11f0b44966982d10d2cdfeb8eb897449"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f7ee19d0f8e81ff6ae5f394075e3a56"><td class="memTemplParams" colspan="2"><a id="a6f7ee19d0f8e81ff6ae5f394075e3a56"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6f7ee19d0f8e81ff6ae5f394075e3a56"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">Max</a> (T f1, T f2)</td></tr>
<tr class="memdesc:a6f7ee19d0f8e81ff6ae5f394075e3a56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the greater value, f1 or f2. <br /></td></tr>
<tr class="separator:a6f7ee19d0f8e81ff6ae5f394075e3a56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c2df0b50d279b0afedb8c14ea698557"><td class="memTemplParams" colspan="2"><a id="a9c2df0b50d279b0afedb8c14ea698557"></a>
template&lt;typename T , typename... ARGS&gt; </td></tr>
<tr class="memitem:a9c2df0b50d279b0afedb8c14ea698557"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Max</b> (T f1, T f2, ARGS... f)</td></tr>
<tr class="separator:a9c2df0b50d279b0afedb8c14ea698557"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaedc100ad5d35ae5362021b9d1b0e7c"><td class="memTemplParams" colspan="2"><a id="aaaedc100ad5d35ae5362021b9d1b0e7c"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aaaedc100ad5d35ae5362021b9d1b0e7c"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#aaaedc100ad5d35ae5362021b9d1b0e7c">Clamp</a> (T value, T min_val, T max_val)</td></tr>
<tr class="memdesc:aaaedc100ad5d35ae5362021b9d1b0e7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [min; max]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:aaaedc100ad5d35ae5362021b9d1b0e7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade0bbc96e88750c5d07fed586baa0bd6"><td class="memTemplParams" colspan="2"><a id="ade0bbc96e88750c5d07fed586baa0bd6"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ade0bbc96e88750c5d07fed586baa0bd6"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ade0bbc96e88750c5d07fed586baa0bd6">Saturate</a> (T value)</td></tr>
<tr class="memdesc:ade0bbc96e88750c5d07fed586baa0bd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [0; 1]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:ade0bbc96e88750c5d07fed586baa0bd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0dc1e649849596eedbfa9f54894d779"><td class="memTemplParams" colspan="2"><a id="ac0dc1e649849596eedbfa9f54894d779"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ac0dc1e649849596eedbfa9f54894d779"><td class="memTemplItemLeft" align="right" valign="top">constexpr Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ac0dc1e649849596eedbfa9f54894d779">Invert</a> (Type f)</td></tr>
<tr class="memdesc:ac0dc1e649849596eedbfa9f54894d779"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 1 / f. <br /></td></tr>
<tr class="separator:ac0dc1e649849596eedbfa9f54894d779"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20cbb5a32d60124534dd65b2871166d0"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a20cbb5a32d60124534dd65b2871166d0">FirstBitLow</a> (ezUInt32 uiBitmask)</td></tr>
<tr class="memdesc:a20cbb5a32d60124534dd65b2871166d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the least significant bit set.  <a href="../../db/d78/namespaceez_math.htm#a20cbb5a32d60124534dd65b2871166d0">More...</a><br /></td></tr>
<tr class="separator:a20cbb5a32d60124534dd65b2871166d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15a5da4c47b32ba351aa17ad40b2e8fb"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a15a5da4c47b32ba351aa17ad40b2e8fb">FirstBitLow</a> (ezUInt64 uiBitmask)</td></tr>
<tr class="memdesc:a15a5da4c47b32ba351aa17ad40b2e8fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the least significant bit set.  <a href="../../db/d78/namespaceez_math.htm#a15a5da4c47b32ba351aa17ad40b2e8fb">More...</a><br /></td></tr>
<tr class="separator:a15a5da4c47b32ba351aa17ad40b2e8fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35aee647f78c0673015f09c8791c448f"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a35aee647f78c0673015f09c8791c448f">FirstBitHigh</a> (ezUInt32 uiBitmask)</td></tr>
<tr class="memdesc:a35aee647f78c0673015f09c8791c448f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the most significant bit set.  <a href="../../db/d78/namespaceez_math.htm#a35aee647f78c0673015f09c8791c448f">More...</a><br /></td></tr>
<tr class="separator:a35aee647f78c0673015f09c8791c448f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afef6820f942a6a313693ba68dfcbaa6c"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#afef6820f942a6a313693ba68dfcbaa6c">FirstBitHigh</a> (ezUInt64 uiBitmask)</td></tr>
<tr class="memdesc:afef6820f942a6a313693ba68dfcbaa6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the most significant bit set.  <a href="../../db/d78/namespaceez_math.htm#afef6820f942a6a313693ba68dfcbaa6c">More...</a><br /></td></tr>
<tr class="separator:afef6820f942a6a313693ba68dfcbaa6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a0cd6f0b8682242cb973308553f7b13"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a9a0cd6f0b8682242cb973308553f7b13">CountTrailingZeros</a> (ezUInt32 uiBitmask)</td></tr>
<tr class="separator:a9a0cd6f0b8682242cb973308553f7b13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33ac820872a03d6eae5f59bc0a67f44d"><td class="memItemLeft" align="right" valign="top"><a id="a33ac820872a03d6eae5f59bc0a67f44d"></a>
EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a33ac820872a03d6eae5f59bc0a67f44d">CountTrailingZeros</a> (ezUInt64 uiBitmask)</td></tr>
<tr class="memdesc:a33ac820872a03d6eae5f59bc0a67f44d"><td class="mdescLeft">&#160;</td><td class="mdescRight">64 bit overload for <a class="el" href="../../db/d78/namespaceez_math.htm#a9a0cd6f0b8682242cb973308553f7b13">CountTrailingZeros()</a> <br /></td></tr>
<tr class="separator:a33ac820872a03d6eae5f59bc0a67f44d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace4ed6e4b2f22c9ef2c8a9666f734807"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ace4ed6e4b2f22c9ef2c8a9666f734807">CountLeadingZeros</a> (ezUInt32 uiBitmask)</td></tr>
<tr class="separator:ace4ed6e4b2f22c9ef2c8a9666f734807"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a78ee109368657dafd74a19d26d6b7c"><td class="memItemLeft" align="right" valign="top"><a id="a6a78ee109368657dafd74a19d26d6b7c"></a>
EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a6a78ee109368657dafd74a19d26d6b7c">CountBits</a> (ezUInt32 value)</td></tr>
<tr class="memdesc:a6a78ee109368657dafd74a19d26d6b7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bits set. <br /></td></tr>
<tr class="separator:a6a78ee109368657dafd74a19d26d6b7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a538c5d18dbeb682d0495ed375be090b7"><td class="memItemLeft" align="right" valign="top"><a id="a538c5d18dbeb682d0495ed375be090b7"></a>
EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a538c5d18dbeb682d0495ed375be090b7">CountBits</a> (ezUInt64 value)</td></tr>
<tr class="memdesc:a538c5d18dbeb682d0495ed375be090b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bits set. <br /></td></tr>
<tr class="separator:a538c5d18dbeb682d0495ed375be090b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeafa63a6222ab8eb0438d22efda2e632"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:aeafa63a6222ab8eb0438d22efda2e632"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#aeafa63a6222ab8eb0438d22efda2e632">Bitmask_LowN</a> (ezUInt32 uiNumBitsToSet)</td></tr>
<tr class="memdesc:aeafa63a6222ab8eb0438d22efda2e632"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a bitmask in which the low N bits are set. For example for N=5, this would be '0000 ... 0001 1111'.  <a href="../../db/d78/namespaceez_math.htm#aeafa63a6222ab8eb0438d22efda2e632">More...</a><br /></td></tr>
<tr class="separator:aeafa63a6222ab8eb0438d22efda2e632"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b9414b10b8aa20fb18fddd5aa64664f"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a7b9414b10b8aa20fb18fddd5aa64664f"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a7b9414b10b8aa20fb18fddd5aa64664f">Bitmask_HighN</a> (ezUInt32 uiNumBitsToSet)</td></tr>
<tr class="memdesc:a7b9414b10b8aa20fb18fddd5aa64664f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a bitmask in which the high N bits are set. For example for N=5, this would be '1111 1000 ... 0000'.  <a href="../../db/d78/namespaceez_math.htm#a7b9414b10b8aa20fb18fddd5aa64664f">More...</a><br /></td></tr>
<tr class="separator:a7b9414b10b8aa20fb18fddd5aa64664f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cd624055a97c96719b925cb11e6a08e"><td class="memTemplParams" colspan="2"><a id="a0cd624055a97c96719b925cb11e6a08e"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0cd624055a97c96719b925cb11e6a08e"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a0cd624055a97c96719b925cb11e6a08e">Swap</a> (T &amp;ref_f1, T &amp;ref_f2)</td></tr>
<tr class="memdesc:a0cd624055a97c96719b925cb11e6a08e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps the values in the two variables f1 and f2. <br /></td></tr>
<tr class="separator:a0cd624055a97c96719b925cb11e6a08e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70aea4554d1be096b314db9f10c9f1fc"><td class="memTemplParams" colspan="2"><a id="a70aea4554d1be096b314db9f10c9f1fc"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a70aea4554d1be096b314db9f10c9f1fc"><td class="memTemplItemLeft" align="right" valign="top">EZ_FORCE_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a70aea4554d1be096b314db9f10c9f1fc">Lerp</a> (T f1, T f2, float fFactor)</td></tr>
<tr class="memdesc:a70aea4554d1be096b314db9f10c9f1fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:a70aea4554d1be096b314db9f10c9f1fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11bfb79243b86b575e2f60f7c2eba209"><td class="memTemplParams" colspan="2"><a id="a11bfb79243b86b575e2f60f7c2eba209"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a11bfb79243b86b575e2f60f7c2eba209"><td class="memTemplItemLeft" align="right" valign="top">EZ_FORCE_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a11bfb79243b86b575e2f60f7c2eba209">Lerp</a> (T f1, T f2, double fFactor)</td></tr>
<tr class="memdesc:a11bfb79243b86b575e2f60f7c2eba209"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:a11bfb79243b86b575e2f60f7c2eba209"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3f7bcae4b9569e58e64417ba8b622f5"><td class="memTemplParams" colspan="2"><a id="ac3f7bcae4b9569e58e64417ba8b622f5"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac3f7bcae4b9569e58e64417ba8b622f5"><td class="memTemplItemLeft" align="right" valign="top">constexpr EZ_FORCE_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ac3f7bcae4b9569e58e64417ba8b622f5">Step</a> (T value, T edge)</td></tr>
<tr class="memdesc:ac3f7bcae4b9569e58e64417ba8b622f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 0, if value &lt; edge, and 1, if value &gt;= edge. <br /></td></tr>
<tr class="separator:ac3f7bcae4b9569e58e64417ba8b622f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a194e5582f9a01688fc03e4620e231d29"><td class="memItemLeft" align="right" valign="top"><a id="a194e5582f9a01688fc03e4620e231d29"></a>
constexpr EZ_FORCE_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a194e5582f9a01688fc03e4620e231d29">IsPowerOf2</a> (ezInt32 value)</td></tr>
<tr class="memdesc:a194e5582f9a01688fc03e4620e231d29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there exists some x with 2^x == value. <br /></td></tr>
<tr class="separator:a194e5582f9a01688fc03e4620e231d29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa96f5ff328740dfa93f287fbf4735f6e"><td class="memItemLeft" align="right" valign="top"><a id="aa96f5ff328740dfa93f287fbf4735f6e"></a>
constexpr EZ_FORCE_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#aa96f5ff328740dfa93f287fbf4735f6e">IsPowerOf2</a> (ezUInt32 value)</td></tr>
<tr class="memdesc:aa96f5ff328740dfa93f287fbf4735f6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there exists some x with 2^x == value. <br /></td></tr>
<tr class="separator:aa96f5ff328740dfa93f287fbf4735f6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa15fef5dd09bffb82b0d3ce5d7de3255"><td class="memTemplParams" colspan="2"><a id="aa15fef5dd09bffb82b0d3ce5d7de3255"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:aa15fef5dd09bffb82b0d3ce5d7de3255"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#aa15fef5dd09bffb82b0d3ce5d7de3255">IsEqual</a> (Type lhs, Type rhs, Type fEpsilon)</td></tr>
<tr class="memdesc:aa15fef5dd09bffb82b0d3ce5d7de3255"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks, whether fValue is in the range [fDesired - fMaxImprecision; fDesired + fMaxImprecision]. <br /></td></tr>
<tr class="separator:aa15fef5dd09bffb82b0d3ce5d7de3255"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae076df9c39820ea636c580267e2e379a"><td class="memTemplParams" colspan="2"><a id="ae076df9c39820ea636c580267e2e379a"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae076df9c39820ea636c580267e2e379a"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ae076df9c39820ea636c580267e2e379a">IsInRange</a> (T value, T minVal, T maxVal)</td></tr>
<tr class="memdesc:ae076df9c39820ea636c580267e2e379a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the value of the first parameter lies between the value of the second and third. <br /></td></tr>
<tr class="separator:ae076df9c39820ea636c580267e2e379a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0c686588a98fa8c07722fc48f1ffd7f"><td class="memTemplParams" colspan="2"><a id="ad0c686588a98fa8c07722fc48f1ffd7f"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ad0c686588a98fa8c07722fc48f1ffd7f"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ad0c686588a98fa8c07722fc48f1ffd7f">IsZero</a> (Type f, Type fEpsilon)</td></tr>
<tr class="memdesc:ad0c686588a98fa8c07722fc48f1ffd7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given number is close to zero. <br /></td></tr>
<tr class="separator:ad0c686588a98fa8c07722fc48f1ffd7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89a5cb364bf8bf76155b42b477e2540a"><td class="memTemplParams" colspan="2"><a id="a89a5cb364bf8bf76155b42b477e2540a"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a89a5cb364bf8bf76155b42b477e2540a"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a89a5cb364bf8bf76155b42b477e2540a">Trunc</a> (Type f)</td></tr>
<tr class="memdesc:a89a5cb364bf8bf76155b42b477e2540a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the integer-part of f (removes the fraction). <br /></td></tr>
<tr class="separator:a89a5cb364bf8bf76155b42b477e2540a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6648cbd915168c7e2b5d4a922ee1974"><td class="memTemplParams" colspan="2"><a id="ab6648cbd915168c7e2b5d4a922ee1974"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ab6648cbd915168c7e2b5d4a922ee1974"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ab6648cbd915168c7e2b5d4a922ee1974">Fraction</a> (Type f)</td></tr>
<tr class="memdesc:ab6648cbd915168c7e2b5d4a922ee1974"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the fraction-part of f. <br /></td></tr>
<tr class="separator:ab6648cbd915168c7e2b5d4a922ee1974"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5e77037bdf9e792c81afa239f70ad7a"><td class="memTemplParams" colspan="2"><a id="ae5e77037bdf9e792c81afa239f70ad7a"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ae5e77037bdf9e792c81afa239f70ad7a"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ae5e77037bdf9e792c81afa239f70ad7a">SmoothStep</a> (Type value, Type edge1, Type edge2)</td></tr>
<tr class="memdesc:ae5e77037bdf9e792c81afa239f70ad7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 0, if value is &lt;= edge1, 1 if value &gt;= edge2 and the hermite interpolation in between. <br /></td></tr>
<tr class="separator:ae5e77037bdf9e792c81afa239f70ad7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a457021bab9536d2908c2a0e3cafed9ac"><td class="memItemLeft" align="right" valign="top"><a id="a457021bab9536d2908c2a0e3cafed9ac"></a>
ezUInt8&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a457021bab9536d2908c2a0e3cafed9ac">ColorFloatToByte</a> (float value)</td></tr>
<tr class="memdesc:a457021bab9536d2908c2a0e3cafed9ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [0;1] range to unsigned byte [0;255] range, with proper rounding. <br /></td></tr>
<tr class="separator:a457021bab9536d2908c2a0e3cafed9ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30569f90ca9871c3f39ab6090bfa5d1e"><td class="memItemLeft" align="right" valign="top"><a id="a30569f90ca9871c3f39ab6090bfa5d1e"></a>
ezUInt16&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a30569f90ca9871c3f39ab6090bfa5d1e">ColorFloatToShort</a> (float value)</td></tr>
<tr class="memdesc:a30569f90ca9871c3f39ab6090bfa5d1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [0;1] range to unsigned short [0;65535] range, with proper rounding. <br /></td></tr>
<tr class="separator:a30569f90ca9871c3f39ab6090bfa5d1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a156f52cf5bf3a533b7a3525aaf0f4f7a"><td class="memItemLeft" align="right" valign="top"><a id="a156f52cf5bf3a533b7a3525aaf0f4f7a"></a>
ezInt8&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a156f52cf5bf3a533b7a3525aaf0f4f7a">ColorFloatToSignedByte</a> (float value)</td></tr>
<tr class="memdesc:a156f52cf5bf3a533b7a3525aaf0f4f7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [-1;1] range to signed byte [-127;127] range, with proper rounding. <br /></td></tr>
<tr class="separator:a156f52cf5bf3a533b7a3525aaf0f4f7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad79cf3137df7949cc1ab78d3c72f785b"><td class="memItemLeft" align="right" valign="top"><a id="ad79cf3137df7949cc1ab78d3c72f785b"></a>
ezInt16&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ad79cf3137df7949cc1ab78d3c72f785b">ColorFloatToSignedShort</a> (float value)</td></tr>
<tr class="memdesc:ad79cf3137df7949cc1ab78d3c72f785b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [-1;1] range to signed short [-32767;32767] range, with proper rounding. <br /></td></tr>
<tr class="separator:ad79cf3137df7949cc1ab78d3c72f785b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cd11d5080a5fa2de5dcb370c52b3df1"><td class="memItemLeft" align="right" valign="top"><a id="a7cd11d5080a5fa2de5dcb370c52b3df1"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a7cd11d5080a5fa2de5dcb370c52b3df1">ColorByteToFloat</a> (ezUInt8 value)</td></tr>
<tr class="memdesc:a7cd11d5080a5fa2de5dcb370c52b3df1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from unsigned byte [0;255] range to float [0;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:a7cd11d5080a5fa2de5dcb370c52b3df1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a900c21bd68b35b424f5b9062dc8d01dc"><td class="memItemLeft" align="right" valign="top"><a id="a900c21bd68b35b424f5b9062dc8d01dc"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a900c21bd68b35b424f5b9062dc8d01dc">ColorShortToFloat</a> (ezUInt16 value)</td></tr>
<tr class="memdesc:a900c21bd68b35b424f5b9062dc8d01dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from unsigned short [0;65535] range to float [0;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:a900c21bd68b35b424f5b9062dc8d01dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a808d5693a74e2431e20be639af567135"><td class="memItemLeft" align="right" valign="top"><a id="a808d5693a74e2431e20be639af567135"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a808d5693a74e2431e20be639af567135">ColorSignedByteToFloat</a> (ezInt8 value)</td></tr>
<tr class="memdesc:a808d5693a74e2431e20be639af567135"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from signed byte [-128;127] range to float [-1;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:a808d5693a74e2431e20be639af567135"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5542431bf5124093dcea8d21cff1df7b"><td class="memItemLeft" align="right" valign="top"><a id="a5542431bf5124093dcea8d21cff1df7b"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a5542431bf5124093dcea8d21cff1df7b">ColorSignedShortToFloat</a> (ezInt16 value)</td></tr>
<tr class="memdesc:a5542431bf5124093dcea8d21cff1df7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from signed short [-32768;32767] range to float [0;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:a5542431bf5124093dcea8d21cff1df7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe0f677cabbc6c19aa2dfdc514e21780"><td class="memTemplParams" colspan="2"><a id="abe0f677cabbc6c19aa2dfdc514e21780"></a>
template&lt;typename T , typename T2 &gt; </td></tr>
<tr class="memitem:abe0f677cabbc6c19aa2dfdc514e21780"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#abe0f677cabbc6c19aa2dfdc514e21780">EvaluateBezierCurve</a> (T2 t, const T &amp;startPoint, const T &amp;controlPoint1, const T &amp;controlPoint2, const T &amp;endPoint)</td></tr>
<tr class="memdesc:abe0f677cabbc6c19aa2dfdc514e21780"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluates the cubic spline defined by four control points at time <em>t</em> and returns the interpolated result. Can be used with T as float, vec2, vec3 or vec4. <br /></td></tr>
<tr class="separator:abe0f677cabbc6c19aa2dfdc514e21780"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf4c8d71fab65e51a733dc22534fbd75"><td class="memItemLeft" align="right" valign="top"><a id="abf4c8d71fab65e51a733dc22534fbd75"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsFinite</b> (double value)</td></tr>
<tr class="separator:abf4c8d71fab65e51a733dc22534fbd75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6622a45e949dcf37a93748fc6962270c"><td class="memItemLeft" align="right" valign="top"><a id="a6622a45e949dcf37a93748fc6962270c"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsNaN</b> (double value)</td></tr>
<tr class="separator:a6622a45e949dcf37a93748fc6962270c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e63d05cb1b3040437b8789037927926"><td class="memItemLeft" align="right" valign="top"><a id="a1e63d05cb1b3040437b8789037927926"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Floor</b> (double f)</td></tr>
<tr class="separator:a1e63d05cb1b3040437b8789037927926"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0914dcddcb187731f738c303c6534c5b"><td class="memItemLeft" align="right" valign="top"><a id="a0914dcddcb187731f738c303c6534c5b"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Ceil</b> (double f)</td></tr>
<tr class="separator:a0914dcddcb187731f738c303c6534c5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3eaa04e59a8c066cc25b1966f760f08d"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a3eaa04e59a8c066cc25b1966f760f08d">Round</a> (double f)</td></tr>
<tr class="memdesc:a3eaa04e59a8c066cc25b1966f760f08d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the next integer.  <a href="../../db/d78/namespaceez_math.htm#a3eaa04e59a8c066cc25b1966f760f08d">More...</a><br /></td></tr>
<tr class="separator:a3eaa04e59a8c066cc25b1966f760f08d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c2327035769c42fcb8d220fa92a55d7"><td class="memItemLeft" align="right" valign="top"><a id="a7c2327035769c42fcb8d220fa92a55d7"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a7c2327035769c42fcb8d220fa92a55d7">RoundDown</a> (double f, double fMultiple)</td></tr>
<tr class="memdesc:a7c2327035769c42fcb8d220fa92a55d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is smaller than f. <br /></td></tr>
<tr class="separator:a7c2327035769c42fcb8d220fa92a55d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40900843c7a836171770b66bf233c4a4"><td class="memItemLeft" align="right" valign="top"><a id="a40900843c7a836171770b66bf233c4a4"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a40900843c7a836171770b66bf233c4a4">RoundUp</a> (double f, double fMultiple)</td></tr>
<tr class="memdesc:a40900843c7a836171770b66bf233c4a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is larger than f. <br /></td></tr>
<tr class="separator:a40900843c7a836171770b66bf233c4a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0722f85d43ba80c523681eb5107b54d9"><td class="memItemLeft" align="right" valign="top"><a id="a0722f85d43ba80c523681eb5107b54d9"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a0722f85d43ba80c523681eb5107b54d9">RoundToMultiple</a> (double f, double fMultiple)</td></tr>
<tr class="memdesc:a0722f85d43ba80c523681eb5107b54d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the closest value of multiple. <br /></td></tr>
<tr class="separator:a0722f85d43ba80c523681eb5107b54d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6a0ef509e9e11a5d9e350ff6166906e"><td class="memItemLeft" align="right" valign="top"><a id="ad6a0ef509e9e11a5d9e350ff6166906e"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Exp</b> (double f)</td></tr>
<tr class="separator:ad6a0ef509e9e11a5d9e350ff6166906e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4da7a857e17e7ef38330e2f01c5b56f1"><td class="memItemLeft" align="right" valign="top"><a id="a4da7a857e17e7ef38330e2f01c5b56f1"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Ln</b> (double f)</td></tr>
<tr class="separator:a4da7a857e17e7ef38330e2f01c5b56f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa026a0d5834fb5c1159fbd7e92be573"><td class="memItemLeft" align="right" valign="top"><a id="aaa026a0d5834fb5c1159fbd7e92be573"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Log2</b> (double f)</td></tr>
<tr class="separator:aaa026a0d5834fb5c1159fbd7e92be573"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6be5c0406583c4ce1687b2cc9920758a"><td class="memItemLeft" align="right" valign="top"><a id="a6be5c0406583c4ce1687b2cc9920758a"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Log10</b> (double f)</td></tr>
<tr class="separator:a6be5c0406583c4ce1687b2cc9920758a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd80fba992c515b42a7e1de5d976984a"><td class="memItemLeft" align="right" valign="top"><a id="afd80fba992c515b42a7e1de5d976984a"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Log</b> (double fBase, double f)</td></tr>
<tr class="separator:afd80fba992c515b42a7e1de5d976984a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2f8614e753667ee54f81059c8f622f4"><td class="memItemLeft" align="right" valign="top"><a id="ad2f8614e753667ee54f81059c8f622f4"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Pow2</b> (double f)</td></tr>
<tr class="separator:ad2f8614e753667ee54f81059c8f622f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94a6e7e817fe9a24c662cd7214a58bc4"><td class="memItemLeft" align="right" valign="top"><a id="a94a6e7e817fe9a24c662cd7214a58bc4"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Pow</b> (double fBase, double fExp)</td></tr>
<tr class="separator:a94a6e7e817fe9a24c662cd7214a58bc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51ec53ec077eafbbb21d1c81e0cc8228"><td class="memItemLeft" align="right" valign="top"><a id="a51ec53ec077eafbbb21d1c81e0cc8228"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Root</b> (double f, double fNthRoot)</td></tr>
<tr class="separator:a51ec53ec077eafbbb21d1c81e0cc8228"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f4e38e30c7914d11bcc85b0a4b1c09a"><td class="memItemLeft" align="right" valign="top"><a id="a7f4e38e30c7914d11bcc85b0a4b1c09a"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a7f4e38e30c7914d11bcc85b0a4b1c09a">Sqrt</a> (double f)</td></tr>
<tr class="memdesc:a7f4e38e30c7914d11bcc85b0a4b1c09a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the square root of f. <br /></td></tr>
<tr class="separator:a7f4e38e30c7914d11bcc85b0a4b1c09a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a836d8cdcc38eea643d9442df6d4fd3c0"><td class="memItemLeft" align="right" valign="top"><a id="a836d8cdcc38eea643d9442df6d4fd3c0"></a>
EZ_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a836d8cdcc38eea643d9442df6d4fd3c0">Mod</a> (double f, double fDiv)</td></tr>
<tr class="memdesc:a836d8cdcc38eea643d9442df6d4fd3c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns "value mod div" for doubles. This also works with negative numbers, both for value and for div. <br /></td></tr>
<tr class="separator:a836d8cdcc38eea643d9442df6d4fd3c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95594529ec436b92437de3d95b7a14a5"><td class="memItemLeft" align="right" valign="top"><a id="a95594529ec436b92437de3d95b7a14a5"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsFinite</b> (float value)</td></tr>
<tr class="separator:a95594529ec436b92437de3d95b7a14a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae25f1ac32d79d0b67c375b0140adabd5"><td class="memItemLeft" align="right" valign="top"><a id="ae25f1ac32d79d0b67c375b0140adabd5"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsNaN</b> (float value)</td></tr>
<tr class="separator:ae25f1ac32d79d0b67c375b0140adabd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f1f04277a5268f8368143df99fcb58d"><td class="memItemLeft" align="right" valign="top"><a id="a4f1f04277a5268f8368143df99fcb58d"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a4f1f04277a5268f8368143df99fcb58d">Floor</a> (float f)</td></tr>
<tr class="memdesc:a4f1f04277a5268f8368143df99fcb58d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next smaller integer, closest to f. Also the SMALLER value, if f is negative. <br /></td></tr>
<tr class="separator:a4f1f04277a5268f8368143df99fcb58d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69f658b9dc1a50b90df3dce2c41ddbfe"><td class="memItemLeft" align="right" valign="top"><a id="a69f658b9dc1a50b90df3dce2c41ddbfe"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a69f658b9dc1a50b90df3dce2c41ddbfe">Ceil</a> (float f)</td></tr>
<tr class="memdesc:a69f658b9dc1a50b90df3dce2c41ddbfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next higher integer, closest to f. Also the HIGHER value, if f is negative. <br /></td></tr>
<tr class="separator:a69f658b9dc1a50b90df3dce2c41ddbfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace725c91daf115ff11418655fcf83f0c"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ace725c91daf115ff11418655fcf83f0c">Round</a> (float f)</td></tr>
<tr class="memdesc:ace725c91daf115ff11418655fcf83f0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the next integer.  <a href="../../db/d78/namespaceez_math.htm#ace725c91daf115ff11418655fcf83f0c">More...</a><br /></td></tr>
<tr class="separator:ace725c91daf115ff11418655fcf83f0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d0896fa18391bd771afac0a9af31ad2"><td class="memItemLeft" align="right" valign="top"><a id="a0d0896fa18391bd771afac0a9af31ad2"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a0d0896fa18391bd771afac0a9af31ad2">RoundToMultiple</a> (float f, float fMultiple)</td></tr>
<tr class="memdesc:a0d0896fa18391bd771afac0a9af31ad2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the closest value of multiple. <br /></td></tr>
<tr class="separator:a0d0896fa18391bd771afac0a9af31ad2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa37de9214425b8b8e412050ab645c51a"><td class="memItemLeft" align="right" valign="top"><a id="aa37de9214425b8b8e412050ab645c51a"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#aa37de9214425b8b8e412050ab645c51a">RoundDown</a> (float f, float fMultiple)</td></tr>
<tr class="memdesc:aa37de9214425b8b8e412050ab645c51a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is smaller than f. <br /></td></tr>
<tr class="separator:aa37de9214425b8b8e412050ab645c51a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67a9c8adeef5f887b65a4056f813867f"><td class="memItemLeft" align="right" valign="top"><a id="a67a9c8adeef5f887b65a4056f813867f"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a67a9c8adeef5f887b65a4056f813867f">RoundUp</a> (float f, float fMultiple)</td></tr>
<tr class="memdesc:a67a9c8adeef5f887b65a4056f813867f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is larger than f. <br /></td></tr>
<tr class="separator:a67a9c8adeef5f887b65a4056f813867f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05995060e61c0946e14619b45cd1adef"><td class="memItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a05995060e61c0946e14619b45cd1adef">Sin</a> (<a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> a)</td></tr>
<tr class="memdesc:a05995060e61c0946e14619b45cd1adef"><td class="mdescLeft">&#160;</td><td class="mdescRight">***** Trigonometric Functions *****  <a href="../../db/d78/namespaceez_math.htm#a05995060e61c0946e14619b45cd1adef">More...</a><br /></td></tr>
<tr class="separator:a05995060e61c0946e14619b45cd1adef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40cf3173aac40e0e462c57728e9410ab"><td class="memItemLeft" align="right" valign="top"><a id="a40cf3173aac40e0e462c57728e9410ab"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a40cf3173aac40e0e462c57728e9410ab">Cos</a> (<a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> a)</td></tr>
<tr class="memdesc:a40cf3173aac40e0e462c57728e9410ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes an angle, returns its cosine. <br /></td></tr>
<tr class="separator:a40cf3173aac40e0e462c57728e9410ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade2e0a31251abf869a932b0d038a410b"><td class="memItemLeft" align="right" valign="top"><a id="ade2e0a31251abf869a932b0d038a410b"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ade2e0a31251abf869a932b0d038a410b">Tan</a> (<a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> a)</td></tr>
<tr class="memdesc:ade2e0a31251abf869a932b0d038a410b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes an angle, returns its tangent. <br /></td></tr>
<tr class="separator:ade2e0a31251abf869a932b0d038a410b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40d1040acdbbf0e452767d15d1c7a564"><td class="memItemLeft" align="right" valign="top"><a id="a40d1040acdbbf0e452767d15d1c7a564"></a>
EZ_ALWAYS_INLINE <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a40d1040acdbbf0e452767d15d1c7a564">ASin</a> (float f)</td></tr>
<tr class="memdesc:a40d1040acdbbf0e452767d15d1c7a564"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus sinus of f. <br /></td></tr>
<tr class="separator:a40d1040acdbbf0e452767d15d1c7a564"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcbf5132d5cbfc7070cd6d3086709ceb"><td class="memItemLeft" align="right" valign="top"><a id="afcbf5132d5cbfc7070cd6d3086709ceb"></a>
EZ_ALWAYS_INLINE <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#afcbf5132d5cbfc7070cd6d3086709ceb">ACos</a> (float f)</td></tr>
<tr class="memdesc:afcbf5132d5cbfc7070cd6d3086709ceb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus cosinus of f. <br /></td></tr>
<tr class="separator:afcbf5132d5cbfc7070cd6d3086709ceb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc8b4b9979785105fb73b9f7f8d58c74"><td class="memItemLeft" align="right" valign="top"><a id="afc8b4b9979785105fb73b9f7f8d58c74"></a>
EZ_ALWAYS_INLINE <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#afc8b4b9979785105fb73b9f7f8d58c74">ATan</a> (float f)</td></tr>
<tr class="memdesc:afc8b4b9979785105fb73b9f7f8d58c74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus tangent of f. <br /></td></tr>
<tr class="separator:afc8b4b9979785105fb73b9f7f8d58c74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41072c694c87f95f34ab5c13b562fcfe"><td class="memItemLeft" align="right" valign="top"><a id="a41072c694c87f95f34ab5c13b562fcfe"></a>
EZ_ALWAYS_INLINE <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a41072c694c87f95f34ab5c13b562fcfe">ATan2</a> (float y, float x)</td></tr>
<tr class="memdesc:a41072c694c87f95f34ab5c13b562fcfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the atan2 of x and y. <br /></td></tr>
<tr class="separator:a41072c694c87f95f34ab5c13b562fcfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93c351504ab4f4235860c9d7f2d6171f"><td class="memItemLeft" align="right" valign="top"><a id="a93c351504ab4f4235860c9d7f2d6171f"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a93c351504ab4f4235860c9d7f2d6171f">Exp</a> (float f)</td></tr>
<tr class="memdesc:a93c351504ab4f4235860c9d7f2d6171f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns e^f. <br /></td></tr>
<tr class="separator:a93c351504ab4f4235860c9d7f2d6171f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23e1fdae842b9d178197e896c72e34f2"><td class="memItemLeft" align="right" valign="top"><a id="a23e1fdae842b9d178197e896c72e34f2"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a23e1fdae842b9d178197e896c72e34f2">Ln</a> (float f)</td></tr>
<tr class="memdesc:a23e1fdae842b9d178197e896c72e34f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the logarithmus naturalis of f. <br /></td></tr>
<tr class="separator:a23e1fdae842b9d178197e896c72e34f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebc3ad877b97ba2123615bf85aec9c6a"><td class="memItemLeft" align="right" valign="top"><a id="aebc3ad877b97ba2123615bf85aec9c6a"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#aebc3ad877b97ba2123615bf85aec9c6a">Log2</a> (float f)</td></tr>
<tr class="memdesc:aebc3ad877b97ba2123615bf85aec9c6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base 2. <br /></td></tr>
<tr class="separator:aebc3ad877b97ba2123615bf85aec9c6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8fdca7daed33fbd76b910b0e55694e5"><td class="memItemLeft" align="right" valign="top"><a id="ae8fdca7daed33fbd76b910b0e55694e5"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ae8fdca7daed33fbd76b910b0e55694e5">Log10</a> (float f)</td></tr>
<tr class="memdesc:ae8fdca7daed33fbd76b910b0e55694e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base 10. <br /></td></tr>
<tr class="separator:ae8fdca7daed33fbd76b910b0e55694e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab28c06a7b41b3a10471800114245ecaa"><td class="memItemLeft" align="right" valign="top"><a id="ab28c06a7b41b3a10471800114245ecaa"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ab28c06a7b41b3a10471800114245ecaa">Log</a> (float fBase, float f)</td></tr>
<tr class="memdesc:ab28c06a7b41b3a10471800114245ecaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base fBase. <br /></td></tr>
<tr class="separator:ab28c06a7b41b3a10471800114245ecaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a764946f655a1beee0f608ceaec62c34a"><td class="memItemLeft" align="right" valign="top"><a id="a764946f655a1beee0f608ceaec62c34a"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a764946f655a1beee0f608ceaec62c34a">Pow2</a> (float f)</td></tr>
<tr class="memdesc:a764946f655a1beee0f608ceaec62c34a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 2^f. <br /></td></tr>
<tr class="separator:a764946f655a1beee0f608ceaec62c34a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95ff8f3c62d49c17356695c4bd8ecca7"><td class="memItemLeft" align="right" valign="top"><a id="a95ff8f3c62d49c17356695c4bd8ecca7"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a95ff8f3c62d49c17356695c4bd8ecca7">Pow</a> (float fBase, float fExp)</td></tr>
<tr class="memdesc:a95ff8f3c62d49c17356695c4bd8ecca7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns base^exp. <br /></td></tr>
<tr class="separator:a95ff8f3c62d49c17356695c4bd8ecca7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c67fafdb07e8d738b3b3e5cf7e0cf55"><td class="memItemLeft" align="right" valign="top"><a id="a1c67fafdb07e8d738b3b3e5cf7e0cf55"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a1c67fafdb07e8d738b3b3e5cf7e0cf55">Root</a> (float f, float fNthRoot)</td></tr>
<tr class="memdesc:a1c67fafdb07e8d738b3b3e5cf7e0cf55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the n-th root of f. <br /></td></tr>
<tr class="separator:a1c67fafdb07e8d738b3b3e5cf7e0cf55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2218b9e1098791893b5944d217c72e1"><td class="memItemLeft" align="right" valign="top"><a id="ad2218b9e1098791893b5944d217c72e1"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ad2218b9e1098791893b5944d217c72e1">Sqrt</a> (float f)</td></tr>
<tr class="memdesc:ad2218b9e1098791893b5944d217c72e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the square root of f. <br /></td></tr>
<tr class="separator:ad2218b9e1098791893b5944d217c72e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f9702c1b0c654715c3bcd83103b0fb8"><td class="memItemLeft" align="right" valign="top"><a id="a1f9702c1b0c654715c3bcd83103b0fb8"></a>
EZ_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a1f9702c1b0c654715c3bcd83103b0fb8">Mod</a> (float value, float fDiv)</td></tr>
<tr class="memdesc:a1f9702c1b0c654715c3bcd83103b0fb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns "value mod div" for floats. This also works with negative numbers, both for value and for div. <br /></td></tr>
<tr class="separator:a1f9702c1b0c654715c3bcd83103b0fb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4fa6a522fe85f2314b3c8f898a607cd"><td class="memItemLeft" align="right" valign="top"><a id="ad4fa6a522fe85f2314b3c8f898a607cd"></a>
constexpr EZ_ALWAYS_INLINE ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ad4fa6a522fe85f2314b3c8f898a607cd">RoundUp</a> (ezInt32 value, ezUInt16 uiMultiple)</td></tr>
<tr class="memdesc:ad4fa6a522fe85f2314b3c8f898a607cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is larger than or equal to value. <br /></td></tr>
<tr class="separator:ad4fa6a522fe85f2314b3c8f898a607cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cce072a81db482e27debcca09abf83d"><td class="memItemLeft" align="right" valign="top"><a id="a9cce072a81db482e27debcca09abf83d"></a>
constexpr EZ_ALWAYS_INLINE ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a9cce072a81db482e27debcca09abf83d">RoundDown</a> (ezInt32 value, ezUInt16 uiMultiple)</td></tr>
<tr class="memdesc:a9cce072a81db482e27debcca09abf83d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is smaller than or equal to value. <br /></td></tr>
<tr class="separator:a9cce072a81db482e27debcca09abf83d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f8482764c3d5cf7efbc8d5754aef2c3"><td class="memItemLeft" align="right" valign="top"><a id="a3f8482764c3d5cf7efbc8d5754aef2c3"></a>
constexpr EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a3f8482764c3d5cf7efbc8d5754aef2c3">RoundUp</a> (ezUInt32 value, ezUInt16 uiMultiple)</td></tr>
<tr class="memdesc:a3f8482764c3d5cf7efbc8d5754aef2c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is greater than or equal to value. <br /></td></tr>
<tr class="separator:a3f8482764c3d5cf7efbc8d5754aef2c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5af08048d0358f63d159d97513c0f785"><td class="memItemLeft" align="right" valign="top"><a id="a5af08048d0358f63d159d97513c0f785"></a>
constexpr EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a5af08048d0358f63d159d97513c0f785">RoundDown</a> (ezUInt32 value, ezUInt16 uiMultiple)</td></tr>
<tr class="memdesc:a5af08048d0358f63d159d97513c0f785"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is smaller than or equal to value. <br /></td></tr>
<tr class="separator:a5af08048d0358f63d159d97513c0f785"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9d9df58f7044ddb022783ab558211e2"><td class="memItemLeft" align="right" valign="top"><a id="ad9d9df58f7044ddb022783ab558211e2"></a>
constexpr EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ad9d9df58f7044ddb022783ab558211e2">IsOdd</a> (ezInt32 i)</td></tr>
<tr class="memdesc:ad9d9df58f7044ddb022783ab558211e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if i is an odd number. <br /></td></tr>
<tr class="separator:ad9d9df58f7044ddb022783ab558211e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4b97f95f8efcf2bf31dbc6148cf772d"><td class="memItemLeft" align="right" valign="top"><a id="ab4b97f95f8efcf2bf31dbc6148cf772d"></a>
constexpr EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ab4b97f95f8efcf2bf31dbc6148cf772d">IsEven</a> (ezInt32 i)</td></tr>
<tr class="memdesc:ab4b97f95f8efcf2bf31dbc6148cf772d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if i is an even number. <br /></td></tr>
<tr class="separator:ab4b97f95f8efcf2bf31dbc6148cf772d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83324fcba89f4cb6ed5d1612bfaa0244"><td class="memItemLeft" align="right" valign="top"><a id="a83324fcba89f4cb6ed5d1612bfaa0244"></a>
EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a83324fcba89f4cb6ed5d1612bfaa0244">Log2i</a> (ezUInt32 uiVal)</td></tr>
<tr class="memdesc:a83324fcba89f4cb6ed5d1612bfaa0244"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the integral logarithm to the base 2, that comes closest to the given integer. <br /></td></tr>
<tr class="separator:a83324fcba89f4cb6ed5d1612bfaa0244"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d4166855c0c8e460109d3b763be9cd7"><td class="memItemLeft" align="right" valign="top"><a id="a3d4166855c0c8e460109d3b763be9cd7"></a>
constexpr EZ_ALWAYS_INLINE int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a3d4166855c0c8e460109d3b763be9cd7">Pow2</a> (ezInt32 i)</td></tr>
<tr class="memdesc:a3d4166855c0c8e460109d3b763be9cd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 2^f. <br /></td></tr>
<tr class="separator:a3d4166855c0c8e460109d3b763be9cd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c79fc0f95a5bcd70c38ace7970e26f5"><td class="memItemLeft" align="right" valign="top"><a id="a5c79fc0f95a5bcd70c38ace7970e26f5"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a5c79fc0f95a5bcd70c38ace7970e26f5">Pow</a> (ezInt32 iBase, ezInt32 iExp)</td></tr>
<tr class="memdesc:a5c79fc0f95a5bcd70c38ace7970e26f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns base^exp. <br /></td></tr>
<tr class="separator:a5c79fc0f95a5bcd70c38ace7970e26f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8095066778945106aee5b72279e9daf"><td class="memTemplParams" colspan="2"><a id="ac8095066778945106aee5b72279e9daf"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac8095066778945106aee5b72279e9daf"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ac8095066778945106aee5b72279e9daf">Square</a> (T f)</td></tr>
<tr class="memdesc:ac8095066778945106aee5b72279e9daf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns f * f. <br /></td></tr>
<tr class="separator:ac8095066778945106aee5b72279e9daf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16900708b1339635f7beae1ed10310db"><td class="memTemplParams" colspan="2"><a id="a16900708b1339635f7beae1ed10310db"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a16900708b1339635f7beae1ed10310db"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a16900708b1339635f7beae1ed10310db">Sign</a> (T f)</td></tr>
<tr class="memdesc:a16900708b1339635f7beae1ed10310db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the sign of f (i.e: -1, 1 or 0) <br /></td></tr>
<tr class="separator:a16900708b1339635f7beae1ed10310db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a028afb5ac41bc6ca67d592ea0090bf06"><td class="memTemplParams" colspan="2"><a id="a028afb5ac41bc6ca67d592ea0090bf06"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a028afb5ac41bc6ca67d592ea0090bf06"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a028afb5ac41bc6ca67d592ea0090bf06">Abs</a> (T f)</td></tr>
<tr class="memdesc:a028afb5ac41bc6ca67d592ea0090bf06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the absolute value of f. <br /></td></tr>
<tr class="separator:a028afb5ac41bc6ca67d592ea0090bf06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5770a829d6885f2169ba6c9598f7473c"><td class="memTemplParams" colspan="2"><a id="a5770a829d6885f2169ba6c9598f7473c"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5770a829d6885f2169ba6c9598f7473c"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a5770a829d6885f2169ba6c9598f7473c">Min</a> (T f1, T f2)</td></tr>
<tr class="memdesc:a5770a829d6885f2169ba6c9598f7473c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2. <br /></td></tr>
<tr class="separator:a5770a829d6885f2169ba6c9598f7473c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab989df9ee8187e4224ec8c61fb51bee1"><td class="memTemplParams" colspan="2"><a id="ab989df9ee8187e4224ec8c61fb51bee1"></a>
template&lt;typename T , typename... ARGS&gt; </td></tr>
<tr class="memitem:ab989df9ee8187e4224ec8c61fb51bee1"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ab989df9ee8187e4224ec8c61fb51bee1">Min</a> (T f1, T f2, ARGS... f)</td></tr>
<tr class="memdesc:ab989df9ee8187e4224ec8c61fb51bee1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2 or ... <br /></td></tr>
<tr class="separator:ab989df9ee8187e4224ec8c61fb51bee1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab65962f013f9265ca5e31684e42e14dc"><td class="memTemplParams" colspan="2"><a id="ab65962f013f9265ca5e31684e42e14dc"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab65962f013f9265ca5e31684e42e14dc"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ab65962f013f9265ca5e31684e42e14dc">Max</a> (T f1, T f2)</td></tr>
<tr class="memdesc:ab65962f013f9265ca5e31684e42e14dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the greater value, f1 or f2. <br /></td></tr>
<tr class="separator:ab65962f013f9265ca5e31684e42e14dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c7e949ebcc9c4eee3d1aeb17787edc8"><td class="memTemplParams" colspan="2"><a id="a3c7e949ebcc9c4eee3d1aeb17787edc8"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3c7e949ebcc9c4eee3d1aeb17787edc8"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a3c7e949ebcc9c4eee3d1aeb17787edc8">Clamp</a> (T value, T min_val, T max_val)</td></tr>
<tr class="memdesc:a3c7e949ebcc9c4eee3d1aeb17787edc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [min; max]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:a3c7e949ebcc9c4eee3d1aeb17787edc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6197d5ec11b917a28264a323bd0d9483"><td class="memTemplParams" colspan="2"><a id="a6197d5ec11b917a28264a323bd0d9483"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6197d5ec11b917a28264a323bd0d9483"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a6197d5ec11b917a28264a323bd0d9483">Saturate</a> (T value)</td></tr>
<tr class="memdesc:a6197d5ec11b917a28264a323bd0d9483"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [0; 1]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:a6197d5ec11b917a28264a323bd0d9483"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ffb0ca4148c7d48e792c95d6a35690c"><td class="memTemplParams" colspan="2"><a id="a1ffb0ca4148c7d48e792c95d6a35690c"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a1ffb0ca4148c7d48e792c95d6a35690c"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a1ffb0ca4148c7d48e792c95d6a35690c">Trunc</a> (Type f)</td></tr>
<tr class="memdesc:a1ffb0ca4148c7d48e792c95d6a35690c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the integer-part of f (removes the fraction). <br /></td></tr>
<tr class="separator:a1ffb0ca4148c7d48e792c95d6a35690c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9781d1a2a59d4b4e8d453a0321b659ca"><td class="memItemLeft" align="right" valign="top">constexpr ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a9781d1a2a59d4b4e8d453a0321b659ca">FloatToInt</a> (float value)</td></tr>
<tr class="memdesc:a9781d1a2a59d4b4e8d453a0321b659ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts the float to an integer, removes the fractional part.  <a href="../../db/d78/namespaceez_math.htm#a9781d1a2a59d4b4e8d453a0321b659ca">More...</a><br /></td></tr>
<tr class="separator:a9781d1a2a59d4b4e8d453a0321b659ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab661467737e33099b0a94eeb07a298e6"><td class="memItemLeft" align="right" valign="top">constexpr ezInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ab661467737e33099b0a94eeb07a298e6">FloatToInt</a> (double value)</td></tr>
<tr class="memdesc:ab661467737e33099b0a94eeb07a298e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts the float to an integer, removes the fractional part.  <a href="../../db/d78/namespaceez_math.htm#ab661467737e33099b0a94eeb07a298e6">More...</a><br /></td></tr>
<tr class="separator:ab661467737e33099b0a94eeb07a298e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8c63bd7f60b10407f8b832899d20c7c"><td class="memTemplParams" colspan="2"><a id="ab8c63bd7f60b10407f8b832899d20c7c"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ab8c63bd7f60b10407f8b832899d20c7c"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ab8c63bd7f60b10407f8b832899d20c7c">Fraction</a> (Type f)</td></tr>
<tr class="memdesc:ab8c63bd7f60b10407f8b832899d20c7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the fraction-part of f. <br /></td></tr>
<tr class="separator:ab8c63bd7f60b10407f8b832899d20c7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae40ed58d08e4f7ec5ea6c1970a7ba8cc"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ae40ed58d08e4f7ec5ea6c1970a7ba8cc"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ae40ed58d08e4f7ec5ea6c1970a7ba8cc">Bitmask_LowN</a> (ezUInt32 uiNumBitsToSet)</td></tr>
<tr class="memdesc:ae40ed58d08e4f7ec5ea6c1970a7ba8cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a bitmask in which the low N bits are set. For example for N=5, this would be '0000 ... 0001 1111'.  <a href="../../db/d78/namespaceez_math.htm#ae40ed58d08e4f7ec5ea6c1970a7ba8cc">More...</a><br /></td></tr>
<tr class="separator:ae40ed58d08e4f7ec5ea6c1970a7ba8cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a264b3d1124ad0aa57de203c90086fe89"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a264b3d1124ad0aa57de203c90086fe89"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a264b3d1124ad0aa57de203c90086fe89">Bitmask_HighN</a> (ezUInt32 uiNumBitsToSet)</td></tr>
<tr class="memdesc:a264b3d1124ad0aa57de203c90086fe89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a bitmask in which the high N bits are set. For example for N=5, this would be '1111 1000 ... 0000'.  <a href="../../db/d78/namespaceez_math.htm#a264b3d1124ad0aa57de203c90086fe89">More...</a><br /></td></tr>
<tr class="separator:a264b3d1124ad0aa57de203c90086fe89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a882cad70469d8c061173faaab8757add"><td class="memTemplParams" colspan="2"><a id="a882cad70469d8c061173faaab8757add"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a882cad70469d8c061173faaab8757add"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a882cad70469d8c061173faaab8757add">Swap</a> (T &amp;ref_f1, T &amp;ref_f2)</td></tr>
<tr class="memdesc:a882cad70469d8c061173faaab8757add"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps the values in the two variables f1 and f2. <br /></td></tr>
<tr class="separator:a882cad70469d8c061173faaab8757add"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43503c3049f9ea9ffdae3b24ca52cbd3"><td class="memTemplParams" colspan="2"><a id="a43503c3049f9ea9ffdae3b24ca52cbd3"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a43503c3049f9ea9ffdae3b24ca52cbd3"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a43503c3049f9ea9ffdae3b24ca52cbd3">Lerp</a> (T f1, T f2, float fFactor)</td></tr>
<tr class="memdesc:a43503c3049f9ea9ffdae3b24ca52cbd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:a43503c3049f9ea9ffdae3b24ca52cbd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add5db6038ff60bafde7ec43eb147e361"><td class="memTemplParams" colspan="2"><a id="add5db6038ff60bafde7ec43eb147e361"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:add5db6038ff60bafde7ec43eb147e361"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#add5db6038ff60bafde7ec43eb147e361">Lerp</a> (T f1, T f2, double fFactor)</td></tr>
<tr class="memdesc:add5db6038ff60bafde7ec43eb147e361"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:add5db6038ff60bafde7ec43eb147e361"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ff7a4d6f62b3a061617690fe04e4433"><td class="memTemplParams" colspan="2"><a id="a1ff7a4d6f62b3a061617690fe04e4433"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1ff7a4d6f62b3a061617690fe04e4433"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a1ff7a4d6f62b3a061617690fe04e4433">Step</a> (T value, T edge)</td></tr>
<tr class="memdesc:a1ff7a4d6f62b3a061617690fe04e4433"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 0, if value &lt; edge, and 1, if value &gt;= edge. <br /></td></tr>
<tr class="separator:a1ff7a4d6f62b3a061617690fe04e4433"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65a9116c394ebb50149efb4b15e3275e"><td class="memItemLeft" align="right" valign="top"><a id="a65a9116c394ebb50149efb4b15e3275e"></a>
EZ_FOUNDATION_DLL bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a65a9116c394ebb50149efb4b15e3275e">IsPowerOf</a> (ezInt32 value, ezInt32 iBase)</td></tr>
<tr class="memdesc:a65a9116c394ebb50149efb4b15e3275e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there exists some x with base^x == value. <br /></td></tr>
<tr class="separator:a65a9116c394ebb50149efb4b15e3275e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae63590d458f167068281fa07e86e7f2c"><td class="memItemLeft" align="right" valign="top"><a id="ae63590d458f167068281fa07e86e7f2c"></a>
EZ_FOUNDATION_DLL ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ae63590d458f167068281fa07e86e7f2c">PowerOfTwo_Floor</a> (ezUInt32 value)</td></tr>
<tr class="memdesc:ae63590d458f167068281fa07e86e7f2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next power-of-two that is &lt;= value. <br /></td></tr>
<tr class="separator:ae63590d458f167068281fa07e86e7f2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac03a1258ad9611e0d8d109e1876e34e2"><td class="memItemLeft" align="right" valign="top"><a id="ac03a1258ad9611e0d8d109e1876e34e2"></a>
EZ_FOUNDATION_DLL ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ac03a1258ad9611e0d8d109e1876e34e2">PowerOfTwo_Ceil</a> (ezUInt32 value)</td></tr>
<tr class="memdesc:ac03a1258ad9611e0d8d109e1876e34e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next power-of-two that is &gt;= value. <br /></td></tr>
<tr class="separator:ac03a1258ad9611e0d8d109e1876e34e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb6684a23d8bdf2887da1f14243cbca0"><td class="memItemLeft" align="right" valign="top"><a id="afb6684a23d8bdf2887da1f14243cbca0"></a>
EZ_FOUNDATION_DLL ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#afb6684a23d8bdf2887da1f14243cbca0">GreatestCommonDivisor</a> (ezUInt32 a, ezUInt32 b)</td></tr>
<tr class="memdesc:afb6684a23d8bdf2887da1f14243cbca0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the greatest common divisor. <br /></td></tr>
<tr class="separator:afb6684a23d8bdf2887da1f14243cbca0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ee9639723a86148408e88ba6ca4b834"><td class="memItemLeft" align="right" valign="top"><a id="a8ee9639723a86148408e88ba6ca4b834"></a>
EZ_FOUNDATION_DLL <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a8ee9639723a86148408e88ba6ca4b834">TryMultiply32</a> (ezUInt32 &amp;out_uiResult, ezUInt32 a, ezUInt32 b, ezUInt32 c=1, ezUInt32 d=1)</td></tr>
<tr class="memdesc:a8ee9639723a86148408e88ba6ca4b834"><td class="mdescLeft">&#160;</td><td class="mdescRight">out_Result = <em>a</em> * <em>b</em>. If an overflow happens, EZ_FAILURE is returned. <br /></td></tr>
<tr class="separator:a8ee9639723a86148408e88ba6ca4b834"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacf98afd3d0bc523352b1c6da141f78a"><td class="memItemLeft" align="right" valign="top"><a id="aacf98afd3d0bc523352b1c6da141f78a"></a>
EZ_FOUNDATION_DLL ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#aacf98afd3d0bc523352b1c6da141f78a">SafeMultiply32</a> (ezUInt32 a, ezUInt32 b, ezUInt32 c=1, ezUInt32 d=1)</td></tr>
<tr class="memdesc:aacf98afd3d0bc523352b1c6da141f78a"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns <em>a</em> * <em>b</em>. If an overflow happens, the program is terminated. <br /></td></tr>
<tr class="separator:aacf98afd3d0bc523352b1c6da141f78a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b9a21046b4ad398fad49a67cc6d94aa"><td class="memItemLeft" align="right" valign="top"><a id="a8b9a21046b4ad398fad49a67cc6d94aa"></a>
EZ_FOUNDATION_DLL <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a8b9a21046b4ad398fad49a67cc6d94aa">TryMultiply64</a> (ezUInt64 &amp;out_uiResult, ezUInt64 a, ezUInt64 b, ezUInt64 c=1, ezUInt64 d=1)</td></tr>
<tr class="memdesc:a8b9a21046b4ad398fad49a67cc6d94aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">out_Result = <em>a</em> * <em>b</em>. If an overflow happens, EZ_FAILURE is returned. <br /></td></tr>
<tr class="separator:a8b9a21046b4ad398fad49a67cc6d94aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa782473cf562ce4044652dec9ec0498f"><td class="memItemLeft" align="right" valign="top"><a id="aa782473cf562ce4044652dec9ec0498f"></a>
EZ_FOUNDATION_DLL ezUInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#aa782473cf562ce4044652dec9ec0498f">SafeMultiply64</a> (ezUInt64 a, ezUInt64 b, ezUInt64 c=1, ezUInt64 d=1)</td></tr>
<tr class="memdesc:aa782473cf562ce4044652dec9ec0498f"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns <em>a</em> * <em>b</em>. If an overflow happens, the program is terminated. <br /></td></tr>
<tr class="separator:aa782473cf562ce4044652dec9ec0498f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad07e5d240ab190a460120eae06405251"><td class="memItemLeft" align="right" valign="top"><a id="ad07e5d240ab190a460120eae06405251"></a>
<a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ad07e5d240ab190a460120eae06405251">TryConvertToSizeT</a> (size_t &amp;out_uiResult, ezUInt64 uiValue)</td></tr>
<tr class="memdesc:ad07e5d240ab190a460120eae06405251"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given 64bit value actually fits into size_t, If it doesn't EZ_FAILURE is returned. <br /></td></tr>
<tr class="separator:ad07e5d240ab190a460120eae06405251"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8448ef254ee34432d1fa3c2718dc1dd7"><td class="memItemLeft" align="right" valign="top"><a id="a8448ef254ee34432d1fa3c2718dc1dd7"></a>
EZ_FOUNDATION_DLL size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a8448ef254ee34432d1fa3c2718dc1dd7">SafeConvertToSizeT</a> (ezUInt64 uiValue)</td></tr>
<tr class="memdesc:a8448ef254ee34432d1fa3c2718dc1dd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given 64bit value actually fits into size_t, If it doesn't the program is terminated. <br /></td></tr>
<tr class="separator:a8448ef254ee34432d1fa3c2718dc1dd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb86e73a85c63426980452dbf19ea5ff"><td class="memItemLeft" align="right" valign="top"><a id="adb86e73a85c63426980452dbf19ea5ff"></a>
EZ_FOUNDATION_DLL float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#adb86e73a85c63426980452dbf19ea5ff">ReplaceNaN</a> (float fValue, float fFallback)</td></tr>
<tr class="memdesc:adb86e73a85c63426980452dbf19ea5ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">If 'value' is not-a-number (NaN) 'fallback' is returned, otherwise 'value' is passed through unmodified. <br /></td></tr>
<tr class="separator:adb86e73a85c63426980452dbf19ea5ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3744f6e521fdb849643089a6ee63c0df"><td class="memItemLeft" align="right" valign="top"><a id="a3744f6e521fdb849643089a6ee63c0df"></a>
EZ_FOUNDATION_DLL double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#a3744f6e521fdb849643089a6ee63c0df">ReplaceNaN</a> (double fValue, double fFallback)</td></tr>
<tr class="memdesc:a3744f6e521fdb849643089a6ee63c0df"><td class="mdescLeft">&#160;</td><td class="mdescRight">If 'value' is not-a-number (NaN) 'fallback' is returned, otherwise 'value' is passed through unmodified. <br /></td></tr>
<tr class="separator:a3744f6e521fdb849643089a6ee63c0df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab04ad7071d5e0472b537cd6ef65f5f6f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/de6/classez_variant.htm">ezVariant</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d78/namespaceez_math.htm#ab04ad7071d5e0472b537cd6ef65f5f6f">Lerp</a> (const <a class="el" href="../../de/de6/classez_variant.htm">ezVariant</a> &amp;a, const <a class="el" href="../../de/de6/classez_variant.htm">ezVariant</a> &amp;b, double fFactor)</td></tr>
<tr class="memdesc:ab04ad7071d5e0472b537cd6ef65f5f6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">An overload of <a class="el" href="../../db/d78/namespaceez_math.htm#a70aea4554d1be096b314db9f10c9f1fc" title="Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1.">ezMath::Lerp</a> to interpolate variants. A and b must have the same type.  <a href="../../db/d78/namespaceez_math.htm#ab04ad7071d5e0472b537cd6ef65f5f6f">More...</a><br /></td></tr>
<tr class="separator:ab04ad7071d5e0472b537cd6ef65f5f6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This namespace provides common math-functionality as functions. </p>
<p>It is a namespace, instead of a static class, because that allows it to be extended at other locations, which is especially useful when adding custom types. </p>
</div><h2 class="groupheader">Function Documentation</h2>
<a id="a7b9414b10b8aa20fb18fddd5aa64664f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b9414b10b8aa20fb18fddd5aa64664f">&#9670;&nbsp;</a></span>Bitmask_HighN() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">EZ_ALWAYS_INLINE Type ezMath::Bitmask_HighN </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumBitsToSet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a bitmask in which the high N bits are set. For example for N=5, this would be '1111 1000 ... 0000'. </p>
<p>For N &gt;= 32 all bits will be set. </p>

</div>
</div>
<a id="a264b3d1124ad0aa57de203c90086fe89"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a264b3d1124ad0aa57de203c90086fe89">&#9670;&nbsp;</a></span>Bitmask_HighN() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Type ezMath::Bitmask_HighN </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumBitsToSet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a bitmask in which the high N bits are set. For example for N=5, this would be '1111 1000 ... 0000'. </p>
<p>For N &gt;= 32 all bits will be set. </p>

</div>
</div>
<a id="aeafa63a6222ab8eb0438d22efda2e632"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeafa63a6222ab8eb0438d22efda2e632">&#9670;&nbsp;</a></span>Bitmask_LowN() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">EZ_ALWAYS_INLINE Type ezMath::Bitmask_LowN </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumBitsToSet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a bitmask in which the low N bits are set. For example for N=5, this would be '0000 ... 0001 1111'. </p>
<p>For N &gt;= 32 all bits will be set. </p>

</div>
</div>
<a id="ae40ed58d08e4f7ec5ea6c1970a7ba8cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae40ed58d08e4f7ec5ea6c1970a7ba8cc">&#9670;&nbsp;</a></span>Bitmask_LowN() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Type ezMath::Bitmask_LowN </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumBitsToSet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a bitmask in which the low N bits are set. For example for N=5, this would be '0000 ... 0001 1111'. </p>
<p>For N &gt;= 32 all bits will be set. </p>

</div>
</div>
<a id="ace4ed6e4b2f22c9ef2c8a9666f734807"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace4ed6e4b2f22c9ef2c8a9666f734807">&#9670;&nbsp;</a></span>CountLeadingZeros()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezMath::CountLeadingZeros </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the number of zeros at the start (most significant part) of a bitmask.</p>
<p>E.g. 0b0111 -&gt; 29 0b0011 -&gt; 30 0b0001 -&gt; 31 0b0000 -&gt; 32 Returns 32 when the input is 0 </p>

</div>
</div>
<a id="a9a0cd6f0b8682242cb973308553f7b13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a0cd6f0b8682242cb973308553f7b13">&#9670;&nbsp;</a></span>CountTrailingZeros()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezMath::CountTrailingZeros </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the number of zeros at the end (least significant part) of a bitmask.</p>
<p>E.g. 0b0111 -&gt; 0 0b0110 -&gt; 1 0b0100 -&gt; 2 Returns 32 when the input is 0 </p>

</div>
</div>
<a id="a35aee647f78c0673015f09c8791c448f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35aee647f78c0673015f09c8791c448f">&#9670;&nbsp;</a></span>FirstBitHigh() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezMath::FirstBitHigh </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the index of the most significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="afef6820f942a6a313693ba68dfcbaa6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afef6820f942a6a313693ba68dfcbaa6c">&#9670;&nbsp;</a></span>FirstBitHigh() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezMath::FirstBitHigh </td>
          <td>(</td>
          <td class="paramtype">ezUInt64&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the index of the most significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="a20cbb5a32d60124534dd65b2871166d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20cbb5a32d60124534dd65b2871166d0">&#9670;&nbsp;</a></span>FirstBitLow() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezMath::FirstBitLow </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the index of the least significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="a15a5da4c47b32ba351aa17ad40b2e8fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15a5da4c47b32ba351aa17ad40b2e8fb">&#9670;&nbsp;</a></span>FirstBitLow() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezMath::FirstBitLow </td>
          <td>(</td>
          <td class="paramtype">ezUInt64&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the index of the least significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="ab661467737e33099b0a94eeb07a298e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab661467737e33099b0a94eeb07a298e6">&#9670;&nbsp;</a></span>FloatToInt() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr EZ_FORCE_INLINE ezInt64 ezMath::FloatToInt </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Casts the float to an integer, removes the fractional part. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../db/d78/namespaceez_math.htm#a89a5cb364bf8bf76155b42b477e2540a" title="Returns the integer-part of f (removes the fraction).">Trunc</a>, <a class="el" href="../../db/d78/namespaceez_math.htm#a3eaa04e59a8c066cc25b1966f760f08d" title="Rounds f to the next integer.">Round</a>, Floor, Ceil </dd></dl>

</div>
</div>
<a id="a9781d1a2a59d4b4e8d453a0321b659ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9781d1a2a59d4b4e8d453a0321b659ca">&#9670;&nbsp;</a></span>FloatToInt() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr EZ_FORCE_INLINE ezInt32 ezMath::FloatToInt </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Casts the float to an integer, removes the fractional part. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../db/d78/namespaceez_math.htm#a89a5cb364bf8bf76155b42b477e2540a" title="Returns the integer-part of f (removes the fraction).">Trunc</a>, <a class="el" href="../../db/d78/namespaceez_math.htm#a3eaa04e59a8c066cc25b1966f760f08d" title="Rounds f to the next integer.">Round</a>, Floor, Ceil </dd></dl>

</div>
</div>
<a id="aa3da8103ab828ed4da1f8bc61a966ff1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3da8103ab828ed4da1f8bc61a966ff1">&#9670;&nbsp;</a></span>HighValue() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr TYPE ezMath::HighValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A very large value, that is slightly smaller than sqrt(MaxValue()). </p>
<p>Useful to default initialize values, that may get squared in subsequent operations. </p>

</div>
</div>
<a id="a52c644041e22758fea18140684ca8d2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52c644041e22758fea18140684ca8d2f">&#9670;&nbsp;</a></span>HighValue() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr double ezMath::HighValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A very large value, that is slightly smaller than sqrt(MaxValue()). </p>
<p>Useful to default initialize values, that may get squared in subsequent operations. </p>

</div>
</div>
<a id="ab04ad7071d5e0472b537cd6ef65f5f6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab04ad7071d5e0472b537cd6ef65f5f6f">&#9670;&nbsp;</a></span>Lerp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EZ_FOUNDATION_DLL <a class="el" href="../../de/de6/classez_variant.htm">ezVariant</a> ezMath::Lerp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/de6/classez_variant.htm">ezVariant</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../de/de6/classez_variant.htm">ezVariant</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fFactor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>An overload of <a class="el" href="../../db/d78/namespaceez_math.htm#a70aea4554d1be096b314db9f10c9f1fc" title="Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1.">ezMath::Lerp</a> to interpolate variants. A and b must have the same type. </p>
<p>If the type can't be interpolated like e.g. strings, a is returned for a fFactor less than 0.5, b is returned for a fFactor greater or equal to 0.5. </p>

</div>
</div>
<a id="a4ded6bdc6257e148fb9c8cc9a3f8e376"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ded6bdc6257e148fb9c8cc9a3f8e376">&#9670;&nbsp;</a></span>NaN()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr TYPE ezMath::NaN </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the value for NaN as the template type. Returns zero, if the type does not support NaN. </p>
<p>Do not use this for comparisons, it will fail. Use it to initialize data (e.g. in debug builds), to detect uninitialized variables. Use the function IsNaN() to check whether a value is not a number. </p>

</div>
</div>
<a id="a3eaa04e59a8c066cc25b1966f760f08d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3eaa04e59a8c066cc25b1966f760f08d">&#9670;&nbsp;</a></span>Round() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double ezMath::Round </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rounds f to the next integer. </p>
<p>If f is positive 0.5 is rounded UP (i.e. to 1), if f is negative, -0.5 is rounded DOWN (i.e. to -1). </p>

</div>
</div>
<a id="ace725c91daf115ff11418655fcf83f0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace725c91daf115ff11418655fcf83f0c">&#9670;&nbsp;</a></span>Round() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ezMath::Round </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rounds f to the next integer. </p>
<p>If f is positive 0.5 is rounded UP (i.e. to 1), if f is negative, -0.5 is rounded DOWN (i.e. to -1). </p>

</div>
</div>
<a id="a05995060e61c0946e14619b45cd1adef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05995060e61c0946e14619b45cd1adef">&#9670;&nbsp;</a></span>Sin()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ezMath::Sin </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a>&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>***** Trigonometric Functions ***** </p>
<p>Takes an angle, returns its sine </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../db/d78/namespaceez_math.htm">ezMath</a></li>
    <li class="footer">Generated on Sat Nov 11 2023 17:04:32 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
