<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/StringIterator.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.10</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('de/d0b/_string_iterator_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">StringIterator.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;Foundation/Strings/StringUtils.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="keyword">struct </span><a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>;</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> STRING&gt;</div>
<div class="line"><a name="l00011"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm">   11</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;{</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="keyword">using</span> iterator_category = std::bidirectional_iterator_tag;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  <span class="keyword">using</span> value_type = ezUInt32;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  <span class="keyword">using</span> difference_type = ptrdiff_t;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  <span class="keyword">using</span> pointer = <span class="keyword">const</span> <span class="keywordtype">char</span>*;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;  <span class="keyword">using</span> reference = ezUInt32;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160; </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  EZ_DECLARE_POD_TYPE();</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a49743823a9968bda7407b699d0825647">   22</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a49743823a9968bda7407b699d0825647">ezStringIterator</a>()</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    : m_String(nullptr)</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    , m_pElement(nullptr)</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  {</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a704c733c6c93226d57631cbe3af3dcfa">   29</a></span>&#160;  EZ_FORCE_INLINE <span class="keyword">explicit</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a704c733c6c93226d57631cbe3af3dcfa">ezStringIterator</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;STRING&gt;</a>&amp; <span class="keywordtype">string</span>, <span class="keywordtype">bool</span> bIsEnd)</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    : m_String(&amp;string)</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    , m_pElement(nullptr) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">if</span> (bIsEnd)</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;      m_pElement = m_String-&gt;InternalGetDataEnd();</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    }</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      m_pElement = m_String-&gt;InternalGetData();</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  }</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a0b4330176b80bbda0cb4cbcc576c365c">   45</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a0b4330176b80bbda0cb4cbcc576c365c">IsValid</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pElement != <span class="keyword">nullptr</span> &amp;&amp; m_pElement != m_String-&gt;InternalGetDataEnd(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#ab633c7f3ca5a003d6eb19d6e06fbeef4">   48</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d4/ddc/structez_string_iterator.htm#ab633c7f3ca5a003d6eb19d6e06fbeef4">GetCharacter</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a0b4330176b80bbda0cb4cbcc576c365c">IsValid</a>() ? <a class="code" href="../../d9/d32/classez_unicode_utils.htm#a14961aea9cc3791a6c9f48159fa64d9f">ezUnicodeUtils::ConvertUtf8ToUtf32</a>(m_pElement) : ezUInt32(0); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a4d4ba07049169523550ab42570276e72">   51</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a4d4ba07049169523550ab42570276e72">Value</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#ab633c7f3ca5a003d6eb19d6e06fbeef4">GetCharacter</a>(); }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a274f2564f015763fd3ce0dff8b104e9a">   54</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a274f2564f015763fd3ce0dff8b104e9a">GetData</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pElement; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a101aef1c65880b16abed43733bd71449">   57</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a101aef1c65880b16abed43733bd71449">operator==</a>(<span class="keyword">const</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&amp; it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement == it2.m_pElement); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#ae4978d3f15da30f063a08b099fc12dd2">   60</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#ae4978d3f15da30f063a08b099fc12dd2">operator!=</a>(<span class="keyword">const</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&amp; it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement != it2.m_pElement); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#ad80c67ee340cf695126da53af8aa9cb9">   63</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d4/ddc/structez_string_iterator.htm#ad80c67ee340cf695126da53af8aa9cb9">operator*</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#ab633c7f3ca5a003d6eb19d6e06fbeef4">GetCharacter</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#aef1493e9648fc3eb01d1c31e8fdca50a">   66</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d4/ddc/structez_string_iterator.htm#aef1493e9648fc3eb01d1c31e8fdca50a">operator-&gt;</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a274f2564f015763fd3ce0dff8b104e9a">GetData</a>(); }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#af03601755be8c6e05e9d265b56995174">   69</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d4/ddc/structez_string_iterator.htm#af03601755be8c6e05e9d265b56995174">Advance</a>()</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* pPrevElement = m_pElement;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">if</span> (m_pElement &lt; m_String-&gt;InternalGetDataEnd())</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      <a class="code" href="../../d9/d32/classez_unicode_utils.htm#ada79ec35f647076df77c48e049b5a376">ezUnicodeUtils::MoveToNextUtf8</a>(m_pElement);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(m_pElement - pPrevElement);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a00becac34959fcea4e1c81a5b0153054">   82</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator&lt;STRING&gt;</a>&amp; <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a00becac34959fcea4e1c81a5b0153054">operator++</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">if</span> (m_pElement &lt; m_String-&gt;InternalGetDataEnd())</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      <a class="code" href="../../d9/d32/classez_unicode_utils.htm#ada79ec35f647076df77c48e049b5a376">ezUnicodeUtils::MoveToNextUtf8</a>(m_pElement);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a2825e3b59b27f7e2d9b3865b4d1f8d84">   93</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator&lt;STRING&gt;</a>&amp; <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a2825e3b59b27f7e2d9b3865b4d1f8d84">operator--</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">if</span> (m_String-&gt;InternalGetData() &lt; m_pElement)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      <a class="code" href="../../d9/d32/classez_unicode_utils.htm#a76ba90d8cde77798cad214f009b28d02">ezUnicodeUtils::MoveToPriorUtf8</a>(m_pElement);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a69b9359f2ab04ceafdbef82facbd6a21">  104</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator&lt;STRING&gt;</a> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a69b9359f2ab04ceafdbef82facbd6a21">operator++</a>(<span class="keywordtype">int</span>) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator&lt;STRING&gt;</a> tmp = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    ++(*this);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> tmp;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a9c15bf5ac3e6521bf8dc4255326b0c4b">  112</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator&lt;STRING&gt;</a> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a9c15bf5ac3e6521bf8dc4255326b0c4b">operator--</a>(<span class="keywordtype">int</span>) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator&lt;STRING&gt;</a> tmp = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    --(*this);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">return</span> tmp;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a00303942463eb0687a28f74e09721a01">  120</a></span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a00303942463eb0687a28f74e09721a01">operator+=</a>(difference_type d) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">while</span> (d &gt; 0)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      ++(*this);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      --d;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">while</span> (d &lt; 0)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;      --(*this);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      ++d;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#afe1d36dde05363e72ca549212e5dc5d9">  135</a></span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#afe1d36dde05363e72ca549212e5dc5d9">operator-=</a>(difference_type d) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">while</span> (d &gt; 0)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;      --(*this);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      --d;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">while</span> (d &lt; 0)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      ++(*this);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      ++d;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#ae9478ec32c510b52931100ddd04dd987">  150</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator&lt;STRING&gt;</a> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#ae9478ec32c510b52931100ddd04dd987">operator+</a>(difference_type d) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator&lt;STRING&gt;</a> it = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    it += d;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">return</span> it;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#adfdf9dd60252bdca6cc0378b13acd614">  158</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator&lt;STRING&gt;</a> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#adfdf9dd60252bdca6cc0378b13acd614">operator-</a>(difference_type d) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator&lt;STRING&gt;</a> it = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    it -= d;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">return</span> it;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  }</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a9393716e9b811b4e7cc4f630fc6b78ed">  168</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a9393716e9b811b4e7cc4f630fc6b78ed">SetCurrentPosition</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szCurPos)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* szEnd = m_String-&gt;InternalGetDataEnd();</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    EZ_ASSERT_DEV(</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;      (szCurPos &gt;= m_String-&gt;InternalGetData()) &amp;&amp; (szCurPos &lt;= szEnd), <span class="stringliteral">&quot;New current position must still be inside the iterator&#39;s range.&quot;</span>);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    m_pElement = szCurPos;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;STRING&gt;</a>* m_String;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* m_pElement;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;};</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> STRING&gt;</div>
<div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm">  186</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  <span class="keyword">using</span> iterator_category = std::bidirectional_iterator_tag;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <span class="keyword">using</span> value_type = ezUInt32;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  <span class="keyword">using</span> difference_type = ptrdiff_t;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  <span class="keyword">using</span> pointer = <span class="keyword">const</span> <span class="keywordtype">char</span>*;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keyword">using</span> reference = ezUInt32;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  EZ_DECLARE_POD_TYPE();</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#adeeca18b7eed7a84769f1b9ad9fe1692">  197</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#adeeca18b7eed7a84769f1b9ad9fe1692">ezStringReverseIterator</a>()</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    : m_String(nullptr)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    , m_pElement(nullptr)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a9bcac0df5c3fad975c0d2994866d0d45">  204</a></span>&#160;  EZ_FORCE_INLINE <span class="keyword">explicit</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a9bcac0df5c3fad975c0d2994866d0d45">ezStringReverseIterator</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;STRING&gt;</a>&amp; <span class="keywordtype">string</span>, <span class="keywordtype">bool</span> bIsEnd)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    : m_String(&amp;string)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    , m_pElement(nullptr) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">if</span> (bIsEnd)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;      m_pElement = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      m_pElement = m_String-&gt;InternalGetDataEnd();</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      <a class="code" href="../../d9/d32/classez_unicode_utils.htm#a76ba90d8cde77798cad214f009b28d02">ezUnicodeUtils::MoveToPriorUtf8</a>(m_pElement);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#af63c261677e24a777e80099b1584106b">  220</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#af63c261677e24a777e80099b1584106b">IsValid</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement != <span class="keyword">nullptr</span>); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a213f653c0ce0cf2f57f0859dcad39017">  223</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a213f653c0ce0cf2f57f0859dcad39017">GetCharacter</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#af63c261677e24a777e80099b1584106b">IsValid</a>() ? <a class="code" href="../../d9/d32/classez_unicode_utils.htm#a14961aea9cc3791a6c9f48159fa64d9f">ezUnicodeUtils::ConvertUtf8ToUtf32</a>(m_pElement) : ezUInt32(0); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a95d4be6bd977a2c23a9e486c309876d5">  226</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a95d4be6bd977a2c23a9e486c309876d5">GetData</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pElement; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a3c513354453e3e45ef097ed7481f3814">  229</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a3c513354453e3e45ef097ed7481f3814">operator==</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&amp; it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement == it2.m_pElement); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a0b3025486207dddd5f9c7c6ba351d688">  232</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a0b3025486207dddd5f9c7c6ba351d688">operator!=</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&amp; it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement != it2.m_pElement); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a50a7f28a475e48690aa38651d4f86aba">  235</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a50a7f28a475e48690aa38651d4f86aba">operator*</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a213f653c0ce0cf2f57f0859dcad39017">GetCharacter</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#ac240a3dcafe99ee63a3c48e544f1cfbe">  238</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#ac240a3dcafe99ee63a3c48e544f1cfbe">operator-&gt;</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a95d4be6bd977a2c23a9e486c309876d5">GetData</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a61f1150d1c3e51865ca5f17eaf4ea256">  241</a></span>&#160;  EZ_FORCE_INLINE <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator&lt;STRING&gt;</a>&amp; <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a61f1150d1c3e51865ca5f17eaf4ea256">operator++</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">if</span> (m_pElement != <span class="keyword">nullptr</span> &amp;&amp; m_String-&gt;InternalGetData() &lt; m_pElement)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      <a class="code" href="../../d9/d32/classez_unicode_utils.htm#a76ba90d8cde77798cad214f009b28d02">ezUnicodeUtils::MoveToPriorUtf8</a>(m_pElement);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;      m_pElement = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5fda1d2871d2f094ee0390728817c780">  251</a></span>&#160;  EZ_FORCE_INLINE <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator&lt;STRING&gt;</a>&amp; <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5fda1d2871d2f094ee0390728817c780">operator--</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">if</span> (m_pElement != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    {</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">char</span>* szOldPos = m_pElement;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;      <a class="code" href="../../d9/d32/classez_unicode_utils.htm#ada79ec35f647076df77c48e049b5a376">ezUnicodeUtils::MoveToNextUtf8</a>(m_pElement);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      <span class="keywordflow">if</span> (m_pElement == m_String-&gt;InternalGetDataEnd())</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        m_pElement = szOldPos;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;      <span class="comment">// Set back to the first character.</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;      m_pElement = m_String-&gt;InternalGetData();</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    }</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  }</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00269"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a7cdef4d7c0abb19b5f1d22273dc4fd35">  269</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator&lt;STRING&gt;</a> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a7cdef4d7c0abb19b5f1d22273dc4fd35">operator++</a>(<span class="keywordtype">int</span>) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator&lt;STRING&gt;</a> tmp = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    ++(*this);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">return</span> tmp;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160; </div>
<div class="line"><a name="l00277"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#ae2e6516c460fbaf66f8fb9a0a0008f8c">  277</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator&lt;STRING&gt;</a> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#ae2e6516c460fbaf66f8fb9a0a0008f8c">operator--</a>(<span class="keywordtype">int</span>) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator&lt;STRING&gt;</a> tmp = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    --(*this);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordflow">return</span> tmp;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  }</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a77bee4650a92eb60c74d55759782cf0e">  285</a></span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a77bee4650a92eb60c74d55759782cf0e">operator+=</a>(difference_type d) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  {</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">while</span> (d &gt; 0)</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    {</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;      ++(*this);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;      --d;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    }</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">while</span> (d &lt; 0)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;      --(*this);</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;      ++d;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    }</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  }</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a18f99850e5cda921f651258b8385ef3c">  300</a></span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a18f99850e5cda921f651258b8385ef3c">operator-=</a>(difference_type d) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  {</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keywordflow">while</span> (d &gt; 0)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;      --(*this);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;      --d;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordflow">while</span> (d &lt; 0)</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;      ++(*this);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;      ++d;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  }</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a27e48f1b5405539fdce670fd1cde409f">  315</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator&lt;STRING&gt;</a> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a27e48f1b5405539fdce670fd1cde409f">operator+</a>(difference_type d) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator&lt;STRING&gt;</a> it = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    it += d;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordflow">return</span> it;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00323"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#ace932ba4eda1ac5140da33d8510eaa02">  323</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator&lt;STRING&gt;</a> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#ace932ba4eda1ac5140da33d8510eaa02">operator-</a>(difference_type d) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  {</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator&lt;STRING&gt;</a> it = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    it -= d;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">return</span> it;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  }</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#ab88e02c0a7070d011ddc229750e54012">  333</a></span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#ab88e02c0a7070d011ddc229750e54012">SetCurrentPosition</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szCurPos)</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* szBegin = m_String-&gt;InternalGetData();</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* szEnd = m_String-&gt;InternalGetDataEnd();</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    EZ_ASSERT_DEV(</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;      szCurPos == <span class="keyword">nullptr</span> || ((szCurPos &gt;= szBegin) &amp;&amp; (szCurPos &lt; szEnd)), <span class="stringliteral">&quot;New current position must still be inside the iterator&#39;s range.&quot;</span>);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160; </div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    m_pElement = szCurPos;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  }</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160; </div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;STRING&gt;</a>* m_String;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* m_pElement;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;};</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructez_string_iterator_htm_afe1d36dde05363e72ca549212e5dc5d9"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#afe1d36dde05363e72ca549212e5dc5d9">ezStringIterator::operator-=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator-=(difference_type d)</div><div class="ttdoc">Moves the iterator backwards by d characters. Does not move it beyond the range's start.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:135</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a2825e3b59b27f7e2d9b3865b4d1f8d84"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a2825e3b59b27f7e2d9b3865b4d1f8d84">ezStringIterator::operator--</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator&lt; STRING &gt; &amp; operator--()</div><div class="ttdoc">Move to the previous Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:93</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_ab88e02c0a7070d011ddc229750e54012"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#ab88e02c0a7070d011ddc229750e54012">ezStringReverseIterator::SetCurrentPosition</a></div><div class="ttdeci">EZ_FORCE_INLINE void SetCurrentPosition(const char *szCurPos)</div><div class="ttdoc">Allows to set the 'current' iteration position to a different value.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:333</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a50a7f28a475e48690aa38651d4f86aba"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a50a7f28a475e48690aa38651d4f86aba">ezStringReverseIterator::operator*</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 operator*() const</div><div class="ttdoc">Returns the currently pointed to character in Utf32 encoding.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:235</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a18f99850e5cda921f651258b8385ef3c"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a18f99850e5cda921f651258b8385ef3c">ezStringReverseIterator::operator-=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator-=(difference_type d)</div><div class="ttdoc">Moves the iterator backwards by d characters. Does not move it beyond the range's start.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:300</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_ac240a3dcafe99ee63a3c48e544f1cfbe"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#ac240a3dcafe99ee63a3c48e544f1cfbe">ezStringReverseIterator::operator-&gt;</a></div><div class="ttdeci">const EZ_ALWAYS_INLINE char * operator-&gt;() const</div><div class="ttdoc">Returns the address the iterator currently points to.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:238</div></div>
<div class="ttc" id="aclassez_unicode_utils_htm_ada79ec35f647076df77c48e049b5a376"><div class="ttname"><a href="../../d9/d32/classez_unicode_utils.htm#ada79ec35f647076df77c48e049b5a376">ezUnicodeUtils::MoveToNextUtf8</a></div><div class="ttdeci">static void MoveToNextUtf8(const char *&amp;szUtf8, ezUInt32 uiNumCharacters=1)</div><div class="ttdoc">Moves the given string pointer ahead to the next Utf8 character sequence.</div><div class="ttdef"><b>Definition:</b> UnicodeUtils_inl.h:197</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a0b3025486207dddd5f9c7c6ba351d688"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a0b3025486207dddd5f9c7c6ba351d688">ezStringReverseIterator::operator!=</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator!=(const ezStringReverseIterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:232</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a27e48f1b5405539fdce670fd1cde409f"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a27e48f1b5405539fdce670fd1cde409f">ezStringReverseIterator::operator+</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator&lt; STRING &gt; operator+(difference_type d) const</div><div class="ttdoc">Returns an iterator that is advanced forwards by d characters.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:315</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a61f1150d1c3e51865ca5f17eaf4ea256"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a61f1150d1c3e51865ca5f17eaf4ea256">ezStringReverseIterator::operator++</a></div><div class="ttdeci">EZ_FORCE_INLINE ezStringReverseIterator&lt; STRING &gt; &amp; operator++()</div><div class="ttdoc">Move to the next Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:241</div></div>
<div class="ttc" id="astructez_string_iterator_htm_ae4978d3f15da30f063a08b099fc12dd2"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#ae4978d3f15da30f063a08b099fc12dd2">ezStringIterator::operator!=</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator!=(const ezStringIterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:60</div></div>
<div class="ttc" id="aclassez_unicode_utils_htm_a14961aea9cc3791a6c9f48159fa64d9f"><div class="ttname"><a href="../../d9/d32/classez_unicode_utils.htm#a14961aea9cc3791a6c9f48159fa64d9f">ezUnicodeUtils::ConvertUtf8ToUtf32</a></div><div class="ttdeci">static ezUInt32 ConvertUtf8ToUtf32(const char *pFirstChar)</div><div class="ttdoc">Converts the UTF-8 character that starts at pFirstChar into a UTF-32 character.</div><div class="ttdef"><b>Definition:</b> UnicodeUtils_inl.h:124</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a274f2564f015763fd3ce0dff8b104e9a"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a274f2564f015763fd3ce0dff8b104e9a">ezStringIterator::GetData</a></div><div class="ttdeci">const EZ_ALWAYS_INLINE char * GetData() const</div><div class="ttdoc">Returns the address the iterator currently points to.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:54</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_af63c261677e24a777e80099b1584106b"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#af63c261677e24a777e80099b1584106b">ezStringReverseIterator::IsValid</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:220</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a3c513354453e3e45ef097ed7481f3814"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a3c513354453e3e45ef097ed7481f3814">ezStringReverseIterator::operator==</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator==(const ezStringReverseIterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:229</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a00becac34959fcea4e1c81a5b0153054"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a00becac34959fcea4e1c81a5b0153054">ezStringIterator::operator++</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator&lt; STRING &gt; &amp; operator++()</div><div class="ttdoc">Move to the next Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:82</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a77bee4650a92eb60c74d55759782cf0e"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a77bee4650a92eb60c74d55759782cf0e">ezStringReverseIterator::operator+=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator+=(difference_type d)</div><div class="ttdoc">Advances the iterator forwards by d characters. Does not move it beyond the range's end.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:285</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a9bcac0df5c3fad975c0d2994866d0d45"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a9bcac0df5c3fad975c0d2994866d0d45">ezStringReverseIterator::ezStringReverseIterator</a></div><div class="ttdeci">EZ_FORCE_INLINE ezStringReverseIterator(const ezStringBase&lt; STRING &gt; &amp;string, bool bIsEnd)</div><div class="ttdoc">Constructs either a rbegin or rend iterator for the given string.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:204</div></div>
<div class="ttc" id="astructez_string_iterator_htm"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a></div><div class="ttdoc">STL forward iterator used by all string classes. Iterates over unicode characters....</div><div class="ttdef"><b>Definition:</b> StringIterator.h:11</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a101aef1c65880b16abed43733bd71449"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a101aef1c65880b16abed43733bd71449">ezStringIterator::operator==</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator==(const ezStringIterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:57</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a00303942463eb0687a28f74e09721a01"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a00303942463eb0687a28f74e09721a01">ezStringIterator::operator+=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator+=(difference_type d)</div><div class="ttdoc">Advances the iterator forwards by d characters. Does not move it beyond the range's end.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:120</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a></div><div class="ttdoc">STL reverse iterator used by all string classes. Iterates over unicode characters....</div><div class="ttdef"><b>Definition:</b> StringIterator.h:186</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a4d4ba07049169523550ab42570276e72"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a4d4ba07049169523550ab42570276e72">ezStringIterator::Value</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 Value() const</div><div class="ttdoc">Returns the currently pointed to character in Utf32 encoding.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:51</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a49743823a9968bda7407b699d0825647"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a49743823a9968bda7407b699d0825647">ezStringIterator::ezStringIterator</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator()</div><div class="ttdoc">Constructs an invalid iterator.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:22</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a69b9359f2ab04ceafdbef82facbd6a21"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a69b9359f2ab04ceafdbef82facbd6a21">ezStringIterator::operator++</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator&lt; STRING &gt; operator++(int)</div><div class="ttdoc">Move to the next Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:104</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_ae2e6516c460fbaf66f8fb9a0a0008f8c"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#ae2e6516c460fbaf66f8fb9a0a0008f8c">ezStringReverseIterator::operator--</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator&lt; STRING &gt; operator--(int)</div><div class="ttdoc">Move to the previous Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:277</div></div>
<div class="ttc" id="astructez_string_base_htm"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm">ezStringBase</a></div><div class="ttdoc">Base class for strings, which implements all read-only string functions.</div><div class="ttdef"><b>Definition:</b> StringBase.h:18</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a213f653c0ce0cf2f57f0859dcad39017"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a213f653c0ce0cf2f57f0859dcad39017">ezStringReverseIterator::GetCharacter</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 GetCharacter() const</div><div class="ttdoc">Returns the currently pointed to character in Utf32 encoding.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:223</div></div>
<div class="ttc" id="astructez_string_iterator_htm_af03601755be8c6e05e9d265b56995174"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#af03601755be8c6e05e9d265b56995174">ezStringIterator::Advance</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 Advance()</div><div class="ttdoc">Advances the iterated to the next character, same as operator++, but returns how many bytes were cons...</div><div class="ttdef"><b>Definition:</b> StringIterator.h:69</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a9c15bf5ac3e6521bf8dc4255326b0c4b"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a9c15bf5ac3e6521bf8dc4255326b0c4b">ezStringIterator::operator--</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator&lt; STRING &gt; operator--(int)</div><div class="ttdoc">Move to the previous Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:112</div></div>
<div class="ttc" id="astructez_string_iterator_htm_adfdf9dd60252bdca6cc0378b13acd614"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#adfdf9dd60252bdca6cc0378b13acd614">ezStringIterator::operator-</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator&lt; STRING &gt; operator-(difference_type d) const</div><div class="ttdoc">Returns an iterator that is advanced backwards by d characters.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:158</div></div>
<div class="ttc" id="aclassez_unicode_utils_htm_a76ba90d8cde77798cad214f009b28d02"><div class="ttname"><a href="../../d9/d32/classez_unicode_utils.htm#a76ba90d8cde77798cad214f009b28d02">ezUnicodeUtils::MoveToPriorUtf8</a></div><div class="ttdeci">static void MoveToPriorUtf8(const char *&amp;szUtf8, ezUInt32 uiNumCharacters=1)</div><div class="ttdoc">Moves the given string pointer backwards to the previous Utf8 character sequence.</div><div class="ttdef"><b>Definition:</b> UnicodeUtils_inl.h:231</div></div>
<div class="ttc" id="astructez_string_iterator_htm_ab633c7f3ca5a003d6eb19d6e06fbeef4"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#ab633c7f3ca5a003d6eb19d6e06fbeef4">ezStringIterator::GetCharacter</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 GetCharacter() const</div><div class="ttdoc">Returns the currently pointed to character in Utf32 encoding.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:48</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a7cdef4d7c0abb19b5f1d22273dc4fd35"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a7cdef4d7c0abb19b5f1d22273dc4fd35">ezStringReverseIterator::operator++</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator&lt; STRING &gt; operator++(int)</div><div class="ttdoc">Move to the next Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:269</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a0b4330176b80bbda0cb4cbcc576c365c"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a0b4330176b80bbda0cb4cbcc576c365c">ezStringIterator::IsValid</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element. Invalid iterators either point to end(m_Strin...</div><div class="ttdef"><b>Definition:</b> StringIterator.h:45</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a9393716e9b811b4e7cc4f630fc6b78ed"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a9393716e9b811b4e7cc4f630fc6b78ed">ezStringIterator::SetCurrentPosition</a></div><div class="ttdeci">void SetCurrentPosition(const char *szCurPos)</div><div class="ttdoc">Allows to set the 'current' iteration position to a different value.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:168</div></div>
<div class="ttc" id="astructez_string_iterator_htm_aef1493e9648fc3eb01d1c31e8fdca50a"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#aef1493e9648fc3eb01d1c31e8fdca50a">ezStringIterator::operator-&gt;</a></div><div class="ttdeci">const EZ_ALWAYS_INLINE char * operator-&gt;() const</div><div class="ttdoc">Returns the address the iterator currently points to.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:66</div></div>
<div class="ttc" id="astructez_string_iterator_htm_ad80c67ee340cf695126da53af8aa9cb9"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#ad80c67ee340cf695126da53af8aa9cb9">ezStringIterator::operator*</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 operator*() const</div><div class="ttdoc">Returns the currently pointed to character in Utf32 encoding.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:63</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a5fda1d2871d2f094ee0390728817c780"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a5fda1d2871d2f094ee0390728817c780">ezStringReverseIterator::operator--</a></div><div class="ttdeci">EZ_FORCE_INLINE ezStringReverseIterator&lt; STRING &gt; &amp; operator--()</div><div class="ttdoc">Move to the previous Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:251</div></div>
<div class="ttc" id="astructez_string_iterator_htm_ae9478ec32c510b52931100ddd04dd987"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#ae9478ec32c510b52931100ddd04dd987">ezStringIterator::operator+</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator&lt; STRING &gt; operator+(difference_type d) const</div><div class="ttdoc">Returns an iterator that is advanced forwards by d characters.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:150</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a704c733c6c93226d57631cbe3af3dcfa"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a704c733c6c93226d57631cbe3af3dcfa">ezStringIterator::ezStringIterator</a></div><div class="ttdeci">EZ_FORCE_INLINE ezStringIterator(const ezStringBase&lt; STRING &gt; &amp;string, bool bIsEnd)</div><div class="ttdoc">Constructs either a begin or end iterator for the given string.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:29</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_ace932ba4eda1ac5140da33d8510eaa02"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#ace932ba4eda1ac5140da33d8510eaa02">ezStringReverseIterator::operator-</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator&lt; STRING &gt; operator-(difference_type d) const</div><div class="ttdoc">Returns an iterator that is advanced backwards by d characters.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:323</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_adeeca18b7eed7a84769f1b9ad9fe1692"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#adeeca18b7eed7a84769f1b9ad9fe1692">ezStringReverseIterator::ezStringReverseIterator</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator()</div><div class="ttdoc">Constructs an invalid iterator.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:197</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a95d4be6bd977a2c23a9e486c309876d5"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a95d4be6bd977a2c23a9e486c309876d5">ezStringReverseIterator::GetData</a></div><div class="ttdeci">const EZ_ALWAYS_INLINE char * GetData() const</div><div class="ttdoc">Returns the address the iterator currently points to.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:226</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_b52479c911fe9a42767226b3387b3a02.htm">Strings</a></li><li class="navelem"><a class="el" href="../../dir_067384bf2c73f8a8078edb859c0ba426.htm">Implementation</a></li><li class="navelem"><b>StringIterator.h</b></li>
    <li class="footer">Generated on Sun Oct 9 2022 14:44:55 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
