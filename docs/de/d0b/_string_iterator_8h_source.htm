<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/StringIterator.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function() { init_codefold(1); });
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('de/d0b/_string_iterator_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">StringIterator.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#ifndef EZ_INCLUDING_BASICS_H</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#  error &quot;Please don&#39;t include StringIterator.h directly, but instead include Foundation/Basics.h&quot;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span> </div>
<div class="foldopen" id="foldopen00009" data-start="{" data-end="};">
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm">    9</a></span><span class="keyword">struct </span><a class="code hl_struct" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>{</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>  <span class="keyword">using </span>iterator_category = std::bidirectional_iterator_tag;</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>  <span class="keyword">using </span>value_type = ezUInt32;</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>  <span class="keyword">using </span>difference_type = std::ptrdiff_t;</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>  <span class="keyword">using </span>pointer = <span class="keyword">const</span> <span class="keywordtype">char</span>*;</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>  <span class="keyword">using </span>reference = ezUInt32;</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span> </div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>  EZ_DECLARE_POD_TYPE();</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span> </div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#ae924b0a0566c1fa37e10f8d3c13bbc74">   20</a></span>  EZ_ALWAYS_INLINE <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#ae924b0a0566c1fa37e10f8d3c13bbc74">ezStringIterator</a>() = <span class="keywordflow">default</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span> </div>
<div class="foldopen" id="foldopen00023" data-start="{" data-end="}">
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a7765401740968757855b8da62ca95f79">   23</a></span>  EZ_FORCE_INLINE <span class="keyword">explicit</span> <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#a7765401740968757855b8da62ca95f79">ezStringIterator</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pStartPtr, <span class="keyword">const</span> <span class="keywordtype">char</span>* pEndPtr, <span class="keyword">const</span> <span class="keywordtype">char</span>* pCurPtr)</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>  {</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>    m_pStartPtr = pStartPtr;</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>    m_pEndPtr = pEndPtr;</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>    m_pCurPtr = pCurPtr;</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  }</div>
</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span> </div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#afdba2b12be6134c25b8fbea27eca4bfb">   31</a></span>  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#afdba2b12be6134c25b8fbea27eca4bfb">IsValid</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pCurPtr != <span class="keyword">nullptr</span> &amp;&amp; m_pCurPtr != m_pEndPtr; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a1953ef3cd58b849fbc9adabad5635bdf">   34</a></span>  EZ_ALWAYS_INLINE ezUInt32 <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#a1953ef3cd58b849fbc9adabad5635bdf">GetCharacter</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#afdba2b12be6134c25b8fbea27eca4bfb">IsValid</a>() ? <a class="code hl_function" href="../../d9/d32/classez_unicode_utils.htm#a14961aea9cc3791a6c9f48159fa64d9f">ezUnicodeUtils::ConvertUtf8ToUtf32</a>(m_pCurPtr) : ezUInt32(0); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#ae3be42c7380b6454daae79fa9dd3be20">   37</a></span>  EZ_ALWAYS_INLINE ezUInt32 <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#ae3be42c7380b6454daae79fa9dd3be20">operator*</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#a1953ef3cd58b849fbc9adabad5635bdf">GetCharacter</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a919ea76f4ed7e9a42c66edd1f3de45a5">   40</a></span>  EZ_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#a919ea76f4ed7e9a42c66edd1f3de45a5">GetData</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pCurPtr; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#aae5a695fc1aaca954d9236a58e87df71">   43</a></span>  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#aae5a695fc1aaca954d9236a58e87df71">operator==</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&amp; it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pCurPtr == it2.m_pCurPtr); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>  EZ_ADD_DEFAULT_OPERATOR_NOTEQUAL(<span class="keyword">const</span> <a class="code hl_struct" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&amp;);</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span> </div>
<div class="foldopen" id="foldopen00047" data-start="{" data-end="}">
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a237a0f46bf808589954a87afe2a7cab7">   47</a></span>  EZ_ALWAYS_INLINE ezUInt32 <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#a237a0f46bf808589954a87afe2a7cab7">Advance</a>()</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  {</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>    <span class="keyword">const</span> <span class="keywordtype">char</span>* pPrevElement = m_pCurPtr;</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>    <span class="keywordflow">if</span> (m_pCurPtr &lt; m_pEndPtr)</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>    {</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>      <a class="code hl_function" href="../../d9/d32/classez_unicode_utils.htm#ac5acb55d1f2131f2e2578512c6f7c1ed">ezUnicodeUtils::MoveToNextUtf8</a>(m_pCurPtr).<a class="code hl_function" href="../../d4/da9/structez_result.htm#adbe091dc74acde67dd2097ad780e76bb">AssertSuccess</a>();</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>    }</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(m_pCurPtr - pPrevElement);</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>  }</div>
</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span> </div>
<div class="foldopen" id="foldopen00060" data-start="{" data-end="}">
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a25451c5cad182635593e5112bc97576b">   60</a></span>  EZ_ALWAYS_INLINE <a class="code hl_struct" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&amp; <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#a25451c5cad182635593e5112bc97576b">operator++</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>  {</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>    <span class="keywordflow">if</span> (m_pCurPtr &lt; m_pEndPtr)</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>    {</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>      <a class="code hl_function" href="../../d9/d32/classez_unicode_utils.htm#ac5acb55d1f2131f2e2578512c6f7c1ed">ezUnicodeUtils::MoveToNextUtf8</a>(m_pCurPtr).<a class="code hl_function" href="../../d4/da9/structez_result.htm#adbe091dc74acde67dd2097ad780e76bb">AssertSuccess</a>();</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>    }</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span> </div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  }</div>
</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span> </div>
<div class="foldopen" id="foldopen00071" data-start="{" data-end="}">
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a5d556afec6433d6192cb861d1a0197ca">   71</a></span>  EZ_ALWAYS_INLINE <a class="code hl_struct" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&amp; <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#a5d556afec6433d6192cb861d1a0197ca">operator--</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  {</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>    <span class="keywordflow">if</span> (m_pStartPtr &lt; m_pCurPtr)</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>    {</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>      <a class="code hl_function" href="../../d9/d32/classez_unicode_utils.htm#a6a90c6df6d77b7e3019eb8701441c749">ezUnicodeUtils::MoveToPriorUtf8</a>(m_pCurPtr, m_pStartPtr).<a class="code hl_function" href="../../d4/da9/structez_result.htm#adbe091dc74acde67dd2097ad780e76bb">AssertSuccess</a>();</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>    }</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span> </div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>  }</div>
</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span> </div>
<div class="foldopen" id="foldopen00082" data-start="{" data-end="}">
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#ac4b90449774e7a4f4246eea8f1a3b34d">   82</a></span>  EZ_ALWAYS_INLINE <a class="code hl_struct" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#ac4b90449774e7a4f4246eea8f1a3b34d">operator++</a>(<span class="keywordtype">int</span>) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>  {</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>    <a class="code hl_struct" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> tmp = *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>    ++(*this);</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>    <span class="keywordflow">return</span> tmp;</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  }</div>
</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span> </div>
<div class="foldopen" id="foldopen00090" data-start="{" data-end="}">
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a44c18fc148bcaf691df29973fd3c3a9f">   90</a></span>  EZ_ALWAYS_INLINE <a class="code hl_struct" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#a44c18fc148bcaf691df29973fd3c3a9f">operator--</a>(<span class="keywordtype">int</span>) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>  {</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>    <a class="code hl_struct" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> tmp = *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>    --(*this);</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>    <span class="keywordflow">return</span> tmp;</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>  }</div>
</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span> </div>
<div class="foldopen" id="foldopen00098" data-start="{" data-end="}">
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a2f32c0372029f11bebb4f7ae01c66353">   98</a></span>  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#a2f32c0372029f11bebb4f7ae01c66353">operator+=</a>(difference_type d) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>  {</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    <span class="keywordflow">while</span> (d &gt; 0)</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>    {</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>      ++(*this);</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>      --d;</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>    }</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>    <span class="keywordflow">while</span> (d &lt; 0)</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>    {</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>      --(*this);</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>      ++d;</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>    }</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>  }</div>
</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span> </div>
<div class="foldopen" id="foldopen00113" data-start="{" data-end="}">
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#aed6c83315faacddcf55bf195b602511e">  113</a></span>  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#aed6c83315faacddcf55bf195b602511e">operator-=</a>(difference_type d) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>  {</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>    <span class="keywordflow">while</span> (d &gt; 0)</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>    {</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>      --(*this);</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>      --d;</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>    }</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>    <span class="keywordflow">while</span> (d &lt; 0)</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>    {</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>      ++(*this);</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>      ++d;</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>    }</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  }</div>
</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="foldopen" id="foldopen00128" data-start="{" data-end="}">
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a39b609c48b4da08df028f55ed31d2eb3">  128</a></span>  EZ_ALWAYS_INLINE <a class="code hl_struct" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#a39b609c48b4da08df028f55ed31d2eb3">operator+</a>(difference_type d) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>  {</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>    <a class="code hl_struct" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> it = *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>    it += d;</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>    <span class="keywordflow">return</span> it;</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>  }</div>
</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span> </div>
<div class="foldopen" id="foldopen00136" data-start="{" data-end="}">
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#ab696459309ee02a0bd0766531d25835f">  136</a></span>  EZ_ALWAYS_INLINE <a class="code hl_struct" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#ab696459309ee02a0bd0766531d25835f">operator-</a>(difference_type d) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  {</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>    <a class="code hl_struct" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> it = *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>    it -= d;</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>    <span class="keywordflow">return</span> it;</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  }</div>
</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span> </div>
<div class="foldopen" id="foldopen00146" data-start="{" data-end="}">
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#ac070d49b4005c2e9500e8b484d4b4818">  146</a></span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d4/ddc/structez_string_iterator.htm#ac070d49b4005c2e9500e8b484d4b4818">SetCurrentPosition</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szCurPos)</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>  {</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>    EZ_ASSERT_DEV((szCurPos &gt;= m_pStartPtr) &amp;&amp; (szCurPos &lt;= m_pEndPtr), <span class="stringliteral">&quot;New position must still be inside the iterator&#39;s range.&quot;</span>);</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span> </div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>    m_pCurPtr = szCurPos;</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>  }</div>
</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span> </div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* m_pStartPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* m_pEndPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* m_pCurPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>};</div>
</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span> </div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span> </div>
<div class="foldopen" id="foldopen00162" data-start="{" data-end="};">
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm">  162</a></span><span class="keyword">struct </span><a class="code hl_struct" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a></div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>{</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>  <span class="keyword">using </span>iterator_category = std::bidirectional_iterator_tag;</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>  <span class="keyword">using </span>value_type = ezUInt32;</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  <span class="keyword">using </span>difference_type = std::ptrdiff_t;</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  <span class="keyword">using </span>pointer = <span class="keyword">const</span> <span class="keywordtype">char</span>*;</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>  <span class="keyword">using </span>reference = ezUInt32;</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span> </div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  EZ_DECLARE_POD_TYPE();</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span> </div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a1dfabadaf875df39e4251d029f09bb61">  173</a></span>  EZ_ALWAYS_INLINE <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a1dfabadaf875df39e4251d029f09bb61">ezStringReverseIterator</a>() = <span class="keywordflow">default</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span> </div>
<div class="foldopen" id="foldopen00176" data-start="{" data-end="}">
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5f1c97d4e1699517bc37e02f0a401d63">  176</a></span>  EZ_FORCE_INLINE <span class="keyword">explicit</span> <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5f1c97d4e1699517bc37e02f0a401d63">ezStringReverseIterator</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pStartPtr, <span class="keyword">const</span> <span class="keywordtype">char</span>* pEndPtr, <span class="keyword">const</span> <span class="keywordtype">char</span>* pCurPtr) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  {</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>    m_pStartPtr = pStartPtr;</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>    m_pEndPtr = pEndPtr;</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>    m_pCurPtr = pCurPtr;</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span> </div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>    <span class="keywordflow">if</span> (m_pStartPtr &gt;= m_pEndPtr)</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>    {</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>      m_pCurPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>    }</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_pCurPtr == m_pEndPtr)</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>    {</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>      <a class="code hl_function" href="../../d9/d32/classez_unicode_utils.htm#a6a90c6df6d77b7e3019eb8701441c749">ezUnicodeUtils::MoveToPriorUtf8</a>(m_pCurPtr, m_pStartPtr).<a class="code hl_function" href="../../d4/da9/structez_result.htm#adbe091dc74acde67dd2097ad780e76bb">AssertSuccess</a>();</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>    }</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>  }</div>
</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span> </div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5d4f08585fe04ed6cf7c13437bc6fd27">  193</a></span>  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5d4f08585fe04ed6cf7c13437bc6fd27">IsValid</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pCurPtr != <span class="keyword">nullptr</span>); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span> </div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a122807dd4ff977b03dd153ee876a5cc4">  196</a></span>  EZ_ALWAYS_INLINE ezUInt32 <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a122807dd4ff977b03dd153ee876a5cc4">GetCharacter</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5d4f08585fe04ed6cf7c13437bc6fd27">IsValid</a>() ? <a class="code hl_function" href="../../d9/d32/classez_unicode_utils.htm#a14961aea9cc3791a6c9f48159fa64d9f">ezUnicodeUtils::ConvertUtf8ToUtf32</a>(m_pCurPtr) : ezUInt32(0); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span> </div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a3a3fc9b048635c423856b17c987a17a2">  199</a></span>  EZ_ALWAYS_INLINE ezUInt32 <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a3a3fc9b048635c423856b17c987a17a2">operator*</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a122807dd4ff977b03dd153ee876a5cc4">GetCharacter</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span> </div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a916a93709485d8a10ca1fff69d369a84">  202</a></span>  EZ_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a916a93709485d8a10ca1fff69d369a84">GetData</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pCurPtr; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span> </div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#ad1ebc374d6cb6a259d6675402a811762">  205</a></span>  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#ad1ebc374d6cb6a259d6675402a811762">operator==</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&amp; it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pCurPtr == it2.m_pCurPtr); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  EZ_ADD_DEFAULT_OPERATOR_NOTEQUAL(<span class="keyword">const</span> <a class="code hl_struct" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&amp;);</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span> </div>
<div class="foldopen" id="foldopen00209" data-start="{" data-end="}">
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a776321caa99b21b64b09d40f1ae22e81">  209</a></span>  EZ_FORCE_INLINE <a class="code hl_struct" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&amp; <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a776321caa99b21b64b09d40f1ae22e81">operator++</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>  {</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>    <span class="keywordflow">if</span> (m_pCurPtr != <span class="keyword">nullptr</span> &amp;&amp; m_pStartPtr &lt; m_pCurPtr)</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>      <a class="code hl_function" href="../../d9/d32/classez_unicode_utils.htm#a6a90c6df6d77b7e3019eb8701441c749">ezUnicodeUtils::MoveToPriorUtf8</a>(m_pCurPtr, m_pStartPtr).<a class="code hl_function" href="../../d4/da9/structez_result.htm#adbe091dc74acde67dd2097ad780e76bb">AssertSuccess</a>();</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>      m_pCurPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span> </div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>  }</div>
</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span> </div>
<div class="foldopen" id="foldopen00220" data-start="{" data-end="}">
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a279a36821bb9dcf7240211194e933ff5">  220</a></span>  EZ_FORCE_INLINE <a class="code hl_struct" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&amp; <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a279a36821bb9dcf7240211194e933ff5">operator--</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  {</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>    <span class="keywordflow">if</span> (m_pCurPtr != <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>    {</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>      <span class="keyword">const</span> <span class="keywordtype">char</span>* szOldPos = m_pCurPtr;</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>      <a class="code hl_function" href="../../d9/d32/classez_unicode_utils.htm#ac5acb55d1f2131f2e2578512c6f7c1ed">ezUnicodeUtils::MoveToNextUtf8</a>(m_pCurPtr).<a class="code hl_function" href="../../d4/da9/structez_result.htm#adbe091dc74acde67dd2097ad780e76bb">AssertSuccess</a>();</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span> </div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>      <span class="keywordflow">if</span> (m_pCurPtr == m_pEndPtr)</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>        m_pCurPtr = szOldPos;</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>    }</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>    {</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>      <span class="comment">// Set back to the first character.</span></div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>      m_pCurPtr = m_pStartPtr;</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>    }</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>  }</div>
</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span> </div>
<div class="foldopen" id="foldopen00239" data-start="{" data-end="}">
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a16956441af57ef216b40015b01da421e">  239</a></span>  EZ_ALWAYS_INLINE <a class="code hl_struct" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a16956441af57ef216b40015b01da421e">operator++</a>(<span class="keywordtype">int</span>) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>  {</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>    <a class="code hl_struct" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> tmp = *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>    ++(*this);</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>    <span class="keywordflow">return</span> tmp;</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>  }</div>
</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span> </div>
<div class="foldopen" id="foldopen00247" data-start="{" data-end="}">
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#ace0770fde2b3a518f5ebe480568ebf79">  247</a></span>  EZ_ALWAYS_INLINE <a class="code hl_struct" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#ace0770fde2b3a518f5ebe480568ebf79">operator--</a>(<span class="keywordtype">int</span>) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  {</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>    <a class="code hl_struct" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> tmp = *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>    --(*this);</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>    <span class="keywordflow">return</span> tmp;</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>  }</div>
</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span> </div>
<div class="foldopen" id="foldopen00255" data-start="{" data-end="}">
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a4102d53bd4b149b186dd772e99ea71d0">  255</a></span>  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a4102d53bd4b149b186dd772e99ea71d0">operator+=</a>(difference_type d) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>  {</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span>    <span class="keywordflow">while</span> (d &gt; 0)</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>    {</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>      ++(*this);</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>      --d;</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>    }</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>    <span class="keywordflow">while</span> (d &lt; 0)</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>    {</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>      --(*this);</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>      ++d;</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>    }</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>  }</div>
</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span> </div>
<div class="foldopen" id="foldopen00270" data-start="{" data-end="}">
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5d4a586f1281017392943a3d6f558b0d">  270</a></span>  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5d4a586f1281017392943a3d6f558b0d">operator-=</a>(difference_type d) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>  {</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>    <span class="keywordflow">while</span> (d &gt; 0)</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>    {</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>      --(*this);</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>      --d;</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>    }</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>    <span class="keywordflow">while</span> (d &lt; 0)</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>    {</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>      ++(*this);</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span>      ++d;</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>    }</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>  }</div>
</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span> </div>
<div class="foldopen" id="foldopen00285" data-start="{" data-end="}">
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#ac6db6832339c40010dfabb814475d0a7">  285</a></span>  EZ_ALWAYS_INLINE <a class="code hl_struct" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#ac6db6832339c40010dfabb814475d0a7">operator+</a>(difference_type d) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>  {</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>    <a class="code hl_struct" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> it = *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>    it += d;</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>    <span class="keywordflow">return</span> it;</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>  }</div>
</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span> </div>
<div class="foldopen" id="foldopen00293" data-start="{" data-end="}">
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a0e055d6153541616b6965880c75ff70e">  293</a></span>  EZ_ALWAYS_INLINE <a class="code hl_struct" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a0e055d6153541616b6965880c75ff70e">operator-</a>(difference_type d) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>  {</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>    <a class="code hl_struct" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> it = *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>    it -= d;</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>    <span class="keywordflow">return</span> it;</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>  }</div>
</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span> </div>
<div class="foldopen" id="foldopen00303" data-start="{" data-end="}">
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a7845fbc8759ea7d692ce80c51621b00e">  303</a></span>  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d6/d6b/structez_string_reverse_iterator.htm#a7845fbc8759ea7d692ce80c51621b00e">SetCurrentPosition</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szCurPos)</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>  {</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>    EZ_ASSERT_DEV((szCurPos == <span class="keyword">nullptr</span>) || ((szCurPos &gt;= m_pStartPtr) &amp;&amp; (szCurPos &lt; m_pEndPtr)), <span class="stringliteral">&quot;New position must still be inside the iterator&#39;s range.&quot;</span>);</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span> </div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>    m_pCurPtr = szCurPos;</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>  }</div>
</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span> </div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* m_pStartPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* m_pEndPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* m_pCurPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>};</div>
</div>
<div class="ttc" id="aclassez_unicode_utils_htm_a14961aea9cc3791a6c9f48159fa64d9f"><div class="ttname"><a href="../../d9/d32/classez_unicode_utils.htm#a14961aea9cc3791a6c9f48159fa64d9f">ezUnicodeUtils::ConvertUtf8ToUtf32</a></div><div class="ttdeci">static ezUInt32 ConvertUtf8ToUtf32(const char *pFirstChar)</div><div class="ttdoc">Converts the UTF-8 character that starts at pFirstChar into a UTF-32 character.</div><div class="ttdef"><b>Definition</b> UnicodeUtils_inl.h:124</div></div>
<div class="ttc" id="aclassez_unicode_utils_htm_a6a90c6df6d77b7e3019eb8701441c749"><div class="ttname"><a href="../../d9/d32/classez_unicode_utils.htm#a6a90c6df6d77b7e3019eb8701441c749">ezUnicodeUtils::MoveToPriorUtf8</a></div><div class="ttdeci">static ezResult MoveToPriorUtf8(const char *&amp;ref_szUtf8, const char *szUtf8Start, ezUInt32 uiNumCharacters=1)</div><div class="ttdoc">Moves the given string pointer backwards to the previous Utf8 character sequence.</div><div class="ttdef"><b>Definition</b> UnicodeUtils_inl.h:243</div></div>
<div class="ttc" id="aclassez_unicode_utils_htm_ac5acb55d1f2131f2e2578512c6f7c1ed"><div class="ttname"><a href="../../d9/d32/classez_unicode_utils.htm#ac5acb55d1f2131f2e2578512c6f7c1ed">ezUnicodeUtils::MoveToNextUtf8</a></div><div class="ttdeci">static ezResult MoveToNextUtf8(const char *&amp;ref_szUtf8, ezUInt32 uiNumCharacters=1)</div><div class="ttdoc">Moves the given string pointer ahead to the next Utf8 character sequence.</div><div class="ttdef"><b>Definition</b> UnicodeUtils_inl.h:203</div></div>
<div class="ttc" id="astructez_result_htm_adbe091dc74acde67dd2097ad780e76bb"><div class="ttname"><a href="../../d4/da9/structez_result.htm#adbe091dc74acde67dd2097ad780e76bb">ezResult::AssertSuccess</a></div><div class="ttdeci">void AssertSuccess(const char *szMsg=nullptr, const char *szDetails=nullptr) const</div><div class="ttdoc">Asserts that the function succeeded. In case of failure, the program will terminate.</div><div class="ttdef"><b>Definition</b> Status.cpp:7</div></div>
<div class="ttc" id="astructez_string_iterator_htm"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a></div><div class="ttdoc">STL forward iterator used by all string classes. Iterates over unicode characters....</div><div class="ttdef"><b>Definition</b> StringIterator.h:10</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a1953ef3cd58b849fbc9adabad5635bdf"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a1953ef3cd58b849fbc9adabad5635bdf">ezStringIterator::GetCharacter</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 GetCharacter() const</div><div class="ttdoc">Returns the currently pointed to character in Utf32 encoding.</div><div class="ttdef"><b>Definition</b> StringIterator.h:34</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a237a0f46bf808589954a87afe2a7cab7"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a237a0f46bf808589954a87afe2a7cab7">ezStringIterator::Advance</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 Advance()</div><div class="ttdoc">Advances the iterated to the next character, same as operator++, but returns how many bytes were cons...</div><div class="ttdef"><b>Definition</b> StringIterator.h:47</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a25451c5cad182635593e5112bc97576b"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a25451c5cad182635593e5112bc97576b">ezStringIterator::operator++</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator &amp; operator++()</div><div class="ttdoc">Move to the next Utf8 character.</div><div class="ttdef"><b>Definition</b> StringIterator.h:60</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a2f32c0372029f11bebb4f7ae01c66353"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a2f32c0372029f11bebb4f7ae01c66353">ezStringIterator::operator+=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator+=(difference_type d)</div><div class="ttdoc">Advances the iterator forwards by d characters. Does not move it beyond the range's end.</div><div class="ttdef"><b>Definition</b> StringIterator.h:98</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a39b609c48b4da08df028f55ed31d2eb3"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a39b609c48b4da08df028f55ed31d2eb3">ezStringIterator::operator+</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator operator+(difference_type d) const</div><div class="ttdoc">Returns an iterator that is advanced forwards by d characters.</div><div class="ttdef"><b>Definition</b> StringIterator.h:128</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a44c18fc148bcaf691df29973fd3c3a9f"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a44c18fc148bcaf691df29973fd3c3a9f">ezStringIterator::operator--</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator operator--(int)</div><div class="ttdoc">Move to the previous Utf8 character.</div><div class="ttdef"><b>Definition</b> StringIterator.h:90</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a5d556afec6433d6192cb861d1a0197ca"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a5d556afec6433d6192cb861d1a0197ca">ezStringIterator::operator--</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator &amp; operator--()</div><div class="ttdoc">Move to the previous Utf8 character.</div><div class="ttdef"><b>Definition</b> StringIterator.h:71</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a7765401740968757855b8da62ca95f79"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a7765401740968757855b8da62ca95f79">ezStringIterator::ezStringIterator</a></div><div class="ttdeci">EZ_FORCE_INLINE ezStringIterator(const char *pStartPtr, const char *pEndPtr, const char *pCurPtr)</div><div class="ttdoc">Constructs either a begin or end iterator for the given string.</div><div class="ttdef"><b>Definition</b> StringIterator.h:23</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a919ea76f4ed7e9a42c66edd1f3de45a5"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a919ea76f4ed7e9a42c66edd1f3de45a5">ezStringIterator::GetData</a></div><div class="ttdeci">EZ_ALWAYS_INLINE const char * GetData() const</div><div class="ttdoc">Returns the address the iterator currently points to.</div><div class="ttdef"><b>Definition</b> StringIterator.h:40</div></div>
<div class="ttc" id="astructez_string_iterator_htm_aae5a695fc1aaca954d9236a58e87df71"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#aae5a695fc1aaca954d9236a58e87df71">ezStringIterator::operator==</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator==(const ezStringIterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition</b> StringIterator.h:43</div></div>
<div class="ttc" id="astructez_string_iterator_htm_ab696459309ee02a0bd0766531d25835f"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#ab696459309ee02a0bd0766531d25835f">ezStringIterator::operator-</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator operator-(difference_type d) const</div><div class="ttdoc">Returns an iterator that is advanced backwards by d characters.</div><div class="ttdef"><b>Definition</b> StringIterator.h:136</div></div>
<div class="ttc" id="astructez_string_iterator_htm_ac070d49b4005c2e9500e8b484d4b4818"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#ac070d49b4005c2e9500e8b484d4b4818">ezStringIterator::SetCurrentPosition</a></div><div class="ttdeci">void SetCurrentPosition(const char *szCurPos)</div><div class="ttdoc">Allows to set the 'current' iteration position to a different value.</div><div class="ttdef"><b>Definition</b> StringIterator.h:146</div></div>
<div class="ttc" id="astructez_string_iterator_htm_ac4b90449774e7a4f4246eea8f1a3b34d"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#ac4b90449774e7a4f4246eea8f1a3b34d">ezStringIterator::operator++</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator operator++(int)</div><div class="ttdoc">Move to the next Utf8 character.</div><div class="ttdef"><b>Definition</b> StringIterator.h:82</div></div>
<div class="ttc" id="astructez_string_iterator_htm_ae3be42c7380b6454daae79fa9dd3be20"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#ae3be42c7380b6454daae79fa9dd3be20">ezStringIterator::operator*</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 operator*() const</div><div class="ttdoc">Returns the currently pointed to character in Utf32 encoding.</div><div class="ttdef"><b>Definition</b> StringIterator.h:37</div></div>
<div class="ttc" id="astructez_string_iterator_htm_ae924b0a0566c1fa37e10f8d3c13bbc74"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#ae924b0a0566c1fa37e10f8d3c13bbc74">ezStringIterator::ezStringIterator</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator()=default</div><div class="ttdoc">Constructs an invalid iterator.</div></div>
<div class="ttc" id="astructez_string_iterator_htm_aed6c83315faacddcf55bf195b602511e"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#aed6c83315faacddcf55bf195b602511e">ezStringIterator::operator-=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator-=(difference_type d)</div><div class="ttdoc">Moves the iterator backwards by d characters. Does not move it beyond the range's start.</div><div class="ttdef"><b>Definition</b> StringIterator.h:113</div></div>
<div class="ttc" id="astructez_string_iterator_htm_afdba2b12be6134c25b8fbea27eca4bfb"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#afdba2b12be6134c25b8fbea27eca4bfb">ezStringIterator::IsValid</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element. Invalid iterators either point to m_pEndPtr o...</div><div class="ttdef"><b>Definition</b> StringIterator.h:31</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a></div><div class="ttdoc">STL reverse iterator used by all string classes. Iterates over unicode characters....</div><div class="ttdef"><b>Definition</b> StringIterator.h:163</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a0e055d6153541616b6965880c75ff70e"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a0e055d6153541616b6965880c75ff70e">ezStringReverseIterator::operator-</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator operator-(difference_type d) const</div><div class="ttdoc">Returns an iterator that is advanced backwards by d characters.</div><div class="ttdef"><b>Definition</b> StringIterator.h:293</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a122807dd4ff977b03dd153ee876a5cc4"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a122807dd4ff977b03dd153ee876a5cc4">ezStringReverseIterator::GetCharacter</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 GetCharacter() const</div><div class="ttdoc">Returns the currently pointed to character in Utf32 encoding.</div><div class="ttdef"><b>Definition</b> StringIterator.h:196</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a16956441af57ef216b40015b01da421e"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a16956441af57ef216b40015b01da421e">ezStringReverseIterator::operator++</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator operator++(int)</div><div class="ttdoc">Move to the next Utf8 character.</div><div class="ttdef"><b>Definition</b> StringIterator.h:239</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a1dfabadaf875df39e4251d029f09bb61"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a1dfabadaf875df39e4251d029f09bb61">ezStringReverseIterator::ezStringReverseIterator</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator()=default</div><div class="ttdoc">Constructs an invalid iterator.</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a279a36821bb9dcf7240211194e933ff5"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a279a36821bb9dcf7240211194e933ff5">ezStringReverseIterator::operator--</a></div><div class="ttdeci">EZ_FORCE_INLINE ezStringReverseIterator &amp; operator--()</div><div class="ttdoc">Move to the previous Utf8 character.</div><div class="ttdef"><b>Definition</b> StringIterator.h:220</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a3a3fc9b048635c423856b17c987a17a2"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a3a3fc9b048635c423856b17c987a17a2">ezStringReverseIterator::operator*</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 operator*() const</div><div class="ttdoc">Returns the currently pointed to character in Utf32 encoding.</div><div class="ttdef"><b>Definition</b> StringIterator.h:199</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a4102d53bd4b149b186dd772e99ea71d0"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a4102d53bd4b149b186dd772e99ea71d0">ezStringReverseIterator::operator+=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator+=(difference_type d)</div><div class="ttdoc">Advances the iterator forwards by d characters. Does not move it beyond the range's end.</div><div class="ttdef"><b>Definition</b> StringIterator.h:255</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a5d4a586f1281017392943a3d6f558b0d"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a5d4a586f1281017392943a3d6f558b0d">ezStringReverseIterator::operator-=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator-=(difference_type d)</div><div class="ttdoc">Moves the iterator backwards by d characters. Does not move it beyond the range's start.</div><div class="ttdef"><b>Definition</b> StringIterator.h:270</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a5d4f08585fe04ed6cf7c13437bc6fd27"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a5d4f08585fe04ed6cf7c13437bc6fd27">ezStringReverseIterator::IsValid</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition</b> StringIterator.h:193</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a5f1c97d4e1699517bc37e02f0a401d63"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a5f1c97d4e1699517bc37e02f0a401d63">ezStringReverseIterator::ezStringReverseIterator</a></div><div class="ttdeci">EZ_FORCE_INLINE ezStringReverseIterator(const char *pStartPtr, const char *pEndPtr, const char *pCurPtr)</div><div class="ttdoc">Constructs either a rbegin or rend iterator for the given string.</div><div class="ttdef"><b>Definition</b> StringIterator.h:176</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a776321caa99b21b64b09d40f1ae22e81"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a776321caa99b21b64b09d40f1ae22e81">ezStringReverseIterator::operator++</a></div><div class="ttdeci">EZ_FORCE_INLINE ezStringReverseIterator &amp; operator++()</div><div class="ttdoc">Move to the next Utf8 character.</div><div class="ttdef"><b>Definition</b> StringIterator.h:209</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a7845fbc8759ea7d692ce80c51621b00e"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a7845fbc8759ea7d692ce80c51621b00e">ezStringReverseIterator::SetCurrentPosition</a></div><div class="ttdeci">EZ_FORCE_INLINE void SetCurrentPosition(const char *szCurPos)</div><div class="ttdoc">Allows to set the 'current' iteration position to a different value.</div><div class="ttdef"><b>Definition</b> StringIterator.h:303</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a916a93709485d8a10ca1fff69d369a84"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a916a93709485d8a10ca1fff69d369a84">ezStringReverseIterator::GetData</a></div><div class="ttdeci">EZ_ALWAYS_INLINE const char * GetData() const</div><div class="ttdoc">Returns the address the iterator currently points to.</div><div class="ttdef"><b>Definition</b> StringIterator.h:202</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_ac6db6832339c40010dfabb814475d0a7"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#ac6db6832339c40010dfabb814475d0a7">ezStringReverseIterator::operator+</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator operator+(difference_type d) const</div><div class="ttdoc">Returns an iterator that is advanced forwards by d characters.</div><div class="ttdef"><b>Definition</b> StringIterator.h:285</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_ace0770fde2b3a518f5ebe480568ebf79"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#ace0770fde2b3a518f5ebe480568ebf79">ezStringReverseIterator::operator--</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator operator--(int)</div><div class="ttdoc">Move to the previous Utf8 character.</div><div class="ttdef"><b>Definition</b> StringIterator.h:247</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_ad1ebc374d6cb6a259d6675402a811762"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#ad1ebc374d6cb6a259d6675402a811762">ezStringReverseIterator::operator==</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator==(const ezStringReverseIterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition</b> StringIterator.h:205</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_b52479c911fe9a42767226b3387b3a02.htm">Strings</a></li><li class="navelem"><a class="el" href="../../dir_067384bf2c73f8a8078edb859c0ba426.htm">Implementation</a></li><li class="navelem"><b>StringIterator.h</b></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:17:53 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
