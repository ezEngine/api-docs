<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/StringIterator.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 23.12</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('de/d0b/_string_iterator_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">StringIterator.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;Foundation/Strings/StringUtils.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00007"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm">    7</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;{</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  <span class="keyword">using</span> iterator_category = std::bidirectional_iterator_tag;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  <span class="keyword">using</span> value_type = ezUInt32;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  <span class="keyword">using</span> difference_type = std::ptrdiff_t;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <span class="keyword">using</span> pointer = <span class="keyword">const</span> <span class="keywordtype">char</span>*;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="keyword">using</span> reference = ezUInt32;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160; </div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  EZ_DECLARE_POD_TYPE();</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d4/ddc/structez_string_iterator.htm#ae924b0a0566c1fa37e10f8d3c13bbc74">ezStringIterator</a>() = <span class="keywordflow">default</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a7765401740968757855b8da62ca95f79">   21</a></span>&#160;  EZ_FORCE_INLINE <span class="keyword">explicit</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a7765401740968757855b8da62ca95f79">ezStringIterator</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pStartPtr, <span class="keyword">const</span> <span class="keywordtype">char</span>* pEndPtr, <span class="keyword">const</span> <span class="keywordtype">char</span>* pCurPtr)</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  {</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    m_pStartPtr = pStartPtr;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    m_pEndPtr = pEndPtr;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    m_pCurPtr = pCurPtr;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  }</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#afdba2b12be6134c25b8fbea27eca4bfb">   29</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#afdba2b12be6134c25b8fbea27eca4bfb">IsValid</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pCurPtr != <span class="keyword">nullptr</span> &amp;&amp; m_pCurPtr != m_pEndPtr; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a1953ef3cd58b849fbc9adabad5635bdf">   32</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a1953ef3cd58b849fbc9adabad5635bdf">GetCharacter</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#afdba2b12be6134c25b8fbea27eca4bfb">IsValid</a>() ? <a class="code" href="../../d9/d32/classez_unicode_utils.htm#a14961aea9cc3791a6c9f48159fa64d9f">ezUnicodeUtils::ConvertUtf8ToUtf32</a>(m_pCurPtr) : ezUInt32(0); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#ae3be42c7380b6454daae79fa9dd3be20">   35</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d4/ddc/structez_string_iterator.htm#ae3be42c7380b6454daae79fa9dd3be20">operator*</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a1953ef3cd58b849fbc9adabad5635bdf">GetCharacter</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#acb917796f746f893a937f2d53a9b9d88">   38</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d4/ddc/structez_string_iterator.htm#acb917796f746f893a937f2d53a9b9d88">GetData</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pCurPtr; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#aae5a695fc1aaca954d9236a58e87df71">   41</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#aae5a695fc1aaca954d9236a58e87df71">operator==</a>(<span class="keyword">const</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&amp; it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pCurPtr == it2.m_pCurPtr); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  EZ_ADD_DEFAULT_OPERATOR_NOTEQUAL(<span class="keyword">const</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&amp;);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a237a0f46bf808589954a87afe2a7cab7">   45</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a237a0f46bf808589954a87afe2a7cab7">Advance</a>()</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* pPrevElement = m_pCurPtr;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span> (m_pCurPtr &lt; m_pEndPtr)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      <a class="code" href="../../d9/d32/classez_unicode_utils.htm#a7fb78e6f4d844ef8ceea9c31ff1cabeb">ezUnicodeUtils::MoveToNextUtf8</a>(m_pCurPtr);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(m_pCurPtr - pPrevElement);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  }</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a8f4524e2e5ccf7ccfef5ffc3a01819cf">   58</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&amp; <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a8f4524e2e5ccf7ccfef5ffc3a01819cf">operator++</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span> (m_pCurPtr &lt; m_pEndPtr)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      <a class="code" href="../../d9/d32/classez_unicode_utils.htm#a7fb78e6f4d844ef8ceea9c31ff1cabeb">ezUnicodeUtils::MoveToNextUtf8</a>(m_pCurPtr);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a3e18b9fe36cee22b7b34c6cdcd28530c">   69</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&amp; <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a3e18b9fe36cee22b7b34c6cdcd28530c">operator--</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">if</span> (m_pStartPtr &lt; m_pCurPtr)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      <a class="code" href="../../d9/d32/classez_unicode_utils.htm#a5ecfed7c254cbe9f6e85cd0766091e15">ezUnicodeUtils::MoveToPriorUtf8</a>(m_pCurPtr);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  }</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#ac4b90449774e7a4f4246eea8f1a3b34d">   80</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#ac4b90449774e7a4f4246eea8f1a3b34d">operator++</a>(<span class="keywordtype">int</span>) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> tmp = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    ++(*this);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">return</span> tmp;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a44c18fc148bcaf691df29973fd3c3a9f">   88</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a44c18fc148bcaf691df29973fd3c3a9f">operator--</a>(<span class="keywordtype">int</span>) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> tmp = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    --(*this);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">return</span> tmp;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a2f32c0372029f11bebb4f7ae01c66353">   96</a></span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a2f32c0372029f11bebb4f7ae01c66353">operator+=</a>(difference_type d) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">while</span> (d &gt; 0)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      ++(*this);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      --d;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">while</span> (d &lt; 0)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      --(*this);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;      ++d;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#aed6c83315faacddcf55bf195b602511e">  111</a></span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#aed6c83315faacddcf55bf195b602511e">operator-=</a>(difference_type d) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">while</span> (d &gt; 0)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      --(*this);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      --d;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">while</span> (d &lt; 0)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      ++(*this);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      ++d;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#a39b609c48b4da08df028f55ed31d2eb3">  126</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#a39b609c48b4da08df028f55ed31d2eb3">operator+</a>(difference_type d) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  {</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> it = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    it += d;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> it;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#ab696459309ee02a0bd0766531d25835f">  134</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#ab696459309ee02a0bd0766531d25835f">operator-</a>(difference_type d) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a> it = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    it -= d;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">return</span> it;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="../../d4/ddc/structez_string_iterator.htm#ac070d49b4005c2e9500e8b484d4b4818">  144</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm#ac070d49b4005c2e9500e8b484d4b4818">SetCurrentPosition</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szCurPos)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    EZ_ASSERT_DEV((szCurPos &gt;= m_pStartPtr) &amp;&amp; (szCurPos &lt;= m_pEndPtr), <span class="stringliteral">&quot;New position must still be inside the iterator&#39;s range.&quot;</span>);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    m_pCurPtr = szCurPos;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* m_pStartPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* m_pEndPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* m_pCurPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;};</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm">  160</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  <span class="keyword">using</span> iterator_category = std::bidirectional_iterator_tag;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keyword">using</span> value_type = ezUInt32;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  <span class="keyword">using</span> difference_type = std::ptrdiff_t;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  <span class="keyword">using</span> pointer = <span class="keyword">const</span> <span class="keywordtype">char</span>*;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <span class="keyword">using</span> reference = ezUInt32;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  EZ_DECLARE_POD_TYPE();</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a1dfabadaf875df39e4251d029f09bb61">ezStringReverseIterator</a>() = <span class="keywordflow">default</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5f1c97d4e1699517bc37e02f0a401d63">  174</a></span>&#160;  EZ_FORCE_INLINE <span class="keyword">explicit</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5f1c97d4e1699517bc37e02f0a401d63">ezStringReverseIterator</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pStartPtr, <span class="keyword">const</span> <span class="keywordtype">char</span>* pEndPtr, <span class="keyword">const</span> <span class="keywordtype">char</span>* pCurPtr) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    m_pStartPtr = pStartPtr;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    m_pEndPtr = pEndPtr;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    m_pCurPtr = pCurPtr;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">if</span> (m_pStartPtr &gt;= m_pEndPtr)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;      m_pCurPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_pCurPtr == m_pEndPtr)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;      <a class="code" href="../../d9/d32/classez_unicode_utils.htm#a5ecfed7c254cbe9f6e85cd0766091e15">ezUnicodeUtils::MoveToPriorUtf8</a>(m_pCurPtr);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    }</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5d4f08585fe04ed6cf7c13437bc6fd27">  191</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5d4f08585fe04ed6cf7c13437bc6fd27">IsValid</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pCurPtr != <span class="keyword">nullptr</span>); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a122807dd4ff977b03dd153ee876a5cc4">  194</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a122807dd4ff977b03dd153ee876a5cc4">GetCharacter</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5d4f08585fe04ed6cf7c13437bc6fd27">IsValid</a>() ? <a class="code" href="../../d9/d32/classez_unicode_utils.htm#a14961aea9cc3791a6c9f48159fa64d9f">ezUnicodeUtils::ConvertUtf8ToUtf32</a>(m_pCurPtr) : ezUInt32(0); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a3a3fc9b048635c423856b17c987a17a2">  197</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a3a3fc9b048635c423856b17c987a17a2">operator*</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a122807dd4ff977b03dd153ee876a5cc4">GetCharacter</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#ac327c450585b41485083924a3526d8a8">  200</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#ac327c450585b41485083924a3526d8a8">GetData</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pCurPtr; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#ad1ebc374d6cb6a259d6675402a811762">  203</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#ad1ebc374d6cb6a259d6675402a811762">operator==</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&amp; it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pCurPtr == it2.m_pCurPtr); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  EZ_ADD_DEFAULT_OPERATOR_NOTEQUAL(<span class="keyword">const</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&amp;);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#ad3bf0a2e0647d7dcaff83964b03ce9bd">  207</a></span>&#160;  EZ_FORCE_INLINE <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&amp; <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#ad3bf0a2e0647d7dcaff83964b03ce9bd">operator++</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">if</span> (m_pCurPtr != <span class="keyword">nullptr</span> &amp;&amp; m_pStartPtr &lt; m_pCurPtr)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;      <a class="code" href="../../d9/d32/classez_unicode_utils.htm#a5ecfed7c254cbe9f6e85cd0766091e15">ezUnicodeUtils::MoveToPriorUtf8</a>(m_pCurPtr);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;      m_pCurPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a28b61b8420bdbb9d9111fba1642d44e3">  218</a></span>&#160;  EZ_FORCE_INLINE <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&amp; <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a28b61b8420bdbb9d9111fba1642d44e3">operator--</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">if</span> (m_pCurPtr != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">char</span>* szOldPos = m_pCurPtr;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;      <a class="code" href="../../d9/d32/classez_unicode_utils.htm#a7fb78e6f4d844ef8ceea9c31ff1cabeb">ezUnicodeUtils::MoveToNextUtf8</a>(m_pCurPtr);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;      <span class="keywordflow">if</span> (m_pCurPtr == m_pEndPtr)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        m_pCurPtr = szOldPos;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      <span class="comment">// Set back to the first character.</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;      m_pCurPtr = m_pStartPtr;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  }</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a16956441af57ef216b40015b01da421e">  237</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a16956441af57ef216b40015b01da421e">operator++</a>(<span class="keywordtype">int</span>) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  {</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> tmp = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    ++(*this);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">return</span> tmp;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#ace0770fde2b3a518f5ebe480568ebf79">  245</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#ace0770fde2b3a518f5ebe480568ebf79">operator--</a>(<span class="keywordtype">int</span>) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  {</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> tmp = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    --(*this);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">return</span> tmp;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a4102d53bd4b149b186dd772e99ea71d0">  253</a></span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a4102d53bd4b149b186dd772e99ea71d0">operator+=</a>(difference_type d) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  {</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">while</span> (d &gt; 0)</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    {</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      ++(*this);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;      --d;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">while</span> (d &lt; 0)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;      --(*this);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;      ++d;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    }</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5d4a586f1281017392943a3d6f558b0d">  268</a></span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a5d4a586f1281017392943a3d6f558b0d">operator-=</a>(difference_type d) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">while</span> (d &gt; 0)</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    {</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;      --(*this);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;      --d;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordflow">while</span> (d &lt; 0)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    {</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;      ++(*this);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;      ++d;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#ac6db6832339c40010dfabb814475d0a7">  283</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#ac6db6832339c40010dfabb814475d0a7">operator+</a>(difference_type d) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  {</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> it = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    it += d;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">return</span> it;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  }</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a0e055d6153541616b6965880c75ff70e">  291</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a0e055d6153541616b6965880c75ff70e">operator-</a>(difference_type d) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  {</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a> it = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    it -= d;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">return</span> it;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  }</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno"><a class="line" href="../../d6/d6b/structez_string_reverse_iterator.htm#a7845fbc8759ea7d692ce80c51621b00e">  301</a></span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm#a7845fbc8759ea7d692ce80c51621b00e">SetCurrentPosition</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szCurPos)</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  {</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    EZ_ASSERT_DEV((szCurPos == <span class="keyword">nullptr</span>) || ((szCurPos &gt;= m_pStartPtr) &amp;&amp; (szCurPos &lt; m_pEndPtr)), <span class="stringliteral">&quot;New position must still be inside the iterator&#39;s range.&quot;</span>);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    m_pCurPtr = szCurPos;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* m_pStartPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* m_pEndPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* m_pCurPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;};</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructez_string_reverse_iterator_htm_a16956441af57ef216b40015b01da421e"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a16956441af57ef216b40015b01da421e">ezStringReverseIterator::operator++</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator operator++(int)</div><div class="ttdoc">Move to the next Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:237</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a8f4524e2e5ccf7ccfef5ffc3a01819cf"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a8f4524e2e5ccf7ccfef5ffc3a01819cf">ezStringIterator::operator++</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator &amp; operator++()</div><div class="ttdoc">Move to the next Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:58</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a7845fbc8759ea7d692ce80c51621b00e"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a7845fbc8759ea7d692ce80c51621b00e">ezStringReverseIterator::SetCurrentPosition</a></div><div class="ttdeci">EZ_FORCE_INLINE void SetCurrentPosition(const char *szCurPos)</div><div class="ttdoc">Allows to set the 'current' iteration position to a different value.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:301</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a2f32c0372029f11bebb4f7ae01c66353"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a2f32c0372029f11bebb4f7ae01c66353">ezStringIterator::operator+=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator+=(difference_type d)</div><div class="ttdoc">Advances the iterator forwards by d characters. Does not move it beyond the range's end.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:96</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_ac327c450585b41485083924a3526d8a8"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#ac327c450585b41485083924a3526d8a8">ezStringReverseIterator::GetData</a></div><div class="ttdeci">const EZ_ALWAYS_INLINE char * GetData() const</div><div class="ttdoc">Returns the address the iterator currently points to.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:200</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a237a0f46bf808589954a87afe2a7cab7"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a237a0f46bf808589954a87afe2a7cab7">ezStringIterator::Advance</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 Advance()</div><div class="ttdoc">Advances the iterated to the next character, same as operator++, but returns how many bytes were cons...</div><div class="ttdef"><b>Definition:</b> StringIterator.h:45</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a7765401740968757855b8da62ca95f79"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a7765401740968757855b8da62ca95f79">ezStringIterator::ezStringIterator</a></div><div class="ttdeci">EZ_FORCE_INLINE ezStringIterator(const char *pStartPtr, const char *pEndPtr, const char *pCurPtr)</div><div class="ttdoc">Constructs either a begin or end iterator for the given string.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:21</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a1953ef3cd58b849fbc9adabad5635bdf"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a1953ef3cd58b849fbc9adabad5635bdf">ezStringIterator::GetCharacter</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 GetCharacter() const</div><div class="ttdoc">Returns the currently pointed to character in Utf32 encoding.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:32</div></div>
<div class="ttc" id="astructez_string_iterator_htm_aed6c83315faacddcf55bf195b602511e"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#aed6c83315faacddcf55bf195b602511e">ezStringIterator::operator-=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator-=(difference_type d)</div><div class="ttdoc">Moves the iterator backwards by d characters. Does not move it beyond the range's start.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:111</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a3a3fc9b048635c423856b17c987a17a2"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a3a3fc9b048635c423856b17c987a17a2">ezStringReverseIterator::operator*</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 operator*() const</div><div class="ttdoc">Returns the currently pointed to character in Utf32 encoding.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:197</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a4102d53bd4b149b186dd772e99ea71d0"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a4102d53bd4b149b186dd772e99ea71d0">ezStringReverseIterator::operator+=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator+=(difference_type d)</div><div class="ttdoc">Advances the iterator forwards by d characters. Does not move it beyond the range's end.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:253</div></div>
<div class="ttc" id="astructez_string_iterator_htm_ac4b90449774e7a4f4246eea8f1a3b34d"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#ac4b90449774e7a4f4246eea8f1a3b34d">ezStringIterator::operator++</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator operator++(int)</div><div class="ttdoc">Move to the next Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:80</div></div>
<div class="ttc" id="aclassez_unicode_utils_htm_a14961aea9cc3791a6c9f48159fa64d9f"><div class="ttname"><a href="../../d9/d32/classez_unicode_utils.htm#a14961aea9cc3791a6c9f48159fa64d9f">ezUnicodeUtils::ConvertUtf8ToUtf32</a></div><div class="ttdeci">static ezUInt32 ConvertUtf8ToUtf32(const char *pFirstChar)</div><div class="ttdoc">Converts the UTF-8 character that starts at pFirstChar into a UTF-32 character.</div><div class="ttdef"><b>Definition:</b> UnicodeUtils_inl.h:124</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_ace0770fde2b3a518f5ebe480568ebf79"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#ace0770fde2b3a518f5ebe480568ebf79">ezStringReverseIterator::operator--</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator operator--(int)</div><div class="ttdoc">Move to the previous Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:245</div></div>
<div class="ttc" id="aclassez_unicode_utils_htm_a7fb78e6f4d844ef8ceea9c31ff1cabeb"><div class="ttname"><a href="../../d9/d32/classez_unicode_utils.htm#a7fb78e6f4d844ef8ceea9c31ff1cabeb">ezUnicodeUtils::MoveToNextUtf8</a></div><div class="ttdeci">static void MoveToNextUtf8(const char *&amp;ref_szUtf8, ezUInt32 uiNumCharacters=1)</div><div class="ttdoc">Moves the given string pointer ahead to the next Utf8 character sequence.</div><div class="ttdef"><b>Definition:</b> UnicodeUtils_inl.h:197</div></div>
<div class="ttc" id="aclassez_unicode_utils_htm_a5ecfed7c254cbe9f6e85cd0766091e15"><div class="ttname"><a href="../../d9/d32/classez_unicode_utils.htm#a5ecfed7c254cbe9f6e85cd0766091e15">ezUnicodeUtils::MoveToPriorUtf8</a></div><div class="ttdeci">static void MoveToPriorUtf8(const char *&amp;ref_szUtf8, ezUInt32 uiNumCharacters=1)</div><div class="ttdoc">Moves the given string pointer backwards to the previous Utf8 character sequence.</div><div class="ttdef"><b>Definition:</b> UnicodeUtils_inl.h:231</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a5d4a586f1281017392943a3d6f558b0d"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a5d4a586f1281017392943a3d6f558b0d">ezStringReverseIterator::operator-=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator-=(difference_type d)</div><div class="ttdoc">Moves the iterator backwards by d characters. Does not move it beyond the range's start.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:268</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_ac6db6832339c40010dfabb814475d0a7"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#ac6db6832339c40010dfabb814475d0a7">ezStringReverseIterator::operator+</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator operator+(difference_type d) const</div><div class="ttdoc">Returns an iterator that is advanced forwards by d characters.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:283</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a5f1c97d4e1699517bc37e02f0a401d63"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a5f1c97d4e1699517bc37e02f0a401d63">ezStringReverseIterator::ezStringReverseIterator</a></div><div class="ttdeci">EZ_FORCE_INLINE ezStringReverseIterator(const char *pStartPtr, const char *pEndPtr, const char *pCurPtr)</div><div class="ttdoc">Constructs either a rbegin or rend iterator for the given string.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:174</div></div>
<div class="ttc" id="astructez_string_iterator_htm"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a></div><div class="ttdoc">STL forward iterator used by all string classes. Iterates over unicode characters....</div><div class="ttdef"><b>Definition:</b> StringIterator.h:7</div></div>
<div class="ttc" id="astructez_string_iterator_htm_afdba2b12be6134c25b8fbea27eca4bfb"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#afdba2b12be6134c25b8fbea27eca4bfb">ezStringIterator::IsValid</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element. Invalid iterators either point to m_pEndPtr o...</div><div class="ttdef"><b>Definition:</b> StringIterator.h:29</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a44c18fc148bcaf691df29973fd3c3a9f"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a44c18fc148bcaf691df29973fd3c3a9f">ezStringIterator::operator--</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator operator--(int)</div><div class="ttdoc">Move to the previous Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:88</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a></div><div class="ttdoc">STL reverse iterator used by all string classes. Iterates over unicode characters....</div><div class="ttdef"><b>Definition:</b> StringIterator.h:160</div></div>
<div class="ttc" id="astructez_string_iterator_htm_ac070d49b4005c2e9500e8b484d4b4818"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#ac070d49b4005c2e9500e8b484d4b4818">ezStringIterator::SetCurrentPosition</a></div><div class="ttdeci">void SetCurrentPosition(const char *szCurPos)</div><div class="ttdoc">Allows to set the 'current' iteration position to a different value.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:144</div></div>
<div class="ttc" id="astructez_string_iterator_htm_ae3be42c7380b6454daae79fa9dd3be20"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#ae3be42c7380b6454daae79fa9dd3be20">ezStringIterator::operator*</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 operator*() const</div><div class="ttdoc">Returns the currently pointed to character in Utf32 encoding.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:35</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a39b609c48b4da08df028f55ed31d2eb3"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a39b609c48b4da08df028f55ed31d2eb3">ezStringIterator::operator+</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator operator+(difference_type d) const</div><div class="ttdoc">Returns an iterator that is advanced forwards by d characters.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:126</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a122807dd4ff977b03dd153ee876a5cc4"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a122807dd4ff977b03dd153ee876a5cc4">ezStringReverseIterator::GetCharacter</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 GetCharacter() const</div><div class="ttdoc">Returns the currently pointed to character in Utf32 encoding.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:194</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a28b61b8420bdbb9d9111fba1642d44e3"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a28b61b8420bdbb9d9111fba1642d44e3">ezStringReverseIterator::operator--</a></div><div class="ttdeci">EZ_FORCE_INLINE ezStringReverseIterator &amp; operator--()</div><div class="ttdoc">Move to the previous Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:218</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a0e055d6153541616b6965880c75ff70e"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a0e055d6153541616b6965880c75ff70e">ezStringReverseIterator::operator-</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator operator-(difference_type d) const</div><div class="ttdoc">Returns an iterator that is advanced backwards by d characters.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:291</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_ad1ebc374d6cb6a259d6675402a811762"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#ad1ebc374d6cb6a259d6675402a811762">ezStringReverseIterator::operator==</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator==(const ezStringReverseIterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:203</div></div>
<div class="ttc" id="astructez_string_iterator_htm_a3e18b9fe36cee22b7b34c6cdcd28530c"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#a3e18b9fe36cee22b7b34c6cdcd28530c">ezStringIterator::operator--</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator &amp; operator--()</div><div class="ttdoc">Move to the previous Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:69</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_ad3bf0a2e0647d7dcaff83964b03ce9bd"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#ad3bf0a2e0647d7dcaff83964b03ce9bd">ezStringReverseIterator::operator++</a></div><div class="ttdeci">EZ_FORCE_INLINE ezStringReverseIterator &amp; operator++()</div><div class="ttdoc">Move to the next Utf8 character.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:207</div></div>
<div class="ttc" id="astructez_string_iterator_htm_acb917796f746f893a937f2d53a9b9d88"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#acb917796f746f893a937f2d53a9b9d88">ezStringIterator::GetData</a></div><div class="ttdeci">const EZ_ALWAYS_INLINE char * GetData() const</div><div class="ttdoc">Returns the address the iterator currently points to.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:38</div></div>
<div class="ttc" id="astructez_string_iterator_htm_ab696459309ee02a0bd0766531d25835f"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#ab696459309ee02a0bd0766531d25835f">ezStringIterator::operator-</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator operator-(difference_type d) const</div><div class="ttdoc">Returns an iterator that is advanced backwards by d characters.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:134</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a1dfabadaf875df39e4251d029f09bb61"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a1dfabadaf875df39e4251d029f09bb61">ezStringReverseIterator::ezStringReverseIterator</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringReverseIterator()=default</div><div class="ttdoc">Constructs an invalid iterator.</div></div>
<div class="ttc" id="astructez_string_iterator_htm_aae5a695fc1aaca954d9236a58e87df71"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#aae5a695fc1aaca954d9236a58e87df71">ezStringIterator::operator==</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator==(const ezStringIterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:41</div></div>
<div class="ttc" id="astructez_string_iterator_htm_ae924b0a0566c1fa37e10f8d3c13bbc74"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm#ae924b0a0566c1fa37e10f8d3c13bbc74">ezStringIterator::ezStringIterator</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringIterator()=default</div><div class="ttdoc">Constructs an invalid iterator.</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm_a5d4f08585fe04ed6cf7c13437bc6fd27"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm#a5d4f08585fe04ed6cf7c13437bc6fd27">ezStringReverseIterator::IsValid</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition:</b> StringIterator.h:191</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_b52479c911fe9a42767226b3387b3a02.htm">Strings</a></li><li class="navelem"><a class="el" href="../../dir_067384bf2c73f8a8078edb859c0ba426.htm">Implementation</a></li><li class="navelem"><b>StringIterator.h</b></li>
    <li class="footer">Generated on Fri Dec 22 2023 20:43:07 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
