<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Reflection/Implementation/RTTI.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 25.03</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('de/dd7/_r_t_t_i_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">RTTI.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Basics.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;Foundation/Configuration/Plugin.h&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;Foundation/Memory/Allocator.h&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/StaticRTTI.h&gt;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">// *****************************************</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">// ***** Runtime Type Information Data *****</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">struct </span><a class="code" href="../../db/df8/structez_r_t_t_i_allocator.htm">ezRTTIAllocator</a>;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">class </span><a class="code" href="../../d6/d81/classez_abstract_property.htm">ezAbstractProperty</a>;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">class </span><a class="code" href="../../d3/d4c/classez_abstract_function_property.htm">ezAbstractFunctionProperty</a>;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">class </span><a class="code" href="../../d5/d1b/classez_abstract_message_handler.htm">ezAbstractMessageHandler</a>;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">struct </span><a class="code" href="../../d9/d44/structez_message_sender_info.htm">ezMessageSenderInfo</a>;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">class </span><a class="code" href="../../d7/d48/classez_property_attribute.htm">ezPropertyAttribute</a>;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">class </span><a class="code" href="../../dd/d22/classez_message.htm">ezMessage</a>;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">using</span> ezMessageId = ezUInt16;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm">   29</a></span>&#160;<span class="keyword">class </span>EZ_FOUNDATION_DLL <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sName, <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pParentType, ezUInt32 uiTypeSize, ezUInt32 uiTypeVersion, ezUInt8 uiVariantType,</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ezTypeFlags&gt;</a> flags, <a class="code" href="../../db/df8/structez_r_t_t_i_allocator.htm">ezRTTIAllocator</a>* pAllocator, <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const ezAbstractProperty*&gt;</a> properties, <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const ezAbstractFunctionProperty*&gt;</a> functions,</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const ezPropertyAttribute*&gt;</a> attributes, <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezAbstractMessageHandler*&gt;</a> messageHandlers,</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezMessageSenderInfo&gt;</a> messageSenders, <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* (*fnVerifyParent)());</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  ~<a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>();</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keywordtype">void</span> VerifyCorrectness() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> VerifyCorrectnessForAllTypes();</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#a12bb619302f06a0750a230ac62b01886">   48</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#a12bb619302f06a0750a230ac62b01886">GetTypeName</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_sTypeName; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#ad065abae73e88820f8bc9a7f87ec5860">   51</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt64 <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#ad065abae73e88820f8bc9a7f87ec5860">GetTypeNameHash</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiTypeNameHash; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#a4887d66c7de28b4886359cb93d7efe5f">   54</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#a4887d66c7de28b4886359cb93d7efe5f">GetParentType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pParentType; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#abbf81f248b97259ac66a7f6863475815">   57</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">ezVariantType::Enum</a> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#abbf81f248b97259ac66a7f6863475815">GetVariantType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">ezVariantType::Enum</a><span class="keyword">&gt;</span>(m_uiVariantType); }</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#a19672c9984fefea00552f02dd010ae6e">   60</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#a19672c9984fefea00552f02dd010ae6e">IsDerivedFrom</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pBaseType) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> ezUInt32 thisGeneration = m_ParentHierarchy.GetCount();</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> ezUInt32 baseGeneration = pBaseType-&gt;m_ParentHierarchy.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#ac13be38fb1e58b0b94c405db9318792a">GetCount</a>();</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    EZ_ASSERT_DEBUG(thisGeneration &gt; 0 &amp;&amp; baseGeneration &gt; 0, <span class="stringliteral">&quot;SetupParentHierarchy() has not been called&quot;</span>);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">return</span> thisGeneration &gt;= baseGeneration &amp;&amp; m_ParentHierarchy.GetData()[thisGeneration - baseGeneration] == pBaseType;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> BASE&gt;</div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#a27fdc49f927f74d2946a73975eb7accb">   70</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#a27fdc49f927f74d2946a73975eb7accb">IsDerivedFrom</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> IsDerivedFrom(ezGetStaticRTTI&lt;BASE&gt;());</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#aee421c139ec5b1a076d6a3d1f130b4ec">   76</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../db/df8/structez_r_t_t_i_allocator.htm">ezRTTIAllocator</a>* <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#aee421c139ec5b1a076d6a3d1f130b4ec">GetAllocator</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pAllocator; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#a0cf37226a8f2801f0fd89480667a59bb">   79</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const ezAbstractProperty* const&gt;</a> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#a0cf37226a8f2801f0fd89480667a59bb">GetProperties</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Properties; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const ezAbstractFunctionProperty* const&gt;</a> GetFunctions()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Functions; }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const ezPropertyAttribute* const&gt;</a> GetAttributes()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Attributes; }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keyword">const</span> Type* GetAttributeByType() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keywordtype">void</span> GetAllProperties(<a class="code" href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray&lt;const ezAbstractProperty*&gt;</a>&amp; out_properties) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#aae98b61a4ae143728cd4051692adad9e">   93</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#aae98b61a4ae143728cd4051692adad9e">GetTypeSize</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiTypeSize; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#af080364f76236f0355e90a6ce52eb47c">   96</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#af080364f76236f0355e90a6ce52eb47c">GetTypeVersion</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiTypeVersion; }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#ab16d8753fb79f298b60443b726924f63">   99</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">const</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ezTypeFlags&gt;</a>&amp; <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#ab16d8753fb79f298b60443b726924f63">GetTypeFlags</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_TypeFlags; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* FindTypeByName(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sName); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* FindTypeByNameHash(ezUInt64 uiNameHash); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* FindTypeByNameHash32(ezUInt32 uiNameHash);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keyword">using</span> PredicateFunc = <a class="code" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>&lt;bool(<span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>*), 48&gt;;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* FindTypeIf(PredicateFunc func);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d6/d81/classez_abstract_property.htm">ezAbstractProperty</a>* FindPropertyByName(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sName, <span class="keywordtype">bool</span> bSearchBaseTypes = <span class="keyword">true</span>) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#a77214d29171944cc6187aa8740807bee">  116</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#a77214d29171944cc6187aa8740807bee">GetPluginName</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_sPluginName; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#ae20531c5bfc4900cb9149d51f63cadb3">  119</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">const</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezAbstractMessageHandler*&gt;</a>&amp; <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#ae20531c5bfc4900cb9149d51f63cadb3">GetMessageHandlers</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_MessageHandlers; }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keywordtype">bool</span> DispatchMessage(<span class="keywordtype">void</span>* pInstance, <a class="code" href="../../dd/d22/classez_message.htm">ezMessage</a>&amp; ref_msg) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keywordtype">bool</span> DispatchMessage(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../dd/d22/classez_message.htm">ezMessage</a>&amp; ref_msg) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> MessageType&gt;</div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#ac62ddda33b64a09a59f0fdb636dc6d75">  131</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#ac62ddda33b64a09a59f0fdb636dc6d75">CanHandleMessage</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">return</span> CanHandleMessage(MessageType::GetTypeMsgId());</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="../../dd/d19/classez_r_t_t_i.htm#adafefbc0987a607b461846687acaa836">  137</a></span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm#adafefbc0987a607b461846687acaa836">CanHandleMessage</a>(ezMessageId <span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    EZ_ASSERT_DEBUG(m_uiMsgIdOffset != ezSmallInvalidIndex, <span class="stringliteral">&quot;Message handler table should have been gathered at this point.\n&quot;</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                                            <span class="stringliteral">&quot;If this assert is triggered for a type loaded from a dynamic plugin,\n&quot;</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                                            <span class="stringliteral">&quot;you may have forgotten to instantiate an ezPlugin object inside your plugin DLL.&quot;</span>);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">const</span> ezUInt32 uiIndex = <span class="keywordtype">id</span> - m_uiMsgIdOffset;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> uiIndex &lt; m_DynamicMessageHandlers.GetCount() &amp;&amp; m_DynamicMessageHandlers.GetData()[uiIndex] != <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">const</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezMessageSenderInfo&gt;</a>&amp; GetMessageSender()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_MessageSenders; }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="../../d5/d8e/structez_r_t_t_i_1_1_for_each_options.htm">  149</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../d5/d8e/structez_r_t_t_i_1_1_for_each_options.htm">ForEachOptions</a></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">using</span> StorageType = ezUInt8;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="../../d5/d8e/structez_r_t_t_i_1_1_for_each_options.htm#a3acc45d13d1ecea751e92e451304f6d6">  153</a></span>&#160;    <span class="keyword">enum</span> <a class="code" href="../../d5/d8e/structez_r_t_t_i_1_1_for_each_options.htm#a3acc45d13d1ecea751e92e451304f6d6">Enum</a></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    {</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      None = 0,</div>
<div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="../../d5/d8e/structez_r_t_t_i_1_1_for_each_options.htm#a3acc45d13d1ecea751e92e451304f6d6adcdced19326394f868602ee07e654f62">  156</a></span>&#160;      ExcludeNonAllocatable = EZ_BIT(0), </div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="../../d5/d8e/structez_r_t_t_i_1_1_for_each_options.htm#a3acc45d13d1ecea751e92e451304f6d6ad5f13cdedc76d8e3798f40ec2ab3b56e">  157</a></span>&#160;      ExcludeAbstract = EZ_BIT(1),       </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;      ExcludeNotConcrete = ExcludeNonAllocatable | ExcludeAbstract,</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;      Default = None</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    };</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="../../d9/dab/structez_r_t_t_i_1_1_for_each_options_1_1_bits.htm">  163</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="../../d9/dab/structez_r_t_t_i_1_1_for_each_options_1_1_bits.htm">Bits</a></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      ezUInt8 ExcludeNonAllocatable : 1;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      ezUInt8 ExcludeAbstract : 1;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    };</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  };</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../d5/d68/structez_delegate.htm">VisitorFunc</a> = <a class="code" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>&lt;void(<span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>*), 48&gt;;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> ForEachType(<a class="code" href="../../d5/d68/structez_delegate.htm">VisitorFunc</a> func, <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ForEachOptions&gt;</a> options = ForEachOptions::Default); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> ForEachDerivedType(<span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pBaseType, <a class="code" href="../../d5/d68/structez_delegate.htm">VisitorFunc</a> func, <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ForEachOptions&gt;</a> options = ForEachOptions::Default);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keyword">static</span> EZ_ALWAYS_INLINE <span class="keywordtype">void</span> ForEachDerivedType(<a class="code" href="../../d5/d68/structez_delegate.htm">VisitorFunc</a> func, <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ForEachOptions&gt;</a> options = ForEachOptions::Default)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    ForEachDerivedType(ezGetStaticRTTI&lt;T&gt;(), func, options);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> m_sPluginName;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> m_sTypeName;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const ezAbstractProperty* const&gt;</a> m_Properties;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const ezAbstractFunctionProperty* const&gt;</a> m_Functions;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const ezPropertyAttribute* const&gt;</a> m_Attributes;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  <span class="keywordtype">void</span> UpdateType(<span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pParentType, ezUInt32 uiTypeSize, ezUInt32 uiTypeVersion, ezUInt8 uiVariantType, <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ezTypeFlags&gt;</a> flags);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  <span class="keywordtype">void</span> RegisterType();</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <span class="keywordtype">void</span> UnregisterType();</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  <span class="keywordtype">void</span> GatherDynamicMessageHandlers();</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keywordtype">void</span> SetupParentHierarchy();</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* m_pParentType = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  <a class="code" href="../../db/df8/structez_r_t_t_i_allocator.htm">ezRTTIAllocator</a>* m_pAllocator = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  ezUInt32 m_uiTypeSize = 0;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  ezUInt32 m_uiTypeVersion = 0;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  ezUInt64 m_uiTypeNameHash = 0;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  ezUInt32 m_uiTypeIndex = 0;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ezTypeFlags&gt;</a> m_TypeFlags;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  ezUInt8 m_uiVariantType = 0;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  ezUInt16 m_uiMsgIdOffset = ezSmallInvalidIndex;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* (*m_VerifyParent)();</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezAbstractMessageHandler*&gt;</a> m_MessageHandlers;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;ezAbstractMessageHandler*, 1, ezStaticsAllocatorWrapper&gt;</a> m_DynamicMessageHandlers; <span class="comment">// do not track this data, it won&#39;t be deallocated before shutdown</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezMessageSenderInfo&gt;</a> m_MessageSenders;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;const ezRTTI*, 7, ezStaticsAllocatorWrapper&gt;</a> m_ParentHierarchy;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  EZ_MAKE_SUBSYSTEM_STARTUP_FRIEND(Foundation, Reflection);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> AssignPlugin(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sPluginName);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> SanityCheckType(<a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> PluginEventHandler(<span class="keyword">const</span> <a class="code" href="../../d4/d72/structez_plugin_event.htm">ezPluginEvent</a>&amp; EventData);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;};</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;EZ_DECLARE_FLAGS_OPERATORS(<a class="code" href="../../d5/d8e/structez_r_t_t_i_1_1_for_each_options.htm">ezRTTI::ForEachOptions</a>);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">// ***********************************</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">// ***** Object Allocator Struct *****</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="../../db/df8/structez_r_t_t_i_allocator.htm">  233</a></span>&#160;<span class="keyword">struct </span>EZ_FOUNDATION_DLL <a class="code" href="../../db/df8/structez_r_t_t_i_allocator.htm">ezRTTIAllocator</a></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="../../db/df8/structez_r_t_t_i_allocator.htm">ezRTTIAllocator</a>();</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="../../db/df8/structez_r_t_t_i_allocator.htm#a996b32cc9b2e56c695ed8774a4b147bb">  238</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../db/df8/structez_r_t_t_i_allocator.htm#a996b32cc9b2e56c695ed8774a4b147bb">CanAllocate</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">true</span>; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="../../db/df8/structez_r_t_t_i_allocator.htm#adf00313e13a9bb0634e86f279354be33">  242</a></span>&#160;  <a class="code" href="../../da/d7c/structez_internal_1_1_new_instance.htm">ezInternal::NewInstance&lt;T&gt;</a> <a class="code" href="../../db/df8/structez_r_t_t_i_allocator.htm#adf00313e13a9bb0634e86f279354be33">Allocate</a>(<a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator = <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">return</span> AllocateInternal(pAllocator).Cast&lt;T&gt;();</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="../../db/df8/structez_r_t_t_i_allocator.htm#ae25bc139cb5ba8523cea97549bbfa038">  249</a></span>&#160;  <a class="code" href="../../da/d7c/structez_internal_1_1_new_instance.htm">ezInternal::NewInstance&lt;T&gt;</a> <a class="code" href="../../db/df8/structez_r_t_t_i_allocator.htm#ae25bc139cb5ba8523cea97549bbfa038">Clone</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pObject, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator = <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  {</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">return</span> CloneInternal(pObject, pAllocator).Cast&lt;T&gt;();</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> Deallocate(<span class="keywordtype">void</span>* pObject, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator = <span class="keyword">nullptr</span>) = 0; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../da/d7c/structez_internal_1_1_new_instance.htm">ezInternal::NewInstance&lt;void&gt;</a> AllocateInternal(<a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator) = 0;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../da/d7c/structez_internal_1_1_new_instance.htm">ezInternal::NewInstance&lt;void&gt;</a> CloneInternal(<span class="keyword">const</span> <span class="keywordtype">void</span>* pObject, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    EZ_IGNORE_UNUSED(pObject);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    EZ_REPORT_FAILURE(<span class="stringliteral">&quot;Cloning is not supported by this allocator.&quot;</span>);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../da/d7c/structez_internal_1_1_new_instance.htm">ezInternal::NewInstance&lt;void&gt;</a>(<span class="keyword">nullptr</span>, pAllocator);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  }</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;};</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="../../dd/d04/structez_r_t_t_i_no_allocator.htm">  268</a></span>&#160;<span class="keyword">struct </span>EZ_FOUNDATION_DLL <a class="code" href="../../dd/d04/structez_r_t_t_i_no_allocator.htm">ezRTTINoAllocator</a> : <span class="keyword">public</span> <a class="code" href="../../db/df8/structez_r_t_t_i_allocator.htm">ezRTTIAllocator</a></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;{</div>
<div class="line"><a name="l00271"></a><span class="lineno"><a class="line" href="../../dd/d04/structez_r_t_t_i_no_allocator.htm#a4e5da32a61dc482097f78a14b773aab5">  271</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../dd/d04/structez_r_t_t_i_no_allocator.htm#a4e5da32a61dc482097f78a14b773aab5">CanAllocate</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno"><a class="line" href="../../dd/d04/structez_r_t_t_i_no_allocator.htm#afb1485e1acbc073225fb69101d776dde">  274</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../da/d7c/structez_internal_1_1_new_instance.htm">ezInternal::NewInstance&lt;void&gt;</a> <a class="code" href="../../dd/d04/structez_r_t_t_i_no_allocator.htm#afb1485e1acbc073225fb69101d776dde">AllocateInternal</a>(<a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    EZ_REPORT_FAILURE(<span class="stringliteral">&quot;This function should never be called.&quot;</span>);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../da/d7c/structez_internal_1_1_new_instance.htm">ezInternal::NewInstance&lt;void&gt;</a>(<span class="keyword">nullptr</span>, pAllocator);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="../../dd/d04/structez_r_t_t_i_no_allocator.htm#a0d961bc1f87d5c78d65eec704cda4224">  281</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dd/d04/structez_r_t_t_i_no_allocator.htm#a0d961bc1f87d5c78d65eec704cda4224">Deallocate</a>(<span class="keywordtype">void</span>* pObject, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    EZ_IGNORE_UNUSED(pObject);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    EZ_IGNORE_UNUSED(pAllocator);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    EZ_REPORT_FAILURE(<span class="stringliteral">&quot;This function should never be called.&quot;</span>);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;};</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CLASS, <span class="keyword">typename</span> AllocatorWrapper = ezDefaultAllocatorWrapper&gt;</div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="../../dc/ddb/structez_r_t_t_i_default_allocator.htm">  291</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dc/ddb/structez_r_t_t_i_default_allocator.htm">ezRTTIDefaultAllocator</a> : <span class="keyword">public</span> <a class="code" href="../../db/df8/structez_r_t_t_i_allocator.htm">ezRTTIAllocator</a></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;{</div>
<div class="line"><a name="l00294"></a><span class="lineno"><a class="line" href="../../dc/ddb/structez_r_t_t_i_default_allocator.htm#a660cae107f158d58b36b7fa75436716e">  294</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../da/d7c/structez_internal_1_1_new_instance.htm">ezInternal::NewInstance&lt;void&gt;</a> <a class="code" href="../../dc/ddb/structez_r_t_t_i_default_allocator.htm#a660cae107f158d58b36b7fa75436716e">AllocateInternal</a>(<a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  {</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">if</span> (pAllocator == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;      pAllocator = AllocatorWrapper::GetAllocator();</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    }</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">return</span> EZ_NEW(pAllocator, CLASS);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  }</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno"><a class="line" href="../../dc/ddb/structez_r_t_t_i_default_allocator.htm#ab0da259666d7a4deefeb38d58f9e78d6">  305</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../da/d7c/structez_internal_1_1_new_instance.htm">ezInternal::NewInstance&lt;void&gt;</a> <a class="code" href="../../dc/ddb/structez_r_t_t_i_default_allocator.htm#ab0da259666d7a4deefeb38d58f9e78d6">CloneInternal</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pObject, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  {</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordflow">if</span> (pAllocator == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;      pAllocator = AllocatorWrapper::GetAllocator();</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    }</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordflow">if</span> constexpr (std::is_copy_constructible_v&lt;CLASS&gt;)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;      <span class="keywordflow">return</span> EZ_NEW(pAllocator, CLASS, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>CLASS*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;      EZ_REPORT_FAILURE(<span class="stringliteral">&quot;Clone failed since the type is not copy constructible&quot;</span>);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="../../da/d7c/structez_internal_1_1_new_instance.htm">ezInternal::NewInstance&lt;void&gt;</a>(<span class="keyword">nullptr</span>, pAllocator);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="../../dc/ddb/structez_r_t_t_i_default_allocator.htm#a7cc3a516ab3643593288afc6ba1ce86e">  324</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/ddb/structez_r_t_t_i_default_allocator.htm#a7cc3a516ab3643593288afc6ba1ce86e">Deallocate</a>(<span class="keywordtype">void</span>* pObject, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">if</span> (pAllocator == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;      pAllocator = AllocatorWrapper::GetAllocator();</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    }</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    CLASS* pPointer = <span class="keyword">static_cast&lt;</span>CLASS*<span class="keyword">&gt;</span>(pObject);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    EZ_DELETE(pAllocator, pPointer);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;};</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassez_small_array_base_htm_ac13be38fb1e58b0b94c405db9318792a"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#ac13be38fb1e58b0b94c405db9318792a">ezSmallArrayBase::GetCount</a></div><div class="ttdeci">ezUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active elements in the array.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:222</div></div>
<div class="ttc" id="astructez_r_t_t_i_default_allocator_htm"><div class="ttname"><a href="../../dc/ddb/structez_r_t_t_i_default_allocator.htm">ezRTTIDefaultAllocator</a></div><div class="ttdoc">Default implementation of ezRTTIAllocator that allocates instances via the given allocator.</div><div class="ttdef"><b>Definition:</b> RTTI.h:291</div></div>
<div class="ttc" id="astructez_bitflags_htm"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt; ezTypeFlags &gt;</a></div></div>
<div class="ttc" id="aclassez_message_htm"><div class="ttname"><a href="../../dd/d22/classez_message.htm">ezMessage</a></div><div class="ttdoc">Base class for all message types. Each message type has it's own id which is used to dispatch message...</div><div class="ttdef"><b>Definition:</b> Message.h:21</div></div>
<div class="ttc" id="astructez_r_t_t_i_default_allocator_htm_a660cae107f158d58b36b7fa75436716e"><div class="ttname"><a href="../../dc/ddb/structez_r_t_t_i_default_allocator.htm#a660cae107f158d58b36b7fa75436716e">ezRTTIDefaultAllocator::AllocateInternal</a></div><div class="ttdeci">virtual ezInternal::NewInstance&lt; void &gt; AllocateInternal(ezAllocator *pAllocator) override</div><div class="ttdoc">Returns a new instance that was allocated with the given allocator.</div><div class="ttdef"><b>Definition:</b> RTTI.h:294</div></div>
<div class="ttc" id="aclassez_abstract_message_handler_htm"><div class="ttname"><a href="../../d5/d1b/classez_abstract_message_handler.htm">ezAbstractMessageHandler</a></div><div class="ttdoc">The base class for all message handlers that a type provides.</div><div class="ttdef"><b>Definition:</b> MessageHandler.h:11</div></div>
<div class="ttc" id="astructez_r_t_t_i_allocator_htm_ae25bc139cb5ba8523cea97549bbfa038"><div class="ttname"><a href="../../db/df8/structez_r_t_t_i_allocator.htm#ae25bc139cb5ba8523cea97549bbfa038">ezRTTIAllocator::Clone</a></div><div class="ttdeci">ezInternal::NewInstance&lt; T &gt; Clone(const void *pObject, ezAllocator *pAllocator=nullptr)</div><div class="ttdoc">Clones the given instance.</div><div class="ttdef"><b>Definition:</b> RTTI.h:249</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a></div><div class="ttdoc">This class holds information about reflected types. Each instance represents one type that is known t...</div><div class="ttdef"><b>Definition:</b> RTTI.h:29</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_aee421c139ec5b1a076d6a3d1f130b4ec"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#aee421c139ec5b1a076d6a3d1f130b4ec">ezRTTI::GetAllocator</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezRTTIAllocator * GetAllocator() const</div><div class="ttdoc">Returns the object through which instances of this type can be allocated.</div><div class="ttdef"><b>Definition:</b> RTTI.h:76</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">ezVariantType::Enum</a></div><div class="ttdeci">Enum</div><div class="ttdoc">This enum describes the type of data that is currently stored inside the variant. Note that changes t...</div><div class="ttdef"><b>Definition:</b> VariantType.h:25</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_ac62ddda33b64a09a59f0fdb636dc6d75"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#ac62ddda33b64a09a59f0fdb636dc6d75">ezRTTI::CanHandleMessage</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool CanHandleMessage() const</div><div class="ttdoc">Returns whether this type can handle the given message type.</div><div class="ttdef"><b>Definition:</b> RTTI.h:131</div></div>
<div class="ttc" id="astructez_r_t_t_i_default_allocator_htm_ab0da259666d7a4deefeb38d58f9e78d6"><div class="ttname"><a href="../../dc/ddb/structez_r_t_t_i_default_allocator.htm#ab0da259666d7a4deefeb38d58f9e78d6">ezRTTIDefaultAllocator::CloneInternal</a></div><div class="ttdeci">virtual ezInternal::NewInstance&lt; void &gt; CloneInternal(const void *pObject, ezAllocator *pAllocator) override</div><div class="ttdoc">Clones the given instance with the given allocator.</div><div class="ttdef"><b>Definition:</b> RTTI.h:305</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_af080364f76236f0355e90a6ce52eb47c"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#af080364f76236f0355e90a6ce52eb47c">ezRTTI::GetTypeVersion</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 GetTypeVersion() const</div><div class="ttdoc">Returns the version number of this type.</div><div class="ttdef"><b>Definition:</b> RTTI.h:96</div></div>
<div class="ttc" id="astructez_r_t_t_i_no_allocator_htm"><div class="ttname"><a href="../../dd/d04/structez_r_t_t_i_no_allocator.htm">ezRTTINoAllocator</a></div><div class="ttdoc">Dummy Allocator for types that should not be allocatable through the reflection system.</div><div class="ttdef"><b>Definition:</b> RTTI.h:268</div></div>
<div class="ttc" id="astructez_internal_1_1_new_instance_htm"><div class="ttname"><a href="../../da/d7c/structez_internal_1_1_new_instance.htm">ezInternal::NewInstance</a></div><div class="ttdef"><b>Definition:</b> Allocator_inl.h:17</div></div>
<div class="ttc" id="astructez_r_t_t_i_no_allocator_htm_afb1485e1acbc073225fb69101d776dde"><div class="ttname"><a href="../../dd/d04/structez_r_t_t_i_no_allocator.htm#afb1485e1acbc073225fb69101d776dde">ezRTTINoAllocator::AllocateInternal</a></div><div class="ttdeci">virtual ezInternal::NewInstance&lt; void &gt; AllocateInternal(ezAllocator *pAllocator) override</div><div class="ttdoc">Will trigger an assert.</div><div class="ttdef"><b>Definition:</b> RTTI.h:274</div></div>
<div class="ttc" id="aclassez_array_ptr_htm"><div class="ttname"><a href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a></div><div class="ttdoc">This class encapsulates an array and it's size. It is recommended to use this class instead of plain ...</div><div class="ttdef"><b>Definition:</b> ArrayPtr.h:40</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_abbf81f248b97259ac66a7f6863475815"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#abbf81f248b97259ac66a7f6863475815">ezRTTI::GetVariantType</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezVariantType::Enum GetVariantType() const</div><div class="ttdoc">Returns the corresponding variant type for this type or Invalid if there is none.</div><div class="ttdef"><b>Definition:</b> RTTI.h:57</div></div>
<div class="ttc" id="astructez_r_t_t_i_default_allocator_htm_a7cc3a516ab3643593288afc6ba1ce86e"><div class="ttname"><a href="../../dc/ddb/structez_r_t_t_i_default_allocator.htm#a7cc3a516ab3643593288afc6ba1ce86e">ezRTTIDefaultAllocator::Deallocate</a></div><div class="ttdeci">virtual void Deallocate(void *pObject, ezAllocator *pAllocator) override</div><div class="ttdoc">Deletes the given instance with the given allocator.</div><div class="ttdef"><b>Definition:</b> RTTI.h:324</div></div>
<div class="ttc" id="astructez_message_sender_info_htm"><div class="ttname"><a href="../../d9/d44/structez_message_sender_info.htm">ezMessageSenderInfo</a></div><div class="ttdef"><b>Definition:</b> MessageHandler.h:41</div></div>
<div class="ttc" id="astructez_plugin_event_htm"><div class="ttname"><a href="../../d4/d72/structez_plugin_event.htm">ezPluginEvent</a></div><div class="ttdoc">The data that is broadcast whenever a plugin is (un-) loaded.</div><div class="ttdef"><b>Definition:</b> Plugin.h:10</div></div>
<div class="ttc" id="astructez_r_t_t_i_allocator_htm_adf00313e13a9bb0634e86f279354be33"><div class="ttname"><a href="../../db/df8/structez_r_t_t_i_allocator.htm#adf00313e13a9bb0634e86f279354be33">ezRTTIAllocator::Allocate</a></div><div class="ttdeci">ezInternal::NewInstance&lt; T &gt; Allocate(ezAllocator *pAllocator=nullptr)</div><div class="ttdoc">Allocates one instance.</div><div class="ttdef"><b>Definition:</b> RTTI.h:242</div></div>
<div class="ttc" id="astructez_r_t_t_i_1_1_for_each_options_htm"><div class="ttname"><a href="../../d5/d8e/structez_r_t_t_i_1_1_for_each_options.htm">ezRTTI::ForEachOptions</a></div><div class="ttdef"><b>Definition:</b> RTTI.h:149</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_ae20531c5bfc4900cb9149d51f63cadb3"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#ae20531c5bfc4900cb9149d51f63cadb3">ezRTTI::GetMessageHandlers</a></div><div class="ttdeci">const EZ_ALWAYS_INLINE ezArrayPtr&lt; ezAbstractMessageHandler * &gt; &amp; GetMessageHandlers() const</div><div class="ttdoc">Returns the array of message handlers that this type has.</div><div class="ttdef"><b>Definition:</b> RTTI.h:119</div></div>
<div class="ttc" id="astructez_r_t_t_i_1_1_for_each_options_1_1_bits_htm"><div class="ttname"><a href="../../d9/dab/structez_r_t_t_i_1_1_for_each_options_1_1_bits.htm">ezRTTI::ForEachOptions::Bits</a></div><div class="ttdef"><b>Definition:</b> RTTI.h:163</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_ad065abae73e88820f8bc9a7f87ec5860"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#ad065abae73e88820f8bc9a7f87ec5860">ezRTTI::GetTypeNameHash</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt64 GetTypeNameHash() const</div><div class="ttdoc">Returns the hash of the name of this type.</div><div class="ttdef"><b>Definition:</b> RTTI.h:51</div></div>
<div class="ttc" id="aclassez_dynamic_array_htm"><div class="ttname"><a href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray</a></div><div class="ttdef"><b>Definition:</b> DynamicArray.h:80</div></div>
<div class="ttc" id="astructez_delegate_htm"><div class="ttname"><a href="../../d5/d68/structez_delegate.htm">ezDelegate</a></div><div class="ttdoc">A generic delegate class which supports static functions and member functions.</div><div class="ttdef"><b>Definition:</b> Delegate.h:75</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_aae98b61a4ae143728cd4051692adad9e"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#aae98b61a4ae143728cd4051692adad9e">ezRTTI::GetTypeSize</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 GetTypeSize() const</div><div class="ttdoc">Returns the size (in bytes) of an instance of this type.</div><div class="ttdef"><b>Definition:</b> RTTI.h:93</div></div>
<div class="ttc" id="astructez_r_t_t_i_no_allocator_htm_a0d961bc1f87d5c78d65eec704cda4224"><div class="ttname"><a href="../../dd/d04/structez_r_t_t_i_no_allocator.htm#a0d961bc1f87d5c78d65eec704cda4224">ezRTTINoAllocator::Deallocate</a></div><div class="ttdeci">virtual void Deallocate(void *pObject, ezAllocator *pAllocator) override</div><div class="ttdoc">Will trigger an assert.</div><div class="ttdef"><b>Definition:</b> RTTI.h:281</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_a4887d66c7de28b4886359cb93d7efe5f"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#a4887d66c7de28b4886359cb93d7efe5f">ezRTTI::GetParentType</a></div><div class="ttdeci">const EZ_ALWAYS_INLINE ezRTTI * GetParentType() const</div><div class="ttdoc">Returns the type that is the base class of this type. May be nullptr if this type has no base class.</div><div class="ttdef"><b>Definition:</b> RTTI.h:54</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_a0cf37226a8f2801f0fd89480667a59bb"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#a0cf37226a8f2801f0fd89480667a59bb">ezRTTI::GetProperties</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezArrayPtr&lt; const ezAbstractProperty *const  &gt; GetProperties() const</div><div class="ttdoc">Returns the array of properties that this type has. Does NOT include properties from base classes.</div><div class="ttdef"><b>Definition:</b> RTTI.h:79</div></div>
<div class="ttc" id="astructez_r_t_t_i_no_allocator_htm_a4e5da32a61dc482097f78a14b773aab5"><div class="ttname"><a href="../../dd/d04/structez_r_t_t_i_no_allocator.htm#a4e5da32a61dc482097f78a14b773aab5">ezRTTINoAllocator::CanAllocate</a></div><div class="ttdeci">virtual bool CanAllocate() const override</div><div class="ttdoc">Returns false, because this type of allocator is used for classes that shall not be allocated dynamic...</div><div class="ttdef"><b>Definition:</b> RTTI.h:271</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_a77214d29171944cc6187aa8740807bee"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#a77214d29171944cc6187aa8740807bee">ezRTTI::GetPluginName</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringView GetPluginName() const</div><div class="ttdoc">Returns the name of the plugin which this type is declared in.</div><div class="ttdef"><b>Definition:</b> RTTI.h:116</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_a12bb619302f06a0750a230ac62b01886"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#a12bb619302f06a0750a230ac62b01886">ezRTTI::GetTypeName</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezStringView GetTypeName() const</div><div class="ttdoc">Returns the name of this type.</div><div class="ttdef"><b>Definition:</b> RTTI.h:48</div></div>
<div class="ttc" id="astructez_r_t_t_i_allocator_htm_a996b32cc9b2e56c695ed8774a4b147bb"><div class="ttname"><a href="../../db/df8/structez_r_t_t_i_allocator.htm#a996b32cc9b2e56c695ed8774a4b147bb">ezRTTIAllocator::CanAllocate</a></div><div class="ttdeci">virtual bool CanAllocate() const</div><div class="ttdoc">Returns whether the type that is represented by this allocator, can be dynamically allocated at runti...</div><div class="ttdef"><b>Definition:</b> RTTI.h:238</div></div>
<div class="ttc" id="astructez_r_t_t_i_1_1_for_each_options_htm_a3acc45d13d1ecea751e92e451304f6d6"><div class="ttname"><a href="../../d5/d8e/structez_r_t_t_i_1_1_for_each_options.htm#a3acc45d13d1ecea751e92e451304f6d6">ezRTTI::ForEachOptions::Enum</a></div><div class="ttdeci">Enum</div><div class="ttdef"><b>Definition:</b> RTTI.h:153</div></div>
<div class="ttc" id="aclassez_small_array_htm"><div class="ttname"><a href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt; ezAbstractMessageHandler *, 1, ezStaticsAllocatorWrapper &gt;</a></div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_a19672c9984fefea00552f02dd010ae6e"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#a19672c9984fefea00552f02dd010ae6e">ezRTTI::IsDerivedFrom</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsDerivedFrom(const ezRTTI *pBaseType) const</div><div class="ttdoc">Returns true if this type is derived from the given type (or of the same type).</div><div class="ttdef"><b>Definition:</b> RTTI.h:60</div></div>
<div class="ttc" id="aclassez_property_attribute_htm"><div class="ttname"><a href="../../d7/d48/classez_property_attribute.htm">ezPropertyAttribute</a></div><div class="ttdoc">Base class of all attributes can be used to decorate a RTTI property.</div><div class="ttdef"><b>Definition:</b> PropertyAttributes.h:10</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_ab16d8753fb79f298b60443b726924f63"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#ab16d8753fb79f298b60443b726924f63">ezRTTI::GetTypeFlags</a></div><div class="ttdeci">const EZ_ALWAYS_INLINE ezBitflags&lt; ezTypeFlags &gt; &amp; GetTypeFlags() const</div><div class="ttdoc">Returns the type flags.</div><div class="ttdef"><b>Definition:</b> RTTI.h:99</div></div>
<div class="ttc" id="aclassez_allocator_htm"><div class="ttname"><a href="../../d0/dbb/classez_allocator.htm">ezAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> Allocator.h:22</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_adafefbc0987a607b461846687acaa836"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#adafefbc0987a607b461846687acaa836">ezRTTI::CanHandleMessage</a></div><div class="ttdeci">bool CanHandleMessage(ezMessageId id) const</div><div class="ttdoc">Returns whether this type can handle the message type with the given id.</div><div class="ttdef"><b>Definition:</b> RTTI.h:137</div></div>
<div class="ttc" id="aclassez_string_view_htm"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm">ezStringView</a></div><div class="ttdoc">ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition:</b> StringView.h:33</div></div>
<div class="ttc" id="aclassez_abstract_function_property_htm"><div class="ttname"><a href="../../d3/d4c/classez_abstract_function_property.htm">ezAbstractFunctionProperty</a></div><div class="ttdoc">The base class for a property that represents a function.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:539</div></div>
<div class="ttc" id="aclassez_abstract_property_htm"><div class="ttname"><a href="../../d6/d81/classez_abstract_property.htm">ezAbstractProperty</a></div><div class="ttdoc">This is the base interface for all properties in the reflection system. It provides enough informatio...</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:149</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm_a27fdc49f927f74d2946a73975eb7accb"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm#a27fdc49f927f74d2946a73975eb7accb">ezRTTI::IsDerivedFrom</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsDerivedFrom() const</div><div class="ttdoc">Returns true if this type is derived from or identical to the given type.</div><div class="ttdef"><b>Definition:</b> RTTI.h:70</div></div>
<div class="ttc" id="astructez_r_t_t_i_allocator_htm"><div class="ttname"><a href="../../db/df8/structez_r_t_t_i_allocator.htm">ezRTTIAllocator</a></div><div class="ttdoc">The interface for an allocator that creates instances of reflected types.</div><div class="ttdef"><b>Definition:</b> RTTI.h:233</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_217b90e143c3d27cf4319fb9e916f4ad.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_4d499b0494fc84c22e280b98d7f4832b.htm">Implementation</a></li><li class="navelem"><b>RTTI.h</b></li>
    <li class="footer">Generated on Mon Mar 3 2025 17:23:44 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
