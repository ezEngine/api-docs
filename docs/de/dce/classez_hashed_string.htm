<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezHashedString Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('de/dce/classez_hashed_string.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="../../d3/d54/classez_hashed_string-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">ezHashedString Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whether two strings are identical.  
 <a href="../../de/dce/classez_hashed_string.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d9/dc9/_hashed_string_8h_source.htm">HashedString.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/ddb/structez_hashed_string_1_1_hashed_data.htm">HashedData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a9b140b11b02ca9273711289edbda7624" id="r_a9b140b11b02ca9273711289edbda7624"><td class="memItemLeft" align="right" valign="top"><a id="a9b140b11b02ca9273711289edbda7624" name="a9b140b11b02ca9273711289edbda7624"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>StringStorage</b> = <a class="el" href="../../d1/d79/classez_map.htm">ezMap</a>&lt; ezUInt64, <a class="el" href="../../da/ddb/structez_hashed_string_1_1_hashed_data.htm">HashedData</a>, <a class="el" href="../../df/d11/structez_compare_helper.htm">ezCompareHelper</a>&lt; ezUInt64 &gt;, <a class="el" href="../../d5/dd4/structez_statics_allocator_wrapper.htm">ezStaticsAllocatorWrapper</a> &gt;</td></tr>
<tr class="separator:a9b140b11b02ca9273711289edbda7624"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0a6ce4e86cb645d7c2c00c5ba19a0af" id="r_ab0a6ce4e86cb645d7c2c00c5ba19a0af"><td class="memItemLeft" align="right" valign="top"><a id="ab0a6ce4e86cb645d7c2c00c5ba19a0af" name="ab0a6ce4e86cb645d7c2c00c5ba19a0af"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>HashedType</b> = <a class="el" href="../../d1/ddf/structez_map_base_iterator_base.htm">StringStorage::Iterator</a></td></tr>
<tr class="separator:ab0a6ce4e86cb645d7c2c00c5ba19a0af"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aed522cae22ae6966d8648ec3ac04c91d" id="r_aed522cae22ae6966d8648ec3ac04c91d"><td class="memItemLeft" align="right" valign="top"><a id="aed522cae22ae6966d8648ec3ac04c91d" name="aed522cae22ae6966d8648ec3ac04c91d"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>EZ_DECLARE_MEM_RELOCATABLE_TYPE</b> ()</td></tr>
<tr class="separator:aed522cae22ae6966d8648ec3ac04c91d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28c3ee0743afa8d7f006e3628249c94c" id="r_a28c3ee0743afa8d7f006e3628249c94c"><td class="memItemLeft" align="right" valign="top"><a id="a28c3ee0743afa8d7f006e3628249c94c" name="a28c3ee0743afa8d7f006e3628249c94c"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>ezHashedString</b> ()</td></tr>
<tr class="memdesc:a28c3ee0743afa8d7f006e3628249c94c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes this string to the empty string. <br /></td></tr>
<tr class="separator:a28c3ee0743afa8d7f006e3628249c94c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2805cbbf01934c93b27491dee5cec684" id="r_a2805cbbf01934c93b27491dee5cec684"><td class="memItemLeft" align="right" valign="top"><a id="a2805cbbf01934c93b27491dee5cec684" name="a2805cbbf01934c93b27491dee5cec684"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>ezHashedString</b> (const <a class="el" href="../../de/dce/classez_hashed_string.htm">ezHashedString</a> &amp;rhs)</td></tr>
<tr class="memdesc:a2805cbbf01934c93b27491dee5cec684"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a>. <br /></td></tr>
<tr class="separator:a2805cbbf01934c93b27491dee5cec684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cd84fbcbd65fb6e56c761c2b513b72f" id="r_a6cd84fbcbd65fb6e56c761c2b513b72f"><td class="memItemLeft" align="right" valign="top"><a id="a6cd84fbcbd65fb6e56c761c2b513b72f" name="a6cd84fbcbd65fb6e56c761c2b513b72f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>ezHashedString</b> (<a class="el" href="../../de/dce/classez_hashed_string.htm">ezHashedString</a> &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a6cd84fbcbd65fb6e56c761c2b513b72f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a>. <br /></td></tr>
<tr class="separator:a6cd84fbcbd65fb6e56c761c2b513b72f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26a494be0c113a0c5726317ff49b61a1" id="r_a26a494be0c113a0c5726317ff49b61a1"><td class="memItemLeft" align="right" valign="top"><a id="a26a494be0c113a0c5726317ff49b61a1" name="a26a494be0c113a0c5726317ff49b61a1"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../de/dce/classez_hashed_string.htm">ezHashedString</a> &amp;rhs)</td></tr>
<tr class="memdesc:a26a494be0c113a0c5726317ff49b61a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a>. <br /></td></tr>
<tr class="separator:a26a494be0c113a0c5726317ff49b61a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17d405721cc0c15143925292a11ffe7e" id="r_a17d405721cc0c15143925292a11ffe7e"><td class="memItemLeft" align="right" valign="top"><a id="a17d405721cc0c15143925292a11ffe7e" name="a17d405721cc0c15143925292a11ffe7e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../de/dce/classez_hashed_string.htm">ezHashedString</a> &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a17d405721cc0c15143925292a11ffe7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a>. <br /></td></tr>
<tr class="separator:a17d405721cc0c15143925292a11ffe7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af53e55cc90fcd4abc1bbc5a777112b85" id="r_af53e55cc90fcd4abc1bbc5a777112b85"><td class="memTemplParams" colspan="2">template&lt;size_t N&gt; </td></tr>
<tr class="memitem:af53e55cc90fcd4abc1bbc5a777112b85"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../de/dce/classez_hashed_string.htm#af53e55cc90fcd4abc1bbc5a777112b85">Assign</a> (const char(&amp;string)[N])</td></tr>
<tr class="memdesc:af53e55cc90fcd4abc1bbc5a777112b85"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assigning a new string from a string constant is a slow operation, but the hash computation can happen at compile time.  <br /></td></tr>
<tr class="separator:af53e55cc90fcd4abc1bbc5a777112b85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cd2b59fa72fc9df4b0ba96b11710742" id="r_a7cd2b59fa72fc9df4b0ba96b11710742"><td class="memTemplParams" colspan="2"><a id="a7cd2b59fa72fc9df4b0ba96b11710742" name="a7cd2b59fa72fc9df4b0ba96b11710742"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a7cd2b59fa72fc9df4b0ba96b11710742"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Assign</b> (char(&amp;string)[N])=delete</td></tr>
<tr class="separator:a7cd2b59fa72fc9df4b0ba96b11710742"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0d1c4ad02869a5db84dafe61e4224a3" id="r_ae0d1c4ad02869a5db84dafe61e4224a3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/dce/classez_hashed_string.htm#ae0d1c4ad02869a5db84dafe61e4224a3">Assign</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sString)</td></tr>
<tr class="memdesc:ae0d1c4ad02869a5db84dafe61e4224a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assigning a new string from a non-hashed string is a very slow operation, this should be used rarely.  <br /></td></tr>
<tr class="separator:ae0d1c4ad02869a5db84dafe61e4224a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ee0466e055dd6002bd7b6e2e5f74d50" id="r_a9ee0466e055dd6002bd7b6e2e5f74d50"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/dce/classez_hashed_string.htm#a9ee0466e055dd6002bd7b6e2e5f74d50">operator==</a> (const <a class="el" href="../../de/dce/classez_hashed_string.htm">ezHashedString</a> &amp;rhs) const</td></tr>
<tr class="memdesc:a9ee0466e055dd6002bd7b6e2e5f74d50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparing whether two hashed strings are identical is just a pointer comparison. This operation is what <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a> is optimized for.  <br /></td></tr>
<tr class="separator:a9ee0466e055dd6002bd7b6e2e5f74d50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2f340e3284ed327a6eeabf2d26629b5" id="r_ab2f340e3284ed327a6eeabf2d26629b5"><td class="memItemLeft" align="right" valign="top"><a id="ab2f340e3284ed327a6eeabf2d26629b5" name="ab2f340e3284ed327a6eeabf2d26629b5"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>EZ_ADD_DEFAULT_OPERATOR_NOTEQUAL</b> (const <a class="el" href="../../de/dce/classez_hashed_string.htm">ezHashedString</a> &amp;)</td></tr>
<tr class="separator:ab2f340e3284ed327a6eeabf2d26629b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae79ac5a2acd34565bd03dcf121b492d8" id="r_ae79ac5a2acd34565bd03dcf121b492d8"><td class="memItemLeft" align="right" valign="top"><a id="ae79ac5a2acd34565bd03dcf121b492d8" name="ae79ac5a2acd34565bd03dcf121b492d8"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="../../db/dcf/classez_temp_hashed_string.htm">ezTempHashedString</a> &amp;rhs) const</td></tr>
<tr class="memdesc:ae79ac5a2acd34565bd03dcf121b492d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string object to an <a class="el" href="../../db/dcf/classez_temp_hashed_string.htm" title="A class to use together with ezHashedString for quick comparisons with temporary strings that need no...">ezTempHashedString</a> object. This should be used whenever some object needs to be found and the string to compare against is not yet an <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a> object. <br /></td></tr>
<tr class="separator:ae79ac5a2acd34565bd03dcf121b492d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3213ea10aee7e6388ce802fdbd007f92" id="r_a3213ea10aee7e6388ce802fdbd007f92"><td class="memItemLeft" align="right" valign="top"><a id="a3213ea10aee7e6388ce802fdbd007f92" name="a3213ea10aee7e6388ce802fdbd007f92"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator!=</b> (const <a class="el" href="../../db/dcf/classez_temp_hashed_string.htm">ezTempHashedString</a> &amp;rhs) const</td></tr>
<tr class="separator:a3213ea10aee7e6388ce802fdbd007f92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa06c36aa74bc97a4fdba0990cd1b6bd6" id="r_aa06c36aa74bc97a4fdba0990cd1b6bd6"><td class="memItemLeft" align="right" valign="top"><a id="aa06c36aa74bc97a4fdba0990cd1b6bd6" name="aa06c36aa74bc97a4fdba0990cd1b6bd6"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;</b> (const <a class="el" href="../../de/dce/classez_hashed_string.htm">ezHashedString</a> &amp;rhs) const</td></tr>
<tr class="memdesc:aa06c36aa74bc97a4fdba0990cd1b6bd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">This operator allows sorting objects by hash value, not by alphabetical order. <br /></td></tr>
<tr class="separator:aa06c36aa74bc97a4fdba0990cd1b6bd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e8ea05ab2b680c4ce501ff5b6ff88dc" id="r_a0e8ea05ab2b680c4ce501ff5b6ff88dc"><td class="memItemLeft" align="right" valign="top"><a id="a0e8ea05ab2b680c4ce501ff5b6ff88dc" name="a0e8ea05ab2b680c4ce501ff5b6ff88dc"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;</b> (const <a class="el" href="../../db/dcf/classez_temp_hashed_string.htm">ezTempHashedString</a> &amp;rhs) const</td></tr>
<tr class="memdesc:a0e8ea05ab2b680c4ce501ff5b6ff88dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">This operator allows sorting objects by hash value, not by alphabetical order. <br /></td></tr>
<tr class="separator:a0e8ea05ab2b680c4ce501ff5b6ff88dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d4760e0428155ad6a9fc016e0292939" id="r_a3d4760e0428155ad6a9fc016e0292939"><td class="memItemLeft" align="right" valign="top"><a id="a3d4760e0428155ad6a9fc016e0292939" name="a3d4760e0428155ad6a9fc016e0292939"></a>
const <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>GetString</b> () const</td></tr>
<tr class="memdesc:a3d4760e0428155ad6a9fc016e0292939"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gives access to the actual string data, so you can do all the typical (read-only) string operations on it. <br /></td></tr>
<tr class="separator:a3d4760e0428155ad6a9fc016e0292939"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa02a94bb206450f4680e807f16de4a45" id="r_aa02a94bb206450f4680e807f16de4a45"><td class="memItemLeft" align="right" valign="top"><a id="aa02a94bb206450f4680e807f16de4a45" name="aa02a94bb206450f4680e807f16de4a45"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><b>GetData</b> () const</td></tr>
<tr class="memdesc:aa02a94bb206450f4680e807f16de4a45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gives access to the actual string data, so you can do all the typical (read-only) string operations on it. <br /></td></tr>
<tr class="separator:aa02a94bb206450f4680e807f16de4a45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3c8771100f669c9ea346e9b3a514ca6" id="r_ad3c8771100f669c9ea346e9b3a514ca6"><td class="memItemLeft" align="right" valign="top"><a id="ad3c8771100f669c9ea346e9b3a514ca6" name="ad3c8771100f669c9ea346e9b3a514ca6"></a>
ezUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>GetHash</b> () const</td></tr>
<tr class="memdesc:ad3c8771100f669c9ea346e9b3a514ca6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the hash of the stored string. <br /></td></tr>
<tr class="separator:ad3c8771100f669c9ea346e9b3a514ca6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbc9fe061e32ddeb9166e7d4226c25b6" id="r_abbc9fe061e32ddeb9166e7d4226c25b6"><td class="memItemLeft" align="right" valign="top"><a id="abbc9fe061e32ddeb9166e7d4226c25b6" name="abbc9fe061e32ddeb9166e7d4226c25b6"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEmpty</b> () const</td></tr>
<tr class="memdesc:abbc9fe061e32ddeb9166e7d4226c25b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the string is empty. <br /></td></tr>
<tr class="separator:abbc9fe061e32ddeb9166e7d4226c25b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afabe790c06d98a79e97f295ac043aaaf" id="r_afabe790c06d98a79e97f295ac043aaaf"><td class="memItemLeft" align="right" valign="top"><a id="afabe790c06d98a79e97f295ac043aaaf" name="afabe790c06d98a79e97f295ac043aaaf"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> ()</td></tr>
<tr class="memdesc:afabe790c06d98a79e97f295ac043aaaf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets the string to the empty string. <br /></td></tr>
<tr class="separator:afabe790c06d98a79e97f295ac043aaaf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4b649074c0d51646cca9eae4a8a16fe" id="r_ad4b649074c0d51646cca9eae4a8a16fe"><td class="memItemLeft" align="right" valign="top"><a id="ad4b649074c0d51646cca9eae4a8a16fe" name="ad4b649074c0d51646cca9eae4a8a16fe"></a>
EZ_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><b>operator ezStringView</b> () const</td></tr>
<tr class="memdesc:ad4b649074c0d51646cca9eae4a8a16fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:ad4b649074c0d51646cca9eae4a8a16fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9415bd0c54bcc7c7a545bd65798b28d4" id="r_a9415bd0c54bcc7c7a545bd65798b28d4"><td class="memItemLeft" align="right" valign="top"><a id="a9415bd0c54bcc7c7a545bd65798b28d4" name="a9415bd0c54bcc7c7a545bd65798b28d4"></a>
EZ_ALWAYS_INLINE <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetView</b> () const</td></tr>
<tr class="memdesc:a9415bd0c54bcc7c7a545bd65798b28d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:a9415bd0c54bcc7c7a545bd65798b28d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0580a00f304c460d726f4b82c49d07d7" id="r_a0580a00f304c460d726f4b82c49d07d7"><td class="memItemLeft" align="right" valign="top"><a id="a0580a00f304c460d726f4b82c49d07d7" name="a0580a00f304c460d726f4b82c49d07d7"></a>
EZ_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><b>operator const char *</b> () const</td></tr>
<tr class="memdesc:a0580a00f304c460d726f4b82c49d07d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the internal Utf8 string. <br /></td></tr>
<tr class="separator:a0580a00f304c460d726f4b82c49d07d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43da501d63ae1a0edeff6b61ec869129" id="r_a43da501d63ae1a0edeff6b61ec869129"><td class="memItemLeft" align="right" valign="top"><a id="a43da501d63ae1a0edeff6b61ec869129" name="a43da501d63ae1a0edeff6b61ec869129"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const char *szString) const</td></tr>
<tr class="separator:a43da501d63ae1a0edeff6b61ec869129"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e563f9109a6baa94ae55fa025b79188" id="r_a4e563f9109a6baa94ae55fa025b79188"><td class="memItemLeft" align="right" valign="top"><a id="a4e563f9109a6baa94ae55fa025b79188" name="a4e563f9109a6baa94ae55fa025b79188"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>EZ_ADD_DEFAULT_OPERATOR_NOTEQUAL</b> (const char *)</td></tr>
<tr class="separator:a4e563f9109a6baa94ae55fa025b79188"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebdd2618c5b18a6cf019b0c3447b67d9" id="r_aebdd2618c5b18a6cf019b0c3447b67d9"><td class="memTemplParams" colspan="2"><a id="aebdd2618c5b18a6cf019b0c3447b67d9" name="aebdd2618c5b18a6cf019b0c3447b67d9"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:aebdd2618c5b18a6cf019b0c3447b67d9"><td class="memTemplItemLeft" align="right" valign="top">EZ_FORCE_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Assign</b> (const char(&amp;string)[N])</td></tr>
<tr class="separator:aebdd2618c5b18a6cf019b0c3447b67d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:aaa324bf4a7799cf74398609e5a483ef4" id="r_aaa324bf4a7799cf74398609e5a483ef4"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/dce/classez_hashed_string.htm#aaa324bf4a7799cf74398609e5a483ef4">LookupStringHash</a> (ezUInt64 uiHash, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> &amp;out_sResult)</td></tr>
<tr class="memdesc:aaa324bf4a7799cf74398609e5a483ef4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attempts to find a known string for the given hash value.  <br /></td></tr>
<tr class="separator:aaa324bf4a7799cf74398609e5a483ef4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whether two strings are identical. </p>
<p>Internally only a reference to the string data is stored. The data itself is stored in a central location, where no duplicates are possible. Thus two identical strings will result in identical <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a> objects, which makes equality comparisons very easy (it's a pointer comparison).<br  />
Copying <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a> objects around and assigning between them is very fast as well.<br  />
<br  />
Assigning from some other string type is rather slow though, as it requires thread synchronization.<br  />
You can also get access to the actual string data via <a class="el" href="../../de/dce/classez_hashed_string.htm#a3d4760e0428155ad6a9fc016e0292939" title="Gives access to the actual string data, so you can do all the typical (read-only) string operations o...">GetString()</a>.<br  />
<br  />
You should use <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a> whenever the size of the encapsulating object is important and when changes to the string itself are rare, but checks for equality might be frequent (e.g. in a system where objects are identified via their name).<br  />
At runtime when you need to compare <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a> objects with some temporary string object, used <a class="el" href="../../db/dcf/classez_temp_hashed_string.htm" title="A class to use together with ezHashedString for quick comparisons with temporary strings that need no...">ezTempHashedString</a>, as it will only use the string's hash value for comparison, but will not store the actual string anywhere. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="af53e55cc90fcd4abc1bbc5a777112b85" name="af53e55cc90fcd4abc1bbc5a777112b85"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af53e55cc90fcd4abc1bbc5a777112b85">&#9670;&#160;</a></span>Assign() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t N&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void ezHashedString::Assign </td>
          <td>(</td>
          <td class="paramtype">const char(&amp;)&#160;</td>
          <td class="paramname"><em>string</em>[N]</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assigning a new string from a string constant is a slow operation, but the hash computation can happen at compile time. </p>
<p>If you need to create an object to compare <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a> objects against, prefer to use <a class="el" href="../../db/dcf/classez_temp_hashed_string.htm" title="A class to use together with ezHashedString for quick comparisons with temporary strings that need no...">ezTempHashedString</a>. It will only compute the strings hash value, but does not require any thread synchronization. </p>

</div>
</div>
<a id="ae0d1c4ad02869a5db84dafe61e4224a3" name="ae0d1c4ad02869a5db84dafe61e4224a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0d1c4ad02869a5db84dafe61e4224a3">&#9670;&#160;</a></span>Assign() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EZ_FORCE_INLINE void ezHashedString::Assign </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sString</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assigning a new string from a non-hashed string is a very slow operation, this should be used rarely. </p>
<p>If you need to create an object to compare <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a> objects against, prefer to use <a class="el" href="../../db/dcf/classez_temp_hashed_string.htm" title="A class to use together with ezHashedString for quick comparisons with temporary strings that need no...">ezTempHashedString</a>. It will only compute the strings hash value, but does not require any thread synchronization. </p>

</div>
</div>
<a id="aaa324bf4a7799cf74398609e5a483ef4" name="aaa324bf4a7799cf74398609e5a483ef4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa324bf4a7799cf74398609e5a483ef4">&#9670;&#160;</a></span>LookupStringHash()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> ezHashedString::LookupStringHash </td>
          <td>(</td>
          <td class="paramtype">ezUInt64&#160;</td>
          <td class="paramname"><em>uiHash</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> &amp;&#160;</td>
          <td class="paramname"><em>out_sResult</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Attempts to find a known string for the given hash value. </p>
<p>Careful, this is a slow operation (involving a mutex). It is only meant for debug output purposes. The string hash may not be known, if the value was never assigned to any <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a>, in which case EZ_FAILURE is returned. </p>

</div>
</div>
<a id="a9ee0466e055dd6002bd7b6e2e5f74d50" name="a9ee0466e055dd6002bd7b6e2e5f74d50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ee0466e055dd6002bd7b6e2e5f74d50">&#9670;&#160;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ezHashedString::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/dce/classez_hashed_string.htm">ezHashedString</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Comparing whether two hashed strings are identical is just a pointer comparison. This operation is what <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a> is optimized for. </p>
<dl class="section note"><dt>Note</dt><dd>Comparing between <a class="el" href="../../de/dce/classez_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">ezHashedString</a> objects is always error-free, so even if two string had the same hash value, although they are different, this comparison function will not report they are the same. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/<a class="el" href="../../d9/dc9/_hashed_string_8h_source.htm">HashedString.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/<b>HashedString.cpp</b></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../d4/d50/_hashed_string__inl_8h_source.htm">HashedString_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../de/dce/classez_hashed_string.htm">ezHashedString</a></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:17:58 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
