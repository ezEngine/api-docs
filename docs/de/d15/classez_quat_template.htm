<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezQuatTemplate&lt; Type &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('de/d15/classez_quat_template.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="../../db/dfb/classez_quat_template-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezQuatTemplate&lt; Type &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Quaternions can be used to represent rotations in 3D space.  
 <a href="../../de/d15/classez_quat_template.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../dd/dbf/_quat_8h_source.htm">Quat.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a2486118d92d4d2060f58b066361a96e5"><td class="memItemLeft" align="right" valign="top"><a id="a2486118d92d4d2060f58b066361a96e5"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ComponentType</b> = Type</td></tr>
<tr class="separator:a2486118d92d4d2060f58b066361a96e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a61933cea95e6f1134b3f639a054967a5"><td class="memItemLeft" align="right" valign="top"><a id="a61933cea95e6f1134b3f639a054967a5"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>EZ_DECLARE_POD_TYPE</b> ()</td></tr>
<tr class="separator:a61933cea95e6f1134b3f639a054967a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43ac320085539183fb51a2fccdc99aae"><td class="memItemLeft" align="right" valign="top"><a id="a43ac320085539183fb51a2fccdc99aae"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#a43ac320085539183fb51a2fccdc99aae">ezQuatTemplate</a> (Type X, Type Y, Type Z, Type W)</td></tr>
<tr class="memdesc:a43ac320085539183fb51a2fccdc99aae"><td class="mdescLeft">&#160;</td><td class="mdescRight">For internal use. You should never construct quaternions this way. <br /></td></tr>
<tr class="separator:a43ac320085539183fb51a2fccdc99aae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa71082d9221e638fa1fbf3f1f4da3c9"><td class="memItemLeft" align="right" valign="top"><a id="afa71082d9221e638fa1fbf3f1f4da3c9"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#afa71082d9221e638fa1fbf3f1f4da3c9">SetIdentity</a> ()</td></tr>
<tr class="memdesc:afa71082d9221e638fa1fbf3f1f4da3c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the Quaternion to the identity. <br /></td></tr>
<tr class="separator:afa71082d9221e638fa1fbf3f1f4da3c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa09ee1dac045f013c5edb97589002c44"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#aa09ee1dac045f013c5edb97589002c44">SetElements</a> (Type X, Type Y, Type Z, Type W)</td></tr>
<tr class="memdesc:aa09ee1dac045f013c5edb97589002c44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the individual elements of the quaternion directly. Note that x,y,z do NOT represent a rotation axis, and w does NOT represent an angle.  <a href="../../de/d15/classez_quat_template.htm#aa09ee1dac045f013c5edb97589002c44">More...</a><br /></td></tr>
<tr class="separator:aa09ee1dac045f013c5edb97589002c44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0494cf29e9d89bf1e891ccdcee3a987"><td class="memItemLeft" align="right" valign="top"><a id="af0494cf29e9d89bf1e891ccdcee3a987"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#af0494cf29e9d89bf1e891ccdcee3a987">SetFromAxisAndAngle</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vRotationAxis, <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> angle)</td></tr>
<tr class="memdesc:af0494cf29e9d89bf1e891ccdcee3a987"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a quaternion from a rotation-axis and an angle. <br /></td></tr>
<tr class="separator:af0494cf29e9d89bf1e891ccdcee3a987"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10aebc74018c75e0bc56644553ebd308"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#a10aebc74018c75e0bc56644553ebd308">SetShortestRotation</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vDirFrom, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vDirTo)</td></tr>
<tr class="memdesc:a10aebc74018c75e0bc56644553ebd308"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a quaternion, that rotates through the shortest arc from "vDirFrom" to "vDirTo".  <a href="../../de/d15/classez_quat_template.htm#a10aebc74018c75e0bc56644553ebd308">More...</a><br /></td></tr>
<tr class="separator:a10aebc74018c75e0bc56644553ebd308"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a362594ad5e5b9854564b247044047cf5"><td class="memItemLeft" align="right" valign="top"><a id="a362594ad5e5b9854564b247044047cf5"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#a362594ad5e5b9854564b247044047cf5">SetFromMat3</a> (const <a class="el" href="../../db/daf/classez_mat3_template.htm">ezMat3Template</a>&lt; Type &gt; &amp;m)</td></tr>
<tr class="memdesc:a362594ad5e5b9854564b247044047cf5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a quaternion from the given matrix. <br /></td></tr>
<tr class="separator:a362594ad5e5b9854564b247044047cf5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a228a95eff6e913b8f402708c288efd31"><td class="memItemLeft" align="right" valign="top"><a id="a228a95eff6e913b8f402708c288efd31"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#a228a95eff6e913b8f402708c288efd31">SetSlerp</a> (const <a class="el" href="../../de/d15/classez_quat_template.htm">ezQuatTemplate</a> &amp;qFrom, const <a class="el" href="../../de/d15/classez_quat_template.htm">ezQuatTemplate</a> &amp;qTo, Type t)</td></tr>
<tr class="memdesc:a228a95eff6e913b8f402708c288efd31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets this quaternion to be the spherical linear interpolation of the other two. <br /></td></tr>
<tr class="separator:a228a95eff6e913b8f402708c288efd31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f36bda405ca0b23e5b24f7b4650d923"><td class="memItemLeft" align="right" valign="top"><a id="a4f36bda405ca0b23e5b24f7b4650d923"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#a4f36bda405ca0b23e5b24f7b4650d923">Normalize</a> ()</td></tr>
<tr class="memdesc:a4f36bda405ca0b23e5b24f7b4650d923"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalizes the quaternion to unit length. ALL rotation-quaternions should be normalized at all times (automatically). <br /></td></tr>
<tr class="separator:a4f36bda405ca0b23e5b24f7b4650d923"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9841dc2d8912ae12ed7fa1de01582366"><td class="memItemLeft" align="right" valign="top"><a id="a9841dc2d8912ae12ed7fa1de01582366"></a>
<a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#a9841dc2d8912ae12ed7fa1de01582366">GetRotationAxisAndAngle</a> (<a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vAxis, <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;angle, float fEpsilon=ezMath::DefaultEpsilon&lt; Type &gt;()) const</td></tr>
<tr class="memdesc:a9841dc2d8912ae12ed7fa1de01582366"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the rotation-axis and angle, that this quaternion rotates around. <br /></td></tr>
<tr class="separator:a9841dc2d8912ae12ed7fa1de01582366"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6643b21b3f4055b8977927705080ecda"><td class="memItemLeft" align="right" valign="top"><a id="a6643b21b3f4055b8977927705080ecda"></a>
const <a class="el" href="../../db/daf/classez_mat3_template.htm">ezMat3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#a6643b21b3f4055b8977927705080ecda">GetAsMat3</a> () const</td></tr>
<tr class="memdesc:a6643b21b3f4055b8977927705080ecda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the Quaternion as a matrix. <br /></td></tr>
<tr class="separator:a6643b21b3f4055b8977927705080ecda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96023dc43f9d97bfc70e7dfc174b0f6f"><td class="memItemLeft" align="right" valign="top"><a id="a96023dc43f9d97bfc70e7dfc174b0f6f"></a>
const <a class="el" href="../../d7/d9b/classez_mat4_template.htm">ezMat4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#a96023dc43f9d97bfc70e7dfc174b0f6f">GetAsMat4</a> () const</td></tr>
<tr class="memdesc:a96023dc43f9d97bfc70e7dfc174b0f6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the Quaternion as a matrix. <br /></td></tr>
<tr class="separator:a96023dc43f9d97bfc70e7dfc174b0f6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98a9dacef7a763f9d73f993a4fba7014"><td class="memItemLeft" align="right" valign="top"><a id="a98a9dacef7a763f9d73f993a4fba7014"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#a98a9dacef7a763f9d73f993a4fba7014">IsValid</a> (Type fEpsilon=ezMath::DefaultEpsilon&lt; Type &gt;()) const</td></tr>
<tr class="memdesc:a98a9dacef7a763f9d73f993a4fba7014"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether all components are neither NaN nor infinite and that the quaternion is normalized. <br /></td></tr>
<tr class="separator:a98a9dacef7a763f9d73f993a4fba7014"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38ff450723058f4d3ff03651a9454fd3"><td class="memItemLeft" align="right" valign="top"><a id="a38ff450723058f4d3ff03651a9454fd3"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#a38ff450723058f4d3ff03651a9454fd3">IsNaN</a> () const</td></tr>
<tr class="memdesc:a38ff450723058f4d3ff03651a9454fd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether any component is NaN. <br /></td></tr>
<tr class="separator:a38ff450723058f4d3ff03651a9454fd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab123a28f131b1c55564be6d1c8e5ccba"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#ab123a28f131b1c55564be6d1c8e5ccba">IsEqualRotation</a> (const <a class="el" href="../../de/d15/classez_quat_template.htm">ezQuatTemplate</a> &amp;qOther, float fEpsilon) const</td></tr>
<tr class="memdesc:ab123a28f131b1c55564be6d1c8e5ccba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines whether <em>this</em> and <em>qOther</em> represent the same rotation. This is a rather slow operation.  <a href="../../de/d15/classez_quat_template.htm#ab123a28f131b1c55564be6d1c8e5ccba">More...</a><br /></td></tr>
<tr class="separator:ab123a28f131b1c55564be6d1c8e5ccba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98b8e210d068262a107dea592b8b2676"><td class="memItemLeft" align="right" valign="top"><a id="a98b8e210d068262a107dea592b8b2676"></a>
const <a class="el" href="../../de/d15/classez_quat_template.htm">ezQuatTemplate</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#a98b8e210d068262a107dea592b8b2676">operator-</a> () const</td></tr>
<tr class="memdesc:a98b8e210d068262a107dea592b8b2676"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a Quaternion that represents the negative / inverted rotation. <br /></td></tr>
<tr class="separator:a98b8e210d068262a107dea592b8b2676"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af88ebc7b874c59247f8373809dbc3660"><td class="memItemLeft" align="right" valign="top"><a id="af88ebc7b874c59247f8373809dbc3660"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#af88ebc7b874c59247f8373809dbc3660">Dot</a> (const <a class="el" href="../../de/d15/classez_quat_template.htm">ezQuatTemplate</a> &amp;rhs) const</td></tr>
<tr class="memdesc:af88ebc7b874c59247f8373809dbc3660"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the dot-product of the two quaternions (commutative, order does not matter). <br /></td></tr>
<tr class="separator:af88ebc7b874c59247f8373809dbc3660"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ef43d275286d8cc7aacde969310ec42"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#a5ef43d275286d8cc7aacde969310ec42">GetAsEulerAngles</a> (<a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;out_x, <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;out_y, <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;out_z) const</td></tr>
<tr class="memdesc:a5ef43d275286d8cc7aacde969310ec42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts the quaternion to Euler angles.  <a href="../../de/d15/classez_quat_template.htm#a5ef43d275286d8cc7aacde969310ec42">More...</a><br /></td></tr>
<tr class="separator:a5ef43d275286d8cc7aacde969310ec42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec6aed93014f09a7162808111f9872c0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#aec6aed93014f09a7162808111f9872c0">SetFromEulerAngles</a> (const <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;x, const <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;y, const <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;z)</td></tr>
<tr class="memdesc:aec6aed93014f09a7162808111f9872c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the quaternion from Euler angles.  <a href="../../de/d15/classez_quat_template.htm#aec6aed93014f09a7162808111f9872c0">More...</a><br /></td></tr>
<tr class="separator:aec6aed93014f09a7162808111f9872c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a694d84e2c4804573efcf5ae8623dc4c3"><td class="memItemLeft" align="right" valign="top"><a id="a694d84e2c4804573efcf5ae8623dc4c3"></a>
static const <a class="el" href="../../de/d15/classez_quat_template.htm">ezQuatTemplate</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d15/classez_quat_template.htm#a694d84e2c4804573efcf5ae8623dc4c3">IdentityQuaternion</a> ()</td></tr>
<tr class="memdesc:a694d84e2c4804573efcf5ae8623dc4c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Static function that returns a quaternion that represents the identity rotation (none). <br /></td></tr>
<tr class="separator:a694d84e2c4804573efcf5ae8623dc4c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:af2f9135a0ff723e1a384127c2d16efa4"><td class="memItemLeft" align="right" valign="top"><a id="af2f9135a0ff723e1a384127c2d16efa4"></a>
<a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>v</b></td></tr>
<tr class="separator:af2f9135a0ff723e1a384127c2d16efa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad491cb57114348356e44862314fde590"><td class="memItemLeft" align="right" valign="top"><a id="ad491cb57114348356e44862314fde590"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>w</b></td></tr>
<tr class="separator:ad491cb57114348356e44862314fde590"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename Type&gt;<br />
class ezQuatTemplate&lt; Type &gt;</h3>

<p>Quaternions can be used to represent rotations in 3D space. </p>
<p>Quaternions are useful to represent 3D rotations, as they are smaller and more efficient than matrices and can be concatenated easily, without having the 'Gimbal Lock' problem of Euler Angles. Either use a full blown transformation (e.g. a 4x4 matrix) to represent a object, or use a Quaternion bundled with a position vector, if (non-uniform) scale is not required. Quaternions can also easily be interpolated (via Slerp). This implementation also allows to convert back and forth between Quaternions and Matrices easily.</p>
<p>Quaternions have no 'IsIdentical' or 'IsEqual' function, as there can be different representations for the same rotation, and it is rather difficult to check this. So to not convey any false notion of being equal (or rather unequal), those functions are not provided. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a5ef43d275286d8cc7aacde969310ec42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ef43d275286d8cc7aacde969310ec42">&#9670;&nbsp;</a></span>GetAsEulerAngles()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d15/classez_quat_template.htm">ezQuatTemplate</a>&lt; Type &gt;::GetAsEulerAngles </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;&#160;</td>
          <td class="paramname"><em>out_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;&#160;</td>
          <td class="paramname"><em>out_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;&#160;</td>
          <td class="paramname"><em>out_z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts the quaternion to Euler angles. </p>
<dl class="test"><dt><b><a class="el" href="../../d4/df6/test.htm#_test000021">Test:</a></b></dt><dd>This is new </dd></dl>
<p>Taken from here (roll-&gt;pitch-&gt;yaw, x-&gt;y-&gt;z order): <a href="https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles">https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles</a></p>

</div>
</div>
<a id="ab123a28f131b1c55564be6d1c8e5ccba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab123a28f131b1c55564be6d1c8e5ccba">&#9670;&nbsp;</a></span>IsEqualRotation()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../de/d15/classez_quat_template.htm">ezQuatTemplate</a>&lt; Type &gt;::IsEqualRotation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d15/classez_quat_template.htm">ezQuatTemplate</a>&lt; Type &gt; &amp;&#160;</td>
          <td class="paramname"><em>qOther</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fEpsilon</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determines whether <em>this</em> and <em>qOther</em> represent the same rotation. This is a rather slow operation. </p>
<p>Currently it fails when one of the given quaternions is identity (so no rotation, at all), as it tries to compare rotation axis' and angles, which is undefined for the identity quaternion (also there are infinite representations for 'identity', so it's difficult to check for it). </p>

</div>
</div>
<a id="aa09ee1dac045f013c5edb97589002c44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa09ee1dac045f013c5edb97589002c44">&#9670;&nbsp;</a></span>SetElements()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">EZ_ALWAYS_INLINE void <a class="el" href="../../de/d15/classez_quat_template.htm">ezQuatTemplate</a>&lt; Type &gt;::SetElements </td>
          <td>(</td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>Y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>Z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>W</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the individual elements of the quaternion directly. Note that x,y,z do NOT represent a rotation axis, and w does NOT represent an angle. </p>
<p>Use this function only if you have good understanding of quaternion math and know exactly what you are doing. </p>

</div>
</div>
<a id="aec6aed93014f09a7162808111f9872c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec6aed93014f09a7162808111f9872c0">&#9670;&nbsp;</a></span>SetFromEulerAngles()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d15/classez_quat_template.htm">ezQuatTemplate</a>&lt; Type &gt;::SetFromEulerAngles </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the quaternion from Euler angles. </p>
<dl class="test"><dt><b><a class="el" href="../../d4/df6/test.htm#_test000022">Test:</a></b></dt><dd>This is new </dd></dl>
<p>Taken from here (roll-&gt;pitch-&gt;yaw, x-&gt;y-&gt;z order): <a href="https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles">https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles</a></p>

</div>
</div>
<a id="a10aebc74018c75e0bc56644553ebd308"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10aebc74018c75e0bc56644553ebd308">&#9670;&nbsp;</a></span>SetShortestRotation()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d15/classez_quat_template.htm">ezQuatTemplate</a>&lt; Type &gt;::SetShortestRotation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;&#160;</td>
          <td class="paramname"><em>vDirFrom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;&#160;</td>
          <td class="paramname"><em>vDirTo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a quaternion, that rotates through the shortest arc from "vDirFrom" to "vDirTo". </p>
<dl class="section note"><dt>Note</dt><dd>This function will ALWAYS return a quaternion that rotates from one direction to another. If both directions are identical, it is the unit rotation (none). If they are exactly opposing, this will be ANY 180.0 degree rotation. That means the vectors will align perfectly, but there is no determine rotation for other points that might be rotated with this quaternion. If a main / fallback axis is needed to rotate points, you need to calculate such a rotation with other means. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/<a class="el" href="../../d4/dbc/_engine_2_foundation_2_math_2_declarations_8h_source.htm">Declarations.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/<a class="el" href="../../dd/dbf/_quat_8h_source.htm">Quat.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/Implementation/<a class="el" href="../../de/d9b/_quat__inl_8h_source.htm">Quat_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../de/d15/classez_quat_template.htm">ezQuatTemplate</a></li>
    <li class="footer">Generated on Tue Jun 8 2021 21:43:21 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
