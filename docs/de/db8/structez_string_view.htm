<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezStringView Struct Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.10</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('de/db8/structez_string_view.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../d8/d26/structez_string_view-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezStringView Struct Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="../../de/db8/structez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> represent a read-only sub-string of a larger string, as it can store a dedicated string end position. It derives from <a class="el" href="../../dd/d69/structez_string_base.htm" title="Base class for strings, which implements all read-only string functions.">ezStringBase</a> and thus provides a large set of functions for search and comparisons.  
 <a href="../../de/db8/structez_string_view.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d0/d79/_string_view_8h_source.htm">StringView.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ezStringView:</div>
<div class="dyncontent">
<div class="center"><img src="../../d7/d1f/structez_string_view__inherit__graph.png" border="0" usemap="#ez_string_view_inherit__map" alt="Inheritance graph"/></div>
<map name="ez_string_view_inherit__map" id="ez_string_view_inherit__map">
<area shape="rect" title="ezStringView represent a read&#45;only sub&#45;string of a larger string, as it can store a dedicated string ..." alt="" coords="63,155,170,181"/>
<area shape="rect" href="../../dd/d69/structez_string_base.htm" title=" " alt="" coords="5,80,228,107"/>
<area shape="rect" href="../../d8/d9a/structez_this_is_a_string.htm" title="Base class which marks a class as containing string data." alt="" coords="55,5,178,32"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:abeb9837191529a70b91c010b5a24de6a"><td class="memItemLeft" align="right" valign="top"><a id="abeb9837191529a70b91c010b5a24de6a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>EZ_DECLARE_POD_TYPE</b> ()</td></tr>
<tr class="separator:abeb9837191529a70b91c010b5a24de6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a677ac84b49a06e180d321edcb02041ce"><td class="memItemLeft" align="right" valign="top"><a id="a677ac84b49a06e180d321edcb02041ce"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#a677ac84b49a06e180d321edcb02041ce">ezStringView</a> ()</td></tr>
<tr class="memdesc:a677ac84b49a06e180d321edcb02041ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor creates an invalid view. <br /></td></tr>
<tr class="separator:a677ac84b49a06e180d321edcb02041ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45e0fdfba40d560ed53e6e88dbd20723"><td class="memItemLeft" align="right" valign="top"><a id="a45e0fdfba40d560ed53e6e88dbd20723"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#a45e0fdfba40d560ed53e6e88dbd20723">ezStringView</a> (const char *pStart)</td></tr>
<tr class="memdesc:a45e0fdfba40d560ed53e6e88dbd20723"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a string view starting at the given position, ending at the next '\0' terminator. <br /></td></tr>
<tr class="separator:a45e0fdfba40d560ed53e6e88dbd20723"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab913c025db373805a2f65af163f2583b"><td class="memItemLeft" align="right" valign="top"><a id="ab913c025db373805a2f65af163f2583b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#ab913c025db373805a2f65af163f2583b">ezStringView</a> (const char *pStart, const char *pEnd)</td></tr>
<tr class="memdesc:ab913c025db373805a2f65af163f2583b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a string view for the range from pStart to pEnd. <br /></td></tr>
<tr class="separator:ab913c025db373805a2f65af163f2583b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4405263cb2e2a4596dc3948a44c81ec1"><td class="memItemLeft" align="right" valign="top"><a id="a4405263cb2e2a4596dc3948a44c81ec1"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#a4405263cb2e2a4596dc3948a44c81ec1">ezStringView</a> (const char *pStart, ezUInt32 uiLength)</td></tr>
<tr class="memdesc:a4405263cb2e2a4596dc3948a44c81ec1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a string view for the range from pStart to pStart + uiLength. <br /></td></tr>
<tr class="separator:a4405263cb2e2a4596dc3948a44c81ec1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ea95748db7896f83f8ad99860dd986c"><td class="memItemLeft" align="right" valign="top"><a id="a4ea95748db7896f83f8ad99860dd986c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#a4ea95748db7896f83f8ad99860dd986c">operator++</a> ()</td></tr>
<tr class="memdesc:a4ea95748db7896f83f8ad99860dd986c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Advances the start to the next character, unless the end of the range was reached. <br /></td></tr>
<tr class="separator:a4ea95748db7896f83f8ad99860dd986c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50e2a948b2ed8ff6a5f05599852d9454"><td class="memItemLeft" align="right" valign="top"><a id="a50e2a948b2ed8ff6a5f05599852d9454"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#a50e2a948b2ed8ff6a5f05599852d9454">operator+=</a> (ezUInt32 d)</td></tr>
<tr class="memdesc:a50e2a948b2ed8ff6a5f05599852d9454"><td class="mdescLeft">&#160;</td><td class="mdescRight">Advances the start forwards by d characters. Does not move it beyond the range's end. <br /></td></tr>
<tr class="separator:a50e2a948b2ed8ff6a5f05599852d9454"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56365c94c853c55e07a49e049b4d1ba8"><td class="memItemLeft" align="right" valign="top"><a id="a56365c94c853c55e07a49e049b4d1ba8"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#a56365c94c853c55e07a49e049b4d1ba8">GetCharacter</a> () const</td></tr>
<tr class="memdesc:a56365c94c853c55e07a49e049b4d1ba8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the first pointed to character in Utf32 encoding. <br /></td></tr>
<tr class="separator:a56365c94c853c55e07a49e049b4d1ba8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a229967c24149c20817c4fc4d71266070"><td class="memItemLeft" align="right" valign="top"><a id="a229967c24149c20817c4fc4d71266070"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#a229967c24149c20817c4fc4d71266070">IsValid</a> () const</td></tr>
<tr class="memdesc:a229967c24149c20817c4fc4d71266070"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the current string pointed to is non empty. <br /></td></tr>
<tr class="separator:a229967c24149c20817c4fc4d71266070"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8de556198840e104c061d76f101b5c9b"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#a8de556198840e104c061d76f101b5c9b">GetData</a> (<a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;tempStorage) const</td></tr>
<tr class="memdesc:a8de556198840e104c061d76f101b5c9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the data as a zero-terminated string.  <a href="../../de/db8/structez_string_view.htm#a8de556198840e104c061d76f101b5c9b">More...</a><br /></td></tr>
<tr class="separator:a8de556198840e104c061d76f101b5c9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64dec920b26c9df50ea139826fcdd448"><td class="memItemLeft" align="right" valign="top">ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#a64dec920b26c9df50ea139826fcdd448">GetElementCount</a> () const</td></tr>
<tr class="memdesc:a64dec920b26c9df50ea139826fcdd448"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bytes from the start position up to its end.  <a href="../../de/db8/structez_string_view.htm#a64dec920b26c9df50ea139826fcdd448">More...</a><br /></td></tr>
<tr class="separator:a64dec920b26c9df50ea139826fcdd448"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba38eaa9985560b12475a70aa23c1d1f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#aba38eaa9985560b12475a70aa23c1d1f">SetStartPosition</a> (const char *szCurPos)</td></tr>
<tr class="memdesc:aba38eaa9985560b12475a70aa23c1d1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows to set the start position to a different value.  <a href="../../de/db8/structez_string_view.htm#aba38eaa9985560b12475a70aa23c1d1f">More...</a><br /></td></tr>
<tr class="separator:aba38eaa9985560b12475a70aa23c1d1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e6ab4aebc721857871d822321935d5f"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">GetStartPointer</a> () const</td></tr>
<tr class="memdesc:a7e6ab4aebc721857871d822321935d5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the start of the view range.  <a href="../../de/db8/structez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">More...</a><br /></td></tr>
<tr class="separator:a7e6ab4aebc721857871d822321935d5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb4fee979aa7e71f8c3596fb342ad2bc"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#aeb4fee979aa7e71f8c3596fb342ad2bc">GetEndPointer</a> () const</td></tr>
<tr class="memdesc:aeb4fee979aa7e71f8c3596fb342ad2bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the end of the view range. This will point to the byte AFTER the last character.  <a href="../../de/db8/structez_string_view.htm#aeb4fee979aa7e71f8c3596fb342ad2bc">More...</a><br /></td></tr>
<tr class="separator:aeb4fee979aa7e71f8c3596fb342ad2bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a933d2087706e4613336f3456276ebe89"><td class="memItemLeft" align="right" valign="top"><a id="a933d2087706e4613336f3456276ebe89"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#a933d2087706e4613336f3456276ebe89">IsEqual</a> (const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;sOther) const</td></tr>
<tr class="memdesc:a933d2087706e4613336f3456276ebe89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string view with the other string view for equality. <br /></td></tr>
<tr class="separator:a933d2087706e4613336f3456276ebe89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a784a31b56ea73297e213cbc6aa3366d8"><td class="memItemLeft" align="right" valign="top"><a id="a784a31b56ea73297e213cbc6aa3366d8"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#a784a31b56ea73297e213cbc6aa3366d8">IsEqual_NoCase</a> (const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;sOther) const</td></tr>
<tr class="memdesc:a784a31b56ea73297e213cbc6aa3366d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string view with the other string view for equality. <br /></td></tr>
<tr class="separator:a784a31b56ea73297e213cbc6aa3366d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb5e824fec6501db1871b2ed9fbf5981"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#abb5e824fec6501db1871b2ed9fbf5981">Shrink</a> (ezUInt32 uiShrinkCharsFront, ezUInt32 uiShrinkCharsBack)</td></tr>
<tr class="memdesc:abb5e824fec6501db1871b2ed9fbf5981"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shrinks the view range by uiShrinkCharsFront characters at the front and by uiShrinkCharsBack characters at the back.  <a href="../../de/db8/structez_string_view.htm#abb5e824fec6501db1871b2ed9fbf5981">More...</a><br /></td></tr>
<tr class="separator:abb5e824fec6501db1871b2ed9fbf5981"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9402e15ad2fca94ded27aae868b77a0"><td class="memItemLeft" align="right" valign="top"><a id="af9402e15ad2fca94ded27aae868b77a0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#af9402e15ad2fca94ded27aae868b77a0">Trim</a> (const char *szTrimChars)</td></tr>
<tr class="memdesc:af9402e15ad2fca94ded27aae868b77a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the start and end that appear in the given strings by adjusting the begin and end of the view. <br /></td></tr>
<tr class="separator:af9402e15ad2fca94ded27aae868b77a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a333b84cbf69244eb6d702983b487b630"><td class="memItemLeft" align="right" valign="top"><a id="a333b84cbf69244eb6d702983b487b630"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/db8/structez_string_view.htm#a333b84cbf69244eb6d702983b487b630">Trim</a> (const char *szTrimCharsStart, const char *szTrimCharsEnd)</td></tr>
<tr class="memdesc:a333b84cbf69244eb6d702983b487b630"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the start and/or end that appear in the given strings by adjusting the begin and end of the view. <br /></td></tr>
<tr class="separator:a333b84cbf69244eb6d702983b487b630"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_structez_string_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_structez_string_base')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt; ezStringView &gt;</a></td></tr>
<tr class="memitem:a3b169646f62ef8a8d33b63e2b8731afb inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a3b169646f62ef8a8d33b63e2b8731afb"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a3b169646f62ef8a8d33b63e2b8731afb">IsEmpty</a> () const</td></tr>
<tr class="memdesc:a3b169646f62ef8a8d33b63e2b8731afb inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the string is an empty string. <br /></td></tr>
<tr class="separator:a3b169646f62ef8a8d33b63e2b8731afb inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40370a42191c470e969d0693385db3f3 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a40370a42191c470e969d0693385db3f3"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a40370a42191c470e969d0693385db3f3">StartsWith</a> (const char *szStartsWith) const</td></tr>
<tr class="memdesc:a40370a42191c470e969d0693385db3f3 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. <br /></td></tr>
<tr class="separator:a40370a42191c470e969d0693385db3f3 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb6973bde9b2b2b6773b69035c97e8ba inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="acb6973bde9b2b2b6773b69035c97e8ba"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#acb6973bde9b2b2b6773b69035c97e8ba">StartsWith_NoCase</a> (const char *szStartsWith) const</td></tr>
<tr class="memdesc:acb6973bde9b2b2b6773b69035c97e8ba inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:acb6973bde9b2b2b6773b69035c97e8ba inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb83fb2fc2655dfdfea37ef6ae13ef30 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="afb83fb2fc2655dfdfea37ef6ae13ef30"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#afb83fb2fc2655dfdfea37ef6ae13ef30">EndsWith</a> (const char *szEndsWith) const</td></tr>
<tr class="memdesc:afb83fb2fc2655dfdfea37ef6ae13ef30 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. <br /></td></tr>
<tr class="separator:afb83fb2fc2655dfdfea37ef6ae13ef30 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d4ac2126f45dcb7c567dee949cc68ab inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a1d4ac2126f45dcb7c567dee949cc68ab"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a1d4ac2126f45dcb7c567dee949cc68ab">EndsWith_NoCase</a> (const char *szEndsWith) const</td></tr>
<tr class="memdesc:a1d4ac2126f45dcb7c567dee949cc68ab inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:a1d4ac2126f45dcb7c567dee949cc68ab inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af672ce6437cd3c9d17b3267cfa834b48 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#af672ce6437cd3c9d17b3267cfa834b48">FindSubString</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:af672ce6437cd3c9d17b3267cfa834b48 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a139af1709f27a801b784a3f4bd2c12ed inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a139af1709f27a801b784a3f4bd2c12ed">FindSubString_NoCase</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a139af1709f27a801b784a3f4bd2c12ed inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44351ea491df5b7db1095dde6e6299c5 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a44351ea491df5b7db1095dde6e6299c5">FindLastSubString</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a44351ea491df5b7db1095dde6e6299c5 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c0563a267bee66f3a1f76cf08af153f inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a0c0563a267bee66f3a1f76cf08af153f">FindLastSubString_NoCase</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a0c0563a267bee66f3a1f76cf08af153f inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7990e9f9c36231cd41af33a25f96dbc6 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a7990e9f9c36231cd41af33a25f96dbc6">FindWholeWord</a> (const char *szSearchFor, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> IsDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a7990e9f9c36231cd41af33a25f96dbc6 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a696c890e2e534cfc0af94091f0f0a5f6 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a696c890e2e534cfc0af94091f0f0a5f6">FindWholeWord_NoCase</a> (const char *szSearchFor, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> IsDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a696c890e2e534cfc0af94091f0f0a5f6 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8db4d1eaa1ad5ad01395f3d08eb1a0c2 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a8db4d1eaa1ad5ad01395f3d08eb1a0c2"></a>
ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">Compare</a> (const char *pString2) const</td></tr>
<tr class="memdesc:a8db4d1eaa1ad5ad01395f3d08eb1a0c2 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. <br /></td></tr>
<tr class="separator:a8db4d1eaa1ad5ad01395f3d08eb1a0c2 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fcc6b07403fe714f7823f06e51ed419 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a5fcc6b07403fe714f7823f06e51ed419">CompareN</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:a5fcc6b07403fe714f7823f06e51ed419 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48e98ad28e9cc6c0a3d436b802149443 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a48e98ad28e9cc6c0a3d436b802149443"></a>
ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a48e98ad28e9cc6c0a3d436b802149443">Compare_NoCase</a> (const char *pString2) const</td></tr>
<tr class="memdesc:a48e98ad28e9cc6c0a3d436b802149443 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. Case insensitive. <br /></td></tr>
<tr class="separator:a48e98ad28e9cc6c0a3d436b802149443 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af924cf1e0bc6a35338229a7e9ad505a8 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#af924cf1e0bc6a35338229a7e9ad505a8">CompareN_NoCase</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:af924cf1e0bc6a35338229a7e9ad505a8 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6517806293ce84badc8da6c5d01c67cf inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a6517806293ce84badc8da6c5d01c67cf"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">IsEqual</a> (const char *pString2) const</td></tr>
<tr class="memdesc:a6517806293ce84badc8da6c5d01c67cf inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:a6517806293ce84badc8da6c5d01c67cf inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77bcaa8c3cc64c21d1311e45033ffae3 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a77bcaa8c3cc64c21d1311e45033ffae3"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a77bcaa8c3cc64c21d1311e45033ffae3">IsEqualN</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:a77bcaa8c3cc64c21d1311e45033ffae3 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:a77bcaa8c3cc64c21d1311e45033ffae3 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba99a929eb858f565e1fa332b6b03723 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="aba99a929eb858f565e1fa332b6b03723"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#aba99a929eb858f565e1fa332b6b03723">IsEqual_NoCase</a> (const char *pString2) const</td></tr>
<tr class="memdesc:aba99a929eb858f565e1fa332b6b03723 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:aba99a929eb858f565e1fa332b6b03723 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada89e0455b0a9bc13e76af36abb3cf8b inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ada89e0455b0a9bc13e76af36abb3cf8b"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#ada89e0455b0a9bc13e76af36abb3cf8b">IsEqualN_NoCase</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:ada89e0455b0a9bc13e76af36abb3cf8b inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:ada89e0455b0a9bc13e76af36abb3cf8b inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05bec3cf5581b35aa18849239b2471c6 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a05bec3cf5581b35aa18849239b2471c6"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a05bec3cf5581b35aa18849239b2471c6">ComputeCharacterPosition</a> (ezUInt32 uiCharacterIndex) const</td></tr>
<tr class="memdesc:a05bec3cf5581b35aa18849239b2471c6 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the pointer to the n-th character in the string. This is a linear search from the start. <br /></td></tr>
<tr class="separator:a05bec3cf5581b35aa18849239b2471c6 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a630aa4b168172aef7b32f8085148ed8e inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/ddc/structez_string_iterator.htm">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">GetIteratorFront</a> () const</td></tr>
<tr class="memdesc:a630aa4b168172aef7b32f8085148ed8e inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very first character.  <a href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">More...</a><br /></td></tr>
<tr class="separator:a630aa4b168172aef7b32f8085148ed8e inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3821af6b610f6c40a46336f7accc0c7e inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">GetIteratorBack</a> () const</td></tr>
<tr class="memdesc:a3821af6b610f6c40a46336f7accc0c7e inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very last character (NOT the end).  <a href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">More...</a><br /></td></tr>
<tr class="separator:a3821af6b610f6c40a46336f7accc0c7e inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a9fb50765a4cb9b23b3e6e7e9c374a20e"><td class="memItemLeft" align="right" valign="top"><a id="a9fb50765a4cb9b23b3e6e7e9c374a20e"></a>
struct&#160;</td><td class="memItemRight" valign="bottom"><b>ezStringBase&lt; ezStringView &gt;</b></td></tr>
<tr class="separator:a9fb50765a4cb9b23b3e6e7e9c374a20e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_structez_string_base"><td colspan="2" onclick="javascript:toggleInherit('pub_types_structez_string_base')"><img src="../../closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt; ezStringView &gt;</a></td></tr>
<tr class="memitem:ab65f80cd73057c1f83921afc74200c9f inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ab65f80cd73057c1f83921afc74200c9f"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>iterator</b> = <a class="el" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&lt; <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &gt;</td></tr>
<tr class="separator:ab65f80cd73057c1f83921afc74200c9f inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade6d14a20fb3d7e2074f3b0563146b8e inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ade6d14a20fb3d7e2074f3b0563146b8e"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_iterator</b> = <a class="el" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&lt; <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &gt;</td></tr>
<tr class="separator:ade6d14a20fb3d7e2074f3b0563146b8e inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae164cffae6bebd68154732c2d72d313c inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ae164cffae6bebd68154732c2d72d313c"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>reverse_iterator</b> = <a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&lt; <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &gt;</td></tr>
<tr class="separator:ae164cffae6bebd68154732c2d72d313c inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad740ab8e9cfc9269d50f6da3c532e779 inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ad740ab8e9cfc9269d50f6da3c532e779"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_reverse_iterator</b> = <a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&lt; <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &gt;</td></tr>
<tr class="separator:ad740ab8e9cfc9269d50f6da3c532e779 inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="../../de/db8/structez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> represent a read-only sub-string of a larger string, as it can store a dedicated string end position. It derives from <a class="el" href="../../dd/d69/structez_string_base.htm" title="Base class for strings, which implements all read-only string functions.">ezStringBase</a> and thus provides a large set of functions for search and comparisons. </p>
<p>Attention: <a class="el" href="../../de/db8/structez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> does not store string data itself. It only stores pointers into memory. For example, when you get an <a class="el" href="../../de/db8/structez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> to an <a class="el" href="../../d3/d88/classez_string_builder.htm" title="ezStringBuilder is a class that is meant for creating and modifying strings.">ezStringBuilder</a>, the <a class="el" href="../../de/db8/structez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> instance will point to the exact same memory, enabling you to iterate over it (read-only). That means that an <a class="el" href="../../de/db8/structez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> is only valid as long as its source data is not modified. Once you make any kind of modification to the source data, you should not continue using the <a class="el" href="../../de/db8/structez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> to that data anymore, as it might now point into invalid memory. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a8de556198840e104c061d76f101b5c9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8de556198840e104c061d76f101b5c9b">&#9670;&nbsp;</a></span>GetData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * ezStringView::GetData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;&#160;</td>
          <td class="paramname"><em>tempStorage</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the data as a zero-terminated string. </p>
<p>The string will be copied to <em>tempStorage</em> and the pointer to that is returned. If you really need the raw pointer to the <a class="el" href="../../de/db8/structez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> memory or are absolutely certain that the view points to a zero-terminated string, you can use </p>

</div>
</div>
<a id="a64dec920b26c9df50ea139826fcdd448"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64dec920b26c9df50ea139826fcdd448">&#9670;&nbsp;</a></span>GetElementCount()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezStringView::GetElementCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of bytes from the start position up to its end. </p>
<dl class="section note"><dt>Note</dt><dd>Note that the element count (bytes) may be larger than the number of characters in that string, due to Utf8 encoding. </dd></dl>

</div>
</div>
<a id="aeb4fee979aa7e71f8c3596fb342ad2bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb4fee979aa7e71f8c3596fb342ad2bc">&#9670;&nbsp;</a></span>GetEndPointer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* ezStringView::GetEndPointer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the end of the view range. This will point to the byte AFTER the last character. </p>
<p>That means it might point to the '\0' terminator, UNLESS the view only represents a sub-string of a larger string. Accessing the value at 'GetEnd' has therefore no real use. </p>

</div>
</div>
<a id="a7e6ab4aebc721857871d822321935d5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e6ab4aebc721857871d822321935d5f">&#9670;&nbsp;</a></span>GetStartPointer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* ezStringView::GetStartPointer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the start of the view range. </p>
<dl class="section note"><dt>Note</dt><dd>Be careful to not use this and assume the view will be zero-terminated. Use GetData(ezStringBuilder&amp;) instead to be safe. </dd></dl>

</div>
</div>
<a id="aba38eaa9985560b12475a70aa23c1d1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba38eaa9985560b12475a70aa23c1d1f">&#9670;&nbsp;</a></span>SetStartPosition()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringView::SetStartPosition </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szCurPos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allows to set the start position to a different value. </p>
<p>Must be between the current start and end range. </p>

</div>
</div>
<a id="abb5e824fec6501db1871b2ed9fbf5981"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb5e824fec6501db1871b2ed9fbf5981">&#9670;&nbsp;</a></span>Shrink()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringView::Shrink </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiShrinkCharsFront</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiShrinkCharsBack</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Shrinks the view range by uiShrinkCharsFront characters at the front and by uiShrinkCharsBack characters at the back. </p>
<p>Thus reduces the range of the view to a smaller sub-string. The current position is clamped to the new start of the range. The new end position is clamped to the new start of the range. If more characters are removed from the range, than it actually contains, the view range will become 'empty' and its state will be set to invalid, however no error or assert will be triggered. </p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/<a class="el" href="../../d0/d79/_string_view_8h_source.htm">StringView.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/StringView.cpp</li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../d8/d9e/_string_view__inl_8h_source.htm">StringView_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a></li>
    <li class="footer">Generated on Mon Oct 18 2021 15:33:41 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
