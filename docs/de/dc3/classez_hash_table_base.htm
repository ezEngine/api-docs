<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezHashTableBase&lt; KeyType, ValueType, Hasher &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('de/dc3/classez_hash_table_base.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../d9/d12/classez_hash_table_base-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">ezHashTableBase&lt; KeyType, ValueType, Hasher &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Implementation of a hashtable which stores key/value pairs.  
 <a href="../../de/dc3/classez_hash_table_base.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../de/def/_hash_table_8h_source.htm">HashTable.h</a>&gt;</code></p>

<p>Inherited by <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, ezSubAsset &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezStringView, ezActionDescriptorHandle &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHybridString, ezSharedPtr&lt; ezAnimGraphSharedBoneWeights &gt; &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezAnimController::AnimClipInfo &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezArchiveStoredString, ezUInt32 &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, ezAssetInfo * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, ezEditorEngineSyncObject * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt64, ezGALBindGroupItem &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezBlackboard::Entry &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezSharedPtr&lt; ezBlackboard &gt; &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezInt32 &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, float &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezHybridString &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, bool &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezVariant, ezPropertyUiState &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt64, ezUInt32 &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const void *, ezUInt32 &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHybridString, DependencyListType &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; vk::DescriptorType, float &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, ezDocumentNodeManager::NodeInternal &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, ezUniquePtr&lt; ezConnection &gt; &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, const ezDocumentObject * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, ezAssetDocument * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, HandleType &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezRTTI *, ShapeIconInfo &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, ezEngineProcessDocumentContext * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ezSmallArray&lt; ezExpressionAST::Node *, 1 &gt; &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezExpressionAST::Node *, ezUInt32 &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezExpressionAST::Node *, ezExpressionAST::Node * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezUInt32 &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezExpressionAST::Node * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezHybridArray&lt; ezExpression::FunctionDesc, 1 &gt; &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ezFileserveClientContext &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezGALBufferDX11::View, ID3D11ShaderResourceView *, ezGALBufferDX11::View &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezGALBufferDX11::View, ID3D11UnorderedAccessView *, ezGALBufferDX11::View &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezGALBufferVulkan::View, vk::BufferView, ezGALBufferVulkan::View &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt64, vk::DescriptorSet &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ezGALShaderHandle, ezHashHelper&lt; ezUInt32 &gt;, ezLocalAllocatorWrapper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ezGALVertexDeclarationHandle, ezHashHelper&lt; ezUInt32 &gt;, ezLocalAllocatorWrapper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ezGALBlendStateHandle, ezHashHelper&lt; ezUInt32 &gt;, ezLocalAllocatorWrapper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ezGALDepthStencilStateHandle, ezHashHelper&lt; ezUInt32 &gt;, ezLocalAllocatorWrapper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ezGALRasterizerStateHandle, ezHashHelper&lt; ezUInt32 &gt;, ezLocalAllocatorWrapper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ezGALSamplerStateHandle, ezHashHelper&lt; ezUInt32 &gt;, ezLocalAllocatorWrapper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ezGALBindGroupLayoutHandle, ezHashHelper&lt; ezUInt32 &gt;, ezLocalAllocatorWrapper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ezGALPipelineLayoutHandle, ezHashHelper&lt; ezUInt32 &gt;, ezLocalAllocatorWrapper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ezGALGraphicsPipelineHandle, ezHashHelper&lt; ezUInt32 &gt;, ezLocalAllocatorWrapper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ezGALComputePipelineHandle, ezHashHelper&lt; ezUInt32 &gt;, ezLocalAllocatorWrapper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezGALSamplerStateCreationDescription &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; GraphicsPipelineCacheKey, ezGALGraphicsPipelineHandle, CacheKeyHasher &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ComputePipelineCacheKey, ezGALComputePipelineHandle, CacheKeyHasher &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; Key, ezGALTextureHandle, KeyHash &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezEnum&lt; ezGALShaderResourceType &gt;, ezGALBufferHandle, KeyHash &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ezGALRenderTargetViewHandle &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezGALTextureDX11::View, ID3D11ShaderResourceView *, ezGALTextureDX11::View &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezGALTextureDX11::View, ID3D11UnorderedAccessView *, ezGALTextureDX11::View &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezGALTextureVulkan::View, vk::DescriptorImageInfo, ezGALTextureVulkan::View &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezDocumentObject *, ezSimdTransform, ezHashHelper&lt; const ezDocumentObject * &gt;, ezAlignedAllocatorWrapper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezTypeVersionInfo &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezVersionKey, const ezGraphPatch *, ezGraphVersioningHash &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; void *, ezUInt32 &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHybridString, ezGALTextureHandle &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezGALShaderHandle, ezGALVertexDeclarationHandle &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezImageCopyVulkan::ImageViewCacheKey, vk::ImageView &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; vk::Image, ezImageCopyVulkan::ImageViewCacheValue &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezImageCopyVulkan::FramebufferCacheKey, vk::Framebuffer &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezShaderUtils::ezBuiltinShaderType, ezShaderUtils::ezBuiltinShader &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt64, ezGameObjectId, ezHashHelper&lt; ezUInt64 &gt;, ezLocalAllocatorWrapper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt64, ezHashedString, ezHashHelper&lt; ezUInt64 &gt;, ezLocalAllocatorWrapper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezTypelessResourceHandle, ezHybridArray &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; T, typename DataMap::Iterator &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezString, ezVariant &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezRTTI *, CreateObjectFunc &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; uint32_t, ExportedSharedPool &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezMeshResourceDescriptor::BoneData &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; KEY, VALUE &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; XrPath, ezHybridString &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezRTTI *, ezWorldModule * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezInt64, PathStateType &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezStringView, ezPhantomRTTI * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezDocumentObject *, ezUniquePtr&lt; ezProcGenNodeBase &gt; &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; DocObjAndOutput, ezExpressionAST::Node * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezVariant &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt64, ezProcPlacementComponent::OutputContext::TileIndexAndAge &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, float &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezPropertyReference, PropertyValue, PropertyKeyHash &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, ezHybridArray&lt; ezPropertyReference, 1 &gt; &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezRTTI *, ezQtDocumentTreeModelAdapter * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, FileOpData &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ClientData &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, ezUInt32 &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, QSharedPointer&lt; ezQtProxy &gt; &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt64, ResourceData &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHybridString, ezReflectedTypeStorageManager::ReflectedTypeStorageMapping::StorageInfo &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt32, ezRemoteMessageQueue &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezHashedString &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezRTTI *, ezUInt32 &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezRenderPipelinePassConnection *, ezUInt32 &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, const ezRenderPipelineNodePin * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezGALRenderPassDescriptor, vk::RenderPass, ResourceCacheHash &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; FramebufferKey, vk::Framebuffer, ResourceCacheHash &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezTempHashedString, ezResource * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezRTTI *, ezResourceManager::LoadedResources &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezTempHashedString, const ezRTTI * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezTempHashedString, ezHashedString &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezDelegate &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, ezRttiConverterObject &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const void *, ezUuid &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, LayerInfo &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezScriptWorldModule::FunctionContext, typename DataMap::Iterator &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezScriptInstance *, ezSmallArray&lt; ezScriptCoroutineHandle, 8 &gt; &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezComponentHandle, typename DataMap::Iterator &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; LightAndRefView, ezUInt32 &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt64, ezUInt32, CellKeyHashHelper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezTempHashedString, bool &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezTempHashedString, ezInt64 &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezTempHashedString, double &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezTempHashedString, ezVec3Template &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezTempHashedString, ezColor &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezTempHashedString, ezHybridString &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUInt64, ezRTTI *, ezHashHelper&lt; ezUInt64 &gt;, ezStaticsAllocatorWrapper &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezRTTI *, const ezVariantTypeInfo * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezDocumentObject *, ezVisualScriptCompiler::AstNode * &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezVisualScriptInstanceData &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezVariant, ezUInt32 &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezDocumentObject *, ezEnum&lt; ezVisualScriptDataType &gt; &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezVisualScriptPin *, ezEnum&lt; ezVisualScriptDataType &gt; &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezRTTI *, ezVisualScriptNodeRegistry::NodeDesc &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, Value &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezRTTI *, ezWorldModuleTypeId &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHybridString, ezHybridString &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, ezGameObjectHandle &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezUuid, ezComponentHandle &gt;</a>, <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; const ezRTTI *, Components &gt;</a>, and <a class="el" href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; KeyType, ValueType, Hasher, AllocatorWrapper &gt;</a>.</p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a6a3a2c748faa454bcf7d7484b19ab58c" id="r_a6a3a2c748faa454bcf7d7484b19ab58c"><td class="memItemLeft" align="right" valign="top"><a id="a6a3a2c748faa454bcf7d7484b19ab58c" name="a6a3a2c748faa454bcf7d7484b19ab58c"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>Iterator</b> = <a class="el" href="../../d1/d4a/structez_hash_table_base_iterator.htm">ezHashTableBaseIterator</a>&lt; KeyType, ValueType, Hasher &gt;</td></tr>
<tr class="separator:a6a3a2c748faa454bcf7d7484b19ab58c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7000671d7a65a01932fd1d190ed7a8db" id="r_a7000671d7a65a01932fd1d190ed7a8db"><td class="memItemLeft" align="right" valign="top"><a id="a7000671d7a65a01932fd1d190ed7a8db" name="a7000671d7a65a01932fd1d190ed7a8db"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ConstIterator</b> = <a class="el" href="../../d8/d3d/structez_hash_table_base_const_iterator.htm">ezHashTableBaseConstIterator</a>&lt; KeyType, ValueType, Hasher &gt;</td></tr>
<tr class="separator:a7000671d7a65a01932fd1d190ed7a8db"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5bb1ba7957473382cf2d62acb906cc73" id="r_a5bb1ba7957473382cf2d62acb906cc73"><td class="memItemLeft" align="right" valign="top"><a id="a5bb1ba7957473382cf2d62acb906cc73" name="a5bb1ba7957473382cf2d62acb906cc73"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="../../de/dc3/classez_hash_table_base.htm">ezHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a5bb1ba7957473382cf2d62acb906cc73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this table to another table. <br /></td></tr>
<tr class="separator:a5bb1ba7957473382cf2d62acb906cc73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada2e21a248dfd18a89c6202ec40ab420" id="r_ada2e21a248dfd18a89c6202ec40ab420"><td class="memItemLeft" align="right" valign="top"><a id="ada2e21a248dfd18a89c6202ec40ab420" name="ada2e21a248dfd18a89c6202ec40ab420"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>EZ_ADD_DEFAULT_OPERATOR_NOTEQUAL</b> (const <a class="el" href="../../de/dc3/classez_hash_table_base.htm">ezHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;)</td></tr>
<tr class="separator:ada2e21a248dfd18a89c6202ec40ab420"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4ed1fc8cb5a1d598d069cf7c1e04c87" id="r_ad4ed1fc8cb5a1d598d069cf7c1e04c87"><td class="memItemLeft" align="right" valign="top"><a id="ad4ed1fc8cb5a1d598d069cf7c1e04c87" name="ad4ed1fc8cb5a1d598d069cf7c1e04c87"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Reserve</b> (ezUInt32 uiCapacity)</td></tr>
<tr class="memdesc:ad4ed1fc8cb5a1d598d069cf7c1e04c87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Expands the hashtable by over-allocating the internal storage so that the load factor is lower or equal to 60% when inserting the given number of entries. <br /></td></tr>
<tr class="separator:ad4ed1fc8cb5a1d598d069cf7c1e04c87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0788dac0bf61b77ad5db32384f55df8c" id="r_a0788dac0bf61b77ad5db32384f55df8c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/dc3/classez_hash_table_base.htm#a0788dac0bf61b77ad5db32384f55df8c">Compact</a> ()</td></tr>
<tr class="memdesc:a0788dac0bf61b77ad5db32384f55df8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to compact the hashtable to avoid wasting memory.  <br /></td></tr>
<tr class="separator:a0788dac0bf61b77ad5db32384f55df8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a402cd17d004d929d9f777ca089bf8d8f" id="r_a402cd17d004d929d9f777ca089bf8d8f"><td class="memItemLeft" align="right" valign="top"><a id="a402cd17d004d929d9f777ca089bf8d8f" name="a402cd17d004d929d9f777ca089bf8d8f"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetCount</b> () const</td></tr>
<tr class="memdesc:a402cd17d004d929d9f777ca089bf8d8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of active entries in the table. <br /></td></tr>
<tr class="separator:a402cd17d004d929d9f777ca089bf8d8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a823374504d491ef2d9597503bf7e82ea" id="r_a823374504d491ef2d9597503bf7e82ea"><td class="memItemLeft" align="right" valign="top"><a id="a823374504d491ef2d9597503bf7e82ea" name="a823374504d491ef2d9597503bf7e82ea"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEmpty</b> () const</td></tr>
<tr class="memdesc:a823374504d491ef2d9597503bf7e82ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the hashtable does not contain any elements. <br /></td></tr>
<tr class="separator:a823374504d491ef2d9597503bf7e82ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af42ca8f8e469ae41fe6aa8a87f8a1ccc" id="r_af42ca8f8e469ae41fe6aa8a87f8a1ccc"><td class="memItemLeft" align="right" valign="top"><a id="af42ca8f8e469ae41fe6aa8a87f8a1ccc" name="af42ca8f8e469ae41fe6aa8a87f8a1ccc"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> ()</td></tr>
<tr class="memdesc:af42ca8f8e469ae41fe6aa8a87f8a1ccc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the table. <br /></td></tr>
<tr class="separator:af42ca8f8e469ae41fe6aa8a87f8a1ccc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a141738c1388ce3a9f1f2cff6cee512d2" id="r_a141738c1388ce3a9f1f2cff6cee512d2"><td class="memTemplParams" colspan="2">template&lt;typename CompatibleKeyType , typename CompatibleValueType &gt; </td></tr>
<tr class="memitem:a141738c1388ce3a9f1f2cff6cee512d2"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../de/dc3/classez_hash_table_base.htm#a141738c1388ce3a9f1f2cff6cee512d2">Insert</a> (CompatibleKeyType &amp;&amp;key, CompatibleValueType &amp;&amp;value, ValueType *out_pOldValue=nullptr)</td></tr>
<tr class="memdesc:a141738c1388ce3a9f1f2cff6cee512d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts the key value pair or replaces value if an entry with the given key already exists.  <br /></td></tr>
<tr class="separator:a141738c1388ce3a9f1f2cff6cee512d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcfd7b4b72075d6b69fdcebffb475952" id="r_afcfd7b4b72075d6b69fdcebffb475952"><td class="memTemplParams" colspan="2"><a id="afcfd7b4b72075d6b69fdcebffb475952" name="afcfd7b4b72075d6b69fdcebffb475952"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:afcfd7b4b72075d6b69fdcebffb475952"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Remove</b> (const CompatibleKeyType &amp;key, ValueType *out_pOldValue=nullptr)</td></tr>
<tr class="memdesc:afcfd7b4b72075d6b69fdcebffb475952"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the entry with the given key. Returns whether an entry was removed and optionally writes out the old value to out_oldValue. <br /></td></tr>
<tr class="separator:afcfd7b4b72075d6b69fdcebffb475952"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae35258aef5f3379948cf539e098942ce" id="r_ae35258aef5f3379948cf539e098942ce"><td class="memItemLeft" align="right" valign="top"><a id="ae35258aef5f3379948cf539e098942ce" name="ae35258aef5f3379948cf539e098942ce"></a>
<a class="el" href="../../d1/d4a/structez_hash_table_base_iterator.htm">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Remove</b> (const <a class="el" href="../../d1/d4a/structez_hash_table_base_iterator.htm">Iterator</a> &amp;pos)</td></tr>
<tr class="memdesc:ae35258aef5f3379948cf539e098942ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases the key/value pair at the given Iterator. Returns an iterator to the element after the given iterator. <br /></td></tr>
<tr class="separator:ae35258aef5f3379948cf539e098942ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fda3114c57949e02ac4a208a28cf8fb" id="r_a3fda3114c57949e02ac4a208a28cf8fb"><td class="memItemLeft" align="right" valign="top"><a id="a3fda3114c57949e02ac4a208a28cf8fb" name="a3fda3114c57949e02ac4a208a28cf8fb"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Remove</b> (const <a class="el" href="../../d8/d3d/structez_hash_table_base_const_iterator.htm">ConstIterator</a> &amp;pos)=delete</td></tr>
<tr class="memdesc:a3fda3114c57949e02ac4a208a28cf8fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cannot remove an element with just a <a class="el" href="../../d8/d3d/structez_hash_table_base_const_iterator.htm" title="Const iterator.">ezHashTableBaseConstIterator</a>. <br /></td></tr>
<tr class="separator:a3fda3114c57949e02ac4a208a28cf8fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c279d62f8e45eb196bd532f2f9c95a5" id="r_a6c279d62f8e45eb196bd532f2f9c95a5"><td class="memTemplParams" colspan="2"><a id="a6c279d62f8e45eb196bd532f2f9c95a5" name="a6c279d62f8e45eb196bd532f2f9c95a5"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a6c279d62f8e45eb196bd532f2f9c95a5"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, ValueType &amp;out_value) const</td></tr>
<tr class="memdesc:a6c279d62f8e45eb196bd532f2f9c95a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the corresponding value to out_value. <br /></td></tr>
<tr class="separator:a6c279d62f8e45eb196bd532f2f9c95a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdbed38ddbfa50a6accf540a50b04897" id="r_acdbed38ddbfa50a6accf540a50b04897"><td class="memTemplParams" colspan="2"><a id="acdbed38ddbfa50a6accf540a50b04897" name="acdbed38ddbfa50a6accf540a50b04897"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:acdbed38ddbfa50a6accf540a50b04897"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, const ValueType *&amp;out_pValue) const</td></tr>
<tr class="memdesc:acdbed38ddbfa50a6accf540a50b04897"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the pointer to the corresponding value to out_pValue. <br /></td></tr>
<tr class="separator:acdbed38ddbfa50a6accf540a50b04897"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00ed14b174388e51362d0c6dd777a7c5" id="r_a00ed14b174388e51362d0c6dd777a7c5"><td class="memTemplParams" colspan="2"><a id="a00ed14b174388e51362d0c6dd777a7c5" name="a00ed14b174388e51362d0c6dd777a7c5"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a00ed14b174388e51362d0c6dd777a7c5"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, ValueType *&amp;out_pValue) const</td></tr>
<tr class="memdesc:a00ed14b174388e51362d0c6dd777a7c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the pointer to the corresponding value to out_pValue. <br /></td></tr>
<tr class="separator:a00ed14b174388e51362d0c6dd777a7c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c2ec41f21459ef7916326b393e415ce" id="r_a9c2ec41f21459ef7916326b393e415ce"><td class="memTemplParams" colspan="2"><a id="a9c2ec41f21459ef7916326b393e415ce" name="a9c2ec41f21459ef7916326b393e415ce"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a9c2ec41f21459ef7916326b393e415ce"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d8/d3d/structez_hash_table_base_const_iterator.htm">ConstIterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Find</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:a9c2ec41f21459ef7916326b393e415ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for key, returns a <a class="el" href="../../d8/d3d/structez_hash_table_base_const_iterator.htm" title="Const iterator.">ezHashTableBaseConstIterator</a> to it or an invalid iterator, if no such key is found. O(1) operation. <br /></td></tr>
<tr class="separator:a9c2ec41f21459ef7916326b393e415ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0052fcc85ba429433e1b7ae0efab0a77" id="r_a0052fcc85ba429433e1b7ae0efab0a77"><td class="memTemplParams" colspan="2"><a id="a0052fcc85ba429433e1b7ae0efab0a77" name="a0052fcc85ba429433e1b7ae0efab0a77"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a0052fcc85ba429433e1b7ae0efab0a77"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d1/d4a/structez_hash_table_base_iterator.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Find</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:a0052fcc85ba429433e1b7ae0efab0a77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for key, returns an Iterator to it or an invalid iterator, if no such key is found. O(1) operation. <br /></td></tr>
<tr class="separator:a0052fcc85ba429433e1b7ae0efab0a77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2815a386448ab4093f6ff6dc8811736b" id="r_a2815a386448ab4093f6ff6dc8811736b"><td class="memTemplParams" colspan="2"><a id="a2815a386448ab4093f6ff6dc8811736b" name="a2815a386448ab4093f6ff6dc8811736b"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a2815a386448ab4093f6ff6dc8811736b"><td class="memTemplItemLeft" align="right" valign="top">const ValueType *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:a2815a386448ab4093f6ff6dc8811736b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr. <br /></td></tr>
<tr class="separator:a2815a386448ab4093f6ff6dc8811736b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc5094df36f3322df6b85bbfee9be4cc" id="r_acc5094df36f3322df6b85bbfee9be4cc"><td class="memTemplParams" colspan="2"><a id="acc5094df36f3322df6b85bbfee9be4cc" name="acc5094df36f3322df6b85bbfee9be4cc"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:acc5094df36f3322df6b85bbfee9be4cc"><td class="memTemplItemLeft" align="right" valign="top">ValueType *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:acc5094df36f3322df6b85bbfee9be4cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr. <br /></td></tr>
<tr class="separator:acc5094df36f3322df6b85bbfee9be4cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07c3ec86a1a50a72c40b915df458c486" id="r_a07c3ec86a1a50a72c40b915df458c486"><td class="memItemLeft" align="right" valign="top"><a id="a07c3ec86a1a50a72c40b915df458c486" name="a07c3ec86a1a50a72c40b915df458c486"></a>
ValueType &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator[]</b> (const KeyType &amp;key)</td></tr>
<tr class="memdesc:a07c3ec86a1a50a72c40b915df458c486"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value to the given key if found or creates a new entry with the given key and a default constructed value. <br /></td></tr>
<tr class="separator:a07c3ec86a1a50a72c40b915df458c486"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a282aecfb0aae481564cd22f80579834c" id="r_a282aecfb0aae481564cd22f80579834c"><td class="memItemLeft" align="right" valign="top"><a id="a282aecfb0aae481564cd22f80579834c" name="a282aecfb0aae481564cd22f80579834c"></a>
ValueType &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>FindOrAdd</b> (const KeyType &amp;key, bool *out_pExisted=nullptr)</td></tr>
<tr class="memdesc:a282aecfb0aae481564cd22f80579834c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value stored at the given key. If none exists, one is created. <em>bExisted</em> indicates whether an element needed to be created. <br /></td></tr>
<tr class="separator:a282aecfb0aae481564cd22f80579834c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdcab393bc299daf03ff7847ed71eecc" id="r_afdcab393bc299daf03ff7847ed71eecc"><td class="memTemplParams" colspan="2"><a id="afdcab393bc299daf03ff7847ed71eecc" name="afdcab393bc299daf03ff7847ed71eecc"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:afdcab393bc299daf03ff7847ed71eecc"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Contains</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:afdcab393bc299daf03ff7847ed71eecc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if an entry with given key exists in the table. <br /></td></tr>
<tr class="separator:afdcab393bc299daf03ff7847ed71eecc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae346e86e529310ec5c1ae1cfa1b4763" id="r_aae346e86e529310ec5c1ae1cfa1b4763"><td class="memItemLeft" align="right" valign="top"><a id="aae346e86e529310ec5c1ae1cfa1b4763" name="aae346e86e529310ec5c1ae1cfa1b4763"></a>
<a class="el" href="../../d1/d4a/structez_hash_table_base_iterator.htm">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetIterator</b> ()</td></tr>
<tr class="memdesc:aae346e86e529310ec5c1ae1cfa1b4763"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an Iterator to the very first element. <br /></td></tr>
<tr class="separator:aae346e86e529310ec5c1ae1cfa1b4763"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf3825171d9b70acdefaf9113e634f6c" id="r_adf3825171d9b70acdefaf9113e634f6c"><td class="memItemLeft" align="right" valign="top"><a id="adf3825171d9b70acdefaf9113e634f6c" name="adf3825171d9b70acdefaf9113e634f6c"></a>
<a class="el" href="../../d1/d4a/structez_hash_table_base_iterator.htm">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetEndIterator</b> ()</td></tr>
<tr class="memdesc:adf3825171d9b70acdefaf9113e634f6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an Iterator to the first element that is not part of the hash-table. Needed to support range based for loops. <br /></td></tr>
<tr class="separator:adf3825171d9b70acdefaf9113e634f6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b097fa7bcd23fbddca5be3a2484022b" id="r_a5b097fa7bcd23fbddca5be3a2484022b"><td class="memItemLeft" align="right" valign="top"><a id="a5b097fa7bcd23fbddca5be3a2484022b" name="a5b097fa7bcd23fbddca5be3a2484022b"></a>
<a class="el" href="../../d8/d3d/structez_hash_table_base_const_iterator.htm">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetIterator</b> () const</td></tr>
<tr class="memdesc:a5b097fa7bcd23fbddca5be3a2484022b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a constant Iterator to the very first element. <br /></td></tr>
<tr class="separator:a5b097fa7bcd23fbddca5be3a2484022b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f2f930bf8e8a402db17a7f6ab49b757" id="r_a3f2f930bf8e8a402db17a7f6ab49b757"><td class="memItemLeft" align="right" valign="top"><a id="a3f2f930bf8e8a402db17a7f6ab49b757" name="a3f2f930bf8e8a402db17a7f6ab49b757"></a>
<a class="el" href="../../d8/d3d/structez_hash_table_base_const_iterator.htm">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetEndIterator</b> () const</td></tr>
<tr class="memdesc:a3f2f930bf8e8a402db17a7f6ab49b757"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a <a class="el" href="../../d8/d3d/structez_hash_table_base_const_iterator.htm" title="Const iterator.">ezHashTableBaseConstIterator</a> to the first element that is not part of the hash-table. Needed to support range based for loops. <br /></td></tr>
<tr class="separator:a3f2f930bf8e8a402db17a7f6ab49b757"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12587c6d2ade6c6a6551ab09a8ed66a7" id="r_a12587c6d2ade6c6a6551ab09a8ed66a7"><td class="memItemLeft" align="right" valign="top"><a id="a12587c6d2ade6c6a6551ab09a8ed66a7" name="a12587c6d2ade6c6a6551ab09a8ed66a7"></a>
<a class="el" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetAllocator</b> () const</td></tr>
<tr class="memdesc:a12587c6d2ade6c6a6551ab09a8ed66a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the allocator that is used by this instance. <br /></td></tr>
<tr class="separator:a12587c6d2ade6c6a6551ab09a8ed66a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa86024d3bb6b43b6a9e6a49aeb42c389" id="r_aa86024d3bb6b43b6a9e6a49aeb42c389"><td class="memItemLeft" align="right" valign="top"><a id="aa86024d3bb6b43b6a9e6a49aeb42c389" name="aa86024d3bb6b43b6a9e6a49aeb42c389"></a>
ezUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>GetHeapMemoryUsage</b> () const</td></tr>
<tr class="memdesc:aa86024d3bb6b43b6a9e6a49aeb42c389"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of bytes that are currently allocated on the heap. <br /></td></tr>
<tr class="separator:aa86024d3bb6b43b6a9e6a49aeb42c389"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af618292635c015dac0b1e600ebef030c" id="r_af618292635c015dac0b1e600ebef030c"><td class="memItemLeft" align="right" valign="top"><a id="af618292635c015dac0b1e600ebef030c" name="af618292635c015dac0b1e600ebef030c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Swap</b> (<a class="el" href="../../de/dc3/classez_hash_table_base.htm">ezHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;other)</td></tr>
<tr class="memdesc:af618292635c015dac0b1e600ebef030c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps this map with the other one. <br /></td></tr>
<tr class="separator:af618292635c015dac0b1e600ebef030c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae16adc69dadd31c9666fc02b19935e85" id="r_ae16adc69dadd31c9666fc02b19935e85"><td class="memTemplParams" colspan="2"><a id="ae16adc69dadd31c9666fc02b19935e85" name="ae16adc69dadd31c9666fc02b19935e85"></a>
template&lt;typename CompatibleKeyType , typename CompatibleValueType &gt; </td></tr>
<tr class="memitem:ae16adc69dadd31c9666fc02b19935e85"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Insert</b> (CompatibleKeyType &amp;&amp;key, CompatibleValueType &amp;&amp;value, V *out_pOldValue)</td></tr>
<tr class="separator:ae16adc69dadd31c9666fc02b19935e85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a511a715c9d2c1cf4ac2912ca774d4678" id="r_a511a715c9d2c1cf4ac2912ca774d4678"><td class="memTemplParams" colspan="2"><a id="a511a715c9d2c1cf4ac2912ca774d4678" name="a511a715c9d2c1cf4ac2912ca774d4678"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a511a715c9d2c1cf4ac2912ca774d4678"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Remove</b> (const CompatibleKeyType &amp;key, V *out_pOldValue)</td></tr>
<tr class="separator:a511a715c9d2c1cf4ac2912ca774d4678"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6612562c1703142a45e6cd43ae198c55" id="r_a6612562c1703142a45e6cd43ae198c55"><td class="memTemplParams" colspan="2"><a id="a6612562c1703142a45e6cd43ae198c55" name="a6612562c1703142a45e6cd43ae198c55"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a6612562c1703142a45e6cd43ae198c55"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, V &amp;out_value) const</td></tr>
<tr class="separator:a6612562c1703142a45e6cd43ae198c55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5ea2294d5b83c4a425b2923b17242a4" id="r_af5ea2294d5b83c4a425b2923b17242a4"><td class="memTemplParams" colspan="2"><a id="af5ea2294d5b83c4a425b2923b17242a4" name="af5ea2294d5b83c4a425b2923b17242a4"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:af5ea2294d5b83c4a425b2923b17242a4"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, const V *&amp;out_pValue) const</td></tr>
<tr class="separator:af5ea2294d5b83c4a425b2923b17242a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37954b311127cada82eb1d3faaa2dd4c" id="r_a37954b311127cada82eb1d3faaa2dd4c"><td class="memTemplParams" colspan="2"><a id="a37954b311127cada82eb1d3faaa2dd4c" name="a37954b311127cada82eb1d3faaa2dd4c"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a37954b311127cada82eb1d3faaa2dd4c"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, V *&amp;out_pValue) const</td></tr>
<tr class="separator:a37954b311127cada82eb1d3faaa2dd4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91ac9c41174856f899c3bd2cc01f5948" id="r_a91ac9c41174856f899c3bd2cc01f5948"><td class="memTemplParams" colspan="2"><a id="a91ac9c41174856f899c3bd2cc01f5948" name="a91ac9c41174856f899c3bd2cc01f5948"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a91ac9c41174856f899c3bd2cc01f5948"><td class="memTemplItemLeft" align="right" valign="top">const V *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:a91ac9c41174856f899c3bd2cc01f5948"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d9752905b2810121e80944ef8362b48" id="r_a1d9752905b2810121e80944ef8362b48"><td class="memTemplParams" colspan="2"><a id="a1d9752905b2810121e80944ef8362b48" name="a1d9752905b2810121e80944ef8362b48"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a1d9752905b2810121e80944ef8362b48"><td class="memTemplItemLeft" align="right" valign="top">V *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="separator:a1d9752905b2810121e80944ef8362b48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62e6280bead530e94e7e93c1b1829205" id="r_a62e6280bead530e94e7e93c1b1829205"><td class="memTemplParams" colspan="2"><a id="a62e6280bead530e94e7e93c1b1829205" name="a62e6280bead530e94e7e93c1b1829205"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a62e6280bead530e94e7e93c1b1829205"><td class="memTemplItemLeft" align="right" valign="top">EZ_FORCE_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Contains</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:a62e6280bead530e94e7e93c1b1829205"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3dbbe3ae07fcd02723e542d6f944513" id="r_ac3dbbe3ae07fcd02723e542d6f944513"><td class="memTemplParams" colspan="2"><a id="ac3dbbe3ae07fcd02723e542d6f944513" name="ac3dbbe3ae07fcd02723e542d6f944513"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:ac3dbbe3ae07fcd02723e542d6f944513"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>FindEntry</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:ac3dbbe3ae07fcd02723e542d6f944513"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a5ad53e40d70519cf3ad9f7537741a865" id="r_a5ad53e40d70519cf3ad9f7537741a865"><td class="memItemLeft" align="right" valign="top"><a id="a5ad53e40d70519cf3ad9f7537741a865" name="a5ad53e40d70519cf3ad9f7537741a865"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>ezHashTableBase</b> (<a class="el" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:a5ad53e40d70519cf3ad9f7537741a865"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an empty hashtable. Does not allocate any data yet. <br /></td></tr>
<tr class="separator:a5ad53e40d70519cf3ad9f7537741a865"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59372f421cf9d1af9bf2f49339b4373b" id="r_a59372f421cf9d1af9bf2f49339b4373b"><td class="memItemLeft" align="right" valign="top"><a id="a59372f421cf9d1af9bf2f49339b4373b" name="a59372f421cf9d1af9bf2f49339b4373b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>ezHashTableBase</b> (const <a class="el" href="../../de/dc3/classez_hash_table_base.htm">ezHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;rhs, <a class="el" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:a59372f421cf9d1af9bf2f49339b4373b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a copy of the given hashtable. <br /></td></tr>
<tr class="separator:a59372f421cf9d1af9bf2f49339b4373b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac39ea9a4093f7f7c41a8f70fe84ecea3" id="r_ac39ea9a4093f7f7c41a8f70fe84ecea3"><td class="memItemLeft" align="right" valign="top"><a id="ac39ea9a4093f7f7c41a8f70fe84ecea3" name="ac39ea9a4093f7f7c41a8f70fe84ecea3"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>ezHashTableBase</b> (<a class="el" href="../../de/dc3/classez_hash_table_base.htm">ezHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;&amp;rhs, <a class="el" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:ac39ea9a4093f7f7c41a8f70fe84ecea3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves data from an existing hashtable into this one. <br /></td></tr>
<tr class="separator:ac39ea9a4093f7f7c41a8f70fe84ecea3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a506607a1fd3eb2922dcd0b648a17f92b" id="r_a506607a1fd3eb2922dcd0b648a17f92b"><td class="memItemLeft" align="right" valign="top"><a id="a506607a1fd3eb2922dcd0b648a17f92b" name="a506607a1fd3eb2922dcd0b648a17f92b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>~ezHashTableBase</b> ()</td></tr>
<tr class="memdesc:a506607a1fd3eb2922dcd0b648a17f92b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor. <br /></td></tr>
<tr class="separator:a506607a1fd3eb2922dcd0b648a17f92b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2e688544a92b310b93fe68aace0d77b" id="r_ae2e688544a92b310b93fe68aace0d77b"><td class="memItemLeft" align="right" valign="top"><a id="ae2e688544a92b310b93fe68aace0d77b" name="ae2e688544a92b310b93fe68aace0d77b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../de/dc3/classez_hash_table_base.htm">ezHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;rhs)</td></tr>
<tr class="memdesc:ae2e688544a92b310b93fe68aace0d77b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from another hashtable into this one. <br /></td></tr>
<tr class="separator:ae2e688544a92b310b93fe68aace0d77b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a084635096ecc5f5e6869255248cd10cc" id="r_a084635096ecc5f5e6869255248cd10cc"><td class="memItemLeft" align="right" valign="top"><a id="a084635096ecc5f5e6869255248cd10cc" name="a084635096ecc5f5e6869255248cd10cc"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../de/dc3/classez_hash_table_base.htm">ezHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a084635096ecc5f5e6869255248cd10cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves data from an existing hashtable into this one. <br /></td></tr>
<tr class="separator:a084635096ecc5f5e6869255248cd10cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a750c86b8068a3e598cc4322ce46232ce" id="r_a750c86b8068a3e598cc4322ce46232ce"><td class="memItemLeft" align="right" valign="top"><a id="a750c86b8068a3e598cc4322ce46232ce" name="a750c86b8068a3e598cc4322ce46232ce"></a>
struct&#160;</td><td class="memItemRight" valign="bottom"><b>ezHashTableBaseConstIterator&lt; KeyType, ValueType, Hasher &gt;</b></td></tr>
<tr class="separator:a750c86b8068a3e598cc4322ce46232ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0dbebe09d1f3ea7fd8b4270c3eb0a169" id="r_a0dbebe09d1f3ea7fd8b4270c3eb0a169"><td class="memItemLeft" align="right" valign="top"><a id="a0dbebe09d1f3ea7fd8b4270c3eb0a169" name="a0dbebe09d1f3ea7fd8b4270c3eb0a169"></a>
struct&#160;</td><td class="memItemRight" valign="bottom"><b>ezHashTableBaseIterator&lt; KeyType, ValueType, Hasher &gt;</b></td></tr>
<tr class="separator:a0dbebe09d1f3ea7fd8b4270c3eb0a169"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename KeyType, typename ValueType, typename Hasher&gt;<br />
class ezHashTableBase&lt; KeyType, ValueType, Hasher &gt;</div><p>Implementation of a hashtable which stores key/value pairs. </p>
<p>The hashtable maps keys to values by using the hash of the key as an index into the table. This implementation uses linear-probing to resolve hash collisions which means all key/value pairs are stored in a linear array. All insertion/erasure/lookup functions take O(1) time if the table does not need to be expanded, which happens when the load gets greater than 60%. The hash function can be customized by providing a Hasher helper class like <a class="el" href="../../dc/d65/structez_hash_helper.htm" title="Helper struct to calculate the Hash of different types.">ezHashHelper</a>. </p><dl class="section see"><dt>See also</dt><dd><a class="el" href="../../dc/d65/structez_hash_helper.htm" title="Helper struct to calculate the Hash of different types.">ezHashHelper</a> </dd></dl>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a0788dac0bf61b77ad5db32384f55df8c" name="a0788dac0bf61b77ad5db32384f55df8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0788dac0bf61b77ad5db32384f55df8c">&#9670;&#160;</a></span>Compact()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename K , typename V , typename H &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/dc3/classez_hash_table_base.htm">ezHashTableBase</a>&lt; K, V, H &gt;::Compact </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tries to compact the hashtable to avoid wasting memory. </p>
<p>The resulting capacity is at least 'GetCount' (no elements get removed). Will deallocate all data, if the hashtable is empty. </p>

</div>
</div>
<a id="a141738c1388ce3a9f1f2cff6cee512d2" name="a141738c1388ce3a9f1f2cff6cee512d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a141738c1388ce3a9f1f2cff6cee512d2">&#9670;&#160;</a></span>Insert()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename KeyType , typename ValueType , typename Hasher &gt; </div>
<div class="memtemplate">
template&lt;typename CompatibleKeyType , typename CompatibleValueType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../de/dc3/classez_hash_table_base.htm">ezHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt;::Insert </td>
          <td>(</td>
          <td class="paramtype">CompatibleKeyType &amp;&amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">CompatibleValueType &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ValueType *&#160;</td>
          <td class="paramname"><em>out_pOldValue</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Inserts the key value pair or replaces value if an entry with the given key already exists. </p>
<p>Returns true if an existing value was replaced and optionally writes out the old value to out_oldValue. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Containers/<a class="el" href="../../de/def/_hash_table_8h_source.htm">HashTable.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Containers/Implementation/<a class="el" href="../../d9/d2b/_hash_table__inl_8h_source.htm">HashTable_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../de/dc3/classez_hash_table_base.htm">ezHashTableBase</a></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:17:58 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
