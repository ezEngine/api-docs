<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Containers/Implementation/Bitfield_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function() { init_codefold(1); });
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('de/d58/_bitfield__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Bitfield_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span>EZ_ALWAYS_INLINE ezUInt32 <a class="code hl_class" href="../../d2/d62/classez_bitfield.htm">ezBitfield&lt;Container&gt;::GetBitInt</a>(ezUInt32 uiBitIndex)<span class="keyword"> const</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span>  <span class="keywordflow">return</span> (uiBitIndex &gt;&gt; 5); <span class="comment">// div 32</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>}</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span> </div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>EZ_ALWAYS_INLINE ezUInt32 <a class="code hl_class" href="../../d2/d62/classez_bitfield.htm">ezBitfield&lt;Container&gt;::GetBitMask</a>(ezUInt32 uiBitIndex)<span class="keyword"> const</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>  <span class="keywordflow">return</span> 1 &lt;&lt; (uiBitIndex &amp; 0x1F); <span class="comment">// modulo 32, shifted to bit position</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>}</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span> </div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00016" data-start="{" data-end="}">
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#acf370dced312910f0aca4ea0449c54d5">   16</a></span>EZ_ALWAYS_INLINE ezUInt32 <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#acf370dced312910f0aca4ea0449c54d5">ezBitfield&lt;Container&gt;::GetCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>  <span class="keywordflow">return</span> m_uiCount;</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>}</div>
</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00022" data-start="{" data-end="}">
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#acf370dced312910f0aca4ea0449c54d5">   22</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt; <span class="comment">// Second template needed so that the compiler only instantiates it when called. Needed to prevent errors with containers that do not support this.</span></div>
<div class="foldopen" id="foldopen00023" data-start="{" data-end="}">
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a7541e5112a522c7429f2f18e95fef35c">   23</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#a7541e5112a522c7429f2f18e95fef35c">ezBitfield&lt;Container&gt;::SetCountUninitialized</a>(ezUInt32 uiBitCount)</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>{</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>  <span class="keyword">const</span> ezUInt32 uiInts = (uiBitCount + 31) &gt;&gt; 5;</div>
<div class="foldopen" id="foldopen00026" data-start="{" data-end="}">
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a7541e5112a522c7429f2f18e95fef35c">   26</a></span>  m_Container.<a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#a7541e5112a522c7429f2f18e95fef35c">SetCountUninitialized</a>(uiInts);</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span> </div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  m_uiCount = uiBitCount;</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a5d2e77f2c19d452c5a81fc2da9fb05f2">   29</a></span>}</div>
</div>
</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span> </div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00032" data-start="{" data-end="}">
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#ad418a90f02802f36dce70a2ad1c02e06">   32</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#a5d2e77f2c19d452c5a81fc2da9fb05f2">ezBitfield&lt;Container&gt;::SetCount</a>(ezUInt32 uiBitCount, <span class="keywordtype">bool</span> bSetNew)</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>{</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>  <span class="keywordflow">if</span> (m_uiCount == uiBitCount)</div>
<div class="foldopen" id="foldopen00035" data-start="{" data-end="}">
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a7d72c9d5cdef37f42a845d7d191453fd">   35</a></span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>  <span class="keyword">const</span> ezUInt32 uiOldBits = m_uiCount;</div>
<div class="foldopen" id="foldopen00038" data-start="{" data-end="}">
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#acefb6bbf5ba62038a91adfdfd527344c">   38</a></span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>  SetCountUninitialized(uiBitCount);</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span> </div>
<div class="foldopen" id="foldopen00041" data-start="{" data-end="}">
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a2df952dade46abd60d44d954c4b5c821">   41</a></span>  <span class="comment">// if there are new bits, initialize them</span></div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  <span class="keywordflow">if</span> (uiBitCount &gt; uiOldBits)</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>  {</div>
<div class="foldopen" id="foldopen00044" data-start="{" data-end="}">
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#aec1f88c81c67279e730d88fcd6e48723">   44</a></span>    <span class="keywordflow">if</span> (bSetNew)</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>      SetBitRange(uiOldBits, uiBitCount - uiOldBits);</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>    <span class="keywordflow">else</span></div>
<div class="foldopen" id="foldopen00047" data-start="{" data-end="}">
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a9e2f730a80533668732441f695ad13fc">   47</a></span>      ClearBitRange(uiOldBits, uiBitCount - uiOldBits);</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  }</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>}</div>
<div class="foldopen" id="foldopen00050" data-start="{" data-end="}">
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#aa6d897045d639889ca47c86452abeaa3">   50</a></span> </div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00052" data-start="{" data-end="}">
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#ad418a90f02802f36dce70a2ad1c02e06">   52</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#ad418a90f02802f36dce70a2ad1c02e06">ezBitfield&lt;Container&gt;::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00053" data-start="{" data-end="}">
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a9d36e4a2ce7de807150f3c06f87c8e39">   53</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  <span class="keywordflow">return</span> m_uiCount == 0;</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>}</div>
<div class="foldopen" id="foldopen00056" data-start="{" data-end="}">
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#aea4835778bbdab097300e08eb69a744b">   56</a></span> </div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00058" data-start="{" data-end="}">
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a7d72c9d5cdef37f42a845d7d191453fd">   58</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#a7d72c9d5cdef37f42a845d7d191453fd">ezBitfield&lt;Container&gt;::IsAnyBitSet</a>(ezUInt32 uiFirstBit <span class="comment">/*= 0*/</span>, ezUInt32 uiNumBits <span class="comment">/*= 0xFFFFFFFF*/</span>)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00059" data-start="{" data-end="}">
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#ab30c12ebc439eef63010e8c3d5a56471">   59</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>  <span class="keywordflow">if</span> (m_uiCount == 0 || uiNumBits == 0)</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="foldopen" id="foldopen00062" data-start="{" data-end="}">
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a33f3b1f5dcb047a2ec667470281e7187">   62</a></span> </div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>  EZ_ASSERT_DEBUG(uiFirstBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiFirstBit, m_uiCount);</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span> </div>
<div class="foldopen" id="foldopen00065" data-start="{" data-end="}">
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#ac93aa3da4c16de9c15887e99b788e90f">   65</a></span>  <span class="keyword">const</span> ezUInt32 uiLastBit = ezMath::Min&lt;ezUInt32&gt;(uiFirstBit + uiNumBits, m_uiCount - 1);</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span> </div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>  <span class="keyword">const</span> ezUInt32 uiFirstInt = GetBitInt(uiFirstBit);</div>
<div class="foldopen" id="foldopen00068" data-start="{" data-end="}">
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#adcad809b5a1ef9295d853af3684c7e1a">   68</a></span>  <span class="keyword">const</span> ezUInt32 uiLastInt = GetBitInt(uiLastBit);</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span> </div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>  <span class="comment">// all within the same int</span></div>
<div class="foldopen" id="foldopen00071" data-start="{" data-end="}">
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a97bcb21f9c0e2472111fe7d97948392b">   71</a></span>  <span class="keywordflow">if</span> (uiFirstInt == uiLastInt)</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  {</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>    <span class="keywordflow">for</span> (ezUInt32 i = uiFirstBit; i &lt;= uiLastBit; ++i)</div>
<div class="foldopen" id="foldopen00074" data-start="{" data-end="}">
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#ad763e7abf19b47325c0c510a15bb208f">   74</a></span>    {</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>      <span class="keywordflow">if</span> (IsBitSet(i))</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="foldopen" id="foldopen00077" data-start="{" data-end="}">
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a3159aa4e2ec2324c0f091d03a2e2ec58">   77</a></span>    }</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  }</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>  {</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>    <span class="keyword">const</span> ezUInt32 uiNextIntBit = (uiFirstInt + 1) * 32;</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>    <span class="keyword">const</span> ezUInt32 uiPrevIntBit = uiLastInt * 32;</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span> </div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>    <span class="comment">// check the bits in the first int individually</span></div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>    <span class="keywordflow">for</span> (ezUInt32 i = uiFirstBit; i &lt; uiNextIntBit; ++i)</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>    {</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>      <span class="keywordflow">if</span> (IsBitSet(i))</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>    }</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="foldopen" id="foldopen00091" data-start="{" data-end="}">
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno"><a class="line" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#a71580bc7b631b06035d3dac246117683">   91</a></span>    <span class="comment">// check the bits in the ints in between with one operation</span></div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>    <span class="keywordflow">for</span> (ezUInt32 i = uiFirstInt + 1; i &lt; uiLastInt; ++i)</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>    {</div>
<div class="foldopen" id="foldopen00094" data-start="{" data-end="}">
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno"><a class="line" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#ad32dd9d4e1ff55736f08c582341273c7">   94</a></span>      <span class="keywordflow">if</span> ((m_Container[i] &amp; 0xFFFFFFFF) != 0)</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    }</div>
<div class="foldopen" id="foldopen00097" data-start="{" data-end="}">
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno"><a class="line" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#a968365d6099b6b0d62f8dcf8af128d7c">   97</a></span> </div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>    <span class="comment">// check the bits in the last int individually</span></div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>    <span class="keywordflow">for</span> (ezUInt32 i = uiPrevIntBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    {</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>      <span class="keywordflow">if</span> (IsBitSet(i))</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="foldopen" id="foldopen00103" data-start="{" data-end="}">
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno"><a class="line" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#a2d3af420b2dc2159b53f719480f3d537">  103</a></span>    }</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  }</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span> </div>
<div class="foldopen" id="foldopen00106" data-start="{" data-end="}">
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno"><a class="line" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#afd619a287d812aeec615c111f057444e">  106</a></span>  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>}</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span> </div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00110" data-start="{" data-end="}">
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#acefb6bbf5ba62038a91adfdfd527344c">  110</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#acefb6bbf5ba62038a91adfdfd527344c">ezBitfield&lt;Container&gt;::IsNoBitSet</a>(ezUInt32 uiFirstBit <span class="comment">/*= 0*/</span>, ezUInt32 uiLastBit <span class="comment">/*= 0xFFFFFFFF*/</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  <span class="keywordflow">return</span> !IsAnyBitSet(uiFirstBit, uiLastBit);</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>}</div>
</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span> </div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00116" data-start="{" data-end="}">
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a2df952dade46abd60d44d954c4b5c821">  116</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#a2df952dade46abd60d44d954c4b5c821">ezBitfield&lt;Container&gt;::AreAllBitsSet</a>(ezUInt32 uiFirstBit <span class="comment">/*= 0*/</span>, ezUInt32 uiNumBits <span class="comment">/*= 0xFFFFFFFF*/</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>  <span class="keywordflow">if</span> (m_uiCount == 0 || uiNumBits == 0)</div>
<div class="foldopen" id="foldopen00119" data-start="{" data-end="}">
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a70227b5d55aa22501e99824d4f490e8c">  119</a></span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span> </div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  EZ_ASSERT_DEBUG(uiFirstBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiFirstBit, m_uiCount);</div>
<div class="foldopen" id="foldopen00122" data-start="{" data-end="}">
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#adfd442d45f029ab1f3b3ee04e5c02c55">  122</a></span> </div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  <span class="keyword">const</span> ezUInt32 uiLastBit = ezMath::Min&lt;ezUInt32&gt;(uiFirstBit + uiNumBits, m_uiCount - 1);</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span> </div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  <span class="keyword">const</span> ezUInt32 uiFirstInt = GetBitInt(uiFirstBit);</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>  <span class="keyword">const</span> ezUInt32 uiLastInt = GetBitInt(uiLastBit);</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span> </div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>  <span class="comment">// all within the same int</span></div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>  <span class="keywordflow">if</span> (uiFirstInt == uiLastInt)</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  {</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>    <span class="keywordflow">for</span> (ezUInt32 i = uiFirstBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>    {</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>      <span class="keywordflow">if</span> (!IsBitSet(i))</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>    }</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  }</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>  {</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>    <span class="keyword">const</span> ezUInt32 uiNextIntBit = (uiFirstInt + 1) * 32;</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>    <span class="keyword">const</span> ezUInt32 uiPrevIntBit = uiLastInt * 32;</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span> </div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>    <span class="comment">// check the bits in the first int individually</span></div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>    <span class="keywordflow">for</span> (ezUInt32 i = uiFirstBit; i &lt; uiNextIntBit; ++i)</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>    {</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>      <span class="keywordflow">if</span> (!IsBitSet(i))</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>    }</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span> </div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>    <span class="comment">// check the bits in the ints in between with one operation</span></div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>    <span class="keywordflow">for</span> (ezUInt32 i = uiFirstInt + 1; i &lt; uiLastInt; ++i)</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>    {</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>      <span class="keywordflow">if</span> (m_Container[i] != 0xFFFFFFFF)</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>    }</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>    <span class="comment">// check the bits in the last int individually</span></div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>    <span class="keywordflow">for</span> (ezUInt32 i = uiPrevIntBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    {</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>      <span class="keywordflow">if</span> (!IsBitSet(i))</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>    }</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  }</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span> </div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>}</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00168" data-start="{" data-end="}">
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#aec1f88c81c67279e730d88fcd6e48723">  168</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#aec1f88c81c67279e730d88fcd6e48723">ezBitfield&lt;Container&gt;::Clear</a>()</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>{</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  m_uiCount = 0;</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>  m_Container.Clear();</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>}</div>
</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span> </div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00175" data-start="{" data-end="}">
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a9e2f730a80533668732441f695ad13fc">  175</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#a9e2f730a80533668732441f695ad13fc">ezBitfield&lt;Container&gt;::SetBit</a>(ezUInt32 uiBit)</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>{</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  EZ_ASSERT_DEBUG(uiBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiBit, m_uiCount);</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span> </div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>  m_Container[GetBitInt(uiBit)] |= GetBitMask(uiBit);</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>}</div>
</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span> </div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00183" data-start="{" data-end="}">
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#aa6d897045d639889ca47c86452abeaa3">  183</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#aa6d897045d639889ca47c86452abeaa3">ezBitfield&lt;Container&gt;::ClearBit</a>(ezUInt32 uiBit)</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>{</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  EZ_ASSERT_DEBUG(uiBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiBit, m_uiCount);</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span> </div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>  m_Container[GetBitInt(uiBit)] &amp;= ~GetBitMask(uiBit);</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>}</div>
</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span> </div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00191" data-start="{" data-end="}">
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a9d36e4a2ce7de807150f3c06f87c8e39">  191</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#a9d36e4a2ce7de807150f3c06f87c8e39">ezBitfield&lt;Container&gt;::FlipBit</a>(ezUInt32 uiBit)</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>{</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>  EZ_ASSERT_DEBUG(uiBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiBit, m_uiCount);</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  m_Container[GetBitInt(uiBit)] ^= GetBitMask(uiBit);</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>}</div>
</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span> </div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00199" data-start="{" data-end="}">
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#aea4835778bbdab097300e08eb69a744b">  199</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#aea4835778bbdab097300e08eb69a744b">ezBitfield&lt;Container&gt;::SetBitValue</a>(ezUInt32 uiBit, <span class="keywordtype">bool</span> bValue)</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>{</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>  <span class="keywordflow">if</span> (bValue)</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>  {</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>    SetBit(uiBit);</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  }</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  {</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>    ClearBit(uiBit);</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>  }</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>}</div>
</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span> </div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00212" data-start="{" data-end="}">
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#ab30c12ebc439eef63010e8c3d5a56471">  212</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#ab30c12ebc439eef63010e8c3d5a56471">ezBitfield&lt;Container&gt;::IsBitSet</a>(ezUInt32 uiBit)<span class="keyword"> const</span></div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>  EZ_ASSERT_DEBUG(uiBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiBit, m_uiCount);</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span> </div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>  <span class="keywordflow">return</span> (m_Container[GetBitInt(uiBit)] &amp; GetBitMask(uiBit)) != 0;</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>}</div>
</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span> </div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00220" data-start="{" data-end="}">
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a33f3b1f5dcb047a2ec667470281e7187">  220</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#a33f3b1f5dcb047a2ec667470281e7187">ezBitfield&lt;Container&gt;::ClearAllBits</a>()</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>{</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>  <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; m_Container.GetCount(); ++i)</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>    m_Container[i] = 0;</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>}</div>
</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span> </div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00227" data-start="{" data-end="}">
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#ac93aa3da4c16de9c15887e99b788e90f">  227</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#ac93aa3da4c16de9c15887e99b788e90f">ezBitfield&lt;Container&gt;::SetAllBits</a>()</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>{</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>  <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; m_Container.GetCount(); ++i)</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>    m_Container[i] = 0xFFFFFFFF;</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>}</div>
</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span> </div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00234" data-start="{" data-end="}">
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#adcad809b5a1ef9295d853af3684c7e1a">  234</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#adcad809b5a1ef9295d853af3684c7e1a">ezBitfield&lt;Container&gt;::SetBitRange</a>(ezUInt32 uiFirstBit, ezUInt32 uiNumBits)</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>{</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>  <span class="keywordflow">if</span> (m_uiCount == 0 || uiNumBits == 0)</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span> </div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>  EZ_ASSERT_DEBUG(uiFirstBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiFirstBit, m_uiCount);</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span> </div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>  <span class="keyword">const</span> ezUInt32 uiLastBit = uiFirstBit + uiNumBits - 1;</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span> </div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>  <span class="keyword">const</span> ezUInt32 uiFirstInt = GetBitInt(uiFirstBit);</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>  <span class="keyword">const</span> ezUInt32 uiLastInt = GetBitInt(uiLastBit);</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span> </div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>  <span class="comment">// all within the same int</span></div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  <span class="keywordflow">if</span> (uiFirstInt == uiLastInt)</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  {</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>    <span class="keywordflow">for</span> (ezUInt32 i = uiFirstBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>      SetBit(i);</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span> </div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>  }</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span> </div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>  <span class="keyword">const</span> ezUInt32 uiNextIntBit = (uiFirstInt + 1) * 32;</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>  <span class="keyword">const</span> ezUInt32 uiPrevIntBit = uiLastInt * 32;</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span> </div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>  <span class="comment">// set the bits in the first int individually</span></div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>  <span class="keywordflow">for</span> (ezUInt32 i = uiFirstBit; i &lt; uiNextIntBit; ++i)</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>    SetBit(i);</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span> </div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>  <span class="comment">// set the bits in the ints in between with one operation</span></div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>  <span class="keywordflow">for</span> (ezUInt32 i = uiFirstInt + 1; i &lt; uiLastInt; ++i)</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>    m_Container[i] = 0xFFFFFFFF;</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span> </div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>  <span class="comment">// set the bits in the last int individually</span></div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>  <span class="keywordflow">for</span> (ezUInt32 i = uiPrevIntBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>    SetBit(i);</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>}</div>
</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span> </div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00272" data-start="{" data-end="}">
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a97bcb21f9c0e2472111fe7d97948392b">  272</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#a97bcb21f9c0e2472111fe7d97948392b">ezBitfield&lt;Container&gt;::ClearBitRange</a>(ezUInt32 uiFirstBit, ezUInt32 uiNumBits)</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>{</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>  <span class="keywordflow">if</span> (m_uiCount == 0 || uiNumBits == 0)</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span> </div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>  EZ_ASSERT_DEBUG(uiFirstBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiFirstBit, m_uiCount);</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span> </div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>  <span class="keyword">const</span> ezUInt32 uiLastBit = uiFirstBit + uiNumBits - 1;</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span> </div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>  <span class="keyword">const</span> ezUInt32 uiFirstInt = GetBitInt(uiFirstBit);</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>  <span class="keyword">const</span> ezUInt32 uiLastInt = GetBitInt(uiLastBit);</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span> </div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>  <span class="comment">// all within the same int</span></div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>  <span class="keywordflow">if</span> (uiFirstInt == uiLastInt)</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>  {</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>    <span class="keywordflow">for</span> (ezUInt32 i = uiFirstBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>      ClearBit(i);</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span> </div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>  }</div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span> </div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>  <span class="keyword">const</span> ezUInt32 uiNextIntBit = (uiFirstInt + 1) * 32;</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>  <span class="keyword">const</span> ezUInt32 uiPrevIntBit = uiLastInt * 32;</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span> </div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>  <span class="comment">// set the bits in the first int individually</span></div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>  <span class="keywordflow">for</span> (ezUInt32 i = uiFirstBit; i &lt; uiNextIntBit; ++i)</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>    ClearBit(i);</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span> </div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>  <span class="comment">// set the bits in the ints in between with one operation</span></div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>  <span class="keywordflow">for</span> (ezUInt32 i = uiFirstInt + 1; i &lt; uiLastInt; ++i)</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>    m_Container[i] = 0;</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span> </div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>  <span class="comment">// set the bits in the last int individually</span></div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>  <span class="keywordflow">for</span> (ezUInt32 i = uiPrevIntBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>    ClearBit(i);</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>}</div>
</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span> </div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00310" data-start="{" data-end="}">
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#ad763e7abf19b47325c0c510a15bb208f">  310</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#ad763e7abf19b47325c0c510a15bb208f">ezBitfield&lt;Container&gt;::FlipBitRange</a>(ezUInt32 uiFirstBit, ezUInt32 uiNumBits)</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>{</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>  <span class="keywordflow">if</span> (m_uiCount == 0 || uiNumBits == 0)</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span> </div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>  EZ_ASSERT_DEBUG(uiFirstBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiFirstBit, m_uiCount);</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span> </div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>  <span class="keyword">const</span> ezUInt32 uiLastBit = uiFirstBit + uiNumBits - 1;</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span> </div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>  <span class="keyword">const</span> ezUInt32 uiFirstInt = GetBitInt(uiFirstBit);</div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>  <span class="keyword">const</span> ezUInt32 uiLastInt = GetBitInt(uiLastBit);</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span> </div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>  <span class="comment">// all within the same int</span></div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>  <span class="keywordflow">if</span> (uiFirstInt == uiLastInt)</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>  {</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>    <span class="keywordflow">for</span> (ezUInt32 i = uiFirstBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>      FlipBit(i);</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span> </div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>  }</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span> </div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>  <span class="keyword">const</span> ezUInt32 uiNextIntBit = (uiFirstInt + 1) * 32;</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>  <span class="keyword">const</span> ezUInt32 uiPrevIntBit = uiLastInt * 32;</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span> </div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span>  <span class="comment">// flip the bits in the first int individually</span></div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>  <span class="keywordflow">for</span> (ezUInt32 i = uiFirstBit; i &lt; uiNextIntBit; ++i)</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>    FlipBit(i);</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span> </div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span>  <span class="comment">// flip the bits in the ints in between with one operation</span></div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span>  <span class="keywordflow">for</span> (ezUInt32 i = uiFirstInt + 1; i &lt; uiLastInt; ++i)</div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span>    m_Container[i] = ~m_Container[i];</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span> </div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>  <span class="comment">// flip the bits in the last int individually</span></div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>  <span class="keywordflow">for</span> (ezUInt32 i = uiPrevIntBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>    FlipBit(i);</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span>}</div>
</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span> </div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00348" data-start="{" data-end="}">
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a3159aa4e2ec2324c0f091d03a2e2ec58">  348</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#a3159aa4e2ec2324c0f091d03a2e2ec58">ezBitfield&lt;Container&gt;::Swap</a>(<a class="code hl_class" href="../../d2/d62/classez_bitfield.htm">ezBitfield&lt;Container&gt;</a>&amp; other)</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span>{</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>  <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a0cd624055a97c96719b925cb11e6a08e">ezMath::Swap</a>(m_uiCount, other.m_uiCount);</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>  m_Container.Swap(other.m_Container);</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>}</div>
</div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span> </div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00355" data-start="{" data-end="}">
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#a70227b5d55aa22501e99824d4f490e8c">  355</a></span>EZ_ALWAYS_INLINE <span class="keyword">typename</span> <a class="code hl_struct" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm">ezBitfield&lt;Container&gt;::ConstIterator</a> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#a70227b5d55aa22501e99824d4f490e8c">ezBitfield&lt;Container&gt;::GetIterator</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm">ConstIterator</a>(*<span class="keyword">this</span>);</div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span>};</div>
</div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span> </div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00361" data-start="{" data-end="}">
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno"><a class="line" href="../../d2/d62/classez_bitfield.htm#adfd442d45f029ab1f3b3ee04e5c02c55">  361</a></span>EZ_ALWAYS_INLINE <span class="keyword">typename</span> <a class="code hl_struct" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm">ezBitfield&lt;Container&gt;::ConstIterator</a> <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#adfd442d45f029ab1f3b3ee04e5c02c55">ezBitfield&lt;Container&gt;::GetEndIterator</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm">ConstIterator</a>();</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>};</div>
</div>
</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span> </div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span><span class="comment">// ezBitfield&lt;Container&gt;::ConstIterator</span></div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span> </div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span><a class="code hl_class" href="../../d2/d62/classez_bitfield.htm">ezBitfield&lt;Container&gt;::ConstIterator::ConstIterator</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d2/d62/classez_bitfield.htm">ezBitfield&lt;Container&gt;</a>&amp; bitfield)</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span>{</div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span>  m_pBitfield = &amp;bitfield;</div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>  FindNextChunk(0);</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>}</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span> </div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00377" data-start="{" data-end="}">
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno"><a class="line" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#a71580bc7b631b06035d3dac246117683">  377</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#a71580bc7b631b06035d3dac246117683">ezBitfield&lt;Container&gt;::ConstIterator::IsValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>  <span class="keywordflow">return</span> m_pBitfield != <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>}</div>
</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span> </div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00383" data-start="{" data-end="}">
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno"><a class="line" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#ad32dd9d4e1ff55736f08c582341273c7">  383</a></span>EZ_ALWAYS_INLINE ezUInt32 <a class="code hl_function" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#ad32dd9d4e1ff55736f08c582341273c7">ezBitfield&lt;Container&gt;::ConstIterator::Value</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>  <span class="keywordflow">return</span> *m_Iterator + (m_uiChunk &lt;&lt; 5);</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>}</div>
</div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span> </div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00389" data-start="{" data-end="}">
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno"><a class="line" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#a968365d6099b6b0d62f8dcf8af128d7c">  389</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#a968365d6099b6b0d62f8dcf8af128d7c">ezBitfield&lt;Container&gt;::ConstIterator::Next</a>()</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span>{</div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span>  ++m_Iterator;</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>  <span class="keywordflow">if</span> (!m_Iterator.IsValid())</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span>  {</div>
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno">  394</span>    FindNextChunk(m_uiChunk + 1);</div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span>  }</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span>}</div>
</div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span> </div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span>EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_class" href="../../d2/d62/classez_bitfield.htm">ezBitfield&lt;Container&gt;::ConstIterator::operator==</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm">ConstIterator</a>&amp; other)<span class="keyword"> const</span></div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno">  400</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>  <span class="keywordflow">return</span> m_pBitfield == other.m_pBitfield &amp;&amp; m_Iterator == other.m_Iterator &amp;&amp; m_uiChunk == other.m_uiChunk;</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>}</div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span> </div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span>EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_class" href="../../d2/d62/classez_bitfield.htm">ezBitfield&lt;Container&gt;::ConstIterator::operator!=</a>(<span class="keyword">const</span> ConstIterator&amp; other)<span class="keyword"> const</span></div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span>  <span class="keywordflow">return</span> m_pBitfield != other.m_pBitfield || m_Iterator != other.m_Iterator || m_uiChunk != other.m_uiChunk;</div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span>}</div>
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno">  409</span> </div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00411" data-start="{" data-end="}">
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno"><a class="line" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#a2d3af420b2dc2159b53f719480f3d537">  411</a></span>EZ_ALWAYS_INLINE ezUInt32 <a class="code hl_function" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#a2d3af420b2dc2159b53f719480f3d537">ezBitfield&lt;Container&gt;::ConstIterator::operator*</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span>  <span class="keywordflow">return</span> Value();</div>
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno">  414</span>}</div>
</div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span> </div>
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno">  416</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00417" data-start="{" data-end="}">
<div class="line"><a id="l00417" name="l00417"></a><span class="lineno"><a class="line" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#afd619a287d812aeec615c111f057444e">  417</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#afd619a287d812aeec615c111f057444e">ezBitfield&lt;Container&gt;::ConstIterator::operator++</a>()</div>
<div class="line"><a id="l00418" name="l00418"></a><span class="lineno">  418</span>{</div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span>  Next();</div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span>}</div>
</div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span> </div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../d2/d62/classez_bitfield.htm">ezBitfield&lt;Container&gt;::ConstIterator::FindNextChunk</a>(ezUInt32 uiStartChunk)</div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span>{</div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span>  <span class="keywordflow">if</span> (uiStartChunk &lt; m_pBitfield-&gt;m_Container.GetCount())</div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span>  {</div>
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno">  427</span>    <span class="keyword">const</span> ezUInt32 uiLastChunk = m_pBitfield-&gt;m_Container.GetCount() - 1;</div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span>    <span class="keywordflow">for</span> (ezUInt32 i = uiStartChunk; i &lt; uiLastChunk; ++i)</div>
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno">  429</span>    {</div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span>      <span class="keywordflow">if</span> (m_pBitfield-&gt;m_Container[i] != 0)</div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span>      {</div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span>        m_uiChunk = i;</div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span>        m_Iterator = sub_iterator(m_pBitfield-&gt;m_Container[i]);</div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span>        <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span>      }</div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span>    }</div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span> </div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span>    <span class="keyword">const</span> ezUInt32 uiMask = 0xFFFFFFFF &gt;&gt; (32 - (m_pBitfield-&gt;m_uiCount - (uiLastChunk &lt;&lt; 5)));</div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span>    <span class="keywordflow">if</span> ((m_pBitfield-&gt;m_Container[uiLastChunk] &amp; uiMask) != 0)</div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span>    {</div>
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno">  441</span>      m_uiChunk = uiLastChunk;</div>
<div class="line"><a id="l00442" name="l00442"></a><span class="lineno">  442</span>      m_Iterator = sub_iterator(m_pBitfield-&gt;m_Container[uiLastChunk] &amp; uiMask);</div>
<div class="line"><a id="l00443" name="l00443"></a><span class="lineno">  443</span>      <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00444" name="l00444"></a><span class="lineno">  444</span>    }</div>
<div class="line"><a id="l00445" name="l00445"></a><span class="lineno">  445</span>  }</div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span> </div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span>  <span class="comment">// End iterator.</span></div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span>  m_pBitfield = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span>  m_uiChunk = 0;</div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span>  m_Iterator = sub_iterator();</div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span>}</div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span> </div>
<div class="line"><a id="l00456" name="l00456"></a><span class="lineno">  456</span> </div>
<div class="line"><a id="l00457" name="l00457"></a><span class="lineno">  457</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00458" data-start="{" data-end="}">
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#a4b5144fa732d74afb51d97d2de037db8">  458</a></span>EZ_ALWAYS_INLINE <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#a4b5144fa732d74afb51d97d2de037db8">ezStaticBitfield&lt;T&gt;::ezStaticBitfield</a>()</div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span>{</div>
<div class="line"><a id="l00460" name="l00460"></a><span class="lineno">  460</span>  <span class="keyword">static_assert</span>(std::is_unsigned&lt;T&gt;::value, <span class="stringliteral">&quot;Storage type must be unsigned&quot;</span>);</div>
<div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span>}</div>
</div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span> </div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00464" name="l00464"></a><span class="lineno">  464</span>EZ_ALWAYS_INLINE <a class="code hl_class" href="../../d7/d49/classez_static_bitfield.htm">ezStaticBitfield&lt;T&gt;</a> <a class="code hl_class" href="../../d7/d49/classez_static_bitfield.htm">ezStaticBitfield&lt;T&gt;::MakeFromMask</a>(StorageType bits)</div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno">  465</span>{</div>
<div class="line"><a id="l00466" name="l00466"></a><span class="lineno">  466</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d7/d49/classez_static_bitfield.htm">ezStaticBitfield&lt;T&gt;</a>(bits);</div>
<div class="line"><a id="l00467" name="l00467"></a><span class="lineno">  467</span>}</div>
<div class="line"><a id="l00468" name="l00468"></a><span class="lineno">  468</span> </div>
<div class="line"><a id="l00469" name="l00469"></a><span class="lineno">  469</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00470" data-start="{" data-end="}">
<div class="line"><a id="l00470" name="l00470"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#ad22cb17cacfab8521e2a5289476cfbe4">  470</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#ad22cb17cacfab8521e2a5289476cfbe4">ezStaticBitfield&lt;T&gt;::IsAnyBitSet</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00471" name="l00471"></a><span class="lineno">  471</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span>  <span class="keywordflow">return</span> m_Storage != 0;</div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span>}</div>
</div>
<div class="line"><a id="l00474" name="l00474"></a><span class="lineno">  474</span> </div>
<div class="line"><a id="l00475" name="l00475"></a><span class="lineno">  475</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00476" data-start="{" data-end="}">
<div class="line"><a id="l00476" name="l00476"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#ac08954c1c7161ecf4e568f867286969e">  476</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#ac08954c1c7161ecf4e568f867286969e">ezStaticBitfield&lt;T&gt;::IsNoBitSet</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00477" name="l00477"></a><span class="lineno">  477</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno">  478</span>  <span class="keywordflow">return</span> m_Storage == 0;</div>
<div class="line"><a id="l00479" name="l00479"></a><span class="lineno">  479</span>}</div>
</div>
<div class="line"><a id="l00480" name="l00480"></a><span class="lineno">  480</span> </div>
<div class="line"><a id="l00481" name="l00481"></a><span class="lineno">  481</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00482" data-start="{" data-end="}">
<div class="line"><a id="l00482" name="l00482"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#a2b44eb887d27a71a67f322bf3992e1a0">  482</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#a2b44eb887d27a71a67f322bf3992e1a0">ezStaticBitfield&lt;T&gt;::AreAllBitsSet</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00483" name="l00483"></a><span class="lineno">  483</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00484" name="l00484"></a><span class="lineno">  484</span>  <span class="keyword">const</span> T inv = ~m_Storage;</div>
<div class="line"><a id="l00485" name="l00485"></a><span class="lineno">  485</span>  <span class="keywordflow">return</span> inv == 0;</div>
<div class="line"><a id="l00486" name="l00486"></a><span class="lineno">  486</span>}</div>
</div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno">  487</span> </div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00489" data-start="{" data-end="}">
<div class="line"><a id="l00489" name="l00489"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#a45f15761c9ca73cef777994ef949c4c7">  489</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#a45f15761c9ca73cef777994ef949c4c7">ezStaticBitfield&lt;T&gt;::ClearBitRange</a>(ezUInt32 uiFirstBit, ezUInt32 uiNumBits)</div>
<div class="line"><a id="l00490" name="l00490"></a><span class="lineno">  490</span>{</div>
<div class="line"><a id="l00491" name="l00491"></a><span class="lineno">  491</span>  EZ_ASSERT_DEBUG(uiFirstBit &lt; GetStorageTypeBitCount(), <span class="stringliteral">&quot;Cannot access first bit {0}, the bitfield only has {1} bits.&quot;</span>, uiFirstBit, GetStorageTypeBitCount());</div>
<div class="line"><a id="l00492" name="l00492"></a><span class="lineno">  492</span> </div>
<div class="line"><a id="l00493" name="l00493"></a><span class="lineno">  493</span>  T mask = (uiNumBits / 8 &gt;= <span class="keyword">sizeof</span>(T)) ? (~static_cast&lt;T&gt;(0)) : ((<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1) &lt;&lt; uiNumBits) - 1);</div>
<div class="line"><a id="l00494" name="l00494"></a><span class="lineno">  494</span>  mask &lt;&lt;= uiFirstBit;</div>
<div class="line"><a id="l00495" name="l00495"></a><span class="lineno">  495</span>  mask = ~mask;</div>
<div class="line"><a id="l00496" name="l00496"></a><span class="lineno">  496</span>  m_Storage &amp;= mask;</div>
<div class="line"><a id="l00497" name="l00497"></a><span class="lineno">  497</span>}</div>
</div>
<div class="line"><a id="l00498" name="l00498"></a><span class="lineno">  498</span> </div>
<div class="line"><a id="l00499" name="l00499"></a><span class="lineno">  499</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00500" data-start="{" data-end="}">
<div class="line"><a id="l00500" name="l00500"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#aa9a4922565cd058d77ebd71f1333fbb2">  500</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#aa9a4922565cd058d77ebd71f1333fbb2">ezStaticBitfield&lt;T&gt;::SetBitRange</a>(ezUInt32 uiFirstBit, ezUInt32 uiNumBits)</div>
<div class="line"><a id="l00501" name="l00501"></a><span class="lineno">  501</span>{</div>
<div class="line"><a id="l00502" name="l00502"></a><span class="lineno">  502</span>  EZ_ASSERT_DEBUG(uiFirstBit &lt; GetStorageTypeBitCount(), <span class="stringliteral">&quot;Cannot access first bit {0}, the bitfield only has {1} bits.&quot;</span>, uiFirstBit, GetStorageTypeBitCount());</div>
<div class="line"><a id="l00503" name="l00503"></a><span class="lineno">  503</span> </div>
<div class="line"><a id="l00504" name="l00504"></a><span class="lineno">  504</span>  T mask = (uiNumBits / 8 &gt;= <span class="keyword">sizeof</span>(T)) ? (~static_cast&lt;T&gt;(0)) : ((<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1) &lt;&lt; uiNumBits) - 1);</div>
<div class="line"><a id="l00505" name="l00505"></a><span class="lineno">  505</span>  mask &lt;&lt;= uiFirstBit;</div>
<div class="line"><a id="l00506" name="l00506"></a><span class="lineno">  506</span>  m_Storage |= mask;</div>
<div class="line"><a id="l00507" name="l00507"></a><span class="lineno">  507</span>}</div>
</div>
<div class="line"><a id="l00508" name="l00508"></a><span class="lineno">  508</span> </div>
<div class="line"><a id="l00509" name="l00509"></a><span class="lineno">  509</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00510" data-start="{" data-end="}">
<div class="line"><a id="l00510" name="l00510"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#a9775d824ceade69a13ed3a21c95c03a0">  510</a></span>EZ_ALWAYS_INLINE ezUInt32 <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#a9775d824ceade69a13ed3a21c95c03a0">ezStaticBitfield&lt;T&gt;::GetNumBitsSet</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00511" name="l00511"></a><span class="lineno">  511</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00512" name="l00512"></a><span class="lineno">  512</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a6a78ee109368657dafd74a19d26d6b7c">ezMath::CountBits</a>(m_Storage);</div>
<div class="line"><a id="l00513" name="l00513"></a><span class="lineno">  513</span>}</div>
</div>
<div class="line"><a id="l00514" name="l00514"></a><span class="lineno">  514</span> </div>
<div class="line"><a id="l00515" name="l00515"></a><span class="lineno">  515</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00516" data-start="{" data-end="}">
<div class="line"><a id="l00516" name="l00516"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#a016cccd3653a7d52a55ee7f528630834">  516</a></span>EZ_ALWAYS_INLINE ezUInt32 <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#a016cccd3653a7d52a55ee7f528630834">ezStaticBitfield&lt;T&gt;::GetHighestBitSet</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00517" name="l00517"></a><span class="lineno">  517</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00518" name="l00518"></a><span class="lineno">  518</span>  <span class="keywordflow">return</span> m_Storage == 0 ? GetStorageTypeBitCount() : <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a35aee647f78c0673015f09c8791c448f">ezMath::FirstBitHigh</a>(m_Storage);</div>
<div class="line"><a id="l00519" name="l00519"></a><span class="lineno">  519</span>}</div>
</div>
<div class="line"><a id="l00520" name="l00520"></a><span class="lineno">  520</span> </div>
<div class="line"><a id="l00521" name="l00521"></a><span class="lineno">  521</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00522" data-start="{" data-end="}">
<div class="line"><a id="l00522" name="l00522"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#ab01d96409feb7c5eb803d02018d17c22">  522</a></span>EZ_ALWAYS_INLINE ezUInt32 <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#ab01d96409feb7c5eb803d02018d17c22">ezStaticBitfield&lt;T&gt;::GetLowestBitSet</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00523" name="l00523"></a><span class="lineno">  523</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00524" name="l00524"></a><span class="lineno">  524</span>  <span class="keywordflow">return</span> m_Storage == 0 ? GetStorageTypeBitCount() : <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a20cbb5a32d60124534dd65b2871166d0">ezMath::FirstBitLow</a>(m_Storage);</div>
<div class="line"><a id="l00525" name="l00525"></a><span class="lineno">  525</span>}</div>
</div>
<div class="line"><a id="l00526" name="l00526"></a><span class="lineno">  526</span> </div>
<div class="line"><a id="l00527" name="l00527"></a><span class="lineno">  527</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00528" data-start="{" data-end="}">
<div class="line"><a id="l00528" name="l00528"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#abbfcf7318ab085ca06dcd8eed022060c">  528</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#abbfcf7318ab085ca06dcd8eed022060c">ezStaticBitfield&lt;T&gt;::SetAllBits</a>()</div>
<div class="line"><a id="l00529" name="l00529"></a><span class="lineno">  529</span>{</div>
<div class="line"><a id="l00530" name="l00530"></a><span class="lineno">  530</span>  m_Storage = ezMath::MaxValue&lt;T&gt;(); <span class="comment">// possible because we assert that T is unsigned</span></div>
<div class="line"><a id="l00531" name="l00531"></a><span class="lineno">  531</span>}</div>
</div>
<div class="line"><a id="l00532" name="l00532"></a><span class="lineno">  532</span> </div>
<div class="line"><a id="l00533" name="l00533"></a><span class="lineno">  533</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00534" data-start="{" data-end="}">
<div class="line"><a id="l00534" name="l00534"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#ab9c8aa0b8287fb9a6d139a4f45f8e1b7">  534</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#ab9c8aa0b8287fb9a6d139a4f45f8e1b7">ezStaticBitfield&lt;T&gt;::ClearAllBits</a>()</div>
<div class="line"><a id="l00535" name="l00535"></a><span class="lineno">  535</span>{</div>
<div class="line"><a id="l00536" name="l00536"></a><span class="lineno">  536</span>  m_Storage = 0;</div>
<div class="line"><a id="l00537" name="l00537"></a><span class="lineno">  537</span>}</div>
</div>
<div class="line"><a id="l00538" name="l00538"></a><span class="lineno">  538</span> </div>
<div class="line"><a id="l00539" name="l00539"></a><span class="lineno">  539</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00540" data-start="{" data-end="}">
<div class="line"><a id="l00540" name="l00540"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#a130bfe6663dbb0d19927e499d44a6532">  540</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#a130bfe6663dbb0d19927e499d44a6532">ezStaticBitfield&lt;T&gt;::IsBitSet</a>(ezUInt32 uiBit)<span class="keyword"> const</span></div>
<div class="line"><a id="l00541" name="l00541"></a><span class="lineno">  541</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00542" name="l00542"></a><span class="lineno">  542</span>  EZ_ASSERT_DEBUG(uiBit &lt; GetStorageTypeBitCount(), <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiBit, GetStorageTypeBitCount());</div>
<div class="line"><a id="l00543" name="l00543"></a><span class="lineno">  543</span> </div>
<div class="line"><a id="l00544" name="l00544"></a><span class="lineno">  544</span>  <span class="keywordflow">return</span> (m_Storage &amp; (<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1u) &lt;&lt; uiBit)) != 0;</div>
<div class="line"><a id="l00545" name="l00545"></a><span class="lineno">  545</span>}</div>
</div>
<div class="line"><a id="l00546" name="l00546"></a><span class="lineno">  546</span> </div>
<div class="line"><a id="l00547" name="l00547"></a><span class="lineno">  547</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00548" data-start="{" data-end="}">
<div class="line"><a id="l00548" name="l00548"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#a58dc7be6d97276d75a3049547270ede3">  548</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#a58dc7be6d97276d75a3049547270ede3">ezStaticBitfield&lt;T&gt;::ClearBit</a>(ezUInt32 uiBit)</div>
<div class="line"><a id="l00549" name="l00549"></a><span class="lineno">  549</span>{</div>
<div class="line"><a id="l00550" name="l00550"></a><span class="lineno">  550</span>  EZ_ASSERT_DEBUG(uiBit &lt; GetStorageTypeBitCount(), <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiBit, GetStorageTypeBitCount());</div>
<div class="line"><a id="l00551" name="l00551"></a><span class="lineno">  551</span> </div>
<div class="line"><a id="l00552" name="l00552"></a><span class="lineno">  552</span>  m_Storage &amp;= ~(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1u) &lt;&lt; uiBit);</div>
<div class="line"><a id="l00553" name="l00553"></a><span class="lineno">  553</span>}</div>
</div>
<div class="line"><a id="l00554" name="l00554"></a><span class="lineno">  554</span> </div>
<div class="line"><a id="l00555" name="l00555"></a><span class="lineno">  555</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00556" data-start="{" data-end="}">
<div class="line"><a id="l00556" name="l00556"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#aa2284db7917c62103fa7c39b2057a495">  556</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#aa2284db7917c62103fa7c39b2057a495">ezStaticBitfield&lt;T&gt;::SetBitValue</a>(ezUInt32 uiBit, <span class="keywordtype">bool</span> bValue)</div>
<div class="line"><a id="l00557" name="l00557"></a><span class="lineno">  557</span>{</div>
<div class="line"><a id="l00558" name="l00558"></a><span class="lineno">  558</span>  <span class="keywordflow">if</span> (bValue)</div>
<div class="line"><a id="l00559" name="l00559"></a><span class="lineno">  559</span>  {</div>
<div class="line"><a id="l00560" name="l00560"></a><span class="lineno">  560</span>    <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#a9e2f730a80533668732441f695ad13fc">SetBit</a>(uiBit);</div>
<div class="line"><a id="l00561" name="l00561"></a><span class="lineno">  561</span>  }</div>
<div class="line"><a id="l00562" name="l00562"></a><span class="lineno">  562</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00563" name="l00563"></a><span class="lineno">  563</span>  {</div>
<div class="line"><a id="l00564" name="l00564"></a><span class="lineno">  564</span>    <a class="code hl_function" href="../../d2/d62/classez_bitfield.htm#aa6d897045d639889ca47c86452abeaa3">ClearBit</a>(uiBit);</div>
<div class="line"><a id="l00565" name="l00565"></a><span class="lineno">  565</span>  }</div>
<div class="line"><a id="l00566" name="l00566"></a><span class="lineno">  566</span>}</div>
</div>
<div class="line"><a id="l00567" name="l00567"></a><span class="lineno">  567</span> </div>
<div class="line"><a id="l00568" name="l00568"></a><span class="lineno">  568</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00569" data-start="{" data-end="}">
<div class="line"><a id="l00569" name="l00569"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#a4266b70a3530425eba1ff01bd9cbd450">  569</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#a4266b70a3530425eba1ff01bd9cbd450">ezStaticBitfield&lt;T&gt;::SetBit</a>(ezUInt32 uiBit)</div>
<div class="line"><a id="l00570" name="l00570"></a><span class="lineno">  570</span>{</div>
<div class="line"><a id="l00571" name="l00571"></a><span class="lineno">  571</span>  EZ_ASSERT_DEBUG(uiBit &lt; GetStorageTypeBitCount(), <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiBit, GetStorageTypeBitCount());</div>
<div class="line"><a id="l00572" name="l00572"></a><span class="lineno">  572</span> </div>
<div class="line"><a id="l00573" name="l00573"></a><span class="lineno">  573</span>  m_Storage |= <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1u) &lt;&lt; uiBit;</div>
<div class="line"><a id="l00574" name="l00574"></a><span class="lineno">  574</span>}</div>
</div>
<div class="line"><a id="l00575" name="l00575"></a><span class="lineno">  575</span> </div>
<div class="line"><a id="l00576" name="l00576"></a><span class="lineno">  576</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00577" data-start="{" data-end="}">
<div class="line"><a id="l00577" name="l00577"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#accee6b155d9f434105428528f22afe35">  577</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#accee6b155d9f434105428528f22afe35">ezStaticBitfield&lt;T&gt;::SetValue</a>(T value)</div>
<div class="line"><a id="l00578" name="l00578"></a><span class="lineno">  578</span>{</div>
<div class="line"><a id="l00579" name="l00579"></a><span class="lineno">  579</span>  m_Storage = value;</div>
<div class="line"><a id="l00580" name="l00580"></a><span class="lineno">  580</span>}</div>
</div>
<div class="line"><a id="l00581" name="l00581"></a><span class="lineno">  581</span> </div>
<div class="line"><a id="l00582" name="l00582"></a><span class="lineno">  582</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00583" data-start="{" data-end="}">
<div class="line"><a id="l00583" name="l00583"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#a9daba5221702b65b0cf55cce45d150a6">  583</a></span>EZ_ALWAYS_INLINE T <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#a9daba5221702b65b0cf55cce45d150a6">ezStaticBitfield&lt;T&gt;::GetValue</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00584" name="l00584"></a><span class="lineno">  584</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00585" name="l00585"></a><span class="lineno">  585</span>  <span class="keywordflow">return</span> m_Storage;</div>
<div class="line"><a id="l00586" name="l00586"></a><span class="lineno">  586</span>}</div>
</div>
<div class="line"><a id="l00587" name="l00587"></a><span class="lineno">  587</span> </div>
<div class="line"><a id="l00588" name="l00588"></a><span class="lineno">  588</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00589" data-start="{" data-end="}">
<div class="line"><a id="l00589" name="l00589"></a><span class="lineno"><a class="line" href="../../d7/d49/classez_static_bitfield.htm#a30b63579f89956cc28569ee272d12287">  589</a></span>EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/d49/classez_static_bitfield.htm#a30b63579f89956cc28569ee272d12287">ezStaticBitfield&lt;T&gt;::Swap</a>(<a class="code hl_class" href="../../d7/d49/classez_static_bitfield.htm">ezStaticBitfield&lt;T&gt;</a>&amp; other)</div>
<div class="line"><a id="l00590" name="l00590"></a><span class="lineno">  590</span>{</div>
<div class="line"><a id="l00591" name="l00591"></a><span class="lineno">  591</span>  <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a0cd624055a97c96719b925cb11e6a08e">ezMath::Swap</a>(m_Storage, other.m_Storage);</div>
<div class="line"><a id="l00592" name="l00592"></a><span class="lineno">  592</span>}</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="ttc" id="aclassez_bitfield_htm"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm">ezBitfield</a></div><div class="ttdoc">A template interface, that turns any array class into a bitfield.</div><div class="ttdef"><b>Definition</b> Bitfield.h:17</div></div>
<div class="ttc" id="aclassez_bitfield_htm_a2df952dade46abd60d44d954c4b5c821"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#a2df952dade46abd60d44d954c4b5c821">ezBitfield::AreAllBitsSet</a></div><div class="ttdeci">bool AreAllBitsSet(ezUInt32 uiFirstBit=0, ezUInt32 uiNumBits=0xFFFFFFFF) const</div><div class="ttdoc">Returns true, if the bitfield is not empty and all bits are set to one.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:116</div></div>
<div class="ttc" id="aclassez_bitfield_htm_a3159aa4e2ec2324c0f091d03a2e2ec58"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#a3159aa4e2ec2324c0f091d03a2e2ec58">ezBitfield::Swap</a></div><div class="ttdeci">void Swap(ezBitfield&lt; Container &gt; &amp;other)</div><div class="ttdoc">Swaps two bitfields.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:348</div></div>
<div class="ttc" id="aclassez_bitfield_htm_a33f3b1f5dcb047a2ec667470281e7187"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#a33f3b1f5dcb047a2ec667470281e7187">ezBitfield::ClearAllBits</a></div><div class="ttdeci">void ClearAllBits()</div><div class="ttdoc">Clears all bits to 0.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:220</div></div>
<div class="ttc" id="aclassez_bitfield_htm_a5d2e77f2c19d452c5a81fc2da9fb05f2"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#a5d2e77f2c19d452c5a81fc2da9fb05f2">ezBitfield::SetCount</a></div><div class="ttdeci">void SetCount(ezUInt32 uiBitCount, bool bSetNew=false)</div><div class="ttdoc">Resizes the Bitfield to hold the given number of bits. If bSetNew is true, new bits are set to 1,...</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:32</div></div>
<div class="ttc" id="aclassez_bitfield_htm_a70227b5d55aa22501e99824d4f490e8c"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#a70227b5d55aa22501e99824d4f490e8c">ezBitfield::GetIterator</a></div><div class="ttdeci">ConstIterator GetIterator() const</div><div class="ttdoc">Returns a constant iterator to the very first set bit. Note that due to the way iterating through bit...</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:355</div></div>
<div class="ttc" id="aclassez_bitfield_htm_a7541e5112a522c7429f2f18e95fef35c"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#a7541e5112a522c7429f2f18e95fef35c">ezBitfield::SetCountUninitialized</a></div><div class="ttdeci">void SetCountUninitialized(ezUInt32 uiBitCount)</div><div class="ttdoc">Resizes the Bitfield to hold the given number of bits. This version does NOT initialize new bits!</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:23</div></div>
<div class="ttc" id="aclassez_bitfield_htm_a7d72c9d5cdef37f42a845d7d191453fd"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#a7d72c9d5cdef37f42a845d7d191453fd">ezBitfield::IsAnyBitSet</a></div><div class="ttdeci">bool IsAnyBitSet(ezUInt32 uiFirstBit=0, ezUInt32 uiNumBits=0xFFFFFFFF) const</div><div class="ttdoc">Returns true, if the bitfield is not empty and any bit is 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:58</div></div>
<div class="ttc" id="aclassez_bitfield_htm_a97bcb21f9c0e2472111fe7d97948392b"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#a97bcb21f9c0e2472111fe7d97948392b">ezBitfield::ClearBitRange</a></div><div class="ttdeci">void ClearBitRange(ezUInt32 uiFirstBit, ezUInt32 uiNumBits)</div><div class="ttdoc">Clears the range starting at uiFirstBit up to (and including) uiLastBit to 0.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:272</div></div>
<div class="ttc" id="aclassez_bitfield_htm_a9d36e4a2ce7de807150f3c06f87c8e39"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#a9d36e4a2ce7de807150f3c06f87c8e39">ezBitfield::FlipBit</a></div><div class="ttdeci">void FlipBit(ezUInt32 uiBit)</div><div class="ttdoc">Flips the given bit to the opposite value.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:191</div></div>
<div class="ttc" id="aclassez_bitfield_htm_a9e2f730a80533668732441f695ad13fc"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#a9e2f730a80533668732441f695ad13fc">ezBitfield::SetBit</a></div><div class="ttdeci">void SetBit(ezUInt32 uiBit)</div><div class="ttdoc">Sets the given bit to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:175</div></div>
<div class="ttc" id="aclassez_bitfield_htm_aa6d897045d639889ca47c86452abeaa3"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#aa6d897045d639889ca47c86452abeaa3">ezBitfield::ClearBit</a></div><div class="ttdeci">void ClearBit(ezUInt32 uiBit)</div><div class="ttdoc">Clears the given bit to 0.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:183</div></div>
<div class="ttc" id="aclassez_bitfield_htm_ab30c12ebc439eef63010e8c3d5a56471"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#ab30c12ebc439eef63010e8c3d5a56471">ezBitfield::IsBitSet</a></div><div class="ttdeci">bool IsBitSet(ezUInt32 uiBit) const</div><div class="ttdoc">Returns true, if the given bit is set to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:212</div></div>
<div class="ttc" id="aclassez_bitfield_htm_ac93aa3da4c16de9c15887e99b788e90f"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#ac93aa3da4c16de9c15887e99b788e90f">ezBitfield::SetAllBits</a></div><div class="ttdeci">void SetAllBits()</div><div class="ttdoc">Sets all bits to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:227</div></div>
<div class="ttc" id="aclassez_bitfield_htm_acefb6bbf5ba62038a91adfdfd527344c"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#acefb6bbf5ba62038a91adfdfd527344c">ezBitfield::IsNoBitSet</a></div><div class="ttdeci">bool IsNoBitSet(ezUInt32 uiFirstBit=0, ezUInt32 uiNumBits=0xFFFFFFFF) const</div><div class="ttdoc">Returns true, if the bitfield is empty or all bits are set to zero.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:110</div></div>
<div class="ttc" id="aclassez_bitfield_htm_acf370dced312910f0aca4ea0449c54d5"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#acf370dced312910f0aca4ea0449c54d5">ezBitfield::GetCount</a></div><div class="ttdeci">ezUInt32 GetCount() const</div><div class="ttdoc">Returns the number of bits that this bitfield stores.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:16</div></div>
<div class="ttc" id="aclassez_bitfield_htm_ad418a90f02802f36dce70a2ad1c02e06"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#ad418a90f02802f36dce70a2ad1c02e06">ezBitfield::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns true, if the bitfield does not store any bits.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:52</div></div>
<div class="ttc" id="aclassez_bitfield_htm_ad763e7abf19b47325c0c510a15bb208f"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#ad763e7abf19b47325c0c510a15bb208f">ezBitfield::FlipBitRange</a></div><div class="ttdeci">void FlipBitRange(ezUInt32 uiFirstBit, ezUInt32 uiNumBits)</div><div class="ttdoc">Flips the range starting at uiFirstBit up to (and including) uiLastBit.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:310</div></div>
<div class="ttc" id="aclassez_bitfield_htm_adcad809b5a1ef9295d853af3684c7e1a"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#adcad809b5a1ef9295d853af3684c7e1a">ezBitfield::SetBitRange</a></div><div class="ttdeci">void SetBitRange(ezUInt32 uiFirstBit, ezUInt32 uiNumBits)</div><div class="ttdoc">Sets the range starting at uiFirstBit up to (and including) uiLastBit to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:234</div></div>
<div class="ttc" id="aclassez_bitfield_htm_adfd442d45f029ab1f3b3ee04e5c02c55"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#adfd442d45f029ab1f3b3ee04e5c02c55">ezBitfield::GetEndIterator</a></div><div class="ttdeci">ConstIterator GetEndIterator() const</div><div class="ttdoc">Returns an invalid iterator. Needed to support range based for loops.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:361</div></div>
<div class="ttc" id="aclassez_bitfield_htm_aea4835778bbdab097300e08eb69a744b"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#aea4835778bbdab097300e08eb69a744b">ezBitfield::SetBitValue</a></div><div class="ttdeci">void SetBitValue(ezUInt32 uiBit, bool bValue)</div><div class="ttdoc">Sets the given bit to 1 or 0 depending on the given value.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:199</div></div>
<div class="ttc" id="aclassez_bitfield_htm_aec1f88c81c67279e730d88fcd6e48723"><div class="ttname"><a href="../../d2/d62/classez_bitfield.htm#aec1f88c81c67279e730d88fcd6e48723">ezBitfield::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Discards all bits and sets count to zero.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:168</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm">ezStaticBitfield</a></div><div class="ttdef"><b>Definition</b> Bitfield.h:173</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_a016cccd3653a7d52a55ee7f528630834"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#a016cccd3653a7d52a55ee7f528630834">ezStaticBitfield::GetHighestBitSet</a></div><div class="ttdeci">ezUInt32 GetHighestBitSet() const</div><div class="ttdoc">Returns the index of the highest bit that is set. Returns the max index+1 in case no bit is set,...</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:516</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_a130bfe6663dbb0d19927e499d44a6532"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#a130bfe6663dbb0d19927e499d44a6532">ezStaticBitfield::IsBitSet</a></div><div class="ttdeci">bool IsBitSet(ezUInt32 uiBit) const</div><div class="ttdoc">Returns true, if the given bit is set to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:540</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_a2b44eb887d27a71a67f322bf3992e1a0"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#a2b44eb887d27a71a67f322bf3992e1a0">ezStaticBitfield::AreAllBitsSet</a></div><div class="ttdeci">bool AreAllBitsSet() const</div><div class="ttdoc">Returns true, if the bitfield is not empty and all bits are set to one.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:482</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_a30b63579f89956cc28569ee272d12287"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#a30b63579f89956cc28569ee272d12287">ezStaticBitfield::Swap</a></div><div class="ttdeci">void Swap(ezStaticBitfield&lt; T &gt; &amp;other)</div><div class="ttdoc">Swaps two bitfields.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:589</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_a4266b70a3530425eba1ff01bd9cbd450"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#a4266b70a3530425eba1ff01bd9cbd450">ezStaticBitfield::SetBit</a></div><div class="ttdeci">void SetBit(ezUInt32 uiBit)</div><div class="ttdoc">Sets the given bit to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:569</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_a45f15761c9ca73cef777994ef949c4c7"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#a45f15761c9ca73cef777994ef949c4c7">ezStaticBitfield::ClearBitRange</a></div><div class="ttdeci">void ClearBitRange(ezUInt32 uiFirstBit, ezUInt32 uiNumBits)</div><div class="ttdoc">Clears the range starting at uiFirstBit up to (and including) uiLastBit to 0.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:489</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_a4b5144fa732d74afb51d97d2de037db8"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#a4b5144fa732d74afb51d97d2de037db8">ezStaticBitfield::ezStaticBitfield</a></div><div class="ttdeci">ezStaticBitfield()</div><div class="ttdoc">Initializes the bitfield to all zero.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:458</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_a58dc7be6d97276d75a3049547270ede3"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#a58dc7be6d97276d75a3049547270ede3">ezStaticBitfield::ClearBit</a></div><div class="ttdeci">void ClearBit(ezUInt32 uiBit)</div><div class="ttdoc">Clears the given bit to 0.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:548</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_a9775d824ceade69a13ed3a21c95c03a0"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#a9775d824ceade69a13ed3a21c95c03a0">ezStaticBitfield::GetNumBitsSet</a></div><div class="ttdeci">ezUInt32 GetNumBitsSet() const</div><div class="ttdoc">Returns the count of how many bits are set in total.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:510</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_a9daba5221702b65b0cf55cce45d150a6"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#a9daba5221702b65b0cf55cce45d150a6">ezStaticBitfield::GetValue</a></div><div class="ttdeci">T GetValue() const</div><div class="ttdoc">Returns the raw uint that stores all bits.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:583</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_aa2284db7917c62103fa7c39b2057a495"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#aa2284db7917c62103fa7c39b2057a495">ezStaticBitfield::SetBitValue</a></div><div class="ttdeci">void SetBitValue(ezUInt32 uiBit, bool bValue)</div><div class="ttdoc">Sets the given bit to 1 or 0 depending on the given value.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:556</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_aa9a4922565cd058d77ebd71f1333fbb2"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#aa9a4922565cd058d77ebd71f1333fbb2">ezStaticBitfield::SetBitRange</a></div><div class="ttdeci">void SetBitRange(ezUInt32 uiFirstBit, ezUInt32 uiNumBits)</div><div class="ttdoc">Sets the range starting at uiFirstBit up to (and including) uiLastBit to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:500</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_ab01d96409feb7c5eb803d02018d17c22"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#ab01d96409feb7c5eb803d02018d17c22">ezStaticBitfield::GetLowestBitSet</a></div><div class="ttdeci">ezUInt32 GetLowestBitSet() const</div><div class="ttdoc">Returns the index of the lowest bit that is set. Returns the max index+1 in case no bit is set,...</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:522</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_ab9c8aa0b8287fb9a6d139a4f45f8e1b7"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#ab9c8aa0b8287fb9a6d139a4f45f8e1b7">ezStaticBitfield::ClearAllBits</a></div><div class="ttdeci">void ClearAllBits()</div><div class="ttdoc">Clears all bits to 0. Same as Clear().</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:534</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_abbfcf7318ab085ca06dcd8eed022060c"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#abbfcf7318ab085ca06dcd8eed022060c">ezStaticBitfield::SetAllBits</a></div><div class="ttdeci">void SetAllBits()</div><div class="ttdoc">Sets all bits to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:528</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_ac08954c1c7161ecf4e568f867286969e"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#ac08954c1c7161ecf4e568f867286969e">ezStaticBitfield::IsNoBitSet</a></div><div class="ttdeci">bool IsNoBitSet() const</div><div class="ttdoc">Returns true, if the bitfield is all zero.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:476</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_accee6b155d9f434105428528f22afe35"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#accee6b155d9f434105428528f22afe35">ezStaticBitfield::SetValue</a></div><div class="ttdeci">void SetValue(T value)</div><div class="ttdoc">Sets the raw uint that stores all bits.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:577</div></div>
<div class="ttc" id="aclassez_static_bitfield_htm_ad22cb17cacfab8521e2a5289476cfbe4"><div class="ttname"><a href="../../d7/d49/classez_static_bitfield.htm#ad22cb17cacfab8521e2a5289476cfbe4">ezStaticBitfield::IsAnyBitSet</a></div><div class="ttdeci">bool IsAnyBitSet() const</div><div class="ttdoc">Returns true, if the bitfield is not zero.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:470</div></div>
<div class="ttc" id="anamespaceez_math_htm_a0cd624055a97c96719b925cb11e6a08e"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a0cd624055a97c96719b925cb11e6a08e">ezMath::Swap</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void Swap(T &amp;ref_f1, T &amp;ref_f2)</div><div class="ttdoc">Swaps the values in the two variables f1 and f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:224</div></div>
<div class="ttc" id="anamespaceez_math_htm_a20cbb5a32d60124534dd65b2871166d0"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a20cbb5a32d60124534dd65b2871166d0">ezMath::FirstBitLow</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 FirstBitLow(ezUInt32 value)</div><div class="ttdoc">Returns the index of the least significant bit set.</div><div class="ttdef"><b>Definition</b> Math_inl.h:70</div></div>
<div class="ttc" id="anamespaceez_math_htm_a35aee647f78c0673015f09c8791c448f"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a35aee647f78c0673015f09c8791c448f">ezMath::FirstBitHigh</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 FirstBitHigh(ezUInt32 value)</div><div class="ttdoc">Returns the index of the most significant bit set.</div><div class="ttdef"><b>Definition</b> Math_inl.h:119</div></div>
<div class="ttc" id="anamespaceez_math_htm_a6a78ee109368657dafd74a19d26d6b7c"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a6a78ee109368657dafd74a19d26d6b7c">ezMath::CountBits</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 CountBits(ezUInt32 value)</div><div class="ttdoc">Returns the number of bits set.</div><div class="ttdef"><b>Definition</b> Math_inl.h:186</div></div>
<div class="ttc" id="astructez_bitfield_1_1_const_iterator_htm"><div class="ttname"><a href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm">ezBitfield::ConstIterator</a></div><div class="ttdef"><b>Definition</b> Bitfield.h:79</div></div>
<div class="ttc" id="astructez_bitfield_1_1_const_iterator_htm_a2d3af420b2dc2159b53f719480f3d537"><div class="ttname"><a href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#a2d3af420b2dc2159b53f719480f3d537">ezBitfield::ConstIterator::operator*</a></div><div class="ttdeci">ezUInt32 operator*() const</div><div class="ttdoc">Returns 'Value()' to enable foreach.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:411</div></div>
<div class="ttc" id="astructez_bitfield_1_1_const_iterator_htm_a71580bc7b631b06035d3dac246117683"><div class="ttname"><a href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#a71580bc7b631b06035d3dac246117683">ezBitfield::ConstIterator::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:377</div></div>
<div class="ttc" id="astructez_bitfield_1_1_const_iterator_htm_a968365d6099b6b0d62f8dcf8af128d7c"><div class="ttname"><a href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#a968365d6099b6b0d62f8dcf8af128d7c">ezBitfield::ConstIterator::Next</a></div><div class="ttdeci">void Next()</div><div class="ttdoc">Advances the iterator to the next element in the map. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:389</div></div>
<div class="ttc" id="astructez_bitfield_1_1_const_iterator_htm_ad32dd9d4e1ff55736f08c582341273c7"><div class="ttname"><a href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#ad32dd9d4e1ff55736f08c582341273c7">ezBitfield::ConstIterator::Value</a></div><div class="ttdeci">ezUInt32 Value() const</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:383</div></div>
<div class="ttc" id="astructez_bitfield_1_1_const_iterator_htm_afd619a287d812aeec615c111f057444e"><div class="ttname"><a href="../../d4/d3a/structez_bitfield_1_1_const_iterator.htm#afd619a287d812aeec615c111f057444e">ezBitfield::ConstIterator::operator++</a></div><div class="ttdeci">void operator++()</div><div class="ttdoc">Shorthand for 'Next'.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:417</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_6b567e6755824bd0b8ffd754b9d67ac0.htm">Containers</a></li><li class="navelem"><a class="el" href="../../dir_ab7c7fd106dde24a64865a60f78fe0d2.htm">Implementation</a></li><li class="navelem"><b>Bitfield_inl.h</b></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:17:45 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
