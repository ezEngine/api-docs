<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezFrustum Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.10</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d0/db8/classez_frustum.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../d9/d8d/classez_frustum-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezFrustum Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Represents the frustum of some camera and can be used for culling objects.  
 <a href="../../d0/db8/classez_frustum.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d5/d69/_frustum_8h_source.htm">Frustum.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a8cbb516b1898a6e2428f44e1522dd8e8"><td class="memItemLeft" align="right" valign="top"><a id="a8cbb516b1898a6e2428f44e1522dd8e8"></a>enum &#160;</td><td class="memItemRight" valign="bottom"><b>PlaneType</b> : ezUInt8 { <br />
&#160;&#160;<b>NearPlane</b>, 
<b>LeftPlane</b>, 
<b>RightPlane</b>, 
<b>FarPlane</b>, 
<br />
&#160;&#160;<b>BottomPlane</b>, 
<b>TopPlane</b>, 
<b>PLANE_COUNT</b>
<br />
 }</td></tr>
<tr class="separator:a8cbb516b1898a6e2428f44e1522dd8e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae250fb17b8fe1c10bc4ceafc0efeb5db"><td class="memItemLeft" align="right" valign="top"><a id="ae250fb17b8fe1c10bc4ceafc0efeb5db"></a>enum &#160;</td><td class="memItemRight" valign="bottom"><b>FrustumCorner</b> : ezUInt8 { <br />
&#160;&#160;<b>NearTopLeft</b>, 
<b>NearTopRight</b>, 
<b>NearBottomLeft</b>, 
<b>NearBottomRight</b>, 
<br />
&#160;&#160;<b>FarTopLeft</b>, 
<b>FarTopRight</b>, 
<b>FarBottomLeft</b>, 
<b>FarBottomRight</b>, 
<br />
&#160;&#160;<b>CORNER_COUNT</b> = 8
<br />
 }</td></tr>
<tr class="separator:ae250fb17b8fe1c10bc4ceafc0efeb5db"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a3d667d8762089da295b9fb375d2ff8a3"><td class="memItemLeft" align="right" valign="top"><a id="a3d667d8762089da295b9fb375d2ff8a3"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#a3d667d8762089da295b9fb375d2ff8a3">ezFrustum</a> ()</td></tr>
<tr class="memdesc:a3d667d8762089da295b9fb375d2ff8a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">The constructor does NOT initialize the frustum planes, make sure to call <a class="el" href="../../d0/db8/classez_frustum.htm#a538e7cf74b4b662fdd6b50cdd1f4b36d" title="Sets the frustum manually by specifying the planes directly.">SetFrustum()</a> before trying to use it. <br /></td></tr>
<tr class="separator:a3d667d8762089da295b9fb375d2ff8a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a538e7cf74b4b662fdd6b50cdd1f4b36d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#a538e7cf74b4b662fdd6b50cdd1f4b36d">SetFrustum</a> (const <a class="el" href="../../d5/d8d/structez_plane_template.htm">ezPlane</a> *pPlanes)</td></tr>
<tr class="memdesc:a538e7cf74b4b662fdd6b50cdd1f4b36d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the frustum manually by specifying the planes directly.  <a href="../../d0/db8/classez_frustum.htm#a538e7cf74b4b662fdd6b50cdd1f4b36d">More...</a><br /></td></tr>
<tr class="separator:a538e7cf74b4b662fdd6b50cdd1f4b36d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3089a062dab9d5e28b52d888a9a23b18"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#a3089a062dab9d5e28b52d888a9a23b18">SetFrustum</a> (const <a class="el" href="../../d7/d9b/classez_mat4_template.htm">ezMat4</a> &amp;ModelViewProjection, <a class="el" href="../../d5/d43/structez_clip_space_depth_range.htm#aaef2d8dc85169b979f599baca3d2d137">ezClipSpaceDepthRange::Enum</a> DepthRange=<a class="el" href="../../d5/d43/structez_clip_space_depth_range.htm#a0f17abaf411da309c90f048ef64c5781">ezClipSpaceDepthRange::Default</a>, ezHandedness::Enum Handedness=<a class="el" href="../../d5/dc3/structez_handedness.htm#ab02ad782c6b66f21dbcd56a58d5a8487">ezHandedness::Default</a>)</td></tr>
<tr class="memdesc:a3089a062dab9d5e28b52d888a9a23b18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates the frustum by extracting the planes from the given (model-view / projection) matrix.  <a href="../../d0/db8/classez_frustum.htm#a3089a062dab9d5e28b52d888a9a23b18">More...</a><br /></td></tr>
<tr class="separator:a3089a062dab9d5e28b52d888a9a23b18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79ab6220db2de69b48ae3c9a6058a2f7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#a79ab6220db2de69b48ae3c9a6058a2f7">SetFrustum</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3</a> &amp;vPosition, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3</a> &amp;vForwards, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3</a> &amp;vUp, <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> FovX, <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> FovY, float fNearPlane, float fFarPlane)</td></tr>
<tr class="memdesc:a79ab6220db2de69b48ae3c9a6058a2f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a frustum from the given camera position, direction vectors and the field-of-view along X and Y.  <a href="../../d0/db8/classez_frustum.htm#a79ab6220db2de69b48ae3c9a6058a2f7">More...</a><br /></td></tr>
<tr class="separator:a79ab6220db2de69b48ae3c9a6058a2f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3897c33a4a8eb2c91fef6df045772a94"><td class="memItemLeft" align="right" valign="top"><a id="a3897c33a4a8eb2c91fef6df045772a94"></a>
const <a class="el" href="../../d5/d8d/structez_plane_template.htm">ezPlane</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#a3897c33a4a8eb2c91fef6df045772a94">GetPlane</a> (ezUInt8 uiPlane) const</td></tr>
<tr class="memdesc:a3897c33a4a8eb2c91fef6df045772a94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the n-th plane of the frustum. <br /></td></tr>
<tr class="separator:a3897c33a4a8eb2c91fef6df045772a94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add4a375ecdcf83e5072ef0bdf7f0ffd1"><td class="memItemLeft" align="right" valign="top"><a id="add4a375ecdcf83e5072ef0bdf7f0ffd1"></a>
<a class="el" href="../../d5/d8d/structez_plane_template.htm">ezPlane</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#add4a375ecdcf83e5072ef0bdf7f0ffd1">AccessPlane</a> (ezUInt8 uiPlane)</td></tr>
<tr class="memdesc:add4a375ecdcf83e5072ef0bdf7f0ffd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the n-th plane of the frustum and allows modification. <br /></td></tr>
<tr class="separator:add4a375ecdcf83e5072ef0bdf7f0ffd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28cb5adf9ed54ce3678fcb166da8ef8d"><td class="memItemLeft" align="right" valign="top"><a id="a28cb5adf9ed54ce3678fcb166da8ef8d"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#a28cb5adf9ed54ce3678fcb166da8ef8d">IsValid</a> () const</td></tr>
<tr class="memdesc:a28cb5adf9ed54ce3678fcb166da8ef8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks that all planes are valid. <br /></td></tr>
<tr class="separator:a28cb5adf9ed54ce3678fcb166da8ef8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff642f9f70d761a67a8d2b010da3bf2a"><td class="memItemLeft" align="right" valign="top"><a id="aff642f9f70d761a67a8d2b010da3bf2a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#aff642f9f70d761a67a8d2b010da3bf2a">TransformFrustum</a> (const <a class="el" href="../../d7/d9b/classez_mat4_template.htm">ezMat4</a> &amp;mTransform)</td></tr>
<tr class="memdesc:aff642f9f70d761a67a8d2b010da3bf2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms the frustum by the given matrix. This allows to adjust the frustum to a new orientation when a camera is moved or when it is necessary to cull from a different position. <br /></td></tr>
<tr class="separator:aff642f9f70d761a67a8d2b010da3bf2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06089e6915389c5787b9101123eef386"><td class="memItemLeft" align="right" valign="top"><a id="a06089e6915389c5787b9101123eef386"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#a06089e6915389c5787b9101123eef386">InvertFrustum</a> ()</td></tr>
<tr class="memdesc:a06089e6915389c5787b9101123eef386"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flips all frustum planes around. Might be necessary after creating the frustum from a mirror projection matrix. <br /></td></tr>
<tr class="separator:a06089e6915389c5787b9101123eef386"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46e9a6328a46a64bbb069006a75a60f2"><td class="memItemLeft" align="right" valign="top"><a id="a46e9a6328a46a64bbb069006a75a60f2"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#a46e9a6328a46a64bbb069006a75a60f2">ComputeCornerPoints</a> (<a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3</a> out_Points[FrustumCorner::CORNER_COUNT]) const</td></tr>
<tr class="memdesc:a46e9a6328a46a64bbb069006a75a60f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the frustum corner points. <br /></td></tr>
<tr class="separator:a46e9a6328a46a64bbb069006a75a60f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bc36f8174d073c02ef55b7508b467d3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../df/df1/structez_volume_position.htm#a43ceded12d28dc72e8eebeb6d1445ee0">ezVolumePosition::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#a7bc36f8174d073c02ef55b7508b467d3">GetObjectPosition</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3</a> *pVertices, ezUInt32 uiNumVertices) const</td></tr>
<tr class="memdesc:a7bc36f8174d073c02ef55b7508b467d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given object is inside or outside the frustum.  <a href="../../d0/db8/classez_frustum.htm#a7bc36f8174d073c02ef55b7508b467d3">More...</a><br /></td></tr>
<tr class="separator:a7bc36f8174d073c02ef55b7508b467d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab75c7caa7aed0c4cd2a25a71fe2a849d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../df/df1/structez_volume_position.htm#a43ceded12d28dc72e8eebeb6d1445ee0">ezVolumePosition::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#ab75c7caa7aed0c4cd2a25a71fe2a849d">GetObjectPosition</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3</a> *pVertices, ezUInt32 uiNumVertices, const <a class="el" href="../../d7/d9b/classez_mat4_template.htm">ezMat4</a> &amp;mObjectTransform) const</td></tr>
<tr class="memdesc:ab75c7caa7aed0c4cd2a25a71fe2a849d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="../../d0/db8/classez_frustum.htm#a7bc36f8174d073c02ef55b7508b467d3" title="Checks whether the given object is inside or outside the frustum.">GetObjectPosition()</a>, but applies a transformation to the given object first. This allows to do culling on instanced objects.  <a href="../../d0/db8/classez_frustum.htm#ab75c7caa7aed0c4cd2a25a71fe2a849d">More...</a><br /></td></tr>
<tr class="separator:ab75c7caa7aed0c4cd2a25a71fe2a849d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1330216a6d2d0a2db15eabda2f2935f9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../df/df1/structez_volume_position.htm#a43ceded12d28dc72e8eebeb6d1445ee0">ezVolumePosition::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#a1330216a6d2d0a2db15eabda2f2935f9">GetObjectPosition</a> (const <a class="el" href="../../d2/d50/classez_bounding_sphere_template.htm">ezBoundingSphere</a> &amp;Sphere) const</td></tr>
<tr class="memdesc:a1330216a6d2d0a2db15eabda2f2935f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given object is inside or outside the frustum.  <a href="../../d0/db8/classez_frustum.htm#a1330216a6d2d0a2db15eabda2f2935f9">More...</a><br /></td></tr>
<tr class="separator:a1330216a6d2d0a2db15eabda2f2935f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7a94ae1ece850d532b6259f0f0f51d8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../df/df1/structez_volume_position.htm#a43ceded12d28dc72e8eebeb6d1445ee0">ezVolumePosition::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#af7a94ae1ece850d532b6259f0f0f51d8">GetObjectPosition</a> (const <a class="el" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBox</a> &amp;Box) const</td></tr>
<tr class="memdesc:af7a94ae1ece850d532b6259f0f0f51d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given object is inside or outside the frustum.  <a href="../../d0/db8/classez_frustum.htm#af7a94ae1ece850d532b6259f0f0f51d8">More...</a><br /></td></tr>
<tr class="separator:af7a94ae1ece850d532b6259f0f0f51d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afca2d8abfd1533d6484aa4609a345e4e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#afca2d8abfd1533d6484aa4609a345e4e">Overlaps</a> (const <a class="el" href="../../db/dc7/classez_simd_b_box.htm">ezSimdBBox</a> &amp;object) const</td></tr>
<tr class="memdesc:afca2d8abfd1533d6484aa4609a345e4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the object is fully inside the frustum or partially overlaps it. Returns false when the object is fully outside the frustum.  <a href="../../d0/db8/classez_frustum.htm#afca2d8abfd1533d6484aa4609a345e4e">More...</a><br /></td></tr>
<tr class="separator:afca2d8abfd1533d6484aa4609a345e4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc97a25345878f18956161a3fde0fe14"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/db8/classez_frustum.htm#afc97a25345878f18956161a3fde0fe14">Overlaps</a> (const <a class="el" href="../../d4/db3/classez_simd_b_sphere.htm">ezSimdBSphere</a> &amp;object) const</td></tr>
<tr class="memdesc:afc97a25345878f18956161a3fde0fe14"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the object is fully inside the frustum or partially overlaps it. Returns false when the object is fully outside the frustum.  <a href="../../d0/db8/classez_frustum.htm#afc97a25345878f18956161a3fde0fe14">More...</a><br /></td></tr>
<tr class="separator:afc97a25345878f18956161a3fde0fe14"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Represents the frustum of some camera and can be used for culling objects. </p>
<p>The frustum always consists of exactly 6 planes (near, far, left, right, top, bottom).</p>
<p>The frustum planes point outwards, ie. when an object is in front of one of the planes, it is considered to be outside the frustum.</p>
<p>Planes can be automatically extracted from a projection matrix or passed in manually. In the latter case, make sure to pass them in in the order defined in the PlaneType enum. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="af7a94ae1ece850d532b6259f0f0f51d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7a94ae1ece850d532b6259f0f0f51d8">&#9670;&nbsp;</a></span>GetObjectPosition() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../df/df1/structez_volume_position.htm#a43ceded12d28dc72e8eebeb6d1445ee0">ezVolumePosition::Enum</a> ezFrustum::GetObjectPosition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBox</a> &amp;&#160;</td>
          <td class="paramname"><em>Box</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks whether the given object is inside or outside the frustum. </p>
<dl class="test"><dt><b><a class="el" href="../../d4/df6/test.htm#_test000020">Test:</a></b></dt><dd>Not yet tested </dd></dl>

</div>
</div>
<a id="a1330216a6d2d0a2db15eabda2f2935f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1330216a6d2d0a2db15eabda2f2935f9">&#9670;&nbsp;</a></span>GetObjectPosition() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../df/df1/structez_volume_position.htm#a43ceded12d28dc72e8eebeb6d1445ee0">ezVolumePosition::Enum</a> ezFrustum::GetObjectPosition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d2/d50/classez_bounding_sphere_template.htm">ezBoundingSphere</a> &amp;&#160;</td>
          <td class="paramname"><em>Sphere</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks whether the given object is inside or outside the frustum. </p>
<dl class="test"><dt><b><a class="el" href="../../d4/df6/test.htm#_test000019">Test:</a></b></dt><dd>Not yet tested </dd></dl>

</div>
</div>
<a id="a7bc36f8174d073c02ef55b7508b467d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7bc36f8174d073c02ef55b7508b467d3">&#9670;&nbsp;</a></span>GetObjectPosition() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../df/df1/structez_volume_position.htm#a43ceded12d28dc72e8eebeb6d1445ee0">ezVolumePosition::Enum</a> ezFrustum::GetObjectPosition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3</a> *&#160;</td>
          <td class="paramname"><em>pVertices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumVertices</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks whether the given object is inside or outside the frustum. </p>
<p>A concave object might be classified as 'intersecting' although it is outside the frustum, if it overlaps the planes just right. However an object that overlaps the frustum is definitely never classified as 'outside'. </p>
<dl class="test"><dt><b><a class="el" href="../../d4/df6/test.htm#_test000017">Test:</a></b></dt><dd>Not yet tested </dd></dl>

</div>
</div>
<a id="ab75c7caa7aed0c4cd2a25a71fe2a849d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab75c7caa7aed0c4cd2a25a71fe2a849d">&#9670;&nbsp;</a></span>GetObjectPosition() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../df/df1/structez_volume_position.htm#a43ceded12d28dc72e8eebeb6d1445ee0">ezVolumePosition::Enum</a> ezFrustum::GetObjectPosition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3</a> *&#160;</td>
          <td class="paramname"><em>pVertices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumVertices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d7/d9b/classez_mat4_template.htm">ezMat4</a> &amp;&#160;</td>
          <td class="paramname"><em>mObjectTransform</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Same as <a class="el" href="../../d0/db8/classez_frustum.htm#a7bc36f8174d073c02ef55b7508b467d3" title="Checks whether the given object is inside or outside the frustum.">GetObjectPosition()</a>, but applies a transformation to the given object first. This allows to do culling on instanced objects. </p>
<dl class="test"><dt><b><a class="el" href="../../d4/df6/test.htm#_test000018">Test:</a></b></dt><dd>Not yet tested </dd></dl>

</div>
</div>
<a id="afca2d8abfd1533d6484aa4609a345e4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afca2d8abfd1533d6484aa4609a345e4e">&#9670;&nbsp;</a></span>Overlaps() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EZ_FORCE_INLINE bool ezFrustum::Overlaps </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../db/dc7/classez_simd_b_box.htm">ezSimdBBox</a> &amp;&#160;</td>
          <td class="paramname"><em>object</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the object is fully inside the frustum or partially overlaps it. Returns false when the object is fully outside the frustum. </p>
<p>This function is more efficient than <a class="el" href="../../d0/db8/classez_frustum.htm#a7bc36f8174d073c02ef55b7508b467d3" title="Checks whether the given object is inside or outside the frustum.">GetObjectPosition()</a> and should be preferred when possible. </p>

</div>
</div>
<a id="afc97a25345878f18956161a3fde0fe14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc97a25345878f18956161a3fde0fe14">&#9670;&nbsp;</a></span>Overlaps() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EZ_FORCE_INLINE bool ezFrustum::Overlaps </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/db3/classez_simd_b_sphere.htm">ezSimdBSphere</a> &amp;&#160;</td>
          <td class="paramname"><em>object</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the object is fully inside the frustum or partially overlaps it. Returns false when the object is fully outside the frustum. </p>
<p>This function is more efficient than <a class="el" href="../../d0/db8/classez_frustum.htm#a7bc36f8174d073c02ef55b7508b467d3" title="Checks whether the given object is inside or outside the frustum.">GetObjectPosition()</a> and should be preferred when possible. </p>

</div>
</div>
<a id="a3089a062dab9d5e28b52d888a9a23b18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3089a062dab9d5e28b52d888a9a23b18">&#9670;&nbsp;</a></span>SetFrustum() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezFrustum::SetFrustum </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d7/d9b/classez_mat4_template.htm">ezMat4</a> &amp;&#160;</td>
          <td class="paramname"><em>ModelViewProjection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d5/d43/structez_clip_space_depth_range.htm#aaef2d8dc85169b979f599baca3d2d137">ezClipSpaceDepthRange::Enum</a>&#160;</td>
          <td class="paramname"><em>DepthRange</em> = <code><a class="el" href="../../d5/d43/structez_clip_space_depth_range.htm#a0f17abaf411da309c90f048ef64c5781">ezClipSpaceDepthRange::Default</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezHandedness::Enum&#160;</td>
          <td class="paramname"><em>Handedness</em> = <code><a class="el" href="../../d5/dc3/structez_handedness.htm#ab02ad782c6b66f21dbcd56a58d5a8487">ezHandedness::Default</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates the frustum by extracting the planes from the given (model-view / projection) matrix. </p>
<p>If the matrix is just the projection matrix, the frustum will be in local space. Pass the full ModelViewProjection matrix to create the frustum in world-space. </p>

</div>
</div>
<a id="a538e7cf74b4b662fdd6b50cdd1f4b36d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a538e7cf74b4b662fdd6b50cdd1f4b36d">&#9670;&nbsp;</a></span>SetFrustum() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezFrustum::SetFrustum </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d5/d8d/structez_plane_template.htm">ezPlane</a> *&#160;</td>
          <td class="paramname"><em>pPlanes</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the frustum manually by specifying the planes directly. </p>
<dl class="section note"><dt>Note</dt><dd>Make sure to pass in the planes in the order of the PlaneType enum, otherwise <a class="el" href="../../d0/db8/classez_frustum.htm" title="Represents the frustum of some camera and can be used for culling objects.">ezFrustum</a> may not always work as expected. </dd></dl>

</div>
</div>
<a id="a79ab6220db2de69b48ae3c9a6058a2f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79ab6220db2de69b48ae3c9a6058a2f7">&#9670;&nbsp;</a></span>SetFrustum() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezFrustum::SetFrustum </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3</a> &amp;&#160;</td>
          <td class="paramname"><em>vPosition</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3</a> &amp;&#160;</td>
          <td class="paramname"><em>vForwards</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3</a> &amp;&#160;</td>
          <td class="paramname"><em>vUp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a>&#160;</td>
          <td class="paramname"><em>FovX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a>&#160;</td>
          <td class="paramname"><em>FovY</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fNearPlane</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fFarPlane</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a frustum from the given camera position, direction vectors and the field-of-view along X and Y. </p>
<p>The up vector does not need to be exactly orthogonal to the forwards vector, it will get recomputed properly. FOV X and Y define the entire field-of-view, so a FOV of 180 degree would mean the entire half-space in front of the camera. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/<a class="el" href="../../d5/d69/_frustum_8h_source.htm">Frustum.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/Implementation/Frustum.cpp</li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/Implementation/<a class="el" href="../../d9/d37/_frustum__inl_8h_source.htm">Frustum_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d0/db8/classez_frustum.htm">ezFrustum</a></li>
    <li class="footer">Generated on Mon Oct 18 2021 15:33:36 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
