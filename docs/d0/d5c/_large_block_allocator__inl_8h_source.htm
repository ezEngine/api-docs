<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Memory/Implementation/LargeBlockAllocator_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function() { init_codefold(1); });
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('d0/d5c/_large_block_allocator__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">LargeBlockAllocator_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span> </div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt32 SizeInBytes&gt;</div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span>EZ_ALWAYS_INLINE <a class="code hl_struct" href="../../d6/d01/structez_data_block.htm">ezDataBlock&lt;T, SizeInBytes&gt;::ezDataBlock</a>(T* pData, ezUInt32 uiCount)</div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span>{</div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span>  m_pData = pData;</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span>  m_uiCount = uiCount;</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>}</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span> </div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt32 SizeInBytes&gt;</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>EZ_FORCE_INLINE T* <a class="code hl_struct" href="../../d6/d01/structez_data_block.htm">ezDataBlock&lt;T, SizeInBytes&gt;::ReserveBack</a>()</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>{</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>  EZ_ASSERT_DEV(m_uiCount &lt; CAPACITY, <span class="stringliteral">&quot;Block is full.&quot;</span>);</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>  <span class="keywordflow">return</span> m_pData + m_uiCount++;</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>}</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt32 SizeInBytes&gt;</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>EZ_FORCE_INLINE T* <a class="code hl_struct" href="../../d6/d01/structez_data_block.htm">ezDataBlock&lt;T, SizeInBytes&gt;::PopBack</a>()</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>{</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>  EZ_ASSERT_DEV(m_uiCount &gt; 0, <span class="stringliteral">&quot;Block is empty&quot;</span>);</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  --m_uiCount;</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  <span class="keywordflow">return</span> m_pData + m_uiCount;</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>}</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span> </div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt32 SizeInBytes&gt;</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_struct" href="../../d6/d01/structez_data_block.htm">ezDataBlock&lt;T, SizeInBytes&gt;::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>  <span class="keywordflow">return</span> m_uiCount == 0;</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>}</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span> </div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt32 SizeInBytes&gt;</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_struct" href="../../d6/d01/structez_data_block.htm">ezDataBlock&lt;T, SizeInBytes&gt;::IsFull</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>  <span class="keywordflow">return</span> m_uiCount == CAPACITY;</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>}</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt32 SizeInBytes&gt;</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>EZ_FORCE_INLINE T&amp; <a class="code hl_struct" href="../../d6/d01/structez_data_block.htm">ezDataBlock&lt;T, SizeInBytes&gt;::operator[]</a>(ezUInt32 uiIndex)<span class="keyword"> const</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>  EZ_ASSERT_DEV(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;Out of bounds access. Data block has {0} elements, trying to access element at index {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>  <span class="keywordflow">return</span> m_pData[uiIndex];</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>}</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span><span class="keyword">template</span> &lt;ezUInt32 BlockSize&gt;</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><a class="code hl_class" href="../../d1/d52/classez_large_block_allocator.htm">ezLargeBlockAllocator&lt;BlockSize&gt;::ezLargeBlockAllocator</a>(<a class="code hl_class" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sName, <a class="code hl_class" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pParent, ezAllocatorTrackingMode mode)</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>  : m_TrackingMode(mode)</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  , m_SuperBlocks(pParent)</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>  , m_FreeBlocks(pParent)</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>{</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>  <span class="keyword">static_assert</span>(BlockSize &gt;= 4096, <span class="stringliteral">&quot;Block size must be 4096 or bigger&quot;</span>);</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span> </div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>  m_Id = ezMemoryTracker::RegisterAllocator(sName, mode, ezPageAllocator::GetId());</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span> </div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>  <span class="keyword">const</span> ezUInt32 uiPageSize = <a class="code hl_function" href="../../d5/d9e/classez_system_information.htm#a68cef9583e2e049aed7c7ccb59fcb8bb">ezSystemInformation::Get</a>().<a class="code hl_function" href="../../d5/d9e/classez_system_information.htm#aae84b6733aa60a8a6006f5cbba8ee564">GetMemoryPageSize</a>();</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>  EZ_IGNORE_UNUSED(uiPageSize);</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>  EZ_ASSERT_DEV(uiPageSize &lt;= BlockSize, <span class="stringliteral">&quot;Memory Page size is bigger than block size.&quot;</span>);</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  EZ_ASSERT_DEV(BlockSize % uiPageSize == 0, <span class="stringliteral">&quot;Blocksize ({0}) must be a multiple of page size ({1})&quot;</span>, BlockSize, uiPageSize);</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>}</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span> </div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span><span class="keyword">template</span> &lt;ezUInt32 BlockSize&gt;</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span><a class="code hl_class" href="../../d1/d52/classez_large_block_allocator.htm">ezLargeBlockAllocator&lt;BlockSize&gt;::~ezLargeBlockAllocator</a>()</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>{</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  ezMemoryTracker::DeregisterAllocator(m_Id);</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span> </div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; m_SuperBlocks.GetCount(); ++i)</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>  {</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>    ezPageAllocator::DeallocatePage(m_SuperBlocks[i].m_pBasePtr);</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>  }</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>}</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span> </div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span><span class="keyword">template</span> &lt;ezUInt32 BlockSize&gt;</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>EZ_FORCE_INLINE <a class="code hl_struct" href="../../d6/d01/structez_data_block.htm">ezDataBlock&lt;T, BlockSize&gt;</a> <a class="code hl_class" href="../../d1/d52/classez_large_block_allocator.htm">ezLargeBlockAllocator&lt;BlockSize&gt;::AllocateBlock</a>()</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>{</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>  <span class="keyword">struct </span>Helper</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>  {</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>    <span class="keyword">enum</span></div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>    {</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>      BLOCK_CAPACITY = <a class="code hl_struct" href="../../d6/d01/structez_data_block.htm">ezDataBlock&lt;T, BlockSize&gt;::CAPACITY</a></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>    };</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>  };</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span> </div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>  <span class="keyword">static_assert</span>(</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>    Helper::BLOCK_CAPACITY &gt;= 1, <span class="stringliteral">&quot;Type is too big for block allocation. Consider using regular heap allocation instead or increase the block size.&quot;</span>);</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span> </div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  <a class="code hl_struct" href="../../d6/d01/structez_data_block.htm">ezDataBlock&lt;T, BlockSize&gt;</a> block(<span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(Allocate(<span class="keyword">alignof</span>(T))), 0);</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>  <span class="keywordflow">return</span> block;</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>}</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span><span class="keyword">template</span> &lt;ezUInt32 BlockSize&gt;</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../d1/d52/classez_large_block_allocator.htm">ezLargeBlockAllocator&lt;BlockSize&gt;::DeallocateBlock</a>(<a class="code hl_struct" href="../../d6/d01/structez_data_block.htm">ezDataBlock&lt;T, BlockSize&gt;</a>&amp; inout_block)</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>{</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>  Deallocate(inout_block.m_pData);</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  inout_block.m_pData = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>  inout_block.m_uiCount = 0;</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>}</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span><span class="keyword">template</span> &lt;ezUInt32 BlockSize&gt;</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>EZ_ALWAYS_INLINE <a class="code hl_class" href="../../d9/d18/classez_string_view.htm">ezStringView</a> <a class="code hl_class" href="../../d1/d52/classez_large_block_allocator.htm">ezLargeBlockAllocator&lt;BlockSize&gt;::GetName</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>  <span class="keywordflow">return</span> ezMemoryTracker::GetAllocatorName(m_Id);</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>}</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span> </div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span><span class="keyword">template</span> &lt;ezUInt32 BlockSize&gt;</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>EZ_ALWAYS_INLINE <a class="code hl_class" href="../../dd/d2a/structez_generic_id.htm">ezAllocatorId</a> <a class="code hl_class" href="../../d1/d52/classez_large_block_allocator.htm">ezLargeBlockAllocator&lt;BlockSize&gt;::GetId</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>  <span class="keywordflow">return</span> m_Id;</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>}</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span> </div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span><span class="keyword">template</span> &lt;ezUInt32 BlockSize&gt;</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>EZ_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_struct" href="../../d5/d3e/structez_allocator_1_1_stats.htm">ezAllocator::Stats</a>&amp; <a class="code hl_class" href="../../d1/d52/classez_large_block_allocator.htm">ezLargeBlockAllocator&lt;BlockSize&gt;::GetStats</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>  <span class="keywordflow">return</span> ezMemoryTracker::GetAllocatorStats(m_Id);</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>}</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span><span class="keyword">template</span> &lt;ezUInt32 BlockSize&gt;</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span><span class="keywordtype">void</span>* <a class="code hl_class" href="../../d1/d52/classez_large_block_allocator.htm">ezLargeBlockAllocator&lt;BlockSize&gt;::Allocate</a>(<span class="keywordtype">size_t</span> uiAlign)</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>{</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  EZ_ASSERT_RELEASE(<a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a194e5582f9a01688fc03e4620e231d29">ezMath::IsPowerOf2</a>((ezUInt32)uiAlign), <span class="stringliteral">&quot;Alignment must be power of two&quot;</span>);</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span> </div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  <a class="code hl_struct" href="../../d3/d90/structez_time.htm">ezTime</a> fAllocationTime = <a class="code hl_function" href="../../d3/d90/structez_time.htm#a577fcb032cde755e39b3880d5ee0dadf">ezTime::Now</a>();</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span> </div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  EZ_LOCK(m_Mutex);</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>  <span class="keywordtype">void</span>* ptr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span> </div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>  <span class="keywordflow">if</span> (!m_FreeBlocks.IsEmpty())</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  {</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>    <span class="comment">// Re-use a super block</span></div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>    ezUInt32 uiFreeBlockIndex = m_FreeBlocks.PeekBack();</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>    m_FreeBlocks.PopBack();</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span> </div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>    <span class="keyword">const</span> ezUInt32 uiSuperBlockIndex = uiFreeBlockIndex / SuperBlock::NUM_BLOCKS;</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>    <span class="keyword">const</span> ezUInt32 uiInnerBlockIndex = uiFreeBlockIndex &amp; (SuperBlock::NUM_BLOCKS - 1);</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>    SuperBlock&amp; superBlock = m_SuperBlocks[uiSuperBlockIndex];</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>    ++superBlock.m_uiUsedBlocks;</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span> </div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>    ptr = <a class="code hl_function" href="../../dc/d4d/classez_memory_utils.htm#aaa8814eb70ee62638d61609635346446">ezMemoryUtils::AddByteOffset</a>(superBlock.m_pBasePtr, uiInnerBlockIndex * BlockSize);</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  }</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>  {</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>    <span class="comment">// Allocate a new super block</span></div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>    <span class="keywordtype">void</span>* pMemory = ezPageAllocator::AllocatePage(SuperBlock::SIZE_IN_BYTES);</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>    EZ_CHECK_ALIGNMENT(pMemory, uiAlign);</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span> </div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>    SuperBlock superBlock;</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>    superBlock.m_pBasePtr = pMemory;</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>    superBlock.m_uiUsedBlocks = 1;</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span> </div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>    m_SuperBlocks.PushBack(superBlock);</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span> </div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>    <span class="keyword">const</span> ezUInt32 uiBlockBaseIndex = (m_SuperBlocks.GetCount() - 1) * SuperBlock::NUM_BLOCKS;</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>    <span class="keywordflow">for</span> (ezUInt32 i = SuperBlock::NUM_BLOCKS - 1; i &gt; 0; --i)</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>    {</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>      m_FreeBlocks.PushBack(uiBlockBaseIndex + i);</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    }</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span> </div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>    ptr = pMemory;</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>  }</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span> </div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  <span class="keywordflow">if</span> (m_TrackingMode &gt;= ezAllocatorTrackingMode::AllocationStats)</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>  {</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>    ezMemoryTracker::AddAllocation(m_Id, m_TrackingMode, ptr, BlockSize, uiAlign, <a class="code hl_function" href="../../d3/d90/structez_time.htm#a577fcb032cde755e39b3880d5ee0dadf">ezTime::Now</a>() - fAllocationTime);</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  }</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span> </div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>  <span class="keywordflow">return</span> ptr;</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>}</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span> </div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span><span class="keyword">template</span> &lt;ezUInt32 BlockSize&gt;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../d1/d52/classez_large_block_allocator.htm">ezLargeBlockAllocator&lt;BlockSize&gt;::Deallocate</a>(<span class="keywordtype">void</span>* ptr)</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>{</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  EZ_LOCK(m_Mutex);</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span> </div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>  <span class="keywordflow">if</span> (m_TrackingMode &gt;= ezAllocatorTrackingMode::AllocationStats)</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  {</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>    ezMemoryTracker::RemoveAllocation(m_Id, ptr);</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>  }</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>  <span class="comment">// find super block</span></div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  <span class="keywordtype">bool</span> bFound = <span class="keyword">false</span>;</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  ezUInt32 uiSuperBlockIndex = m_SuperBlocks.GetCount();</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>  std::ptrdiff_t diff = 0;</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  <span class="keywordflow">for</span> (; uiSuperBlockIndex-- &gt; 0;)</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>  {</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>    diff = (<span class="keywordtype">char</span>*)ptr - (<span class="keywordtype">char</span>*)m_SuperBlocks[uiSuperBlockIndex].m_pBasePtr;</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>    <span class="keywordflow">if</span> (diff &gt;= 0 &amp;&amp; diff &lt; SuperBlock::SIZE_IN_BYTES)</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>    {</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>      bFound = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>      <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>    }</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>  }</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span> </div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>  EZ_IGNORE_UNUSED(bFound);</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>  EZ_ASSERT_DEV(bFound, <span class="stringliteral">&quot;&#39;{0}&#39; was not allocated with this allocator&quot;</span>, <a class="code hl_struct" href="../../d7/d5f/structez_arg_p.htm">ezArgP</a>(ptr));</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span> </div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>  SuperBlock&amp; superBlock = m_SuperBlocks[uiSuperBlockIndex];</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>  --superBlock.m_uiUsedBlocks;</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span> </div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>  <span class="keywordflow">if</span> (superBlock.m_uiUsedBlocks == 0 &amp;&amp; m_FreeBlocks.GetCount() &gt; SuperBlock::NUM_BLOCKS * 4)</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>  {</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>    <span class="comment">// give memory back</span></div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>    ezPageAllocator::DeallocatePage(superBlock.m_pBasePtr);</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span> </div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>    m_SuperBlocks.RemoveAtAndSwap(uiSuperBlockIndex);</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>    <span class="keyword">const</span> ezUInt32 uiLastSuperBlockIndex = m_SuperBlocks.GetCount();</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>    <span class="comment">// patch free list</span></div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>    <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; m_FreeBlocks.GetCount(); ++i)</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>    {</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>      <span class="keyword">const</span> ezUInt32 uiIndex = m_FreeBlocks[i];</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>      <span class="keyword">const</span> ezUInt32 uiSBIndex = uiIndex / SuperBlock::NUM_BLOCKS;</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span> </div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>      <span class="keywordflow">if</span> (uiSBIndex == uiSuperBlockIndex)</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>      {</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>        <span class="comment">// points to the block we just removed</span></div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>        m_FreeBlocks.RemoveAtAndSwap(i);</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>        --i;</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>      }</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (uiSBIndex == uiLastSuperBlockIndex)</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>      {</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>        <span class="comment">// points to the block we just swapped</span></div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>        m_FreeBlocks[i] = uiSuperBlockIndex * SuperBlock::NUM_BLOCKS + (uiIndex &amp; (SuperBlock::NUM_BLOCKS - 1));</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>      }</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>    }</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>  }</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>  {</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>    <span class="comment">// add block to free list</span></div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>    <span class="keyword">const</span> ezUInt32 uiInnerBlockIndex = (ezUInt32)(diff / BlockSize);</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>    m_FreeBlocks.PushBack(uiSuperBlockIndex * SuperBlock::NUM_BLOCKS + uiInnerBlockIndex);</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>  }</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>}</div>
<div class="ttc" id="aclassez_allocator_htm"><div class="ttname"><a href="../../d0/dbb/classez_allocator.htm">ezAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition</b> Allocator.h:23</div></div>
<div class="ttc" id="aclassez_large_block_allocator_htm"><div class="ttname"><a href="../../d1/d52/classez_large_block_allocator.htm">ezLargeBlockAllocator</a></div><div class="ttdoc">A block allocator which can only allocates blocks of memory at once.</div><div class="ttdef"><b>Definition</b> LargeBlockAllocator.h:40</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_aaa8814eb70ee62638d61609635346446"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#aaa8814eb70ee62638d61609635346446">ezMemoryUtils::AddByteOffset</a></div><div class="ttdeci">static T * AddByteOffset(T *pPtr, std::ptrdiff_t offset)</div><div class="ttdoc">Returns the address stored in ptr plus the given byte offset iOffset, cast to type T.</div></div>
<div class="ttc" id="aclassez_string_view_htm"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm">ezStringView</a></div><div class="ttdoc">ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition</b> StringView.h:34</div></div>
<div class="ttc" id="aclassez_system_information_htm_a68cef9583e2e049aed7c7ccb59fcb8bb"><div class="ttname"><a href="../../d5/d9e/classez_system_information.htm#a68cef9583e2e049aed7c7ccb59fcb8bb">ezSystemInformation::Get</a></div><div class="ttdeci">static const ezSystemInformation &amp; Get()</div><div class="ttdoc">Allows access to the current system configuration.</div><div class="ttdef"><b>Definition</b> SystemInformation.h:131</div></div>
<div class="ttc" id="aclassez_system_information_htm_aae84b6733aa60a8a6006f5cbba8ee564"><div class="ttname"><a href="../../d5/d9e/classez_system_information.htm#aae84b6733aa60a8a6006f5cbba8ee564">ezSystemInformation::GetMemoryPageSize</a></div><div class="ttdeci">ezUInt32 GetMemoryPageSize() const</div><div class="ttdoc">Returns the size of a memory page in bytes.</div><div class="ttdef"><b>Definition</b> SystemInformation.h:106</div></div>
<div class="ttc" id="anamespaceez_math_htm_a194e5582f9a01688fc03e4620e231d29"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a194e5582f9a01688fc03e4620e231d29">ezMath::IsPowerOf2</a></div><div class="ttdeci">constexpr EZ_FORCE_INLINE bool IsPowerOf2(ezInt32 value)</div><div class="ttdoc">Returns true, if there exists some x with 2^x == value.</div><div class="ttdef"><b>Definition</b> Math_inl.h:260</div></div>
<div class="ttc" id="astructez_allocator_1_1_stats_htm"><div class="ttname"><a href="../../d5/d3e/structez_allocator_1_1_stats.htm">ezAllocator::Stats</a></div><div class="ttdef"><b>Definition</b> Allocator.h:26</div></div>
<div class="ttc" id="astructez_arg_p_htm"><div class="ttname"><a href="../../d7/d5f/structez_arg_p.htm">ezArgP</a></div><div class="ttdef"><b>Definition</b> FormatStringArgs.h:76</div></div>
<div class="ttc" id="astructez_data_block_htm"><div class="ttname"><a href="../../d6/d01/structez_data_block.htm">ezDataBlock</a></div><div class="ttdoc">This struct represents a block of type T, typically 4kb.</div><div class="ttdef"><b>Definition</b> LargeBlockAllocator.h:14</div></div>
<div class="ttc" id="astructez_generic_id_htm"><div class="ttname"><a href="../../dd/d2a/structez_generic_id.htm">ezGenericId&lt; 24, 8 &gt;</a></div></div>
<div class="ttc" id="astructez_time_htm"><div class="ttname"><a href="../../d3/d90/structez_time.htm">ezTime</a></div><div class="ttdoc">The time class encapsulates a double value storing the time in seconds.</div><div class="ttdef"><b>Definition</b> Time.h:12</div></div>
<div class="ttc" id="astructez_time_htm_a577fcb032cde755e39b3880d5ee0dadf"><div class="ttname"><a href="../../d3/d90/structez_time.htm#a577fcb032cde755e39b3880d5ee0dadf">ezTime::Now</a></div><div class="ttdeci">static ezTime Now()</div><div class="ttdoc">Gets the current time.</div><div class="ttdef"><b>Definition</b> Time_Posix.h:12</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_adb0ac2a169525f5fa05f0527c58e205.htm">Memory</a></li><li class="navelem"><a class="el" href="../../dir_2b61d82766792ebb24827eac69b772f5.htm">Implementation</a></li><li class="navelem"><b>LargeBlockAllocator_inl.h</b></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:17:52 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
