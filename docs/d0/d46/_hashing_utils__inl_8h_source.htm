<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Algorithm/Implementation/HashingUtils_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d0/d46/_hashing_utils__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">HashingUtils_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &lt;Foundation/Strings/Implementation/StringBase.h&gt;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keyword">namespace </span>ezInternal</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;{</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> isString&gt;</div>
<div class="line"><a name="l00006"></a><span class="lineno"><a class="line" href="../../d3/d67/structez_internal_1_1_hash_helper_impl.htm">    6</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../d3/d67/structez_internal_1_1_hash_helper_impl.htm">HashHelperImpl</a></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  {</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;    <span class="keyword">static</span> ezUInt32 Hash(<span class="keyword">const</span> T&amp; value);</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  };</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00012"></a><span class="lineno"><a class="line" href="../../da/dd5/structez_internal_1_1_hash_helper_impl_3_01_t_00_01true_01_4.htm">   12</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../d3/d67/structez_internal_1_1_hash_helper_impl.htm">HashHelperImpl</a>&lt;T, true&gt;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  {</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> Derived&gt;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    EZ_ALWAYS_INLINE <span class="keyword">static</span> ezUInt32 Hash(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;Derived&gt;</a>&amp; <span class="keywordtype">string</span>)</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    {</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="../../dd/dd0/classez_hashing_utils.htm#a2557f35d73a24667ba91f14d206dd985">ezHashingUtils::StringHashTo32</a>(<a class="code" href="../../dd/dd0/classez_hashing_utils.htm#a66aa93081eb122cdbc70000b2f82f058">ezHashingUtils::xxHash64</a>((<span class="keywordtype">void</span>*)<span class="keywordtype">string</span>.InternalGetData(), <span class="keywordtype">string</span>.InternalGetElementCount()));</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    }</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  };</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> isString&gt;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d3/d67/structez_internal_1_1_hash_helper_impl.htm">HashHelperImpl&lt;T, isString&gt;::Hash</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  {</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    EZ_CHECK_AT_COMPILETIME_MSG(isString, <span class="stringliteral">&quot;ezHashHelper is not implemented for the given type.&quot;</span>);</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  }</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;} <span class="comment">// namespace ezInternal</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../dc/d65/structez_hash_helper.htm">ezHashHelper&lt;T&gt;::Hash</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d3/d67/structez_internal_1_1_hash_helper_impl.htm">ezInternal::HashHelperImpl</a>&lt;T, EZ_IS_DERIVED_FROM_STATIC(<a class="code" href="../../d8/d9a/structez_this_is_a_string.htm">ezThisIsAString</a>, T)&gt;::Hash(value);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dc/d65/structez_hash_helper.htm">ezHashHelper&lt;T&gt;::Equal</a>(<span class="keyword">const</span> T&amp; a, <span class="keyword">const</span> T&amp; b)</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keywordflow">return</span> a == b;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="../../d0/d54/structez_hash_helper_3_01ez_u_int32_01_4.htm">   44</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dc/d65/structez_hash_helper.htm">ezHashHelper</a>&lt;ezUInt32&gt;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">static</span> ezUInt32 Hash(ezUInt32 value)</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  {</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="comment">// Knuth: multiplication by the golden ratio will minimize gaps in the hash space.</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// 2654435761U: prime close to 2^32/phi with phi = golden ratio (sqrt(5) - 1) / 2</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">return</span> value * 2654435761U;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">static</span> <span class="keywordtype">bool</span> Equal(ezUInt32 a, ezUInt32 b) { <span class="keywordflow">return</span> a == b; }</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;};</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="../../dd/d8d/structez_hash_helper_3_01ez_int32_01_4.htm">   57</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dc/d65/structez_hash_helper.htm">ezHashHelper</a>&lt;ezInt32&gt;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">static</span> ezUInt32 Hash(ezInt32 value) { <span class="keywordflow">return</span> <a class="code" href="../../dc/d65/structez_hash_helper.htm">ezHashHelper&lt;ezUInt32&gt;::Hash</a>(ezUInt32(value)); }</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">static</span> <span class="keywordtype">bool</span> Equal(ezInt32 a, ezInt32 b) { <span class="keywordflow">return</span> a == b; }</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;};</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="../../d4/dfb/structez_hash_helper_3_01ez_u_int64_01_4.htm">   65</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dc/d65/structez_hash_helper.htm">ezHashHelper</a>&lt;ezUInt64&gt;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">static</span> ezUInt32 Hash(ezUInt64 value)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// boost::hash_combine.</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    ezUInt32 a = ezUInt32(value &gt;&gt; 32);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    ezUInt32 b = ezUInt32(value);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> a ^ (b + 0x9e3779b9 + (a &lt;&lt; 6) + (b &gt;&gt; 2));</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">static</span> <span class="keywordtype">bool</span> Equal(ezUInt64 a, ezUInt64 b) { <span class="keywordflow">return</span> a == b; }</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;};</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="../../dc/df8/structez_hash_helper_3_01ez_int64_01_4.htm">   79</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dc/d65/structez_hash_helper.htm">ezHashHelper</a>&lt;ezInt64&gt;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">static</span> ezUInt32 Hash(ezInt64 value) { <span class="keywordflow">return</span> <a class="code" href="../../dc/d65/structez_hash_helper.htm">ezHashHelper&lt;ezUInt64&gt;::Hash</a>(ezUInt64(value)); }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">static</span> <span class="keywordtype">bool</span> Equal(ezInt64 a, ezInt64 b) { <span class="keywordflow">return</span> a == b; }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;};</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="../../d6/d2d/structez_hash_helper_3_01const_01char_01_5_01_4.htm">   87</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dc/d65/structez_hash_helper.htm">ezHashHelper</a>&lt;const char*&gt;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">static</span> ezUInt32 Hash(<span class="keyword">const</span> <span class="keywordtype">char</span>* szValue)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../dd/dd0/classez_hashing_utils.htm#a2557f35d73a24667ba91f14d206dd985">ezHashingUtils::StringHashTo32</a>(<a class="code" href="../../dd/dd0/classez_hashing_utils.htm#a2e16b75eb7af455a7faf7eeb0b6b01ed">ezHashingUtils::StringHash</a>(szValue));</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">static</span> <span class="keywordtype">bool</span> Equal(<span class="keyword">const</span> <span class="keywordtype">char</span>* a, <span class="keyword">const</span> <span class="keywordtype">char</span>* b) { <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#aa1b8c125ced33a6a904f741597ecc673">ezStringUtils::IsEqual</a>(a, b); }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;};</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="../../de/d77/structez_hash_helper_3_01_t_01_5_01_4.htm">   98</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dc/d65/structez_hash_helper.htm">ezHashHelper</a>&lt;T*&gt;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">static</span> ezUInt32 Hash(T* value)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_PLATFORM_64BIT)</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../dc/d65/structez_hash_helper.htm">ezHashHelper&lt;ezUInt64&gt;::Hash</a>(<span class="keyword">reinterpret_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(value) &gt;&gt; 4);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../dc/d65/structez_hash_helper.htm">ezHashHelper&lt;ezUInt32&gt;::Hash</a>(<span class="keyword">reinterpret_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(value) &gt;&gt; 4);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">static</span> <span class="keywordtype">bool</span> Equal(T* a, T* b) { <span class="keywordflow">return</span> a == b; }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;};</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;constexpr EZ_ALWAYS_INLINE ezUInt64 <a class="code" href="../../dd/dd0/classez_hashing_utils.htm#a2e16b75eb7af455a7faf7eeb0b6b01ed">ezHashingUtils::StringHash</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> (&amp;str)[N], ezUInt64 uiSeed)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../dd/dd0/classez_hashing_utils.htm#afccea834f0d53f374e5931dc4a4ade12">xxHash64String</a>(str, uiSeed);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="../../dd/dd0/classez_hashing_utils.htm#afeb7ba7900c67f3cad1ca02324c93697">  118</a></span>&#160;EZ_ALWAYS_INLINE ezUInt64 <a class="code" href="../../dd/dd0/classez_hashing_utils.htm#a2e16b75eb7af455a7faf7eeb0b6b01ed">ezHashingUtils::StringHash</a>(<a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a> str, ezUInt64 uiSeed)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../dd/dd0/classez_hashing_utils.htm#afccea834f0d53f374e5931dc4a4ade12">xxHash64String</a>(str, uiSeed);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="../../dd/dd0/classez_hashing_utils.htm#a2557f35d73a24667ba91f14d206dd985">  123</a></span>&#160;constexpr EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../dd/dd0/classez_hashing_utils.htm#a2557f35d73a24667ba91f14d206dd985">ezHashingUtils::StringHashTo32</a>(ezUInt64 hash)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="comment">// just throw away the upper bits</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(hash);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="../../dd/dd0/classez_hashing_utils.htm#a6d8a91b78e41710564ddeea513849fe8">  129</a></span>&#160;constexpr EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../dd/dd0/classez_hashing_utils.htm#a6d8a91b78e41710564ddeea513849fe8">ezHashingUtils::CombineHashValues32</a>(ezUInt32 h0, ezUInt32 h1)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="comment">// See boost::hash_combine</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keywordflow">return</span> h0 ^ (h1 + 0x9e3779b9 + (h0 &lt;&lt; 6) + (h1 &gt;&gt; 2));</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructez_internal_1_1_hash_helper_impl_htm"><div class="ttname"><a href="../../d3/d67/structez_internal_1_1_hash_helper_impl.htm">ezInternal::HashHelperImpl</a></div><div class="ttdef"><b>Definition:</b> HashingUtils_inl.h:6</div></div>
<div class="ttc" id="aclassez_hashing_utils_htm_a66aa93081eb122cdbc70000b2f82f058"><div class="ttname"><a href="../../dd/dd0/classez_hashing_utils.htm#a66aa93081eb122cdbc70000b2f82f058">ezHashingUtils::xxHash64</a></div><div class="ttdeci">static ezUInt64 xxHash64(const void *pKey, size_t uiSizeInByte, ezUInt64 uiSeed=0)</div><div class="ttdoc">Calculates the 64bit xxHash of the given key.</div><div class="ttdef"><b>Definition:</b> HashingUtils.cpp:210</div></div>
<div class="ttc" id="aclassez_string_utils_htm_aa1b8c125ced33a6a904f741597ecc673"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#aa1b8c125ced33a6a904f741597ecc673">ezStringUtils::IsEqual</a></div><div class="ttdeci">static bool IsEqual(const char *pString1, const char *pString2, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (bitwise).</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:109</div></div>
<div class="ttc" id="aclassez_hashing_utils_htm_a2e16b75eb7af455a7faf7eeb0b6b01ed"><div class="ttname"><a href="../../dd/dd0/classez_hashing_utils.htm#a2e16b75eb7af455a7faf7eeb0b6b01ed">ezHashingUtils::StringHash</a></div><div class="ttdeci">constexpr static ezUInt64 StringHash(const char(&amp;str)[N], ezUInt64 uiSeed=0)</div><div class="ttdoc">Calculates the hash of the given string literal at compile time.</div></div>
<div class="ttc" id="aclassez_hashing_utils_htm_a6d8a91b78e41710564ddeea513849fe8"><div class="ttname"><a href="../../dd/dd0/classez_hashing_utils.htm#a6d8a91b78e41710564ddeea513849fe8">ezHashingUtils::CombineHashValues32</a></div><div class="ttdeci">constexpr static ezUInt32 CombineHashValues32(ezUInt32 h0, ezUInt32 h1)</div><div class="ttdoc">Combines two 32 bit hash values into one.</div><div class="ttdef"><b>Definition:</b> HashingUtils_inl.h:129</div></div>
<div class="ttc" id="astructez_hash_helper_htm"><div class="ttname"><a href="../../dc/d65/structez_hash_helper.htm">ezHashHelper</a></div><div class="ttdoc">Helper struct to calculate the Hash of different types.</div><div class="ttdef"><b>Definition:</b> HashingUtils.h:74</div></div>
<div class="ttc" id="aclassez_hashing_utils_htm_afccea834f0d53f374e5931dc4a4ade12"><div class="ttname"><a href="../../dd/dd0/classez_hashing_utils.htm#afccea834f0d53f374e5931dc4a4ade12">ezHashingUtils::xxHash64String</a></div><div class="ttdeci">constexpr static ezUInt64 xxHash64String(const char(&amp;str)[N], ezUInt64 uiSeed=0)</div><div class="ttdoc">Calculates the 64bit xxHash of the given string literal at compile time.</div></div>
<div class="ttc" id="astructez_this_is_a_string_htm"><div class="ttname"><a href="../../d8/d9a/structez_this_is_a_string.htm">ezThisIsAString</a></div><div class="ttdoc">Base class which marks a class as containing string data.</div><div class="ttdef"><b>Definition:</b> StringBase.h:12</div></div>
<div class="ttc" id="astructez_string_base_htm"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm">ezStringBase</a></div><div class="ttdoc">Base class for strings, which implements all read-only string functions.</div><div class="ttdef"><b>Definition:</b> StringBase.h:18</div></div>
<div class="ttc" id="astructez_string_view_htm"><div class="ttname"><a href="../../de/db8/structez_string_view.htm">ezStringView</a></div><div class="ttdoc">ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition:</b> StringView.h:20</div></div>
<div class="ttc" id="aclassez_hashing_utils_htm_a2557f35d73a24667ba91f14d206dd985"><div class="ttname"><a href="../../dd/dd0/classez_hashing_utils.htm#a2557f35d73a24667ba91f14d206dd985">ezHashingUtils::StringHashTo32</a></div><div class="ttdeci">constexpr static ezUInt32 StringHashTo32(ezUInt64 hash)</div><div class="ttdoc">Truncates a 64 bit string hash to 32 bit.</div><div class="ttdef"><b>Definition:</b> HashingUtils_inl.h:123</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_cbf2a2ed1ea35b4af8265ff960a67fbe.htm">Algorithm</a></li><li class="navelem"><a class="el" href="../../dir_f080d51ed4627ba1afc4852adfe2255f.htm">Implementation</a></li><li class="navelem"><b>HashingUtils_inl.h</b></li>
    <li class="footer">Generated on Mon Oct 18 2021 15:24:05 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
