<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezBitflags&lt; T &gt; Struct Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.10</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d1/dec/structez_bitflags.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../df/d35/structez_bitflags-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezBitflags&lt; T &gt; Struct Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The <a class="el" href="../../d1/dec/structez_bitflags.htm" title="The ezBitflags class allows you to work with type-safe bitflags.">ezBitflags</a> class allows you to work with type-safe bitflags.  
 <a href="../../d1/dec/structez_bitflags.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../db/dec/_bitflags_8h_source.htm">Bitflags.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a534f0018f017f682e03fc7467dc972b3"><td class="memItemLeft" align="right" valign="top"><a id="a534f0018f017f682e03fc7467dc972b3"></a>
EZ_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#a534f0018f017f682e03fc7467dc972b3">ezBitflags</a> ()</td></tr>
<tr class="memdesc:a534f0018f017f682e03fc7467dc972b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor. Initializes the flags to the default value. <br /></td></tr>
<tr class="separator:a534f0018f017f682e03fc7467dc972b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7c6c0231ec87cdae8d7a5df84554f83"><td class="memItemLeft" align="right" valign="top"><a id="ae7c6c0231ec87cdae8d7a5df84554f83"></a>
EZ_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#ae7c6c0231ec87cdae8d7a5df84554f83">ezBitflags</a> (Enum flag1)</td></tr>
<tr class="memdesc:ae7c6c0231ec87cdae8d7a5df84554f83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts the incoming type to ezBitflags&lt;T&gt; <br /></td></tr>
<tr class="separator:ae7c6c0231ec87cdae8d7a5df84554f83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a4dfe37295c7cfb3c04ab76c8510467"><td class="memItemLeft" align="right" valign="top"><a id="a6a4dfe37295c7cfb3c04ab76c8510467"></a>
EZ_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (Enum flag1)</td></tr>
<tr class="separator:a6a4dfe37295c7cfb3c04ab76c8510467"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac76811a8868bb96b12e869858e440ef0"><td class="memItemLeft" align="right" valign="top"><a id="ac76811a8868bb96b12e869858e440ef0"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#ac76811a8868bb96b12e869858e440ef0">operator==</a> (const StorageType rhs) const</td></tr>
<tr class="memdesc:ac76811a8868bb96b12e869858e440ef0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator. <br /></td></tr>
<tr class="separator:ac76811a8868bb96b12e869858e440ef0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85c2f43200acad1a2ee80eb753e949c3"><td class="memItemLeft" align="right" valign="top"><a id="a85c2f43200acad1a2ee80eb753e949c3"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#a85c2f43200acad1a2ee80eb753e949c3">operator!=</a> (const StorageType rhs) const</td></tr>
<tr class="memdesc:a85c2f43200acad1a2ee80eb753e949c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator. <br /></td></tr>
<tr class="separator:a85c2f43200acad1a2ee80eb753e949c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad45425d14b83634ec19562078affb547"><td class="memItemLeft" align="right" valign="top"><a id="ad45425d14b83634ec19562078affb547"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#ad45425d14b83634ec19562078affb547">operator==</a> (const <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:ad45425d14b83634ec19562078affb547"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator. <br /></td></tr>
<tr class="separator:ad45425d14b83634ec19562078affb547"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adad1def513992a6158be5bfc47c24719"><td class="memItemLeft" align="right" valign="top"><a id="adad1def513992a6158be5bfc47c24719"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#adad1def513992a6158be5bfc47c24719">operator!=</a> (const <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:adad1def513992a6158be5bfc47c24719"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator. <br /></td></tr>
<tr class="separator:adad1def513992a6158be5bfc47c24719"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2864c50a58574d58cf243b6ed1f6a95d"><td class="memItemLeft" align="right" valign="top"><a id="a2864c50a58574d58cf243b6ed1f6a95d"></a>
EZ_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#a2864c50a58574d58cf243b6ed1f6a95d">Clear</a> ()</td></tr>
<tr class="memdesc:a2864c50a58574d58cf243b6ed1f6a95d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears all flags. <br /></td></tr>
<tr class="separator:a2864c50a58574d58cf243b6ed1f6a95d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f23fb5379d0fa6c092c565e44830cbe"><td class="memItemLeft" align="right" valign="top"><a id="a0f23fb5379d0fa6c092c565e44830cbe"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#a0f23fb5379d0fa6c092c565e44830cbe">IsSet</a> (Enum flag) const</td></tr>
<tr class="memdesc:a0f23fb5379d0fa6c092c565e44830cbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if certain flags are set within the bitfield. <br /></td></tr>
<tr class="separator:a0f23fb5379d0fa6c092c565e44830cbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40e906628358d1029f5645c13410bd56"><td class="memItemLeft" align="right" valign="top"><a id="a40e906628358d1029f5645c13410bd56"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#a40e906628358d1029f5645c13410bd56">AreAllSet</a> (const <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a40e906628358d1029f5645c13410bd56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether all the given flags are set. <br /></td></tr>
<tr class="separator:a40e906628358d1029f5645c13410bd56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45db2d923c911f433c8349ac99ce464a"><td class="memItemLeft" align="right" valign="top"><a id="a45db2d923c911f433c8349ac99ce464a"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#a45db2d923c911f433c8349ac99ce464a">AreNoneSet</a> (const <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a45db2d923c911f433c8349ac99ce464a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether none of the given flags is set. <br /></td></tr>
<tr class="separator:a45db2d923c911f433c8349ac99ce464a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10f86da5d9b9d336871ec40b70c38b31"><td class="memItemLeft" align="right" valign="top"><a id="a10f86da5d9b9d336871ec40b70c38b31"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#a10f86da5d9b9d336871ec40b70c38b31">IsAnySet</a> (const <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a10f86da5d9b9d336871ec40b70c38b31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether any of the given flags is set. <br /></td></tr>
<tr class="separator:a10f86da5d9b9d336871ec40b70c38b31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa83c1e77b70d0b549604a64c20f8a83"><td class="memItemLeft" align="right" valign="top"><a id="aaa83c1e77b70d0b549604a64c20f8a83"></a>
EZ_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a> (const <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt; &amp;rhs)</td></tr>
<tr class="memdesc:aaa83c1e77b70d0b549604a64c20f8a83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the given flag. <br /></td></tr>
<tr class="separator:aaa83c1e77b70d0b549604a64c20f8a83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab50bc598e312a1f1099ff1297580c019"><td class="memItemLeft" align="right" valign="top"><a id="ab50bc598e312a1f1099ff1297580c019"></a>
EZ_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#ab50bc598e312a1f1099ff1297580c019">Remove</a> (const <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt; &amp;rhs)</td></tr>
<tr class="memdesc:ab50bc598e312a1f1099ff1297580c019"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the given flag. <br /></td></tr>
<tr class="separator:ab50bc598e312a1f1099ff1297580c019"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f3bccaa5b14b128407ef45c78ef5486"><td class="memItemLeft" align="right" valign="top"><a id="a3f3bccaa5b14b128407ef45c78ef5486"></a>
EZ_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#a3f3bccaa5b14b128407ef45c78ef5486">Toggle</a> (const <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a3f3bccaa5b14b128407ef45c78ef5486"><td class="mdescLeft">&#160;</td><td class="mdescRight">Toggles the state of the given flag. <br /></td></tr>
<tr class="separator:a3f3bccaa5b14b128407ef45c78ef5486"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70f5156f142920018d172532cb103baa"><td class="memItemLeft" align="right" valign="top"><a id="a70f5156f142920018d172532cb103baa"></a>
EZ_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#a70f5156f142920018d172532cb103baa">AddOrRemove</a> (const <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt; &amp;rhs, bool state)</td></tr>
<tr class="memdesc:a70f5156f142920018d172532cb103baa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets or clears the given flag. <br /></td></tr>
<tr class="separator:a70f5156f142920018d172532cb103baa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3833b7668092c2e865560a215621f8dd"><td class="memItemLeft" align="right" valign="top"><a id="a3833b7668092c2e865560a215621f8dd"></a>
EZ_ALWAYS_INLINE <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#a3833b7668092c2e865560a215621f8dd">operator|</a> (const <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a3833b7668092c2e865560a215621f8dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an object that has the flags of <em>this</em> and <em>rhs</em> combined. <br /></td></tr>
<tr class="separator:a3833b7668092c2e865560a215621f8dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20fed040da406448518624132127866f"><td class="memItemLeft" align="right" valign="top"><a id="a20fed040da406448518624132127866f"></a>
EZ_ALWAYS_INLINE <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#a20fed040da406448518624132127866f">operator&amp;</a> (const <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a20fed040da406448518624132127866f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an object that has the flags that were set both in <em>this</em> and <em>rhs</em>. <br /></td></tr>
<tr class="separator:a20fed040da406448518624132127866f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a833f9f43ff63c65346e844f97d510eb1"><td class="memItemLeft" align="right" valign="top"><a id="a833f9f43ff63c65346e844f97d510eb1"></a>
EZ_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#a833f9f43ff63c65346e844f97d510eb1">operator|=</a> (const <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a833f9f43ff63c65346e844f97d510eb1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modifies <em>this</em> to also contain the bits from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a833f9f43ff63c65346e844f97d510eb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9aeb290b4dcaa06f8bbf7f4be427439"><td class="memItemLeft" align="right" valign="top"><a id="ae9aeb290b4dcaa06f8bbf7f4be427439"></a>
EZ_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#ae9aeb290b4dcaa06f8bbf7f4be427439">operator&amp;=</a> (const <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; T &gt; &amp;rhs)</td></tr>
<tr class="memdesc:ae9aeb290b4dcaa06f8bbf7f4be427439"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modifies <em>this</em> to only contain the bits that were set in <em>this</em> and <em>rhs</em>. <br /></td></tr>
<tr class="separator:ae9aeb290b4dcaa06f8bbf7f4be427439"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa93ba8c89c9f1c1cd79c87d02f6a3656"><td class="memItemLeft" align="right" valign="top"><a id="aa93ba8c89c9f1c1cd79c87d02f6a3656"></a>
EZ_ALWAYS_INLINE StorageType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#aa93ba8c89c9f1c1cd79c87d02f6a3656">GetValue</a> () const</td></tr>
<tr class="memdesc:aa93ba8c89c9f1c1cd79c87d02f6a3656"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the stored value as the underlying integer type. <br /></td></tr>
<tr class="separator:aa93ba8c89c9f1c1cd79c87d02f6a3656"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0fc77271babcf097032c0992533f1a0"><td class="memItemLeft" align="right" valign="top"><a id="aa0fc77271babcf097032c0992533f1a0"></a>
EZ_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#aa0fc77271babcf097032c0992533f1a0">SetValue</a> (StorageType value)</td></tr>
<tr class="memdesc:aa0fc77271babcf097032c0992533f1a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overwrites the flags with a new value. <br /></td></tr>
<tr class="separator:aa0fc77271babcf097032c0992533f1a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43722efc4ab42293ce264564ff86b894"><td class="memItemLeft" align="right" valign="top"><a id="a43722efc4ab42293ce264564ff86b894"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#a43722efc4ab42293ce264564ff86b894">IsNoFlagSet</a> () const</td></tr>
<tr class="memdesc:a43722efc4ab42293ce264564ff86b894"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if not a single bit is set. <br /></td></tr>
<tr class="separator:a43722efc4ab42293ce264564ff86b894"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a479a5092574665af3f7c635a4908d9de"><td class="memItemLeft" align="right" valign="top"><a id="a479a5092574665af3f7c635a4908d9de"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dec/structez_bitflags.htm#a479a5092574665af3f7c635a4908d9de">IsAnyFlagSet</a> () const</td></tr>
<tr class="memdesc:a479a5092574665af3f7c635a4908d9de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if any bitflag is set. <br /></td></tr>
<tr class="separator:a479a5092574665af3f7c635a4908d9de"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br />
struct ezBitflags&lt; T &gt;</h3>

<p>The <a class="el" href="../../d1/dec/structez_bitflags.htm" title="The ezBitflags class allows you to work with type-safe bitflags.">ezBitflags</a> class allows you to work with type-safe bitflags. </p>
<p><a class="el" href="../../d1/dec/structez_bitflags.htm" title="The ezBitflags class allows you to work with type-safe bitflags.">ezBitflags</a> takes a struct as its template parameter, which contains an enum for the available flag values. <a class="el" href="../../d1/dec/structez_bitflags.htm" title="The ezBitflags class allows you to work with type-safe bitflags.">ezBitflags</a> wraps this type in a way which enables the compiler to do type-checks. This makes it very easy to document and enforce what flags are to be used in an interface. For example, in traditional C++ code, you usually need to have an integer as a function parameter type, when that parameter is supposed to take flags. However, WHICH flags (e.g. from which enum) cannot be enforced through compile time checks. Thus it is difficult for the user to see whether he used the correct type, and it is impossible for the compiler to help find such bugs. <a class="el" href="../../d1/dec/structez_bitflags.htm" title="The ezBitflags class allows you to work with type-safe bitflags.">ezBitflags</a> solves this problem. However the flag type used to instantiate <a class="el" href="../../d1/dec/structez_bitflags.htm" title="The ezBitflags class allows you to work with type-safe bitflags.">ezBitflags</a> must fulfill some requirements.</p>
<p>There are two ways to define your bitflags type, that can be used with <a class="el" href="../../d1/dec/structez_bitflags.htm" title="The ezBitflags class allows you to work with type-safe bitflags.">ezBitflags</a>.</p>
<p>The easier, less powerful way: Use the EZ_DECLARE_FLAGS() macro.<br  />
Example:<br  />
</p><div class="fragment"><div class="line">EZ_DECLARE_FLAGS(ezUInt8, SimpleRenderFlags, EnableEffects, EnableLighting, EnableShadows);</div>
</div><!-- fragment --><p> This will declare a type 'SimpleRenderFlags' which contains three different flags. You can then create a function which takes flags like this: </p><div class="fragment"><div class="line"><span class="keywordtype">void</span> RenderScene(<a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;SimpleRenderFlags&gt;</a> Flags);</div>
</div><!-- fragment --><p> And this function can be called like this:<br  />
</p><div class="fragment"><div class="line">RenderScene(EnableEffects | EnableLighting | EnableShadows);</div>
</div><!-- fragment --><p> However it will refuse to compile with anything else, for example this will not work:<br  />
</p><div class="fragment"><div class="line">RenderScene(1);</div>
</div><!-- fragment --><p>The second way to declare your bitflags type allows even more flexibility. Here you need to declare your bitflag type manually: </p><div class="fragment"><div class="line"><span class="keyword">struct </span>SimpleRenderFlags</div>
<div class="line">{</div>
<div class="line">  <span class="keyword">typedef</span> ezUInt32 StorageType;</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">enum</span> Enum</div>
<div class="line">  {</div>
<div class="line">    EnableEffects   = EZ_BIT(0),</div>
<div class="line">    EnableLighting  = EZ_BIT(1),</div>
<div class="line">    EnableShadows   = EZ_BIT(2),</div>
<div class="line">    FullLighting    = EnableLighting | EnableShadows,</div>
<div class="line">    AllFeatures     = FullLighting | EnableEffects,</div>
<div class="line">    Default = AllFeatures</div>
<div class="line">  };</div>
<div class="line"> </div>
<div class="line">  <span class="keyword">struct </span>Bits</div>
<div class="line">  {</div>
<div class="line">    StorageType EnableEffects   : 1;</div>
<div class="line">    StorageType EnableLighting  : 1;</div>
<div class="line">    StorageType EnableShadows   : 1;</div>
<div class="line">  };</div>
<div class="line">};</div>
<div class="line"> </div>
<div class="line">EZ_DECLARE_FLAGS_OPERATORS(SimpleRenderFlags);</div>
</div><!-- fragment --><p>Here we declare a struct which contains our enum that contains all the flags that we want to have. This enum can contain flags that are combinations of other flags. Note also the 'Default' flag, which is mandatory.<br  />
The 'Bits' struct enables debuggers to show exactly which flags are enabled (with nice names) when you inspect an <a class="el" href="../../d1/dec/structez_bitflags.htm" title="The ezBitflags class allows you to work with type-safe bitflags.">ezBitflags</a> instance. You could leave this struct empty, but then your debugger can not show helpful information about the flags anymore. The Bits struct should contain one named entry for each individual bit. E.g. here only the flags 'EnableEffects', 'EnableLighting' and 'EnableShadows' actually map to single bits, the other flags are combinations of those. Therefore the Bits struct only specifies names for those first three Bits.<br  />
The typedef 'StorageType' is also mandatory, such that <a class="el" href="../../d1/dec/structez_bitflags.htm" title="The ezBitflags class allows you to work with type-safe bitflags.">ezBitflags</a> can access it.<br  />
Finally the macro EZ_DECLARE_FLAGS_OPERATORS will define the required operator to be able to combine bitflags of your type. I.e. it enables to write ezBitflags&lt;SimpleRenderFlags&gt; f = EnableEffects | EnableLighting;<br  />
 For a real world usage example, see <a class="el" href="../../d5/ddf/structez_c_var_flags.htm" title="The flags that can be used on an ezCVar.">ezCVarFlags</a>. </p>
</div><hr/>The documentation for this struct was generated from the following file:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Types/<a class="el" href="../../db/dec/_bitflags_8h_source.htm">Bitflags.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructez_bitflags_htm"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm">ezBitflags</a></div><div class="ttdoc">The ezBitflags class allows you to work with type-safe bitflags.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:80</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a></li>
    <li class="footer">Generated on Sun Oct 9 2022 14:45:01 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
