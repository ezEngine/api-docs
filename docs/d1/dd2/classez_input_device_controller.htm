<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezInputDeviceController Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d1/dd2/classez_input_device_controller.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="../../da/d04/classez_input_device_controller-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezInputDeviceController Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>This class is the base class for all controller type input devices.  
 <a href="../../d1/dd2/classez_input_device_controller.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d2/d94/_controller_8h_source.htm">Controller.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ezInputDeviceController:</div>
<div class="dyncontent">
<div class="center"><img src="../../d5/d2e/classez_input_device_controller__inherit__graph.png" border="0" usemap="#ez_input_device_controller_inherit__map" alt="Inheritance graph"/></div>
<map name="ez_input_device_controller_inherit__map" id="ez_input_device_controller_inherit__map">
<area shape="rect" title="This class is the base class for all controller type input devices." alt="" coords="29,319,208,345"/>
<area shape="rect" href="../../d9/d39/classez_input_device_x_box360.htm" title="An implementation of ezInputDeviceController that handles XBox 360 controllers." alt="" coords="32,393,205,420"/>
<area shape="rect" href="../../df/d18/classez_input_device.htm" title="The base class for all input device types." alt="" coords="61,244,176,271"/>
<area shape="rect" href="../../d5/d0b/classez_enumerable.htm" title=" " alt="" coords="5,155,232,196"/>
<area shape="rect" href="../../db/d45/classez_reflected_class.htm" title="All classes that should be dynamically reflectable, need to be derived from this base class." alt="" coords="52,80,185,107"/>
<area shape="rect" href="../../d4/d02/classez_no_base.htm" title="Dummy type to pass to templates and macros that expect a base type for a class that has no base." alt="" coords="75,5,162,32"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dbe/structez_input_device_controller_1_1_motor.htm">Motor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes which vibration motor to configure.  <a href="../../db/dbe/structez_input_device_controller_1_1_motor.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a19679bb60369bf080f85b3be8a66a880"><td class="memItemLeft" align="right" valign="top"><a id="a19679bb60369bf080f85b3be8a66a880"></a>enum &#160;</td><td class="memItemRight" valign="bottom">{ <b>MaxControllers</b> = 4, 
<b>VibrationSamplesPerSecond</b> = 16, 
<b>VibrationTrackSeconds</b> = 2, 
<b>MaxVibrationSamples</b> = VibrationSamplesPerSecond * VibrationTrackSeconds
 }</td></tr>
<tr class="separator:a19679bb60369bf080f85b3be8a66a880"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa3bcf4f42d4fe2d3450ef8cb7c7f2ce3"><td class="memItemLeft" align="right" valign="top"><a id="aa3bcf4f42d4fe2d3450ef8cb7c7f2ce3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dd2/classez_input_device_controller.htm#aa3bcf4f42d4fe2d3450ef8cb7c7f2ce3">EnableVibration</a> (ezUInt8 uiVirtual, bool bEnable)</td></tr>
<tr class="memdesc:aa3bcf4f42d4fe2d3450ef8cb7c7f2ce3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables or disables vibration on the given controller (virtual index). If it is disabled, the controller will never vibrate, even if vibration profiles are sent to it. <br /></td></tr>
<tr class="separator:aa3bcf4f42d4fe2d3450ef8cb7c7f2ce3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a045b3e1ee6c4dbbcd1546d699cd4761c"><td class="memItemLeft" align="right" valign="top"><a id="a045b3e1ee6c4dbbcd1546d699cd4761c"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dd2/classez_input_device_controller.htm#a045b3e1ee6c4dbbcd1546d699cd4761c">IsVibrationEnabled</a> (ezUInt8 uiVirtual) const</td></tr>
<tr class="memdesc:a045b3e1ee6c4dbbcd1546d699cd4761c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether vibration is enabled on the given controller (virtual index). <br /></td></tr>
<tr class="separator:a045b3e1ee6c4dbbcd1546d699cd4761c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b1733a5429ce73c4f91b6d5b5b7c4a9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dd2/classez_input_device_controller.htm#a0b1733a5429ce73c4f91b6d5b5b7c4a9">SetVibrationStrength</a> (ezUInt8 uiVirtual, Motor::Enum eMotor, float fValue)</td></tr>
<tr class="memdesc:a0b1733a5429ce73c4f91b6d5b5b7c4a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the vibration strength for the given controller and motor. <em>fValue</em> is a value between 0 and 1.  <a href="../../d1/dd2/classez_input_device_controller.htm#a0b1733a5429ce73c4f91b6d5b5b7c4a9">More...</a><br /></td></tr>
<tr class="separator:a0b1733a5429ce73c4f91b6d5b5b7c4a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43b6c079c642ce653694a78e69cfbb9e"><td class="memItemLeft" align="right" valign="top"><a id="a43b6c079c642ce653694a78e69cfbb9e"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dd2/classez_input_device_controller.htm#a43b6c079c642ce653694a78e69cfbb9e">GetVibrationStrength</a> (ezUInt8 uiVirtual, Motor::Enum eMotor)</td></tr>
<tr class="memdesc:a43b6c079c642ce653694a78e69cfbb9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of (constant) vibration that is currently set on this controller. <br /></td></tr>
<tr class="separator:a43b6c079c642ce653694a78e69cfbb9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09632d683381030a903bbc9588c7b9da"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dd2/classez_input_device_controller.htm#a09632d683381030a903bbc9588c7b9da">SetControllerMapping</a> (ezUInt8 uiVirtualController, ezInt8 iTakeInputFromPhysical)</td></tr>
<tr class="memdesc:a09632d683381030a903bbc9588c7b9da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets from which physical controller a virtual controller is supposed to take its input.  <a href="../../d1/dd2/classez_input_device_controller.htm#a09632d683381030a903bbc9588c7b9da">More...</a><br /></td></tr>
<tr class="separator:a09632d683381030a903bbc9588c7b9da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7adc9ec5d247ed4187db3fd8198eb360"><td class="memItemLeft" align="right" valign="top"><a id="a7adc9ec5d247ed4187db3fd8198eb360"></a>
ezInt8&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dd2/classez_input_device_controller.htm#a7adc9ec5d247ed4187db3fd8198eb360">GetControllerMapping</a> (ezUInt8 uiVirtual) const</td></tr>
<tr class="memdesc:a7adc9ec5d247ed4187db3fd8198eb360"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns from which physical controller the given virtual controller takes its input. May be negative, which means the virtual controller is deactivated. <br /></td></tr>
<tr class="separator:a7adc9ec5d247ed4187db3fd8198eb360"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2332b76d62529a348a233fa21dcbdc75"><td class="memItemLeft" align="right" valign="top"><a id="a2332b76d62529a348a233fa21dcbdc75"></a>
virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dd2/classez_input_device_controller.htm#a2332b76d62529a348a233fa21dcbdc75">IsControllerConnected</a> (ezUInt8 uiPhysical) const =0</td></tr>
<tr class="memdesc:a2332b76d62529a348a233fa21dcbdc75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Queries whether the controller with the given physical index is connected to the computer. This may change at any time. <br /></td></tr>
<tr class="separator:a2332b76d62529a348a233fa21dcbdc75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa12b90e5fe67b2d3729b5cf08fce3a7a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dd2/classez_input_device_controller.htm#aa12b90e5fe67b2d3729b5cf08fce3a7a">AddVibrationTrack</a> (ezUInt8 uiVirtual, Motor::Enum eMotor, float *fVibrationTrackValue, ezUInt32 uiSamples, float fScalingFactor=1.0f)</td></tr>
<tr class="memdesc:aa12b90e5fe67b2d3729b5cf08fce3a7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a short 'vibration track' (a sequence of vibrations) to the given controller.  <a href="../../d1/dd2/classez_input_device_controller.htm#aa12b90e5fe67b2d3729b5cf08fce3a7a">More...</a><br /></td></tr>
<tr class="separator:aa12b90e5fe67b2d3729b5cf08fce3a7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classez_input_device"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classez_input_device')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../df/d18/classez_input_device.htm">ezInputDevice</a></td></tr>
<tr class="memitem:a7bcaa3d0b3cebf5b099362fc234e2966 inherit pub_methods_classez_input_device"><td class="memItemLeft" align="right" valign="top"><a id="a7bcaa3d0b3cebf5b099362fc234e2966"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d18/classez_input_device.htm#a7bcaa3d0b3cebf5b099362fc234e2966">ezInputDevice</a> ()</td></tr>
<tr class="memdesc:a7bcaa3d0b3cebf5b099362fc234e2966 inherit pub_methods_classez_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor. <br /></td></tr>
<tr class="separator:a7bcaa3d0b3cebf5b099362fc234e2966 inherit pub_methods_classez_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a488142a253444bdc1bd64edbcfc59dd3 inherit pub_methods_classez_input_device"><td class="memItemLeft" align="right" valign="top"><a id="a488142a253444bdc1bd64edbcfc59dd3"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d18/classez_input_device.htm#a488142a253444bdc1bd64edbcfc59dd3">GetInputSlotState</a> (const char *slot) const</td></tr>
<tr class="memdesc:a488142a253444bdc1bd64edbcfc59dd3 inherit pub_methods_classez_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows to query current input values for the given slot. <br /></td></tr>
<tr class="separator:a488142a253444bdc1bd64edbcfc59dd3 inherit pub_methods_classez_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c62c9e2595a1ff61a1fe6f970ba7592 inherit pub_methods_classez_input_device"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d18/classez_input_device.htm#a3c62c9e2595a1ff61a1fe6f970ba7592">HasDeviceBeenUsedLastFrame</a> () const</td></tr>
<tr class="memdesc:a3c62c9e2595a1ff61a1fe6f970ba7592 inherit pub_methods_classez_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the device was 'used' during the last frame, ie. when it generated input due to some user interaction.  <a href="../../df/d18/classez_input_device.htm#a3c62c9e2595a1ff61a1fe6f970ba7592">More...</a><br /></td></tr>
<tr class="separator:a3c62c9e2595a1ff61a1fe6f970ba7592 inherit pub_methods_classez_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classez_reflected_class"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classez_reflected_class')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../db/d45/classez_reflected_class.htm">ezReflectedClass</a></td></tr>
<tr class="memitem:a36b3c91f3b77fee7a0e4c7d262735a89 inherit pub_methods_classez_reflected_class"><td class="memItemLeft" align="right" valign="top"><a id="a36b3c91f3b77fee7a0e4c7d262735a89"></a>
virtual const <a class="el" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetDynamicRTTI</b> () const</td></tr>
<tr class="separator:a36b3c91f3b77fee7a0e4c7d262735a89 inherit pub_methods_classez_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab746c8e33a03b96c25b117ee04cf6f00 inherit pub_methods_classez_reflected_class"><td class="memItemLeft" align="right" valign="top"><a id="ab746c8e33a03b96c25b117ee04cf6f00"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d45/classez_reflected_class.htm#ab746c8e33a03b96c25b117ee04cf6f00">IsInstanceOf</a> (const <a class="el" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a> *pType) const</td></tr>
<tr class="memdesc:ab746c8e33a03b96c25b117ee04cf6f00 inherit pub_methods_classez_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:ab746c8e33a03b96c25b117ee04cf6f00 inherit pub_methods_classez_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86c6a804cc97a425928bce744607400a inherit pub_methods_classez_reflected_class"><td class="memTemplParams" colspan="2"><a id="a86c6a804cc97a425928bce744607400a"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a86c6a804cc97a425928bce744607400a inherit pub_methods_classez_reflected_class"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../db/d45/classez_reflected_class.htm#a86c6a804cc97a425928bce744607400a">IsInstanceOf</a> () const</td></tr>
<tr class="memdesc:a86c6a804cc97a425928bce744607400a inherit pub_methods_classez_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:a86c6a804cc97a425928bce744607400a inherit pub_methods_classez_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ae8e43e986743afa26d8c5bd657060c41"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dd2/classez_input_device_controller.htm#ae8e43e986743afa26d8c5bd657060c41">UpdateVibration</a> (<a class="el" href="../../d3/d90/structez_time.htm">ezTime</a> tTimeDifference)</td></tr>
<tr class="memdesc:ae8e43e986743afa26d8c5bd657060c41"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combines the constant vibration and vibration tracks and applies them on each controller.  <a href="../../d1/dd2/classez_input_device_controller.htm#ae8e43e986743afa26d8c5bd657060c41">More...</a><br /></td></tr>
<tr class="separator:ae8e43e986743afa26d8c5bd657060c41"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:a751ae324f2dc6147fc74029ab75ad268"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dd2/classez_input_device_controller.htm#a751ae324f2dc6147fc74029ab75ad268">ApplyVibration</a> (ezUInt8 uiPhysicalController, Motor::Enum eMotor, float fStrength)=0</td></tr>
<tr class="memdesc:a751ae324f2dc6147fc74029ab75ad268"><td class="mdescLeft">&#160;</td><td class="mdescRight">Must be implemented by a derived controller implementation. Should set apply the vibration for the given physical controller and motor with the given strength.  <a href="../../d1/dd2/classez_input_device_controller.htm#a751ae324f2dc6147fc74029ab75ad268">More...</a><br /></td></tr>
<tr class="separator:a751ae324f2dc6147fc74029ab75ad268"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_static_methods_classez_no_base"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classez_no_base')"><img src="../../closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="../../d4/d02/classez_no_base.htm">ezNoBase</a></td></tr>
<tr class="memitem:ad676281ced156eb886aa4f74a2a45d2f inherit pub_static_methods_classez_no_base"><td class="memItemLeft" align="right" valign="top"><a id="ad676281ced156eb886aa4f74a2a45d2f"></a>
static const <a class="el" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetStaticRTTI</b> ()</td></tr>
<tr class="separator:ad676281ced156eb886aa4f74a2a45d2f inherit pub_static_methods_classez_no_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_static_methods_classez_input_device"><td colspan="2" onclick="javascript:toggleInherit('pro_static_methods_classez_input_device')"><img src="../../closed.png" alt="-"/>&#160;Static Protected Member Functions inherited from <a class="el" href="../../df/d18/classez_input_device.htm">ezInputDevice</a></td></tr>
<tr class="memitem:a504b39eb54d144d61594a2e88fa3cdde inherit pro_static_methods_classez_input_device"><td class="memItemLeft" align="right" valign="top"><a id="a504b39eb54d144d61594a2e88fa3cdde"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d18/classez_input_device.htm#a504b39eb54d144d61594a2e88fa3cdde">RegisterInputSlot</a> (const char *szName, const char *szDefaultDisplayName, <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; <a class="el" href="../../df/d72/structez_input_slot_flags.htm">ezInputSlotFlags</a> &gt; SlotFlags)</td></tr>
<tr class="memdesc:a504b39eb54d144d61594a2e88fa3cdde inherit pro_static_methods_classez_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls <a class="el" href="../../df/d18/classez_input_device.htm#a504b39eb54d144d61594a2e88fa3cdde" title="Calls RegisterInputSlot() on the ezInputManager and passes the parameters through.">RegisterInputSlot()</a> on the <a class="el" href="../../d8/d45/classez_input_manager.htm" title="The central class to set up and query the state of all input.">ezInputManager</a> and passes the parameters through. <br /></td></tr>
<tr class="separator:a504b39eb54d144d61594a2e88fa3cdde inherit pro_static_methods_classez_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classez_input_device"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classez_input_device')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../df/d18/classez_input_device.htm">ezInputDevice</a></td></tr>
<tr class="memitem:aa020904d039e3c7ee81829b22d6919ff inherit pro_attribs_classez_input_device"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d1/d79/classez_map.htm">ezMap</a>&lt; <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezString</a>, float &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d18/classez_input_device.htm#aa020904d039e3c7ee81829b22d6919ff">m_InputSlotValues</a></td></tr>
<tr class="memdesc:aa020904d039e3c7ee81829b22d6919ff inherit pro_attribs_classez_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores all the values for all input slots that this device handles.  <a href="../../df/d18/classez_input_device.htm#aa020904d039e3c7ee81829b22d6919ff">More...</a><br /></td></tr>
<tr class="separator:aa020904d039e3c7ee81829b22d6919ff inherit pro_attribs_classez_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4dd6868f2c0994cb9f48a9df4da1a0b inherit pro_attribs_classez_input_device"><td class="memItemLeft" align="right" valign="top"><a id="ac4dd6868f2c0994cb9f48a9df4da1a0b"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d18/classez_input_device.htm#ac4dd6868f2c0994cb9f48a9df4da1a0b">m_LastCharacter</a></td></tr>
<tr class="memdesc:ac4dd6868f2c0994cb9f48a9df4da1a0b inherit pro_attribs_classez_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">If this input device type handles character input, it should write the last typed character into this variable. The <a class="el" href="../../d8/d45/classez_input_manager.htm" title="The central class to set up and query the state of all input.">ezInputManager</a> calls RetrieveLastCharacter() to query what the user typed last. <br /></td></tr>
<tr class="separator:ac4dd6868f2c0994cb9f48a9df4da1a0b inherit pro_attribs_classez_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classez_enumerable"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classez_enumerable')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../d5/d0b/classez_enumerable.htm">ezEnumerable&lt; ezInputDevice, ezReflectedClass &gt;</a></td></tr>
<tr class="memitem:a6a9e0d84d59fb7c18b0600ec9a986098 inherit pro_attribs_classez_enumerable"><td class="memItemLeft" align="right" valign="top"><a id="a6a9e0d84d59fb7c18b0600ec9a986098"></a>
<a class="el" href="../../d5/d0b/classez_enumerable.htm">ezEnumerable</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>m_pNextInstance</b></td></tr>
<tr class="separator:a6a9e0d84d59fb7c18b0600ec9a986098 inherit pro_attribs_classez_enumerable"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class is the base class for all controller type input devices. </p>
<p>This class is derived from <a class="el" href="../../df/d18/classez_input_device.htm" title="The base class for all input device types.">ezInputDevice</a> but adds some interface functions common to most controllers. This class adds functions to query and modify the state about controller vibration, about the mapping of physical controllers to virtual ones (which controller index triggers which controller input slots) and also allows to query which controller is actually connected. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="aa12b90e5fe67b2d3729b5cf08fce3a7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa12b90e5fe67b2d3729b5cf08fce3a7a">&#9670;&nbsp;</a></span>AddVibrationTrack()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezInputDeviceController::AddVibrationTrack </td>
          <td>(</td>
          <td class="paramtype">ezUInt8&#160;</td>
          <td class="paramname"><em>uiVirtual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Motor::Enum&#160;</td>
          <td class="paramname"><em>eMotor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>fVibrationTrackValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiSamples</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fScalingFactor</em> = <code>1.0f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a short 'vibration track' (a sequence of vibrations) to the given controller. </p>
<p>Each controller has a short (typically 2 second) buffer for vibration values, that it will play. This allows to have different 'tracks' for different events, which are simply set on the controller. You can add an unlimited amount of tracks on a controller, the controller stores the maximum of all tracks and plays that. That means whenever the player shoots, or is hit etc., you can add a vibration track to the controller and it will be combined with all other tracks and played (no memory allocations are required).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">uiVirtual</td><td>The virtual index of the controller. </td></tr>
    <tr><td class="paramname">eMotor</td><td>Which motor to apply the track on. </td></tr>
    <tr><td class="paramname">fVibrationTrackValue</td><td>An array of at least <em>uiSamples</em> float values, each between 0 and 1. </td></tr>
    <tr><td class="paramname">uiSamples</td><td>How many samples <em>fVibrationTrackValue</em> contains. A maximum of MaxVibrationSamples samples is used. </td></tr>
    <tr><td class="paramname">fScalingFactor</td><td>Additional scaling factor to apply to all values in <em>fVibrationTrackValue</em>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a751ae324f2dc6147fc74029ab75ad268"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a751ae324f2dc6147fc74029ab75ad268">&#9670;&nbsp;</a></span>ApplyVibration()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void ezInputDeviceController::ApplyVibration </td>
          <td>(</td>
          <td class="paramtype">ezUInt8&#160;</td>
          <td class="paramname"><em>uiPhysicalController</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Motor::Enum&#160;</td>
          <td class="paramname"><em>eMotor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fStrength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Must be implemented by a derived controller implementation. Should set apply the vibration for the given physical controller and motor with the given strength. </p>
<p>A strength value of zero will be passed in whenever no vibration is required. No extra resetting needs to be implemented. </p>

</div>
</div>
<a id="a09632d683381030a903bbc9588c7b9da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09632d683381030a903bbc9588c7b9da">&#9670;&nbsp;</a></span>SetControllerMapping()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezInputDeviceController::SetControllerMapping </td>
          <td>(</td>
          <td class="paramtype">ezUInt8&#160;</td>
          <td class="paramname"><em>uiVirtualController</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezInt8&#160;</td>
          <td class="paramname"><em>iTakeInputFromPhysical</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets from which physical controller a virtual controller is supposed to take its input. </p>
<p>If iTakeInputFromPhysical is smaller than zero, the given virtual controller is deactivated (it will generate no input). If input is taken from a physical controller, that is already mapped to another virtual controller, that virtual controller will now take input from the physical controller that uiVirtualController was previously mapped to (ie. they will swap from which physical controller to take input). By default all virtual controllers take their input from the physical controller with the same index. You can use this feature to let the player pick up any controller, detect which one it is (e.g. by forcing him to press 'Start') and then map that physical controller index to the virtual index 0 (ie. player 1). Note that unless you specify a negative index for a mapping (which deactivates that virtual controller), mapping controllers around does never deactivate any controller, because the indices are swapped between the different virtual controllers, so which physical controller maps to which virtual controller only 'moves around'. </p>

</div>
</div>
<a id="a0b1733a5429ce73c4f91b6d5b5b7c4a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b1733a5429ce73c4f91b6d5b5b7c4a9">&#9670;&nbsp;</a></span>SetVibrationStrength()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezInputDeviceController::SetVibrationStrength </td>
          <td>(</td>
          <td class="paramtype">ezUInt8&#160;</td>
          <td class="paramname"><em>uiVirtual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Motor::Enum&#160;</td>
          <td class="paramname"><em>eMotor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fValue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the vibration strength for the given controller and motor. <em>fValue</em> is a value between 0 and 1. </p>
<p>From now on the controller will be vibrating (unless vibration is disabled), until the value is reset to zero. This kind of vibration is always combined with vibration tracks (the maximum of both values is applied at any one time). Using this function is it possible to have more direct control over vibration, while the vibration tracks are convenient for the most common (short) effects. </p>

</div>
</div>
<a id="ae8e43e986743afa26d8c5bd657060c41"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8e43e986743afa26d8c5bd657060c41">&#9670;&nbsp;</a></span>UpdateVibration()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezInputDeviceController::UpdateVibration </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a>&#160;</td>
          <td class="paramname"><em>tTimeDifference</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Combines the constant vibration and vibration tracks and applies them on each controller. </p>
<p>This function needs to be called by a derived implementation in its <a class="el" href="../../df/d18/classez_input_device.htm#a45c72b370f50d7b314571fccbb0fe6e2" title="Override this, if you need to query the state of the hardware to update the input slots.">UpdateInputSlotValues()</a> function. It will call <a class="el" href="../../d1/dd2/classez_input_device_controller.htm#a751ae324f2dc6147fc74029ab75ad268" title="Must be implemented by a derived controller implementation. Should set apply the vibration for the gi...">ApplyVibration()</a> for each controller and motor with the current value. It already takes care of whether vibration is enabled or disabled, and also mapping virtual to physical controllers. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Core/Input/DeviceTypes/<a class="el" href="../../d2/d94/_controller_8h_source.htm">Controller.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Core/Input/DeviceTypes/DeviceTypes.cpp</li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d1/dd2/classez_input_device_controller.htm">ezInputDeviceController</a></li>
    <li class="footer">Generated on Mon Oct 18 2021 15:24:18 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
