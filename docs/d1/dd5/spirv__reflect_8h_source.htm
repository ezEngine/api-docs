<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/ShaderCompilerDXC/spirv_reflect.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d1/dd5/spirv__reflect_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">spirv_reflect.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> Copyright 2017-2018 Google Inc.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> you may not use this file except in compliance with the License.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> You may obtain a copy of the License at</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> http://www.apache.org/licenses/LICENSE-2.0</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> Unless required by applicable law or agreed to in writing, software</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> See the License for the specific language governing permissions and</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> limitations under the License.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">VERSION HISTORY</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">  1.0   (2018-03-27) Initial public release</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#ifndef SPIRV_REFLECT_H</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#define SPIRV_REFLECT_H</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;spirv-headers/spirv.h&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;string.h&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">  #define SPV_REFLECT_DEPRECATED(msg_str) __declspec(deprecated(&quot;This symbol is deprecated. Details: &quot; msg_str))</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#elif defined(__clang__)</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">  #define SPV_REFLECT_DEPRECATED(msg_str) __attribute__((deprecated(msg_str)))</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#elif defined(__GNUC__)</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">  #if GCC_VERSION &gt;= 40500</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">    #define SPV_REFLECT_DEPRECATED(msg_str) __attribute__((deprecated(msg_str)))</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">  #else</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">    #define SPV_REFLECT_DEPRECATED(msg_str) __attribute__((deprecated))</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">  #endif</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">  #define SPV_REFLECT_DEPRECATED(msg_str)</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> SpvReflectResult {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  SPV_REFLECT_RESULT_SUCCESS,</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  SPV_REFLECT_RESULT_NOT_READY,</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  SPV_REFLECT_RESULT_ERROR_PARSE_FAILED,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  SPV_REFLECT_RESULT_ERROR_ALLOC_FAILED,</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  SPV_REFLECT_RESULT_ERROR_RANGE_EXCEEDED,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  SPV_REFLECT_RESULT_ERROR_NULL_POINTER,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  SPV_REFLECT_RESULT_ERROR_INTERNAL_ERROR,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  SPV_REFLECT_RESULT_ERROR_COUNT_MISMATCH,</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  SPV_REFLECT_RESULT_ERROR_ELEMENT_NOT_FOUND,</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_CODE_SIZE,</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_MAGIC_NUMBER,</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  SPV_REFLECT_RESULT_ERROR_SPIRV_UNEXPECTED_EOF,</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_ID_REFERENCE,</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  SPV_REFLECT_RESULT_ERROR_SPIRV_SET_NUMBER_OVERFLOW,</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_STORAGE_CLASS,</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  SPV_REFLECT_RESULT_ERROR_SPIRV_RECURSION,</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_INSTRUCTION,</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  SPV_REFLECT_RESULT_ERROR_SPIRV_UNEXPECTED_BLOCK_DATA,</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_BLOCK_MEMBER_REFERENCE,</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_ENTRY_POINT,</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_EXECUTION_MODE,</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;} SpvReflectResult;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> SpvReflectTypeFlagBits {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  SPV_REFLECT_TYPE_FLAG_UNDEFINED               = 0x00000000,</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  SPV_REFLECT_TYPE_FLAG_VOID                    = 0x00000001,</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  SPV_REFLECT_TYPE_FLAG_BOOL                    = 0x00000002,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  SPV_REFLECT_TYPE_FLAG_INT                     = 0x00000004,</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  SPV_REFLECT_TYPE_FLAG_FLOAT                   = 0x00000008,</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  SPV_REFLECT_TYPE_FLAG_VECTOR                  = 0x00000100,</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  SPV_REFLECT_TYPE_FLAG_MATRIX                  = 0x00000200,</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  SPV_REFLECT_TYPE_FLAG_EXTERNAL_IMAGE          = 0x00010000,</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  SPV_REFLECT_TYPE_FLAG_EXTERNAL_SAMPLER        = 0x00020000,</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  SPV_REFLECT_TYPE_FLAG_EXTERNAL_SAMPLED_IMAGE  = 0x00040000,</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  SPV_REFLECT_TYPE_FLAG_EXTERNAL_BLOCK          = 0x00080000,</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  SPV_REFLECT_TYPE_FLAG_EXTERNAL_MASK           = 0x000F0000,</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  SPV_REFLECT_TYPE_FLAG_STRUCT                  = 0x10000000,</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  SPV_REFLECT_TYPE_FLAG_ARRAY                   = 0x20000000,</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;} SpvReflectTypeFlagBits;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keyword">typedef</span> uint32_t SpvReflectTypeFlags;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> SpvReflectDecorationFlagBits {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  SPV_REFLECT_DECORATION_NONE                   = 0x00000000,</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  SPV_REFLECT_DECORATION_BLOCK                  = 0x00000001,</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  SPV_REFLECT_DECORATION_BUFFER_BLOCK           = 0x00000002,</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  SPV_REFLECT_DECORATION_ROW_MAJOR              = 0x00000004,</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  SPV_REFLECT_DECORATION_COLUMN_MAJOR           = 0x00000008,</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  SPV_REFLECT_DECORATION_BUILT_IN               = 0x00000010,</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  SPV_REFLECT_DECORATION_NOPERSPECTIVE          = 0x00000020,</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  SPV_REFLECT_DECORATION_FLAT                   = 0x00000040,</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  SPV_REFLECT_DECORATION_NON_WRITABLE           = 0x00000080,</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;} SpvReflectDecorationFlagBits;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword">typedef</span> uint32_t SpvReflectDecorationFlags;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> SpvReflectResourceType {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  SPV_REFLECT_RESOURCE_FLAG_UNDEFINED           = 0x00000000,</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  SPV_REFLECT_RESOURCE_FLAG_SAMPLER             = 0x00000001,</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  SPV_REFLECT_RESOURCE_FLAG_CBV                 = 0x00000002,</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  SPV_REFLECT_RESOURCE_FLAG_SRV                 = 0x00000004,</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  SPV_REFLECT_RESOURCE_FLAG_UAV                 = 0x00000008,</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;} SpvReflectResourceType;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> SpvReflectFormat {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  SPV_REFLECT_FORMAT_UNDEFINED           =   0, <span class="comment">// = VK_FORMAT_UNDEFINED</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  SPV_REFLECT_FORMAT_R32_UINT            =  98, <span class="comment">// = VK_FORMAT_R32_UINT</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  SPV_REFLECT_FORMAT_R32_SINT            =  99, <span class="comment">// = VK_FORMAT_R32_SINT</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  SPV_REFLECT_FORMAT_R32_SFLOAT          = 100, <span class="comment">// = VK_FORMAT_R32_SFLOAT</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  SPV_REFLECT_FORMAT_R32G32_UINT         = 101, <span class="comment">// = VK_FORMAT_R32G32_UINT</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  SPV_REFLECT_FORMAT_R32G32_SINT         = 102, <span class="comment">// = VK_FORMAT_R32G32_SINT</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  SPV_REFLECT_FORMAT_R32G32_SFLOAT       = 103, <span class="comment">// = VK_FORMAT_R32G32_SFLOAT</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  SPV_REFLECT_FORMAT_R32G32B32_UINT      = 104, <span class="comment">// = VK_FORMAT_R32G32B32_UINT</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  SPV_REFLECT_FORMAT_R32G32B32_SINT      = 105, <span class="comment">// = VK_FORMAT_R32G32B32_SINT</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  SPV_REFLECT_FORMAT_R32G32B32_SFLOAT    = 106, <span class="comment">// = VK_FORMAT_R32G32B32_SFLOAT</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  SPV_REFLECT_FORMAT_R32G32B32A32_UINT   = 107, <span class="comment">// = VK_FORMAT_R32G32B32A32_UINT</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  SPV_REFLECT_FORMAT_R32G32B32A32_SINT   = 108, <span class="comment">// = VK_FORMAT_R32G32B32A32_SINT</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  SPV_REFLECT_FORMAT_R32G32B32A32_SFLOAT = 109, <span class="comment">// = VK_FORMAT_R32G32B32A32_SFLOAT</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;} SpvReflectFormat;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">enum</span> SpvReflectVariableFlagBits{</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  SPV_REFLECT_VARIABLE_FLAGS_NONE   = 0x00000000,</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  SPV_REFLECT_VARIABLE_FLAGS_UNUSED = 0x00000001,</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;};</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword">typedef</span> uint32_t SpvReflectVariableFlags;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> SpvReflectDescriptorType {</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  SPV_REFLECT_DESCRIPTOR_TYPE_SAMPLER                =  0, <span class="comment">// = VK_DESCRIPTOR_TYPE_SAMPLER</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  SPV_REFLECT_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER =  1, <span class="comment">// = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  SPV_REFLECT_DESCRIPTOR_TYPE_SAMPLED_IMAGE          =  2, <span class="comment">// = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_IMAGE          =  3, <span class="comment">// = VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER   =  4, <span class="comment">// = VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER   =  5, <span class="comment">// = VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_BUFFER         =  6, <span class="comment">// = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_BUFFER         =  7, <span class="comment">// = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC =  8, <span class="comment">// = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC =  9, <span class="comment">// = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  SPV_REFLECT_DESCRIPTOR_TYPE_INPUT_ATTACHMENT       = 10, <span class="comment">// = VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;} SpvReflectDescriptorType;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> SpvReflectShaderStageFlagBits {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  SPV_REFLECT_SHADER_STAGE_VERTEX_BIT                  = 0x00000001, <span class="comment">// = VK_SHADER_STAGE_VERTEX_BIT</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  SPV_REFLECT_SHADER_STAGE_TESSELLATION_CONTROL_BIT    = 0x00000002, <span class="comment">// = VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  SPV_REFLECT_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004, <span class="comment">// = VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  SPV_REFLECT_SHADER_STAGE_GEOMETRY_BIT                = 0x00000008, <span class="comment">// = VK_SHADER_STAGE_GEOMETRY_BIT</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  SPV_REFLECT_SHADER_STAGE_FRAGMENT_BIT                = 0x00000010, <span class="comment">// = VK_SHADER_STAGE_FRAGMENT_BIT</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  SPV_REFLECT_SHADER_STAGE_COMPUTE_BIT                 = 0x00000020, <span class="comment">// = VK_SHADER_STAGE_COMPUTE_BIT</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  SPV_REFLECT_SHADER_STAGE_TASK_BIT_NV                 = 0x00000040, <span class="comment">// = VK_SHADER_STAGE_TASK_BIT_NV</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  SPV_REFLECT_SHADER_STAGE_MESH_BIT_NV                 = 0x00000080, <span class="comment">// = VK_SHADER_STAGE_MESH_BIT_NV</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;} SpvReflectShaderStageFlagBits;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> SpvReflectGenerator {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  SPV_REFLECT_GENERATOR_KHRONOS_LLVM_SPIRV_TRANSLATOR         = 6,</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  SPV_REFLECT_GENERATOR_KHRONOS_SPIRV_TOOLS_ASSEMBLER         = 7,</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  SPV_REFLECT_GENERATOR_KHRONOS_GLSLANG_REFERENCE_FRONT_END   = 8,</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  SPV_REFLECT_GENERATOR_GOOGLE_SHADERC_OVER_GLSLANG           = 13,</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  SPV_REFLECT_GENERATOR_GOOGLE_SPIREGG                        = 14,</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  SPV_REFLECT_GENERATOR_GOOGLE_RSPIRV                         = 15,</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  SPV_REFLECT_GENERATOR_X_LEGEND_MESA_MESAIR_SPIRV_TRANSLATOR = 16,</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  SPV_REFLECT_GENERATOR_KHRONOS_SPIRV_TOOLS_LINKER            = 17,</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  SPV_REFLECT_GENERATOR_WINE_VKD3D_SHADER_COMPILER            = 18,</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  SPV_REFLECT_GENERATOR_CLAY_CLAY_SHADER_COMPILER             = 19,</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;} SpvReflectGenerator;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="keyword">enum</span> {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  SPV_REFLECT_MAX_ARRAY_DIMS                    = 32,</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  SPV_REFLECT_MAX_DESCRIPTOR_SETS               = 64,</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;};</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="keyword">enum</span> {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  SPV_REFLECT_BINDING_NUMBER_DONT_CHANGE        = ~0,</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  SPV_REFLECT_SET_NUMBER_DONT_CHANGE            = ~0</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;};</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno"><a class="line" href="../../da/dbd/struct_spv_reflect_numeric_traits.htm">  215</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="../../da/dbd/struct_spv_reflect_numeric_traits.htm">SpvReflectNumericTraits</a> {</div>
<div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="../../d2/d65/struct_spv_reflect_numeric_traits_1_1_scalar.htm">  216</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../d2/d65/struct_spv_reflect_numeric_traits_1_1_scalar.htm">Scalar</a> {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    uint32_t                        width;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    uint32_t                        signedness;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  } scalar;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno"><a class="line" href="../../d8/d10/struct_spv_reflect_numeric_traits_1_1_vector.htm">  221</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../d8/d10/struct_spv_reflect_numeric_traits_1_1_vector.htm">Vector</a> {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    uint32_t                        component_count;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  } vector;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="../../dc/d40/struct_spv_reflect_numeric_traits_1_1_matrix.htm">  225</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../dc/d40/struct_spv_reflect_numeric_traits_1_1_matrix.htm">Matrix</a> {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    uint32_t                        column_count;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    uint32_t                        row_count;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    uint32_t                        stride; <span class="comment">// Measured in bytes</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  } matrix;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;} <a class="code" href="../../da/dbd/struct_spv_reflect_numeric_traits.htm">SpvReflectNumericTraits</a>;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="../../d5/dc6/struct_spv_reflect_image_traits.htm">  232</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="../../d5/dc6/struct_spv_reflect_image_traits.htm">SpvReflectImageTraits</a> {</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  SpvDim                            dim;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  uint32_t                          depth;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  uint32_t                          arrayed;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  uint32_t                          ms; <span class="comment">// 0: single-sampled; 1: multisampled</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  uint32_t                          sampled;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  SpvImageFormat                    image_format;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;} <a class="code" href="../../d5/dc6/struct_spv_reflect_image_traits.htm">SpvReflectImageTraits</a>;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="../../d1/d71/struct_spv_reflect_array_traits.htm">  241</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="../../d1/d71/struct_spv_reflect_array_traits.htm">SpvReflectArrayTraits</a> {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  uint32_t                          dims_count;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  uint32_t                          dims[SPV_REFLECT_MAX_ARRAY_DIMS];</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  uint32_t                          stride; <span class="comment">// Measured in bytes</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;} <a class="code" href="../../d1/d71/struct_spv_reflect_array_traits.htm">SpvReflectArrayTraits</a>;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="../../dd/d98/struct_spv_reflect_binding_array_traits.htm">  247</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="../../dd/d98/struct_spv_reflect_binding_array_traits.htm">SpvReflectBindingArrayTraits</a> {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  uint32_t                          dims_count;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  uint32_t                          dims[SPV_REFLECT_MAX_ARRAY_DIMS];</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;} <a class="code" href="../../dd/d98/struct_spv_reflect_binding_array_traits.htm">SpvReflectBindingArrayTraits</a>;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="../../dd/d40/struct_spv_reflect_type_description.htm">  255</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="../../dd/d40/struct_spv_reflect_type_description.htm">SpvReflectTypeDescription</a> {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  uint32_t                          id;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  SpvOp                             op;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                       type_name;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                       struct_member_name;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  SpvStorageClass                   storage_class;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  SpvReflectTypeFlags               type_flags;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  SpvReflectDecorationFlags         decoration_flags;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="../../d9/d26/struct_spv_reflect_type_description_1_1_traits.htm">  264</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../d9/d26/struct_spv_reflect_type_description_1_1_traits.htm">Traits</a> {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <a class="code" href="../../da/dbd/struct_spv_reflect_numeric_traits.htm">SpvReflectNumericTraits</a>         numeric;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="../../d5/dc6/struct_spv_reflect_image_traits.htm">SpvReflectImageTraits</a>           image;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <a class="code" href="../../d1/d71/struct_spv_reflect_array_traits.htm">SpvReflectArrayTraits</a>           array;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  } traits;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  uint32_t                          member_count;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <span class="keyword">struct </span><a class="code" href="../../dd/d40/struct_spv_reflect_type_description.htm">SpvReflectTypeDescription</a>* members;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;} <a class="code" href="../../dd/d40/struct_spv_reflect_type_description.htm">SpvReflectTypeDescription</a>;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">  278</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a> {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  uint32_t                            spirv_id;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                         name;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  uint32_t                            location;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  SpvStorageClass                     storage_class;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                         semantic;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  SpvReflectDecorationFlags           decoration_flags;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  SpvBuiltIn                          built_in;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <a class="code" href="../../da/dbd/struct_spv_reflect_numeric_traits.htm">SpvReflectNumericTraits</a>             numeric;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <a class="code" href="../../d1/d71/struct_spv_reflect_array_traits.htm">SpvReflectArrayTraits</a>               array;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  uint32_t                            member_count;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  <span class="keyword">struct </span><a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* members;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  SpvReflectFormat                    format;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  <span class="comment">// NOTE: SPIR-V shares type references for variables</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="comment">//       that have the same underlying type. This means</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <span class="comment">//       that the same type name will appear for multiple</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <span class="comment">//       variables.</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  <a class="code" href="../../dd/d40/struct_spv_reflect_type_description.htm">SpvReflectTypeDescription</a>*          type_description;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    uint32_t                          location;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  } word_offset;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;} <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="../../de/d19/struct_spv_reflect_block_variable.htm">  308</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a> {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  uint32_t                          spirv_id;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                       name;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  uint32_t                          offset;           <span class="comment">// Measured in bytes</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  uint32_t                          absolute_offset;  <span class="comment">// Measured in bytes</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  uint32_t                          size;             <span class="comment">// Measured in bytes</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  uint32_t                          padded_size;      <span class="comment">// Measured in bytes</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;  SpvReflectDecorationFlags         decoration_flags;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  <a class="code" href="../../da/dbd/struct_spv_reflect_numeric_traits.htm">SpvReflectNumericTraits</a>           numeric;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  <a class="code" href="../../d1/d71/struct_spv_reflect_array_traits.htm">SpvReflectArrayTraits</a>             array;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  SpvReflectVariableFlags           flags;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  uint32_t                          member_count;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  <span class="keyword">struct </span><a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>*   members;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  <a class="code" href="../../dd/d40/struct_spv_reflect_type_description.htm">SpvReflectTypeDescription</a>*        type_description;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;} <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00329"></a><span class="lineno"><a class="line" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">  329</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a> {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  uint32_t                            spirv_id;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                         name;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  uint32_t                            binding;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  uint32_t                            input_attachment_index;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  uint32_t                            set;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  SpvReflectDescriptorType            descriptor_type;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  SpvReflectResourceType              resource_type;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <a class="code" href="../../d5/dc6/struct_spv_reflect_image_traits.htm">SpvReflectImageTraits</a>               image;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>             block;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  <a class="code" href="../../dd/d98/struct_spv_reflect_binding_array_traits.htm">SpvReflectBindingArrayTraits</a>        array;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  uint32_t                            count;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  uint32_t                            accessed;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  uint32_t                            uav_counter_id;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  <span class="keyword">struct </span><a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>* uav_counter_binding;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160; </div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  <a class="code" href="../../dd/d40/struct_spv_reflect_type_description.htm">SpvReflectTypeDescription</a>*          type_description;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    uint32_t                          binding;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    uint32_t                          set;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  } word_offset;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;} <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno"><a class="line" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">  356</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a> {</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  uint32_t                          set;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  uint32_t                          binding_count;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>**     bindings;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;} <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160; </div>
<div class="line"><a name="l00365"></a><span class="lineno"><a class="line" href="../../d0/d91/struct_spv_reflect_entry_point.htm">  365</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="../../d0/d91/struct_spv_reflect_entry_point.htm">SpvReflectEntryPoint</a> {</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                       name;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  uint32_t                          id;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160; </div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  SpvExecutionModel                 spirv_execution_model;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  SpvReflectShaderStageFlagBits     shader_stage;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160; </div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  uint32_t                          input_variable_count;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*      input_variables;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  uint32_t                          output_variable_count;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*      output_variables;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  uint32_t                          descriptor_set_count;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>*          descriptor_sets;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  uint32_t                          used_uniform_count;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  uint32_t*                         used_uniforms;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  uint32_t                          used_push_constant_count;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  uint32_t*                         used_push_constants;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno"><a class="line" href="../../dd/d00/struct_spv_reflect_entry_point_1_1_local_size.htm">  385</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../dd/d00/struct_spv_reflect_entry_point_1_1_local_size.htm">LocalSize</a> {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    uint32_t                        x;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    uint32_t                        y;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    uint32_t                        z;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;  } local_size;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;} <a class="code" href="../../d0/d91/struct_spv_reflect_entry_point.htm">SpvReflectEntryPoint</a>;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160; </div>
<div class="line"><a name="l00395"></a><span class="lineno"><a class="line" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">  395</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a> {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  SpvReflectGenerator               generator;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                       entry_point_name;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  uint32_t                          entry_point_id;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;  uint32_t                          entry_point_count;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  <a class="code" href="../../d0/d91/struct_spv_reflect_entry_point.htm">SpvReflectEntryPoint</a>*             entry_points;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;  SpvSourceLanguage                 source_language;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  uint32_t                          source_language_version;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                       source_file;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                       source_source;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  SpvExecutionModel                 spirv_execution_model;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  SpvReflectShaderStageFlagBits     shader_stage;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;  uint32_t                          descriptor_binding_count;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;  <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>*      descriptor_bindings;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;  uint32_t                          descriptor_set_count;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>           descriptor_sets[SPV_REFLECT_MAX_DESCRIPTOR_SETS];</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  uint32_t                          input_variable_count;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*      input_variables;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  uint32_t                          output_variable_count;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;  <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*      output_variables;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;  uint32_t                          push_constant_block_count;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;  <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>*          push_constant_blocks;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno"><a class="line" href="../../df/de3/struct_spv_reflect_shader_module_1_1_internal.htm">  418</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../df/de3/struct_spv_reflect_shader_module_1_1_internal.htm">Internal</a> {</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordtype">size_t</span>                          spirv_size;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    uint32_t*                       spirv_code;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    uint32_t                        spirv_word_count;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160; </div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordtype">size_t</span>                          type_description_count;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <a class="code" href="../../dd/d40/struct_spv_reflect_type_description.htm">SpvReflectTypeDescription</a>*      type_descriptions;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;  } * _internal;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160; </div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;} <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160; </div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="preprocessor">#if defined(__cplusplus)</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160; </div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;SpvReflectResult spvReflectCreateShaderModule(</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;  <span class="keywordtype">size_t</span>                   size,</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">void</span>*              p_code,</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;  <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*  p_module</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160; </div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;SPV_REFLECT_DEPRECATED(<span class="stringliteral">&quot;renamed to spvReflectCreateShaderModule&quot;</span>)</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;SpvReflectResult spvReflectGetShaderModule(</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;  <span class="keywordtype">size_t</span>                   size,</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;  const <span class="keywordtype">void</span>*              p_code,</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;  <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*  p_module</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160; </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160; </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="keywordtype">void</span> spvReflectDestroyShaderModule(<a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module);</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160; </div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160; </div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;uint32_t spvReflectGetCodeSize(const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module);</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160; </div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160; </div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;const uint32_t* spvReflectGetCode(const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160; </div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;const <a class="code" href="../../d0/d91/struct_spv_reflect_entry_point.htm">SpvReflectEntryPoint</a>* spvReflectGetEntryPoint(</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;  const <span class="keywordtype">char</span>*                   entry_point</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;);</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160; </div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;SpvReflectResult spvReflectEnumerateDescriptorBindings(</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*  p_module,</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;  uint32_t*                      p_count,</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;  <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>**  pp_bindings</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;);</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160; </div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;SpvReflectResult spvReflectEnumerateEntryPointDescriptorBindings(</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;  const <span class="keywordtype">char</span>*                   entry_point,</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;  <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>** pp_bindings</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160; </div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;SpvReflectResult spvReflectEnumerateDescriptorSets(</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;  <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>**     pp_sets</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;);</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160; </div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;SpvReflectResult spvReflectEnumerateEntryPointDescriptorSets(</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;  const <span class="keywordtype">char</span>*                   entry_point,</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;  <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>**     pp_sets</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;);</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160; </div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160; </div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;SpvReflectResult spvReflectEnumerateInputVariables(</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;  <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>** pp_variables</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;);</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160; </div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;SpvReflectResult spvReflectEnumerateEntryPointInputVariables(</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;  const <span class="keywordtype">char</span>*                   entry_point,</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;  <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>** pp_variables</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;);</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160; </div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160; </div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;SpvReflectResult spvReflectEnumerateOutputVariables(</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;  <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>** pp_variables</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;);</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160; </div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;SpvReflectResult spvReflectEnumerateEntryPointOutputVariables(</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;  const <span class="keywordtype">char</span>*                   entry_point,</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;  <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>** pp_variables</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;);</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160; </div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160; </div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;SpvReflectResult spvReflectEnumeratePushConstantBlocks(</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;  <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>**     pp_blocks</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;);</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;SPV_REFLECT_DEPRECATED(&quot;renamed to spvReflectEnumeratePushConstantBlocks&quot;)</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;SpvReflectResult spvReflectEnumeratePushConstants(</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;  <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>**     pp_blocks</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;);</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160; </div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;SpvReflectResult spvReflectEnumerateEntryPointPushConstantBlocks(</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;  const <span class="keywordtype">char</span>*                   entry_point,</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;  <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>**     pp_blocks</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;);</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160; </div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160; </div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;const <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>* spvReflectGetDescriptorBinding(</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;  uint32_t                      binding_number,</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;  uint32_t                      set_number,</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;  SpvReflectResult*             p_result</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;);</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160; </div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;const <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>* spvReflectGetEntryPointDescriptorBinding(</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;  const <span class="keywordtype">char</span>*                   entry_point,</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;  uint32_t                      binding_number,</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;  uint32_t                      set_number,</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;  SpvReflectResult*             p_result</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;);</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160; </div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160; </div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;const <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>* spvReflectGetDescriptorSet(</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;  uint32_t                      set_number,</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;  SpvReflectResult*             p_result</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;);</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160; </div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;const <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>* spvReflectGetEntryPointDescriptorSet(</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;  const <span class="keywordtype">char</span>*                   entry_point,</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;  uint32_t                      set_number,</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;  SpvReflectResult*             p_result</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;);</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160; </div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160; </div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;<span class="comment">/* @fn spvReflectGetInputVariableByLocation</span></div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="comment"> @param  p_module  Pointer to an instance of SpvReflectShaderModule.</span></div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;<span class="comment"> @param  location  The &quot;location&quot; value of the requested input variable.</span></div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="comment">                   A location of 0xFFFFFFFF will always return NULL</span></div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;<span class="comment">                   with *p_result == ELEMENT_NOT_FOUND.</span></div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="comment"> @param  p_result  If successful, SPV_REFLECT_RESULT_SUCCESS will be</span></div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;<span class="comment">                   written to *p_result. Otherwise, a error code</span></div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;<span class="comment">                   indicating the cause of the failure will be stored</span></div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;<span class="comment">                   here.</span></div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;<span class="comment"> @return           If the module contains an input interface variable</span></div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;<span class="comment">                   with the provided location value, a pointer to that</span></div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;<span class="comment">                   variable is returned. The caller must not free this</span></div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;<span class="comment">                   pointer.</span></div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;<span class="comment">                   If no match can be found, or if an unrelated error</span></div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;<span class="comment">                   occurs, the return value will be NULL. Detailed</span></div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;<span class="comment">                   error results are written to *pResult.</span></div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;<span class="comment">@note</span></div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;const <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* spvReflectGetInputVariableByLocation(</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;  uint32_t                      location,</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;  SpvReflectResult*             p_result</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;);</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;SPV_REFLECT_DEPRECATED(&quot;renamed to spvReflectGetInputVariableByLocation&quot;)</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;const <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* spvReflectGetInputVariable(</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;  uint32_t                      location,</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;  SpvReflectResult*             p_result</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;);</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160; </div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="comment">/* @fn spvReflectGetEntryPointInputVariableByLocation</span></div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="comment"> @param  p_module    Pointer to an instance of SpvReflectShaderModule.</span></div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;<span class="comment"> @param  entry_point The entry point to get the input variable from.</span></div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;<span class="comment"> @param  location    The &quot;location&quot; value of the requested input variable.</span></div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<span class="comment">                     A location of 0xFFFFFFFF will always return NULL</span></div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="comment">                     with *p_result == ELEMENT_NOT_FOUND.</span></div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;<span class="comment"> @param  p_result    If successful, SPV_REFLECT_RESULT_SUCCESS will be</span></div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;<span class="comment">                     written to *p_result. Otherwise, a error code</span></div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;<span class="comment">                     indicating the cause of the failure will be stored</span></div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;<span class="comment">                     here.</span></div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;<span class="comment"> @return             If the entry point contains an input interface variable</span></div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="comment">                     with the provided location value, a pointer to that</span></div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;<span class="comment">                     variable is returned. The caller must not free this</span></div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;<span class="comment">                     pointer.</span></div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;<span class="comment">                     If no match can be found, or if an unrelated error</span></div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="comment">                     occurs, the return value will be NULL. Detailed</span></div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;<span class="comment">                     error results are written to *pResult.</span></div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;<span class="comment">@note</span></div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;const <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* spvReflectGetEntryPointInputVariableByLocation(</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;  const <span class="keywordtype">char</span>*                   entry_point,</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;  uint32_t                      location,</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;  SpvReflectResult*             p_result</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;);</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160; </div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="comment">/* @fn spvReflectGetInputVariableBySemantic</span></div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;<span class="comment"> @param  p_module  Pointer to an instance of SpvReflectShaderModule.</span></div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;<span class="comment"> @param  semantic  The &quot;semantic&quot; value of the requested input variable.</span></div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;<span class="comment">                   A semantic of NULL will return NULL.</span></div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;<span class="comment">                   A semantic of &quot;&quot; will always return NULL with</span></div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;<span class="comment">                   *p_result == ELEMENT_NOT_FOUND.</span></div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;<span class="comment"> @param  p_result  If successful, SPV_REFLECT_RESULT_SUCCESS will be</span></div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;<span class="comment">                   written to *p_result. Otherwise, a error code</span></div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;<span class="comment">                   indicating the cause of the failure will be stored</span></div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;<span class="comment">                   here.</span></div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;<span class="comment"> @return           If the module contains an input interface variable</span></div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;<span class="comment">                   with the provided semantic, a pointer to that</span></div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;<span class="comment">                   variable is returned. The caller must not free this</span></div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;<span class="comment">                   pointer.</span></div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;<span class="comment">                   If no match can be found, or if an unrelated error</span></div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;<span class="comment">                   occurs, the return value will be NULL. Detailed</span></div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;<span class="comment">                   error results are written to *pResult.</span></div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;<span class="comment">@note</span></div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;const <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* spvReflectGetInputVariableBySemantic(</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;  const <span class="keywordtype">char</span>*                   semantic,</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;  SpvReflectResult*             p_result</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;);</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160; </div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="comment">/* @fn spvReflectGetEntryPointInputVariableBySemantic</span></div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;<span class="comment"> @param  p_module  Pointer to an instance of SpvReflectShaderModule.</span></div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;<span class="comment"> @param  entry_point The entry point to get the input variable from.</span></div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;<span class="comment"> @param  semantic  The &quot;semantic&quot; value of the requested input variable.</span></div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;<span class="comment">                   A semantic of NULL will return NULL.</span></div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;<span class="comment">                   A semantic of &quot;&quot; will always return NULL with</span></div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;<span class="comment">                   *p_result == ELEMENT_NOT_FOUND.</span></div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;<span class="comment"> @param  p_result  If successful, SPV_REFLECT_RESULT_SUCCESS will be</span></div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;<span class="comment">                   written to *p_result. Otherwise, a error code</span></div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;<span class="comment">                   indicating the cause of the failure will be stored</span></div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;<span class="comment">                   here.</span></div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;<span class="comment"> @return           If the entry point contains an input interface variable</span></div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;<span class="comment">                   with the provided semantic, a pointer to that</span></div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;<span class="comment">                   variable is returned. The caller must not free this</span></div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;<span class="comment">                   pointer.</span></div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;<span class="comment">                   If no match can be found, or if an unrelated error</span></div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;<span class="comment">                   occurs, the return value will be NULL. Detailed</span></div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;<span class="comment">                   error results are written to *pResult.</span></div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;<span class="comment">@note</span></div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;const <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* spvReflectGetEntryPointInputVariableBySemantic(</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>* p_module,</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;  const <span class="keywordtype">char</span>*                   entry_point,</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;  const <span class="keywordtype">char</span>*                   semantic,</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;  SpvReflectResult*             p_result</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;);</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160; </div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;<span class="comment">/* @fn spvReflectGetOutputVariableByLocation</span></div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;<span class="comment"> @param  p_module  Pointer to an instance of SpvReflectShaderModule.</span></div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;<span class="comment"> @param  location  The &quot;location&quot; value of the requested output variable.</span></div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;<span class="comment">                   A location of 0xFFFFFFFF will always return NULL</span></div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;<span class="comment">                   with *p_result == ELEMENT_NOT_FOUND.</span></div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;<span class="comment"> @param  p_result  If successful, SPV_REFLECT_RESULT_SUCCESS will be</span></div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;<span class="comment">                   written to *p_result. Otherwise, a error code</span></div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;<span class="comment">                   indicating the cause of the failure will be stored</span></div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;<span class="comment">                   here.</span></div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;<span class="comment"> @return           If the module contains an output interface variable</span></div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;<span class="comment">                   with the provided location value, a pointer to that</span></div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;<span class="comment">                   variable is returned. The caller must not free this</span></div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;<span class="comment">                   pointer.</span></div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;<span class="comment">                   If no match can be found, or if an unrelated error</span></div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;<span class="comment">                   occurs, the return value will be NULL. Detailed</span></div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;<span class="comment">                   error results are written to *pResult.</span></div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;<span class="comment">@note</span></div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;const <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* spvReflectGetOutputVariableByLocation(</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*  p_module,</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;  uint32_t                       location,</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;  SpvReflectResult*              p_result</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;);</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;SPV_REFLECT_DEPRECATED(&quot;renamed to spvReflectGetOutputVariableByLocation&quot;)</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;const <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* spvReflectGetOutputVariable(</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*  p_module,</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;  uint32_t                       location,</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;  SpvReflectResult*              p_result</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;);</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160; </div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;<span class="comment">/* @fn spvReflectGetEntryPointOutputVariableByLocation</span></div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;<span class="comment"> @param  p_module     Pointer to an instance of SpvReflectShaderModule.</span></div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;<span class="comment"> @param  entry_point  The entry point to get the output variable from.</span></div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;<span class="comment"> @param  location     The &quot;location&quot; value of the requested output variable.</span></div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;<span class="comment">                      A location of 0xFFFFFFFF will always return NULL</span></div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;<span class="comment">                      with *p_result == ELEMENT_NOT_FOUND.</span></div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;<span class="comment"> @param  p_result     If successful, SPV_REFLECT_RESULT_SUCCESS will be</span></div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;<span class="comment">                      written to *p_result. Otherwise, a error code</span></div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;<span class="comment">                      indicating the cause of the failure will be stored</span></div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;<span class="comment">                      here.</span></div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;<span class="comment"> @return              If the entry point contains an output interface variable</span></div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;<span class="comment">                      with the provided location value, a pointer to that</span></div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;<span class="comment">                      variable is returned. The caller must not free this</span></div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;<span class="comment">                      pointer.</span></div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;<span class="comment">                      If no match can be found, or if an unrelated error</span></div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;<span class="comment">                      occurs, the return value will be NULL. Detailed</span></div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;<span class="comment">                      error results are written to *pResult.</span></div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;<span class="comment">@note</span></div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;const <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* spvReflectGetEntryPointOutputVariableByLocation(</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*  p_module,</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;  const <span class="keywordtype">char</span>*                    entry_point,</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;  uint32_t                       location,</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;  SpvReflectResult*              p_result</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;);</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160; </div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;<span class="comment">/* @fn spvReflectGetOutputVariableBySemantic</span></div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;<span class="comment"> @param  p_module  Pointer to an instance of SpvReflectShaderModule.</span></div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;<span class="comment"> @param  semantic  The &quot;semantic&quot; value of the requested output variable.</span></div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;<span class="comment">                   A semantic of NULL will return NULL.</span></div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;<span class="comment">                   A semantic of &quot;&quot; will always return NULL with</span></div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;<span class="comment">                   *p_result == ELEMENT_NOT_FOUND.</span></div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;<span class="comment"> @param  p_result  If successful, SPV_REFLECT_RESULT_SUCCESS will be</span></div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;<span class="comment">                   written to *p_result. Otherwise, a error code</span></div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;<span class="comment">                   indicating the cause of the failure will be stored</span></div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;<span class="comment">                   here.</span></div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;<span class="comment"> @return           If the module contains an output interface variable</span></div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;<span class="comment">                   with the provided semantic, a pointer to that</span></div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;<span class="comment">                   variable is returned. The caller must not free this</span></div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;<span class="comment">                   pointer.</span></div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;<span class="comment">                   If no match can be found, or if an unrelated error</span></div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;<span class="comment">                   occurs, the return value will be NULL. Detailed</span></div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;<span class="comment">                   error results are written to *pResult.</span></div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;<span class="comment">@note</span></div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;const <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* spvReflectGetOutputVariableBySemantic(</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*  p_module,</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;  const <span class="keywordtype">char</span>*                    semantic,</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;  SpvReflectResult*              p_result</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;);</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160; </div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;<span class="comment">/* @fn spvReflectGetEntryPointOutputVariableBySemantic</span></div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;<span class="comment"> @param  p_module  Pointer to an instance of SpvReflectShaderModule.</span></div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;<span class="comment"> @param  entry_point  The entry point to get the output variable from.</span></div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;<span class="comment"> @param  semantic  The &quot;semantic&quot; value of the requested output variable.</span></div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;<span class="comment">                   A semantic of NULL will return NULL.</span></div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;<span class="comment">                   A semantic of &quot;&quot; will always return NULL with</span></div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="comment">                   *p_result == ELEMENT_NOT_FOUND.</span></div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="comment"> @param  p_result  If successful, SPV_REFLECT_RESULT_SUCCESS will be</span></div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="comment">                   written to *p_result. Otherwise, a error code</span></div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;<span class="comment">                   indicating the cause of the failure will be stored</span></div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;<span class="comment">                   here.</span></div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;<span class="comment"> @return           If the entry point contains an output interface variable</span></div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;<span class="comment">                   with the provided semantic, a pointer to that</span></div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;<span class="comment">                   variable is returned. The caller must not free this</span></div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;<span class="comment">                   pointer.</span></div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;<span class="comment">                   If no match can be found, or if an unrelated error</span></div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;<span class="comment">                   occurs, the return value will be NULL. Detailed</span></div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;<span class="comment">                   error results are written to *pResult.</span></div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;<span class="comment">@note</span></div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;const <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* spvReflectGetEntryPointOutputVariableBySemantic(</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*  p_module,</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;  const <span class="keywordtype">char</span>*                    entry_point,</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;  const <span class="keywordtype">char</span>*                    semantic,</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;  SpvReflectResult*              p_result</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;);</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160; </div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;const <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>* spvReflectGetPushConstantBlock(</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*  p_module,</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;  uint32_t                       index,</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;  SpvReflectResult*              p_result</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;);</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;SPV_REFLECT_DEPRECATED(&quot;renamed to spvReflectGetPushConstantBlock&quot;)</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;const <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>* spvReflectGetPushConstant(</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*  p_module,</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;  uint32_t                       index,</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;  SpvReflectResult*              p_result</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;);</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160; </div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;const <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>* spvReflectGetEntryPointPushConstantBlock(</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;  const <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*  p_module,</div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;  const <span class="keywordtype">char</span>*                    entry_point,</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;  SpvReflectResult*              p_result</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;);</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160; </div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160; </div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;SpvReflectResult spvReflectChangeDescriptorBindingNumbers(</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;  <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*            p_module,</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;  const <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>* p_binding,</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;  uint32_t                           new_binding_number,</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;  uint32_t                           new_set_number</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;);</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;SPV_REFLECT_DEPRECATED(&quot;Renamed to spvReflectChangeDescriptorBindingNumbers&quot;)</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;SpvReflectResult spvReflectChangeDescriptorBindingNumber(</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;  <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*            p_module,</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;  const <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>* p_descriptor_binding,</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;  uint32_t                           new_binding_number,</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;  uint32_t                           optional_new_set_number</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;);</div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160; </div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;SpvReflectResult spvReflectChangeDescriptorSetNumber(</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;  <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*        p_module,</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;  const <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>* p_set,</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;  uint32_t                       new_set_number</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;);</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160; </div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;SpvReflectResult spvReflectChangeInputVariableLocation(</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;  <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*            p_module,</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;  const <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* p_input_variable,</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;  uint32_t                           new_location</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;);</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160; </div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160; </div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;SpvReflectResult spvReflectChangeOutputVariableLocation(</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;  <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>*             p_module,</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;  const <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*  p_output_variable,</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;  uint32_t                            new_location</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;);</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160; </div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160; </div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;const <span class="keywordtype">char</span>* spvReflectSourceLanguage(SpvSourceLanguage source_lang);</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160; </div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;<span class="preprocessor">#if defined(__cplusplus)</span></div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;};</div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160; </div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;<span class="preprocessor">#if defined(__cplusplus)</span></div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160; </div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;<span class="keyword">namespace </span>spv_reflect {</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160; </div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;<span class="keyword">class </span>ShaderModule {</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;  ShaderModule();</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;  ShaderModule(<span class="keywordtype">size_t</span> size, <span class="keyword">const</span> <span class="keywordtype">void</span>* p_code);</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;  ShaderModule(<span class="keyword">const</span> std::vector&lt;uint8_t&gt;&amp; code);</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;  ShaderModule(<span class="keyword">const</span> std::vector&lt;uint32_t&gt;&amp; code);</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;  ~ShaderModule();</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160; </div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;  SpvReflectResult GetResult() <span class="keyword">const</span>;</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160; </div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>&amp; GetShaderModule() <span class="keyword">const</span>;</div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160; </div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;  uint32_t        GetCodeSize() <span class="keyword">const</span>;</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;  <span class="keyword">const</span> uint32_t* GetCode() <span class="keyword">const</span>;</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160; </div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*           GetEntryPointName() <span class="keyword">const</span>;</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160; </div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*           GetSourceFile() <span class="keyword">const</span>;</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160; </div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;  uint32_t              GetEntryPointCount() <span class="keyword">const</span>;</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*           GetEntryPointName(uint32_t index) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160; </div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;  SpvReflectShaderStageFlagBits GetShaderStage() <span class="keyword">const</span>;</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;  SPV_REFLECT_DEPRECATED(<span class="stringliteral">&quot;Renamed to GetShaderStage&quot;</span>)</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;  SpvReflectShaderStageFlagBits GetVulkanShaderStage()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    <span class="keywordflow">return</span> GetShaderStage();</div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;  }</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160; </div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;  SpvReflectResult  EnumerateDescriptorBindings(uint32_t* p_count, <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>** pp_bindings) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;  SpvReflectResult  EnumerateEntryPointDescriptorBindings(<span class="keyword">const</span> <span class="keywordtype">char</span>* entry_point, uint32_t* p_count, <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>** pp_bindings) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;  SpvReflectResult  EnumerateDescriptorSets( uint32_t* p_count, <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>** pp_sets) <span class="keyword">const</span> ;</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;  SpvReflectResult  EnumerateEntryPointDescriptorSets(<span class="keyword">const</span> <span class="keywordtype">char</span>* entry_point, uint32_t* p_count, <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>** pp_sets) <span class="keyword">const</span> ;</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;  SpvReflectResult  EnumerateInputVariables(uint32_t* p_count,<a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>** pp_variables) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;  SpvReflectResult  EnumerateEntryPointInputVariables(<span class="keyword">const</span> <span class="keywordtype">char</span>* entry_point, uint32_t* p_count,<a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>** pp_variables) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;  SpvReflectResult  EnumerateOutputVariables(uint32_t* p_count,<a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>** pp_variables) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;  SpvReflectResult  EnumerateEntryPointOutputVariables(<span class="keyword">const</span> <span class="keywordtype">char</span>* entry_point, uint32_t* p_count,<a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>** pp_variables) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;  SpvReflectResult  EnumeratePushConstantBlocks(uint32_t* p_count, <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>** pp_blocks) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;  SpvReflectResult  EnumerateEntryPointPushConstantBlocks(<span class="keyword">const</span> <span class="keywordtype">char</span>* entry_point, uint32_t* p_count, <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>** pp_blocks) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;  SPV_REFLECT_DEPRECATED(<span class="stringliteral">&quot;Renamed to EnumeratePushConstantBlocks&quot;</span>)</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;  SpvReflectResult  EnumeratePushConstants(uint32_t* p_count, <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>** pp_blocks)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    <span class="keywordflow">return</span> EnumeratePushConstantBlocks(p_count, pp_blocks);</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;  }</div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160; </div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>*  GetDescriptorBinding(uint32_t binding_number, uint32_t set_number, SpvReflectResult* p_result = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>*  GetEntryPointDescriptorBinding(<span class="keyword">const</span> <span class="keywordtype">char</span>* entry_point, uint32_t binding_number, uint32_t set_number, SpvReflectResult* p_result = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>*      GetDescriptorSet(uint32_t set_number, SpvReflectResult* p_result = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>*      GetEntryPointDescriptorSet(<span class="keyword">const</span> <span class="keywordtype">char</span>* entry_point, uint32_t set_number, SpvReflectResult* p_result = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*  GetInputVariableByLocation(uint32_t location,  SpvReflectResult* p_result = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;  SPV_REFLECT_DEPRECATED(<span class="stringliteral">&quot;Renamed to GetInputVariableByLocation&quot;</span>)</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;  const <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*  GetInputVariable(uint32_t location,  SpvReflectResult* p_result = <span class="keywordtype">nullptr</span>)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    <span class="keywordflow">return</span> GetInputVariableByLocation(location, p_result);</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;  }</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*  GetEntryPointInputVariableByLocation(<span class="keyword">const</span> <span class="keywordtype">char</span>* entry_point, uint32_t location,  SpvReflectResult* p_result = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*  GetInputVariableBySemantic(<span class="keyword">const</span> <span class="keywordtype">char</span>* semantic,  SpvReflectResult* p_result = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*  GetEntryPointInputVariableBySemantic(<span class="keyword">const</span> <span class="keywordtype">char</span>* entry_point, <span class="keyword">const</span> <span class="keywordtype">char</span>* semantic,  SpvReflectResult* p_result = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*  GetOutputVariableByLocation(uint32_t location, SpvReflectResult*  p_result = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;  SPV_REFLECT_DEPRECATED(<span class="stringliteral">&quot;Renamed to GetOutputVariableByLocation&quot;</span>)</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;  const <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*  GetOutputVariable(uint32_t location, SpvReflectResult*  p_result = <span class="keywordtype">nullptr</span>)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;    <span class="keywordflow">return</span> GetOutputVariableByLocation(location, p_result);</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;  }</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*  GetEntryPointOutputVariableByLocation(<span class="keyword">const</span> <span class="keywordtype">char</span>* entry_point, uint32_t location, SpvReflectResult*  p_result = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*  GetOutputVariableBySemantic(<span class="keyword">const</span> <span class="keywordtype">char</span>* semantic, SpvReflectResult*  p_result = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>*  GetEntryPointOutputVariableBySemantic(<span class="keyword">const</span> <span class="keywordtype">char</span>* entry_point, <span class="keyword">const</span> <span class="keywordtype">char</span>* semantic, SpvReflectResult*  p_result = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>*      GetPushConstantBlock(uint32_t index, SpvReflectResult*  p_result = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;  SPV_REFLECT_DEPRECATED(<span class="stringliteral">&quot;Renamed to GetPushConstantBlock&quot;</span>)</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;  const <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>*      GetPushConstant(uint32_t index, SpvReflectResult*  p_result = <span class="keywordtype">nullptr</span>)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;    <span class="keywordflow">return</span> GetPushConstantBlock(index, p_result);</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;  }</div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>*      GetEntryPointPushConstantBlock(<span class="keyword">const</span> <span class="keywordtype">char</span>* entry_point, SpvReflectResult*  p_result = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160; </div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;  SpvReflectResult ChangeDescriptorBindingNumbers(<span class="keyword">const</span> <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>* p_binding,</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;      uint32_t new_binding_number = SPV_REFLECT_BINDING_NUMBER_DONT_CHANGE,</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;      uint32_t optional_new_set_number = SPV_REFLECT_SET_NUMBER_DONT_CHANGE);</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;  SPV_REFLECT_DEPRECATED(<span class="stringliteral">&quot;Renamed to ChangeDescriptorBindingNumbers&quot;</span>)</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;  SpvReflectResult ChangeDescriptorBindingNumber(const <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>* p_binding, uint32_t new_binding_number = SPV_REFLECT_BINDING_NUMBER_DONT_CHANGE,</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;      uint32_t new_set_number = SPV_REFLECT_SET_NUMBER_DONT_CHANGE) {</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    <span class="keywordflow">return</span> ChangeDescriptorBindingNumbers(p_binding, new_binding_number, new_set_number);</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;  }</div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;  SpvReflectResult ChangeDescriptorSetNumber(<span class="keyword">const</span> <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>* p_set, uint32_t new_set_number = SPV_REFLECT_SET_NUMBER_DONT_CHANGE);</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;  SpvReflectResult ChangeInputVariableLocation(<span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* p_input_variable, uint32_t new_location);</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;  SpvReflectResult ChangeOutputVariableLocation(<span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* p_output_variable, uint32_t new_location);</div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160; </div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;  <span class="keyword">mutable</span> SpvReflectResult  m_result = SPV_REFLECT_RESULT_NOT_READY;</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;  <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>    m_module = {};</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;};</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160; </div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160; </div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;<span class="comment">// =================================================================================================</span></div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;<span class="comment">// ShaderModule</span></div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;<span class="comment">// =================================================================================================</span></div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160; </div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;<span class="keyword">inline</span> ShaderModule::ShaderModule() {}</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160; </div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160; </div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;<span class="keyword">inline</span> ShaderModule::ShaderModule(<span class="keywordtype">size_t</span> size, <span class="keyword">const</span> <span class="keywordtype">void</span>* p_code) {</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;  m_result = spvReflectCreateShaderModule(</div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    size,</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;    p_code,</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;    &amp;m_module);</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;}</div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160; </div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;<span class="keyword">inline</span> ShaderModule::ShaderModule(<span class="keyword">const</span> std::vector&lt;uint8_t&gt;&amp; code) {</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;  m_result = spvReflectCreateShaderModule(</div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;    code.size(),</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;    code.data(),</div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;    &amp;m_module);</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;}</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160; </div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;<span class="keyword">inline</span> ShaderModule::ShaderModule(<span class="keyword">const</span> std::vector&lt;uint32_t&gt;&amp; code) {</div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;  m_result = spvReflectCreateShaderModule(</div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    code.size() * <span class="keyword">sizeof</span>(uint32_t),</div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;    code.data(),</div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;    &amp;m_module);</div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;}</div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160; </div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;<span class="keyword">inline</span> ShaderModule::~ShaderModule() {</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;  spvReflectDestroyShaderModule(&amp;m_module);</div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;}</div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160; </div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160; </div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::GetResult()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;  <span class="keywordflow">return</span> m_result;</div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;}</div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160; </div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160; </div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a>&amp; ShaderModule::GetShaderModule()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;  <span class="keywordflow">return</span> m_module;</div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;}</div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160; </div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160; </div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;<span class="keyword">inline</span> uint32_t ShaderModule::GetCodeSize()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;  <span class="keywordflow">return</span> spvReflectGetCodeSize(&amp;m_module);</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;}</div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160; </div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160; </div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> uint32_t* ShaderModule::GetCode()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;  <span class="keywordflow">return</span> spvReflectGetCode(&amp;m_module);</div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;}</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160; </div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160; </div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* ShaderModule::GetEntryPointName()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;  <span class="keywordflow">return</span> this-&gt;GetEntryPointName(0);</div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;}</div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160; </div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* ShaderModule::GetSourceFile()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;  <span class="keywordflow">return</span> m_module.source_file;</div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;}</div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160; </div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;<span class="keyword">inline</span> uint32_t ShaderModule::GetEntryPointCount()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;  <span class="keywordflow">return</span> m_module.entry_point_count;</div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;}</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160; </div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* ShaderModule::GetEntryPointName(uint32_t index)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;  <span class="keywordflow">return</span> m_module.entry_points[index].name;</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;}</div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160; </div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;<span class="keyword">inline</span> SpvReflectShaderStageFlagBits ShaderModule::GetShaderStage()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;  <span class="keywordflow">return</span> m_module.shader_stage;</div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;}</div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160; </div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::EnumerateDescriptorBindings(</div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;  <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>** pp_bindings</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;  m_result = spvReflectEnumerateDescriptorBindings(</div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;    p_count,</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    pp_bindings);</div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;  <span class="keywordflow">return</span> m_result;</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;}</div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160; </div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::EnumerateEntryPointDescriptorBindings(</div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                   entry_point,</div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;  <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>** pp_bindings</div>
<div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;  m_result = spvReflectEnumerateEntryPointDescriptorBindings(</div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;      &amp;m_module,</div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;      entry_point,</div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;      p_count,</div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;      pp_bindings);</div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;  <span class="keywordflow">return</span> m_result;</div>
<div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;}</div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160; </div>
<div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160; </div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::EnumerateDescriptorSets(</div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;  uint32_t*                 p_count,</div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;  <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>** pp_sets</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;  m_result = spvReflectEnumerateDescriptorSets(</div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;    p_count,</div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;    pp_sets);</div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;  <span class="keywordflow">return</span> m_result;</div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;}</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160; </div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::EnumerateEntryPointDescriptorSets(</div>
<div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*               entry_point,</div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;  uint32_t*                 p_count,</div>
<div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;  <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>** pp_sets</div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;  m_result = spvReflectEnumerateEntryPointDescriptorSets(</div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;      &amp;m_module,</div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;      entry_point,</div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;      p_count,</div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;      pp_sets);</div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;  <span class="keywordflow">return</span> m_result;</div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;}</div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160; </div>
<div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160; </div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::EnumerateInputVariables(</div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;  <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>** pp_variables</div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;  m_result = spvReflectEnumerateInputVariables(</div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;    p_count,</div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;    pp_variables);</div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;  <span class="keywordflow">return</span> m_result;</div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;}</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160; </div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::EnumerateEntryPointInputVariables(</div>
<div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                   entry_point,</div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;  <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>** pp_variables</div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;  m_result = spvReflectEnumerateEntryPointInputVariables(</div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;      &amp;m_module,</div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;      entry_point,</div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;      p_count,</div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;      pp_variables);</div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;  <span class="keywordflow">return</span> m_result;</div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;}</div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160; </div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160; </div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::EnumerateOutputVariables(</div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;  <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>** pp_variables</div>
<div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;  m_result = spvReflectEnumerateOutputVariables(</div>
<div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;    p_count,</div>
<div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;    pp_variables);</div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;  <span class="keywordflow">return</span> m_result;</div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;}</div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160; </div>
<div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::EnumerateEntryPointOutputVariables(</div>
<div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                   entry_point,</div>
<div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;  uint32_t*                     p_count,</div>
<div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;  <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>** pp_variables</div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;  m_result = spvReflectEnumerateEntryPointOutputVariables(</div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;      &amp;m_module,</div>
<div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;      entry_point,</div>
<div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;      p_count,</div>
<div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;      pp_variables);</div>
<div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;  <span class="keywordflow">return</span> m_result;</div>
<div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;}</div>
<div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160; </div>
<div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160; </div>
<div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::EnumeratePushConstantBlocks(</div>
<div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;  uint32_t*                 p_count,</div>
<div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;  <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>** pp_blocks</div>
<div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;  m_result = spvReflectEnumeratePushConstantBlocks(</div>
<div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;    p_count,</div>
<div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;    pp_blocks);</div>
<div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;  <span class="keywordflow">return</span> m_result;</div>
<div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;}</div>
<div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160; </div>
<div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::EnumerateEntryPointPushConstantBlocks(</div>
<div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*               entry_point,</div>
<div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;  uint32_t*                 p_count,</div>
<div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;  <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>** pp_blocks</div>
<div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;  m_result = spvReflectEnumerateEntryPointPushConstantBlocks(</div>
<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;      &amp;m_module,</div>
<div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;      entry_point,</div>
<div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;      p_count,</div>
<div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;      pp_blocks);</div>
<div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;  <span class="keywordflow">return</span> m_result;</div>
<div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;}</div>
<div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160; </div>
<div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160; </div>
<div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>* ShaderModule::GetDescriptorBinding(</div>
<div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;  uint32_t          binding_number,</div>
<div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;  uint32_t          set_number,</div>
<div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;  SpvReflectResult* p_result</div>
<div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;  <span class="keywordflow">return</span> spvReflectGetDescriptorBinding(</div>
<div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;    binding_number,</div>
<div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;    set_number,</div>
<div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;    p_result);</div>
<div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;}</div>
<div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160; </div>
<div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>* ShaderModule::GetEntryPointDescriptorBinding(</div>
<div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*       entry_point,</div>
<div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;  uint32_t          binding_number,</div>
<div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;  uint32_t          set_number,</div>
<div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;  SpvReflectResult* p_result</div>
<div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;  <span class="keywordflow">return</span> spvReflectGetEntryPointDescriptorBinding(</div>
<div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;    entry_point,</div>
<div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;    binding_number,</div>
<div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;    set_number,</div>
<div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;    p_result);</div>
<div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;}</div>
<div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160; </div>
<div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160; </div>
<div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>* ShaderModule::GetDescriptorSet(</div>
<div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;  uint32_t          set_number,</div>
<div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;  SpvReflectResult* p_result</div>
<div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;  <span class="keywordflow">return</span> spvReflectGetDescriptorSet(</div>
<div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;    set_number,</div>
<div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;    p_result);</div>
<div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;}</div>
<div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160; </div>
<div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>* ShaderModule::GetEntryPointDescriptorSet(</div>
<div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*       entry_point,</div>
<div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;  uint32_t          set_number,</div>
<div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;  SpvReflectResult* p_result</div>
<div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;  <span class="keywordflow">return</span> spvReflectGetEntryPointDescriptorSet(</div>
<div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;    entry_point,</div>
<div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;    set_number,</div>
<div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;    p_result);</div>
<div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;}</div>
<div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160; </div>
<div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160; </div>
<div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* ShaderModule::GetInputVariableByLocation(</div>
<div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;  uint32_t          location,</div>
<div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;  SpvReflectResult* p_result</div>
<div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;  <span class="keywordflow">return</span> spvReflectGetInputVariableByLocation(</div>
<div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;    location,</div>
<div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;    p_result);</div>
<div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;}</div>
<div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* ShaderModule::GetInputVariableBySemantic(</div>
<div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*       semantic,</div>
<div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;  SpvReflectResult* p_result</div>
<div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;  <span class="keywordflow">return</span> spvReflectGetInputVariableBySemantic(</div>
<div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;    semantic,</div>
<div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;    p_result);</div>
<div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;}</div>
<div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160; </div>
<div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* ShaderModule::GetEntryPointInputVariableByLocation(</div>
<div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*       entry_point,</div>
<div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;  uint32_t          location,</div>
<div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;  SpvReflectResult* p_result</div>
<div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;  <span class="keywordflow">return</span> spvReflectGetEntryPointInputVariableByLocation(</div>
<div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;    entry_point,</div>
<div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;    location,</div>
<div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;    p_result);</div>
<div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;}</div>
<div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* ShaderModule::GetEntryPointInputVariableBySemantic(</div>
<div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*       entry_point,</div>
<div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*       semantic,</div>
<div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;  SpvReflectResult* p_result</div>
<div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;  <span class="keywordflow">return</span> spvReflectGetEntryPointInputVariableBySemantic(</div>
<div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;    entry_point,</div>
<div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;    semantic,</div>
<div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;    p_result);</div>
<div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;}</div>
<div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160; </div>
<div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160; </div>
<div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* ShaderModule::GetOutputVariableByLocation(</div>
<div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;  uint32_t           location,</div>
<div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;  SpvReflectResult*  p_result</div>
<div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;  <span class="keywordflow">return</span> spvReflectGetOutputVariableByLocation(</div>
<div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;    location,</div>
<div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;    p_result);</div>
<div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;}</div>
<div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* ShaderModule::GetOutputVariableBySemantic(</div>
<div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*       semantic,</div>
<div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;  SpvReflectResult* p_result</div>
<div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;  <span class="keywordflow">return</span> spvReflectGetOutputVariableBySemantic(&amp;m_module,</div>
<div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;    semantic,</div>
<div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;    p_result);</div>
<div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;}</div>
<div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160; </div>
<div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* ShaderModule::GetEntryPointOutputVariableByLocation(</div>
<div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*        entry_point,</div>
<div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;  uint32_t           location,</div>
<div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;  SpvReflectResult*  p_result</div>
<div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;  <span class="keywordflow">return</span> spvReflectGetEntryPointOutputVariableByLocation(</div>
<div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;    entry_point,</div>
<div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;    location,</div>
<div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;    p_result);</div>
<div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;}</div>
<div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* ShaderModule::GetEntryPointOutputVariableBySemantic(</div>
<div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*       entry_point,</div>
<div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*       semantic,</div>
<div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;  SpvReflectResult* p_result</div>
<div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;  <span class="keywordflow">return</span> spvReflectGetEntryPointOutputVariableBySemantic(</div>
<div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;    entry_point,</div>
<div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;    semantic,</div>
<div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;    p_result);</div>
<div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;}</div>
<div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160; </div>
<div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160; </div>
<div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>* ShaderModule::GetPushConstantBlock(</div>
<div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;  uint32_t           index,</div>
<div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;  SpvReflectResult*  p_result</div>
<div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;  <span class="keywordflow">return</span> spvReflectGetPushConstantBlock(</div>
<div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;    index,</div>
<div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;    p_result);</div>
<div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;}</div>
<div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160; </div>
<div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a>* ShaderModule::GetEntryPointPushConstantBlock(</div>
<div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*        entry_point,</div>
<div class="line"><a name="l01967"></a><span class="lineno"> 1967</span>&#160;  SpvReflectResult*  p_result</div>
<div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;  <span class="keywordflow">return</span> spvReflectGetEntryPointPushConstantBlock(</div>
<div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01972"></a><span class="lineno"> 1972</span>&#160;    entry_point,</div>
<div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;    p_result);</div>
<div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;}</div>
<div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160; </div>
<div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160; </div>
<div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::ChangeDescriptorBindingNumbers(</div>
<div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a>* p_binding,</div>
<div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;  uint32_t                           new_binding_number,</div>
<div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;  uint32_t                           new_set_number</div>
<div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;)</div>
<div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;{</div>
<div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;  <span class="keywordflow">return</span> spvReflectChangeDescriptorBindingNumbers(</div>
<div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;    p_binding,</div>
<div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;    new_binding_number,</div>
<div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;    new_set_number);</div>
<div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;}</div>
<div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160; </div>
<div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160; </div>
<div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::ChangeDescriptorSetNumber(</div>
<div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a>* p_set,</div>
<div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;  uint32_t                       new_set_number</div>
<div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;)</div>
<div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;{</div>
<div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;  <span class="keywordflow">return</span> spvReflectChangeDescriptorSetNumber(</div>
<div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;    p_set,</div>
<div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;    new_set_number);</div>
<div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;}</div>
<div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160; </div>
<div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160; </div>
<div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::ChangeInputVariableLocation(</div>
<div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* p_input_variable,</div>
<div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160;  uint32_t                           new_location)</div>
<div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;{</div>
<div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160;  <span class="keywordflow">return</span> spvReflectChangeInputVariableLocation(</div>
<div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160;    p_input_variable,</div>
<div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160;    new_location);</div>
<div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;}</div>
<div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160; </div>
<div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160; </div>
<div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160;<span class="keyword">inline</span> SpvReflectResult ShaderModule::ChangeOutputVariableLocation(</div>
<div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a>* p_output_variable,</div>
<div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;  uint32_t                           new_location)</div>
<div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;{</div>
<div class="line"><a name="l02047"></a><span class="lineno"> 2047</span>&#160;  <span class="keywordflow">return</span> spvReflectChangeOutputVariableLocation(</div>
<div class="line"><a name="l02048"></a><span class="lineno"> 2048</span>&#160;    &amp;m_module,</div>
<div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;    p_output_variable,</div>
<div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160;    new_location);</div>
<div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;}</div>
<div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160; </div>
<div class="line"><a name="l02053"></a><span class="lineno"> 2053</span>&#160;} <span class="comment">// namespace spv_reflect</span></div>
<div class="line"><a name="l02054"></a><span class="lineno"> 2054</span>&#160;<span class="preprocessor">#endif // defined(__cplusplus)</span></div>
<div class="line"><a name="l02055"></a><span class="lineno"> 2055</span>&#160;<span class="preprocessor">#endif // SPIRV_REFLECT_H</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astruct_spv_reflect_numeric_traits_1_1_vector_htm"><div class="ttname"><a href="../../d8/d10/struct_spv_reflect_numeric_traits_1_1_vector.htm">SpvReflectNumericTraits::Vector</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:221</div></div>
<div class="ttc" id="astruct_spv_reflect_binding_array_traits_htm"><div class="ttname"><a href="../../dd/d98/struct_spv_reflect_binding_array_traits.htm">SpvReflectBindingArrayTraits</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:247</div></div>
<div class="ttc" id="astruct_spv_reflect_entry_point_htm"><div class="ttname"><a href="../../d0/d91/struct_spv_reflect_entry_point.htm">SpvReflectEntryPoint</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:365</div></div>
<div class="ttc" id="astruct_spv_reflect_type_description_htm"><div class="ttname"><a href="../../dd/d40/struct_spv_reflect_type_description.htm">SpvReflectTypeDescription</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:255</div></div>
<div class="ttc" id="astruct_spv_reflect_entry_point_1_1_local_size_htm"><div class="ttname"><a href="../../dd/d00/struct_spv_reflect_entry_point_1_1_local_size.htm">SpvReflectEntryPoint::LocalSize</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:385</div></div>
<div class="ttc" id="astruct_spv_reflect_numeric_traits_htm"><div class="ttname"><a href="../../da/dbd/struct_spv_reflect_numeric_traits.htm">SpvReflectNumericTraits</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:215</div></div>
<div class="ttc" id="astruct_spv_reflect_descriptor_set_htm"><div class="ttname"><a href="../../d5/d14/struct_spv_reflect_descriptor_set.htm">SpvReflectDescriptorSet</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:356</div></div>
<div class="ttc" id="astruct_spv_reflect_shader_module_1_1_internal_htm"><div class="ttname"><a href="../../df/de3/struct_spv_reflect_shader_module_1_1_internal.htm">SpvReflectShaderModule::Internal</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:418</div></div>
<div class="ttc" id="astruct_spv_reflect_image_traits_htm"><div class="ttname"><a href="../../d5/dc6/struct_spv_reflect_image_traits.htm">SpvReflectImageTraits</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:232</div></div>
<div class="ttc" id="astruct_spv_reflect_type_description_1_1_traits_htm"><div class="ttname"><a href="../../d9/d26/struct_spv_reflect_type_description_1_1_traits.htm">SpvReflectTypeDescription::Traits</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:264</div></div>
<div class="ttc" id="astruct_spv_reflect_descriptor_binding_htm"><div class="ttname"><a href="../../dd/d85/struct_spv_reflect_descriptor_binding.htm">SpvReflectDescriptorBinding</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:329</div></div>
<div class="ttc" id="astruct_spv_reflect_interface_variable_htm"><div class="ttname"><a href="../../d8/d2e/struct_spv_reflect_interface_variable.htm">SpvReflectInterfaceVariable</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:278</div></div>
<div class="ttc" id="astruct_spv_reflect_shader_module_htm"><div class="ttname"><a href="../../d0/d7c/struct_spv_reflect_shader_module.htm">SpvReflectShaderModule</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:395</div></div>
<div class="ttc" id="astruct_spv_reflect_numeric_traits_1_1_scalar_htm"><div class="ttname"><a href="../../d2/d65/struct_spv_reflect_numeric_traits_1_1_scalar.htm">SpvReflectNumericTraits::Scalar</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:216</div></div>
<div class="ttc" id="astruct_spv_reflect_array_traits_htm"><div class="ttname"><a href="../../d1/d71/struct_spv_reflect_array_traits.htm">SpvReflectArrayTraits</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:241</div></div>
<div class="ttc" id="astruct_spv_reflect_numeric_traits_1_1_matrix_htm"><div class="ttname"><a href="../../dc/d40/struct_spv_reflect_numeric_traits_1_1_matrix.htm">SpvReflectNumericTraits::Matrix</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:225</div></div>
<div class="ttc" id="astruct_spv_reflect_block_variable_htm"><div class="ttname"><a href="../../de/d19/struct_spv_reflect_block_variable.htm">SpvReflectBlockVariable</a></div><div class="ttdef"><b>Definition:</b> spirv_reflect.h:308</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_7262b3cf8af755282a9b6810a29d4eea.htm">ShaderCompilerDXC</a></li><li class="navelem"><b>spirv_reflect.h</b></li>
    <li class="footer">Generated on Tue Jun 8 2021 21:43:14 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
