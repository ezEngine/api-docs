<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezEventBase&lt; EventData, MutexType, EventType &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('dd/de2/classez_event_base.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="../../d2/d80/classez_event_base-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezEventBase&lt; EventData, MutexType, EventType &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This class propagates event information to registered event handlers.  
 <a href="../../dd/de2/classez_event_base.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../de/d6d/_event_8h_source.htm">Event.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d77/classez_event_base_1_1_unsubscriber.htm">Unsubscriber</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An object that can be passed to <a class="el" href="../../dd/de2/classez_event_base.htm#ab46b4d55704bf9f41af5be830ac46cf9" title="Adds a function as an event handler. All handlers will be notified in the order that they were regist...">ezEvent::AddEventHandler</a> to store the subscription information and automatically remove the event handler upon destruction.  <a href="../../df/d77/classez_event_base_1_1_unsubscriber.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a92d966571842e62fd3ba6bad63212f5e"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="../../dd/de2/classez_event_base.htm#a92d966571842e62fd3ba6bad63212f5ead1c4019a445409016d524cee36e1917d">RecursionDepthSupported</a> = (EventType == ezEventType::Default || ezConversionTest&lt;MutexType, ezNoMutex&gt;::sameType == 1) ? 1 : 0, 
<a class="el" href="../../dd/de2/classez_event_base.htm#a92d966571842e62fd3ba6bad63212f5ea3c37249bc19f1633b070c2bce1ff94bc">MaxRecursionDepthDefault</a> = RecursionDepthSupported ? 0 : 255
 }</td></tr>
<tr class="memdesc:a92d966571842e62fd3ba6bad63212f5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation specific constants.  <a href="../../dd/de2/classez_event_base.htm#a92d966571842e62fd3ba6bad63212f5e">More...</a><br /></td></tr>
<tr class="separator:a92d966571842e62fd3ba6bad63212f5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15db4b9552ac331db5b96c866d745f6b"><td class="memItemLeft" align="right" valign="top"><a id="a15db4b9552ac331db5b96c866d745f6b"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/de2/classez_event_base.htm#a15db4b9552ac331db5b96c866d745f6b">Handler</a> = <a class="el" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>&lt; void(EventData)&gt;</td></tr>
<tr class="memdesc:a15db4b9552ac331db5b96c866d745f6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Notification callback type for events. <br /></td></tr>
<tr class="separator:a15db4b9552ac331db5b96c866d745f6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa59795140c900c874a24c09e2a6731a4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/de2/classez_event_base.htm#aa59795140c900c874a24c09e2a6731a4">Broadcast</a> (EventData pEventData, ezUInt8 uiMaxRecursionDepth=<a class="el" href="../../dd/de2/classez_event_base.htm#a92d966571842e62fd3ba6bad63212f5ea3c37249bc19f1633b070c2bce1ff94bc">MaxRecursionDepthDefault</a>)</td></tr>
<tr class="memdesc:aa59795140c900c874a24c09e2a6731a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function will broadcast to all registered users, that this event has just happened. Setting uiMaxRecursionDepth will allow you to permit recursions. When broadcasting consider up to what depth you want recursions to be permitted. By default no recursion is allowed.  <a href="../../dd/de2/classez_event_base.htm#aa59795140c900c874a24c09e2a6731a4">More...</a><br /></td></tr>
<tr class="separator:aa59795140c900c874a24c09e2a6731a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab46b4d55704bf9f41af5be830ac46cf9"><td class="memItemLeft" align="right" valign="top">ezEventSubscriptionID&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/de2/classez_event_base.htm#ab46b4d55704bf9f41af5be830ac46cf9">AddEventHandler</a> (<a class="el" href="../../dd/de2/classez_event_base.htm#a15db4b9552ac331db5b96c866d745f6b">Handler</a> handler) const</td></tr>
<tr class="memdesc:ab46b4d55704bf9f41af5be830ac46cf9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a function as an event handler. All handlers will be notified in the order that they were registered.  <a href="../../dd/de2/classez_event_base.htm#ab46b4d55704bf9f41af5be830ac46cf9">More...</a><br /></td></tr>
<tr class="separator:ab46b4d55704bf9f41af5be830ac46cf9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07fdb25581967df8f384bdbcc1bf6fa7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/de2/classez_event_base.htm#a07fdb25581967df8f384bdbcc1bf6fa7">AddEventHandler</a> (<a class="el" href="../../dd/de2/classez_event_base.htm#a15db4b9552ac331db5b96c866d745f6b">Handler</a> handler, <a class="el" href="../../df/d77/classez_event_base_1_1_unsubscriber.htm">Unsubscriber</a> &amp;inout_unsubscriber) const</td></tr>
<tr class="memdesc:a07fdb25581967df8f384bdbcc1bf6fa7"><td class="mdescLeft">&#160;</td><td class="mdescRight">An overload that adds an event handler and initializes the given <em><a class="el" href="../../df/d77/classez_event_base_1_1_unsubscriber.htm" title="An object that can be passed to ezEvent::AddEventHandler to store the subscription information and au...">Unsubscriber</a></em> object.  <a href="../../dd/de2/classez_event_base.htm#a07fdb25581967df8f384bdbcc1bf6fa7">More...</a><br /></td></tr>
<tr class="separator:a07fdb25581967df8f384bdbcc1bf6fa7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0be39de527a1a143849442573c074c20"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/de2/classez_event_base.htm#a0be39de527a1a143849442573c074c20">RemoveEventHandler</a> (const <a class="el" href="../../dd/de2/classez_event_base.htm#a15db4b9552ac331db5b96c866d745f6b">Handler</a> &amp;handler) const</td></tr>
<tr class="memdesc:a0be39de527a1a143849442573c074c20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes a previously registered handler. It is an error to remove a handler that was not registered.  <a href="../../dd/de2/classez_event_base.htm#a0be39de527a1a143849442573c074c20">More...</a><br /></td></tr>
<tr class="separator:a0be39de527a1a143849442573c074c20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2961d9089af776759ce8e83e98ed5431"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/de2/classez_event_base.htm#a2961d9089af776759ce8e83e98ed5431">RemoveEventHandler</a> (ezEventSubscriptionID &amp;inout_id) const</td></tr>
<tr class="memdesc:a2961d9089af776759ce8e83e98ed5431"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes a previously registered handler via the returned subscription ID.  <a href="../../dd/de2/classez_event_base.htm#a2961d9089af776759ce8e83e98ed5431">More...</a><br /></td></tr>
<tr class="separator:a2961d9089af776759ce8e83e98ed5431"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a686305d9df13fe5d5bca50b1bda0de4e"><td class="memItemLeft" align="right" valign="top"><a id="a686305d9df13fe5d5bca50b1bda0de4e"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/de2/classez_event_base.htm#a686305d9df13fe5d5bca50b1bda0de4e">HasEventHandler</a> (const <a class="el" href="../../dd/de2/classez_event_base.htm#a15db4b9552ac331db5b96c866d745f6b">Handler</a> &amp;handler) const</td></tr>
<tr class="memdesc:a686305d9df13fe5d5bca50b1bda0de4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether an event handler has already been registered. <br /></td></tr>
<tr class="separator:a686305d9df13fe5d5bca50b1bda0de4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5ad9619f606338a1fa6b0d081bd864c"><td class="memItemLeft" align="right" valign="top"><a id="ab5ad9619f606338a1fa6b0d081bd864c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/de2/classez_event_base.htm#ab5ad9619f606338a1fa6b0d081bd864c">Clear</a> ()</td></tr>
<tr class="memdesc:ab5ad9619f606338a1fa6b0d081bd864c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all registered event handlers. <br /></td></tr>
<tr class="separator:ab5ad9619f606338a1fa6b0d081bd864c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76defef8fca2904347e06e9cc2328a72"><td class="memItemLeft" align="right" valign="top"><a id="a76defef8fca2904347e06e9cc2328a72"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/de2/classez_event_base.htm#a76defef8fca2904347e06e9cc2328a72">IsEmpty</a> () const</td></tr>
<tr class="memdesc:a76defef8fca2904347e06e9cc2328a72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if no event handlers are registered. <br /></td></tr>
<tr class="separator:a76defef8fca2904347e06e9cc2328a72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af960d61292070d41fe0d8e7d47a203fd"><td class="memItemLeft" align="right" valign="top"><a id="af960d61292070d41fe0d8e7d47a203fd"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>EZ_DISALLOW_COPY_AND_ASSIGN</b> (<a class="el" href="../../dd/de2/classez_event_base.htm">ezEventBase</a>)</td></tr>
<tr class="separator:af960d61292070d41fe0d8e7d47a203fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a091e9f94c1fae72cd796663b173a02c3"><td class="memItemLeft" align="right" valign="top"><a id="a091e9f94c1fae72cd796663b173a02c3"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/de2/classez_event_base.htm#a091e9f94c1fae72cd796663b173a02c3">ezEventBase</a> (<a class="el" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:a091e9f94c1fae72cd796663b173a02c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor. <br /></td></tr>
<tr class="separator:a091e9f94c1fae72cd796663b173a02c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename EventData, typename MutexType, ezEventType EventType&gt;<br />
class ezEventBase&lt; EventData, MutexType, EventType &gt;</h3>

<p>This class propagates event information to registered event handlers. </p>
<p>An event can be anything that "happens" that might be of interest to other code, such that it can react on it in some way. Just create an instance of <a class="el" href="../../d0/daf/classez_event.htm">ezEvent</a> and call <a class="el" href="../../dd/de2/classez_event_base.htm#aa59795140c900c874a24c09e2a6731a4" title="This function will broadcast to all registered users, that this event has just happened....">Broadcast()</a> on it. Other interested code needs const access to the event variable to be able to call <a class="el" href="../../dd/de2/classez_event_base.htm#ab46b4d55704bf9f41af5be830ac46cf9" title="Adds a function as an event handler. All handlers will be notified in the order that they were regist...">AddEventHandler()</a> and <a class="el" href="../../dd/de2/classez_event_base.htm#a0be39de527a1a143849442573c074c20" title="Removes a previously registered handler. It is an error to remove a handler that was not registered.">RemoveEventHandler()</a>. To pass information to the handlers, create a custom struct with event information and then pass a (const) reference to that data through <a class="el" href="../../dd/de2/classez_event_base.htm#aa59795140c900c874a24c09e2a6731a4" title="This function will broadcast to all registered users, that this event has just happened....">Broadcast()</a>.</p>
<p>If you need to modify the event while broadcasting, for example inside one of the registered event handlers, set EventType = ezEventType::CopyOnBroadcast. Each broadcast will then copy the event handler array before signaling them, allowing modifications during broadcasting.</p>
<dl class="section note"><dt>Note</dt><dd>A class holding an <a class="el" href="../../d0/daf/classez_event.htm">ezEvent</a> member needs to provide public access to the member for external code to be able to register as an event handler. To make it possible to prevent external code from also raising events, all functions that are needed for listening are const, and all others are non-const. Therefore, simply make event members private and provide const reference access through a public getter. </dd></dl>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a92d966571842e62fd3ba6bad63212f5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92d966571842e62fd3ba6bad63212f5e">&#9670;&nbsp;</a></span>anonymous enum</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename EventData , typename MutexType , ezEventType EventType&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Implementation specific constants. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a92d966571842e62fd3ba6bad63212f5ead1c4019a445409016d524cee36e1917d"></a>RecursionDepthSupported&#160;</td><td class="fielddoc"><p>Whether the uiMaxRecursionDepth parameter to <a class="el" href="../../dd/de2/classez_event_base.htm#aa59795140c900c874a24c09e2a6731a4" title="This function will broadcast to all registered users, that this event has just happened....">Broadcast()</a> is supported in this implementation or not. </p>
</td></tr>
<tr><td class="fieldname"><a id="a92d966571842e62fd3ba6bad63212f5ea3c37249bc19f1633b070c2bce1ff94bc"></a>MaxRecursionDepthDefault&#160;</td><td class="fielddoc"><p>Default value for the maximum recursion depth of Broadcast. As limiting the recursion depth is not supported when EventType == ezEventType::CopyAndBroadcast and MutexType != <a class="el" href="../../d4/d71/classez_no_mutex.htm" title="A dummy mutex that does no locking.">ezNoMutex</a> the default value for that case is the maximum. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ab46b4d55704bf9f41af5be830ac46cf9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab46b4d55704bf9f41af5be830ac46cf9">&#9670;&nbsp;</a></span>AddEventHandler() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename EventData , typename MutexType , ezEventType EventType&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ezEventSubscriptionID <a class="el" href="../../dd/de2/classez_event_base.htm">ezEventBase</a>&lt; EventData, MutexType, EventType &gt;::AddEventHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/de2/classez_event_base.htm#a15db4b9552ac331db5b96c866d745f6b">Handler</a>&#160;</td>
          <td class="paramname"><em>handler</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a function as an event handler. All handlers will be notified in the order that they were registered. </p>
<p>The return value can be stored and used to remove the event handler later again.</p>
<p>A callback can be registered multiple times with different pass-through data (or even with the same, though that is less useful). </p>

</div>
</div>
<a id="a07fdb25581967df8f384bdbcc1bf6fa7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07fdb25581967df8f384bdbcc1bf6fa7">&#9670;&nbsp;</a></span>AddEventHandler() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename EventData , typename MutexType , ezEventType EventType&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../dd/de2/classez_event_base.htm">ezEventBase</a>&lt; EventData, MutexType, EventType &gt;::AddEventHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/de2/classez_event_base.htm#a15db4b9552ac331db5b96c866d745f6b">Handler</a>&#160;</td>
          <td class="paramname"><em>handler</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d77/classez_event_base_1_1_unsubscriber.htm">Unsubscriber</a> &amp;&#160;</td>
          <td class="paramname"><em>inout_unsubscriber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>An overload that adds an event handler and initializes the given <em><a class="el" href="../../df/d77/classez_event_base_1_1_unsubscriber.htm" title="An object that can be passed to ezEvent::AddEventHandler to store the subscription information and au...">Unsubscriber</a></em> object. </p>
<p>When the <a class="el" href="../../df/d77/classez_event_base_1_1_unsubscriber.htm" title="An object that can be passed to ezEvent::AddEventHandler to store the subscription information and au...">Unsubscriber</a> is destroyed, it will automatically remove the event handler. </p>

</div>
</div>
<a id="aa59795140c900c874a24c09e2a6731a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa59795140c900c874a24c09e2a6731a4">&#9670;&nbsp;</a></span>Broadcast()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename EventData , typename MutexType , ezEventType EventType&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../dd/de2/classez_event_base.htm">ezEventBase</a>&lt; EventData, MutexType, EventType &gt;::Broadcast </td>
          <td>(</td>
          <td class="paramtype">EventData&#160;</td>
          <td class="paramname"><em>pEventData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt8&#160;</td>
          <td class="paramname"><em>uiMaxRecursionDepth</em> = <code><a class="el" href="../../dd/de2/classez_event_base.htm#a92d966571842e62fd3ba6bad63212f5ea3c37249bc19f1633b070c2bce1ff94bc">MaxRecursionDepthDefault</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function will broadcast to all registered users, that this event has just happened. Setting uiMaxRecursionDepth will allow you to permit recursions. When broadcasting consider up to what depth you want recursions to be permitted. By default no recursion is allowed. </p>
<p>The notification is sent to all event handlers in the order that they were registered. </p>

</div>
</div>
<a id="a0be39de527a1a143849442573c074c20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0be39de527a1a143849442573c074c20">&#9670;&nbsp;</a></span>RemoveEventHandler() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename EventData , typename MutexType , ezEventType EventType&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../dd/de2/classez_event_base.htm">ezEventBase</a>&lt; EventData, MutexType, EventType &gt;::RemoveEventHandler </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../dd/de2/classez_event_base.htm#a15db4b9552ac331db5b96c866d745f6b">Handler</a> &amp;&#160;</td>
          <td class="paramname"><em>handler</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes a previously registered handler. It is an error to remove a handler that was not registered. </p>
<p>Use exactly the same combination of callback/pass-through-data to unregister an event handlers. Otherwise an error occurs. </p>

</div>
</div>
<a id="a2961d9089af776759ce8e83e98ed5431"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2961d9089af776759ce8e83e98ed5431">&#9670;&nbsp;</a></span>RemoveEventHandler() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename EventData , typename MutexType , ezEventType EventType&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../dd/de2/classez_event_base.htm">ezEventBase</a>&lt; EventData, MutexType, EventType &gt;::RemoveEventHandler </td>
          <td>(</td>
          <td class="paramtype">ezEventSubscriptionID &amp;&#160;</td>
          <td class="paramname"><em>inout_id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes a previously registered handler via the returned subscription ID. </p>
<p>The ID will be reset to zero. If this is called with a zero ID, nothing happens. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Communication/<a class="el" href="../../de/d6d/_event_8h_source.htm">Event.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Communication/Implementation/<a class="el" href="../../d6/d8e/_event__inl_8h_source.htm">Event_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dd/de2/classez_event_base.htm">ezEventBase</a></li>
    <li class="footer">Generated on Sat Nov 11 2023 19:41:01 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
