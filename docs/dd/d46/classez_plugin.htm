<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezPlugin Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('dd/d46/classez_plugin.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="../../db/d87/classez_plugin-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezPlugin Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="../../dd/d46/classez_plugin.htm" title="ezPlugin allows to manage all dynamically loadable plugins. Each plugin DLL must contain one global i...">ezPlugin</a> allows to manage all dynamically loadable plugins. Each plugin DLL must contain one global instance of <a class="el" href="../../dd/d46/classez_plugin.htm" title="ezPlugin allows to manage all dynamically loadable plugins. Each plugin DLL must contain one global i...">ezPlugin</a>.  
 <a href="../../dd/d46/classez_plugin.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../dd/d73/_plugin_8h_source.htm">Plugin.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ezPlugin:</div>
<div class="dyncontent">
<div class="center"><img src="../../d8/d41/classez_plugin__inherit__graph.png" border="0" usemap="#ez_plugin_inherit__map" alt="Inheritance graph"/></div>
<map name="ez_plugin_inherit__map" id="ez_plugin_inherit__map">
<area shape="rect" title="ezPlugin allows to manage all dynamically loadable plugins. Each plugin DLL must contain one global i..." alt="" coords="67,155,144,181"/>
<area shape="rect" href="../../d5/d0b/classez_enumerable.htm" title=" " alt="" coords="5,80,205,107"/>
<area shape="rect" href="../../d4/d02/classez_no_base.htm" title="Dummy type to pass to templates and macros that expect a base type for a class that has no base." alt="" coords="62,5,149,32"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ae45d9789e8b3b1efeee3f9946a754858"><td class="memItemLeft" align="right" valign="top"><a id="ae45d9789e8b3b1efeee3f9946a754858"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#ae45d9789e8b3b1efeee3f9946a754858">OnPluginLoadedFunction</a> = void(*)(bool bReloading)</td></tr>
<tr class="memdesc:ae45d9789e8b3b1efeee3f9946a754858"><td class="mdescLeft">&#160;</td><td class="mdescRight">Callback type for when a plugin has just been loaded (not yet initialized). bReloading is true, if the plugin is currently being reloaded. <br /></td></tr>
<tr class="separator:ae45d9789e8b3b1efeee3f9946a754858"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada10236fa75ce342e5ec26aa89d00e27"><td class="memItemLeft" align="right" valign="top"><a id="ada10236fa75ce342e5ec26aa89d00e27"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#ada10236fa75ce342e5ec26aa89d00e27">OnPluginUnloadedFunction</a> = void(*)(bool bReloading)</td></tr>
<tr class="memdesc:ada10236fa75ce342e5ec26aa89d00e27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Callback type for when a plugin will be unloaded (after all deinitializations). bReloading is true, if the plugin is currently being reloaded. <br /></td></tr>
<tr class="separator:ada10236fa75ce342e5ec26aa89d00e27"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a787349a6a424e7259828ec729e5990c5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#a787349a6a424e7259828ec729e5990c5">ezPlugin</a> (bool bIsReloadable, <a class="el" href="../../dd/d46/classez_plugin.htm#ae45d9789e8b3b1efeee3f9946a754858">OnPluginLoadedFunction</a> OnLoadPlugin=nullptr, <a class="el" href="../../dd/d46/classez_plugin.htm#ada10236fa75ce342e5ec26aa89d00e27">OnPluginUnloadedFunction</a> OnUnloadPlugin=nullptr, const char *szPluginDependency1=nullptr, const char *szPluginDependency2=nullptr, const char *szPluginDependency3=nullptr, const char *szPluginDependency4=nullptr, const char *szPluginDependency5=nullptr)</td></tr>
<tr class="memdesc:a787349a6a424e7259828ec729e5990c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a new plugin object.  <a href="../../dd/d46/classez_plugin.htm#a787349a6a424e7259828ec729e5990c5">More...</a><br /></td></tr>
<tr class="separator:a787349a6a424e7259828ec729e5990c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a713ab4a0f17bbe05ba76f97c831a4e68"><td class="memItemLeft" align="right" valign="top"><a id="a713ab4a0f17bbe05ba76f97c831a4e68"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#a713ab4a0f17bbe05ba76f97c831a4e68">GetPluginName</a> () const</td></tr>
<tr class="memdesc:a713ab4a0f17bbe05ba76f97c831a4e68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the name that was used to load the plugin from disk. <br /></td></tr>
<tr class="separator:a713ab4a0f17bbe05ba76f97c831a4e68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fc32ac7720cce36daa906a2118cebb7"><td class="memItemLeft" align="right" valign="top"><a id="a2fc32ac7720cce36daa906a2118cebb7"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#a2fc32ac7720cce36daa906a2118cebb7">IsReloadable</a> () const</td></tr>
<tr class="memdesc:a2fc32ac7720cce36daa906a2118cebb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether this plugin supports hot-reloading. <br /></td></tr>
<tr class="separator:a2fc32ac7720cce36daa906a2118cebb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6f98c00c5711b3a7326f9efe020e46e"><td class="memItemLeft" align="right" valign="top"><a id="ac6f98c00c5711b3a7326f9efe020e46e"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#ac6f98c00c5711b3a7326f9efe020e46e">GetPluginDependency</a> (ezUInt8 uiDependency) const</td></tr>
<tr class="memdesc:ac6f98c00c5711b3a7326f9efe020e46e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the n-th plugin that this one is dependent on, or nullptr if there is no further dependency. <br /></td></tr>
<tr class="separator:ac6f98c00c5711b3a7326f9efe020e46e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a3e0291c65a1acd278e3fbe2d80eebe51"><td class="memItemLeft" align="right" valign="top"><a id="a3e0291c65a1acd278e3fbe2d80eebe51"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#a3e0291c65a1acd278e3fbe2d80eebe51">BeginPluginChanges</a> ()</td></tr>
<tr class="memdesc:a3e0291c65a1acd278e3fbe2d80eebe51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call this before loading / unloading several plugins in a row, to prevent unnecessary re-initializations. <br /></td></tr>
<tr class="separator:a3e0291c65a1acd278e3fbe2d80eebe51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90cdd809499d4356d5d423a838a2cb5f"><td class="memItemLeft" align="right" valign="top"><a id="a90cdd809499d4356d5d423a838a2cb5f"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#a90cdd809499d4356d5d423a838a2cb5f">EndPluginChanges</a> ()</td></tr>
<tr class="memdesc:a90cdd809499d4356d5d423a838a2cb5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Must be called to finish what BeginPluginChanges started. <br /></td></tr>
<tr class="separator:a90cdd809499d4356d5d423a838a2cb5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91eb1be3fed360ea6877a83dccac9a11"><td class="memItemLeft" align="right" valign="top"><a id="a91eb1be3fed360ea6877a83dccac9a11"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#a91eb1be3fed360ea6877a83dccac9a11">ExistsPluginFile</a> (const char *szPluginFile)</td></tr>
<tr class="memdesc:a91eb1be3fed360ea6877a83dccac9a11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether a plugin with the given name exists. Does not guarantee that the plugin could be loaded successfully. <br /></td></tr>
<tr class="separator:a91eb1be3fed360ea6877a83dccac9a11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51abae438650128e0706f2afe6ef1d1c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#a51abae438650128e0706f2afe6ef1d1c">LoadPlugin</a> (const char *szPluginFile, bool bLoadCopy=false)</td></tr>
<tr class="memdesc:a51abae438650128e0706f2afe6ef1d1c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to load a DLL dynamically into the program.  <a href="../../dd/d46/classez_plugin.htm#a51abae438650128e0706f2afe6ef1d1c">More...</a><br /></td></tr>
<tr class="separator:a51abae438650128e0706f2afe6ef1d1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acaa724b030f89377d5b1e73e4a42dd1f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#acaa724b030f89377d5b1e73e4a42dd1f">LoadOptionalPlugin</a> (const char *szPluginFile, bool bLoadCopy=false)</td></tr>
<tr class="memdesc:acaa724b030f89377d5b1e73e4a42dd1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="../../dd/d46/classez_plugin.htm#a51abae438650128e0706f2afe6ef1d1c" title="Tries to load a DLL dynamically into the program.">LoadPlugin()</a> but checks first whether the plugin exists at all and does not output an error in that case.  <a href="../../dd/d46/classez_plugin.htm#acaa724b030f89377d5b1e73e4a42dd1f">More...</a><br /></td></tr>
<tr class="separator:acaa724b030f89377d5b1e73e4a42dd1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31aaab73a97d7d0d6245bfad564ce4eb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#a31aaab73a97d7d0d6245bfad564ce4eb">UnloadPlugin</a> (const char *szPluginFile, ezInt32 *out_pCurRefCount=nullptr)</td></tr>
<tr class="memdesc:a31aaab73a97d7d0d6245bfad564ce4eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to unload a previously loaded plugin.  <a href="../../dd/d46/classez_plugin.htm#a31aaab73a97d7d0d6245bfad564ce4eb">More...</a><br /></td></tr>
<tr class="separator:a31aaab73a97d7d0d6245bfad564ce4eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb010d5cf6c5cb31415fe1c56addd690"><td class="memItemLeft" align="right" valign="top"><a id="acb010d5cf6c5cb31415fe1c56addd690"></a>
static <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#acb010d5cf6c5cb31415fe1c56addd690">UnloadAllPlugins</a> ()</td></tr>
<tr class="memdesc:acb010d5cf6c5cb31415fe1c56addd690"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attempts to unload all previously loaded plugins in the reverse order in which they were loaded. <br /></td></tr>
<tr class="separator:acb010d5cf6c5cb31415fe1c56addd690"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee45bc79a8f59749ad650a0b7c7dc549"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#aee45bc79a8f59749ad650a0b7c7dc549">ReloadPlugins</a> (bool bForceReload=false)</td></tr>
<tr class="memdesc:aee45bc79a8f59749ad650a0b7c7dc549"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hot-reloads all plugins that are marked as reloadable.  <a href="../../dd/d46/classez_plugin.htm#aee45bc79a8f59749ad650a0b7c7dc549">More...</a><br /></td></tr>
<tr class="separator:aee45bc79a8f59749ad650a0b7c7dc549"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab70c3812b28a426069d977aa524e341f"><td class="memItemLeft" align="right" valign="top"><a id="ab70c3812b28a426069d977aa524e341f"></a>
static <a class="el" href="../../dd/d46/classez_plugin.htm">ezPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#ab70c3812b28a426069d977aa524e341f">FindPluginByName</a> (const char *szPluginName)</td></tr>
<tr class="memdesc:ab70c3812b28a426069d977aa524e341f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to find an <a class="el" href="../../dd/d46/classez_plugin.htm" title="ezPlugin allows to manage all dynamically loadable plugins. Each plugin DLL must contain one global i...">ezPlugin</a> instance by the given name. Returns nullptr if there is no such plugin. Can be used to check whether a certain plugin is loaded. <br /></td></tr>
<tr class="separator:ab70c3812b28a426069d977aa524e341f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41b56bd766a38cff03baa49113439569"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#a41b56bd766a38cff03baa49113439569">SetMaxParallelInstances</a> (ezUInt32 uiMaxParallelInstances)</td></tr>
<tr class="memdesc:a41b56bd766a38cff03baa49113439569"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets how many tries the system will do to find a free plugin file name.  <a href="../../dd/d46/classez_plugin.htm#a41b56bd766a38cff03baa49113439569">More...</a><br /></td></tr>
<tr class="separator:a41b56bd766a38cff03baa49113439569"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classez_no_base"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classez_no_base')"><img src="../../closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="../../d4/d02/classez_no_base.htm">ezNoBase</a></td></tr>
<tr class="memitem:ad676281ced156eb886aa4f74a2a45d2f inherit pub_static_methods_classez_no_base"><td class="memItemLeft" align="right" valign="top"><a id="ad676281ced156eb886aa4f74a2a45d2f"></a>
static const <a class="el" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetStaticRTTI</b> ()</td></tr>
<tr class="separator:ad676281ced156eb886aa4f74a2a45d2f inherit pub_static_methods_classez_no_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a49b8ad92df3a508ed100ae8a573fa684"><td class="memItemLeft" align="right" valign="top"><a id="a49b8ad92df3a508ed100ae8a573fa684"></a>
static <a class="el" href="../../d0/daf/classez_event.htm">ezCopyOnBroadcastEvent</a>&lt; const <a class="el" href="../../d4/d72/structez_plugin_event.htm">ezPluginEvent</a> &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d46/classez_plugin.htm#a49b8ad92df3a508ed100ae8a573fa684">s_PluginEvents</a></td></tr>
<tr class="memdesc:a49b8ad92df3a508ed100ae8a573fa684"><td class="mdescLeft">&#160;</td><td class="mdescRight">Code that needs to be execute whenever a plugin is loaded or unloaded can register itself here to be notified of such events. <br /></td></tr>
<tr class="separator:a49b8ad92df3a508ed100ae8a573fa684"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_attribs_classez_enumerable"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classez_enumerable')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../d5/d0b/classez_enumerable.htm">ezEnumerable&lt; ezPlugin &gt;</a></td></tr>
<tr class="memitem:a6a9e0d84d59fb7c18b0600ec9a986098 inherit pro_attribs_classez_enumerable"><td class="memItemLeft" align="right" valign="top"><a id="a6a9e0d84d59fb7c18b0600ec9a986098"></a>
<a class="el" href="../../d5/d0b/classez_enumerable.htm">ezEnumerable</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>m_pNextInstance</b></td></tr>
<tr class="separator:a6a9e0d84d59fb7c18b0600ec9a986098 inherit pro_attribs_classez_enumerable"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="../../dd/d46/classez_plugin.htm" title="ezPlugin allows to manage all dynamically loadable plugins. Each plugin DLL must contain one global i...">ezPlugin</a> allows to manage all dynamically loadable plugins. Each plugin DLL must contain one global instance of <a class="el" href="../../dd/d46/classez_plugin.htm" title="ezPlugin allows to manage all dynamically loadable plugins. Each plugin DLL must contain one global i...">ezPlugin</a>. </p>
<p>Put a global instance of <a class="el" href="../../dd/d46/classez_plugin.htm" title="ezPlugin allows to manage all dynamically loadable plugins. Each plugin DLL must contain one global i...">ezPlugin</a> somewhere into the source of each dynamic plugin DLL. Certain code depends on such instances to work correctly with dynamically loaded code. For example <a class="el" href="../../d3/d3b/classez_startup.htm" title="The startup system makes sure to initialize and shut down all known subsystems in the proper order.">ezStartup</a> allows to initialize and deinitialize code from dynamic DLLs properly (and in the correct order), by listening to events from <a class="el" href="../../dd/d46/classez_plugin.htm" title="ezPlugin allows to manage all dynamically loadable plugins. Each plugin DLL must contain one global i...">ezPlugin</a>. <a class="el" href="../../dd/d46/classez_plugin.htm" title="ezPlugin allows to manage all dynamically loadable plugins. Each plugin DLL must contain one global i...">ezPlugin</a> also provides static functions to load and unload DLLs. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a787349a6a424e7259828ec729e5990c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a787349a6a424e7259828ec729e5990c5">&#9670;&nbsp;</a></span>ezPlugin()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezPlugin::ezPlugin </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bIsReloadable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d46/classez_plugin.htm#ae45d9789e8b3b1efeee3f9946a754858">OnPluginLoadedFunction</a>&#160;</td>
          <td class="paramname"><em>OnLoadPlugin</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d46/classez_plugin.htm#ada10236fa75ce342e5ec26aa89d00e27">OnPluginUnloadedFunction</a>&#160;</td>
          <td class="paramname"><em>OnUnloadPlugin</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPluginDependency1</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPluginDependency2</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPluginDependency3</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPluginDependency4</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPluginDependency5</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a new plugin object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bIsReloadable</td><td>If set to true, 'ReloadPlugins' will reload this plugin (if it was modified). </td></tr>
    <tr><td class="paramname">OnLoadPlugin</td><td>Will be called right after the plugin is loaded, even before other code is notified of that the plugin is now loaded. </td></tr>
    <tr><td class="paramname">OnUnloadPlugin</td><td>Will be called shortly before the DLL is finally unloaded. All other code has already been notified that the plugin is being unloaded. </td></tr>
    <tr><td class="paramname">szPluginDependency1</td><td>Allows to specify other modules that this plugin depends on. These will be automatically loaded and unloaded together with this plugin. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="acaa724b030f89377d5b1e73e4a42dd1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acaa724b030f89377d5b1e73e4a42dd1f">&#9670;&nbsp;</a></span>LoadOptionalPlugin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> ezPlugin::LoadOptionalPlugin </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPluginFile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bLoadCopy</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Same as <a class="el" href="../../dd/d46/classez_plugin.htm#a51abae438650128e0706f2afe6ef1d1c" title="Tries to load a DLL dynamically into the program.">LoadPlugin()</a> but checks first whether the plugin exists at all and does not output an error in that case. </p>
<p>If the plugin does exist, but cannot be loaded for other reasons (e.g. missing dependencies), it will still log that information as errors. </p>

</div>
</div>
<a id="a51abae438650128e0706f2afe6ef1d1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a51abae438650128e0706f2afe6ef1d1c">&#9670;&nbsp;</a></span>LoadPlugin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> ezPlugin::LoadPlugin </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPluginFile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bLoadCopy</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tries to load a DLL dynamically into the program. </p>
<p>For every time a plugin is loaded via 'LoadPlugin' it should also get unloaded via 'UnloadPlugin', as <a class="el" href="../../dd/d46/classez_plugin.htm" title="ezPlugin allows to manage all dynamically loadable plugins. Each plugin DLL must contain one global i...">ezPlugin</a> counts these and only unloads a plugin once its reference count reaches zero.</p>
<p>EZ_SUCCESS is returned when the DLL is either successfully loaded or has already been loaded before. EZ_FAILURE is returned if the DLL cannot be located or it could not be loaded properly. </p>

</div>
</div>
<a id="aee45bc79a8f59749ad650a0b7c7dc549"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee45bc79a8f59749ad650a0b7c7dc549">&#9670;&nbsp;</a></span>ReloadPlugins()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> ezPlugin::ReloadPlugins </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bForceReload</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Hot-reloads all plugins that are marked as reloadable. </p>
<p>Returns failure or success depending on whether (un-)loading of any of the hot-reloadable plugins failed. Even if one fails, it still tries to reload ALL plugins. If a reloadable plugin does not exist (anymore), that plugin is not even tried to be reloaded. If a plugin can be unloaded but reloading fails, a backup of the previous version is used instead. In case that fails as well, the application will probably crash. EZ_FAILURE is returned if anything could not be reloaded as desired, independent of whether the system was able to recover from it. So 'failure' means that not all reloadable code has been updated. </p>
<dl class="todo"><dt><b><a class="el" href="../../dd/da0/todo.htm#_todo000041">Todo:</a></b></dt><dd>Set "copy dll" back to true again, when we know which plugins may be copied </dd></dl>

</div>
</div>
<a id="a41b56bd766a38cff03baa49113439569"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41b56bd766a38cff03baa49113439569">&#9670;&nbsp;</a></span>SetMaxParallelInstances()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezPlugin::SetMaxParallelInstances </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiMaxParallelInstances</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets how many tries the system will do to find a free plugin file name. </p>
<p>During plugin loading the system creates copies of the plugin DLLs for reloading. This only works if the system can find a file to write to. If too many instances of the engine are running, no such free file name might be found and plugin loading fails. This value specifies how often the system tries to find a free file. The default is 32. </p>

</div>
</div>
<a id="a31aaab73a97d7d0d6245bfad564ce4eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31aaab73a97d7d0d6245bfad564ce4eb">&#9670;&nbsp;</a></span>UnloadPlugin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> ezPlugin::UnloadPlugin </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPluginFile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezInt32 *&#160;</td>
          <td class="paramname"><em>out_pCurRefCount</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tries to unload a previously loaded plugin. </p>
<p>For every time a plugin is loaded via 'LoadPlugin' it should also get unloaded via 'UnloadPlugin', as <a class="el" href="../../dd/d46/classez_plugin.htm" title="ezPlugin allows to manage all dynamically loadable plugins. Each plugin DLL must contain one global i...">ezPlugin</a> counts these and only unloads a plugin once its reference count reaches zero. If a plugin is not unloaded, because its refcount has not yet reached zero, 'UnloadPlugin' still returns EZ_SUCCESS.</p>
<p>EZ_SUCCESS is returned when the DLL is either successfully unloaded are has already been unloaded before (or has even never been loaded before). EZ_FAILURE is returned if the DLL cannot be unloaded (at this time). </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Configuration/<a class="el" href="../../dd/d73/_plugin_8h_source.htm">Plugin.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Configuration/Implementation/Plugin.cpp</li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Configuration/Implementation/Posix/<a class="el" href="../../d0/d04/_plugin___posix_8h_source.htm">Plugin_Posix.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dd/d46/classez_plugin.htm">ezPlugin</a></li>
    <li class="footer">Generated on Tue Jun 8 2021 21:43:20 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
