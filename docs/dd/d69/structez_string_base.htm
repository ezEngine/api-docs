<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezStringBase&lt; Derived &gt; Struct Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('dd/d69/structez_string_base.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../dd/db6/structez_string_base-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">ezStringBase&lt; Derived &gt; Struct Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Base class for strings, which implements all read-only string functions.  
 <a href="../../dd/d69/structez_string_base.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../da/d9c/_string_base_8h_source.htm">StringBase.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ezStringBase&lt; Derived &gt;:</div>
<div class="dyncontent">
<div class="center"><img src="../../d4/d35/structez_string_base__inherit__graph.png" border="0" usemap="#aez_string_base_3_01_derived_01_4_inherit__map" alt="Inheritance graph"/></div>
<map name="aez_string_base_3_01_derived_01_4_inherit__map" id="aez_string_base_3_01_derived_01_4_inherit__map">
<area shape="rect" title="Base class for strings, which implements all read&#45;only string functions." alt="" coords="5,79,193,104"/>
<area shape="rect" href="../../d8/d9a/structez_this_is_a_string.htm" title="Base class which marks a class as containing string data." alt="" coords="38,5,161,31"/>
<area shape="poly" title=" " alt="" coords="102,44,102,79,97,79,97,44"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a6d70336d6bc99eb0ffc416dc5244e4ae" id="r_a6d70336d6bc99eb0ffc416dc5244e4ae"><td class="memItemLeft" align="right" valign="top"><a id="a6d70336d6bc99eb0ffc416dc5244e4ae" name="a6d70336d6bc99eb0ffc416dc5244e4ae"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>iterator</b> = <a class="el" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a></td></tr>
<tr class="separator:a6d70336d6bc99eb0ffc416dc5244e4ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a531d3947b6eec62f004ca77f662b78e1" id="r_a531d3947b6eec62f004ca77f662b78e1"><td class="memItemLeft" align="right" valign="top"><a id="a531d3947b6eec62f004ca77f662b78e1" name="a531d3947b6eec62f004ca77f662b78e1"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_iterator</b> = <a class="el" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a></td></tr>
<tr class="separator:a531d3947b6eec62f004ca77f662b78e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b2f3b0362604dfa9bbf4f157ac841d2" id="r_a4b2f3b0362604dfa9bbf4f157ac841d2"><td class="memItemLeft" align="right" valign="top"><a id="a4b2f3b0362604dfa9bbf4f157ac841d2" name="a4b2f3b0362604dfa9bbf4f157ac841d2"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>reverse_iterator</b> = <a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a></td></tr>
<tr class="separator:a4b2f3b0362604dfa9bbf4f157ac841d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae708cb6d1cfcb5ca696272434087266c" id="r_ae708cb6d1cfcb5ca696272434087266c"><td class="memItemLeft" align="right" valign="top"><a id="ae708cb6d1cfcb5ca696272434087266c" name="ae708cb6d1cfcb5ca696272434087266c"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_reverse_iterator</b> = <a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a></td></tr>
<tr class="separator:ae708cb6d1cfcb5ca696272434087266c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a3b169646f62ef8a8d33b63e2b8731afb" id="r_a3b169646f62ef8a8d33b63e2b8731afb"><td class="memItemLeft" align="right" valign="top"><a id="a3b169646f62ef8a8d33b63e2b8731afb" name="a3b169646f62ef8a8d33b63e2b8731afb"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEmpty</b> () const</td></tr>
<tr class="memdesc:a3b169646f62ef8a8d33b63e2b8731afb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the string is an empty string. <br /></td></tr>
<tr class="separator:a3b169646f62ef8a8d33b63e2b8731afb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2292b0dc69f7889157e6488455f5fd6" id="r_aa2292b0dc69f7889157e6488455f5fd6"><td class="memItemLeft" align="right" valign="top"><a id="aa2292b0dc69f7889157e6488455f5fd6" name="aa2292b0dc69f7889157e6488455f5fd6"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>StartsWith</b> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sStartsWith) const</td></tr>
<tr class="memdesc:aa2292b0dc69f7889157e6488455f5fd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. <br /></td></tr>
<tr class="separator:aa2292b0dc69f7889157e6488455f5fd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5820e97ac4c87313b8874f9f03e6b902" id="r_a5820e97ac4c87313b8874f9f03e6b902"><td class="memItemLeft" align="right" valign="top"><a id="a5820e97ac4c87313b8874f9f03e6b902" name="a5820e97ac4c87313b8874f9f03e6b902"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>StartsWith_NoCase</b> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sStartsWith) const</td></tr>
<tr class="memdesc:a5820e97ac4c87313b8874f9f03e6b902"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:a5820e97ac4c87313b8874f9f03e6b902"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bc84753ec74d1692958ad6c0b60a065" id="r_a0bc84753ec74d1692958ad6c0b60a065"><td class="memItemLeft" align="right" valign="top"><a id="a0bc84753ec74d1692958ad6c0b60a065" name="a0bc84753ec74d1692958ad6c0b60a065"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>EndsWith</b> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sEndsWith) const</td></tr>
<tr class="memdesc:a0bc84753ec74d1692958ad6c0b60a065"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. <br /></td></tr>
<tr class="separator:a0bc84753ec74d1692958ad6c0b60a065"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af063ac74d2c0a66f0bbddb62d16c5c50" id="r_af063ac74d2c0a66f0bbddb62d16c5c50"><td class="memItemLeft" align="right" valign="top"><a id="af063ac74d2c0a66f0bbddb62d16c5c50" name="af063ac74d2c0a66f0bbddb62d16c5c50"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>EndsWith_NoCase</b> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sEndsWith) const</td></tr>
<tr class="memdesc:af063ac74d2c0a66f0bbddb62d16c5c50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:af063ac74d2c0a66f0bbddb62d16c5c50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7526c38e876eb72118bbb37ab1e36732" id="r_a7526c38e876eb72118bbb37ab1e36732"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a7526c38e876eb72118bbb37ab1e36732">FindSubString</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a7526c38e876eb72118bbb37ab1e36732"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a836c2433b152208146b07be5182aa90d" id="r_a836c2433b152208146b07be5182aa90d"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a836c2433b152208146b07be5182aa90d">FindSubString_NoCase</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a836c2433b152208146b07be5182aa90d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1119c28eec83e75e524b7355024cd636" id="r_a1119c28eec83e75e524b7355024cd636"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a1119c28eec83e75e524b7355024cd636">FindLastSubString</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a1119c28eec83e75e524b7355024cd636"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a549f29a89a36526391f4e407ca9f3a4b" id="r_a549f29a89a36526391f4e407ca9f3a4b"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a549f29a89a36526391f4e407ca9f3a4b">FindLastSubString_NoCase</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a549f29a89a36526391f4e407ca9f3a4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcc7196e4bb81b8b3e2da961dd917fde" id="r_afcc7196e4bb81b8b3e2da961dd917fde"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#afcc7196e4bb81b8b3e2da961dd917fde">FindWholeWord</a> (const char *szSearchFor, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> isDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:afcc7196e4bb81b8b3e2da961dd917fde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab40b7ada5f552ec62ad5c2a87d9eb2e9" id="r_ab40b7ada5f552ec62ad5c2a87d9eb2e9"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#ab40b7ada5f552ec62ad5c2a87d9eb2e9">FindWholeWord_NoCase</a> (const char *szSearchFor, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> isDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:ab40b7ada5f552ec62ad5c2a87d9eb2e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4aa8e43c8a2bf68e642ad1bfbffb9fa" id="r_ab4aa8e43c8a2bf68e642ad1bfbffb9fa"><td class="memItemLeft" align="right" valign="top"><a id="ab4aa8e43c8a2bf68e642ad1bfbffb9fa" name="ab4aa8e43c8a2bf68e642ad1bfbffb9fa"></a>
ezInt32&#160;</td><td class="memItemRight" valign="bottom"><b>Compare</b> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther) const</td></tr>
<tr class="memdesc:ab4aa8e43c8a2bf68e642ad1bfbffb9fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. <br /></td></tr>
<tr class="separator:ab4aa8e43c8a2bf68e642ad1bfbffb9fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad59a099496386a4dc0225f2564a9e9cb" id="r_ad59a099496386a4dc0225f2564a9e9cb"><td class="memItemLeft" align="right" valign="top">ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#ad59a099496386a4dc0225f2564a9e9cb">CompareN</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:ad59a099496386a4dc0225f2564a9e9cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11cc4a3305c78e7e5f062073562b78b1" id="r_a11cc4a3305c78e7e5f062073562b78b1"><td class="memItemLeft" align="right" valign="top"><a id="a11cc4a3305c78e7e5f062073562b78b1" name="a11cc4a3305c78e7e5f062073562b78b1"></a>
ezInt32&#160;</td><td class="memItemRight" valign="bottom"><b>Compare_NoCase</b> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther) const</td></tr>
<tr class="memdesc:a11cc4a3305c78e7e5f062073562b78b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. Case insensitive. <br /></td></tr>
<tr class="separator:a11cc4a3305c78e7e5f062073562b78b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa234e5c9e6b3fb6e0296d00fd863e726" id="r_aa234e5c9e6b3fb6e0296d00fd863e726"><td class="memItemLeft" align="right" valign="top">ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#aa234e5c9e6b3fb6e0296d00fd863e726">CompareN_NoCase</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:aa234e5c9e6b3fb6e0296d00fd863e726"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1283e59a13f463d2137726c0fa2573f" id="r_af1283e59a13f463d2137726c0fa2573f"><td class="memItemLeft" align="right" valign="top"><a id="af1283e59a13f463d2137726c0fa2573f" name="af1283e59a13f463d2137726c0fa2573f"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqual</b> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther) const</td></tr>
<tr class="memdesc:af1283e59a13f463d2137726c0fa2573f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:af1283e59a13f463d2137726c0fa2573f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa75c907e8543d51e46e9715427a2e3db" id="r_aa75c907e8543d51e46e9715427a2e3db"><td class="memItemLeft" align="right" valign="top"><a id="aa75c907e8543d51e46e9715427a2e3db" name="aa75c907e8543d51e46e9715427a2e3db"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqualN</b> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:aa75c907e8543d51e46e9715427a2e3db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:aa75c907e8543d51e46e9715427a2e3db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a819d3861f3efcaeb4393268840a43c37" id="r_a819d3861f3efcaeb4393268840a43c37"><td class="memItemLeft" align="right" valign="top"><a id="a819d3861f3efcaeb4393268840a43c37" name="a819d3861f3efcaeb4393268840a43c37"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqual_NoCase</b> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther) const</td></tr>
<tr class="memdesc:a819d3861f3efcaeb4393268840a43c37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:a819d3861f3efcaeb4393268840a43c37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a746a8a1119e1eee5a5671bada6877265" id="r_a746a8a1119e1eee5a5671bada6877265"><td class="memItemLeft" align="right" valign="top"><a id="a746a8a1119e1eee5a5671bada6877265" name="a746a8a1119e1eee5a5671bada6877265"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqualN_NoCase</b> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:a746a8a1119e1eee5a5671bada6877265"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:a746a8a1119e1eee5a5671bada6877265"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05bec3cf5581b35aa18849239b2471c6" id="r_a05bec3cf5581b35aa18849239b2471c6"><td class="memItemLeft" align="right" valign="top"><a id="a05bec3cf5581b35aa18849239b2471c6" name="a05bec3cf5581b35aa18849239b2471c6"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><b>ComputeCharacterPosition</b> (ezUInt32 uiCharacterIndex) const</td></tr>
<tr class="memdesc:a05bec3cf5581b35aa18849239b2471c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the pointer to the n-th character in the string. This is a linear search from the start. <br /></td></tr>
<tr class="separator:a05bec3cf5581b35aa18849239b2471c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a630aa4b168172aef7b32f8085148ed8e" id="r_a630aa4b168172aef7b32f8085148ed8e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/ddc/structez_string_iterator.htm">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">GetIteratorFront</a> () const</td></tr>
<tr class="memdesc:a630aa4b168172aef7b32f8085148ed8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very first character.  <br /></td></tr>
<tr class="separator:a630aa4b168172aef7b32f8085148ed8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3821af6b610f6c40a46336f7accc0c7e" id="r_a3821af6b610f6c40a46336f7accc0c7e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">GetIteratorBack</a> () const</td></tr>
<tr class="memdesc:a3821af6b610f6c40a46336f7accc0c7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very last character (NOT the end).  <br /></td></tr>
<tr class="separator:a3821af6b610f6c40a46336f7accc0c7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f255aa67639f3d3c0abd7a55a8ee9e3" id="r_a2f255aa67639f3d3c0abd7a55a8ee9e3"><td class="memItemLeft" align="right" valign="top"><a id="a2f255aa67639f3d3c0abd7a55a8ee9e3" name="a2f255aa67639f3d3c0abd7a55a8ee9e3"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>operator ezStringView</b> () const</td></tr>
<tr class="memdesc:a2f255aa67639f3d3c0abd7a55a8ee9e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:a2f255aa67639f3d3c0abd7a55a8ee9e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dc8b54007099ca61b4b937923e7987b" id="r_a4dc8b54007099ca61b4b937923e7987b"><td class="memItemLeft" align="right" valign="top"><a id="a4dc8b54007099ca61b4b937923e7987b" name="a4dc8b54007099ca61b4b937923e7987b"></a>
<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetView</b> () const</td></tr>
<tr class="memdesc:a4dc8b54007099ca61b4b937923e7987b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:a4dc8b54007099ca61b4b937923e7987b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c0fec33cd00f409985b68a820ead16f" id="r_a3c0fec33cd00f409985b68a820ead16f"><td class="memItemLeft" align="right" valign="top"><a id="a3c0fec33cd00f409985b68a820ead16f" name="a3c0fec33cd00f409985b68a820ead16f"></a>
EZ_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><b>operator const char *</b> () const</td></tr>
<tr class="memdesc:a3c0fec33cd00f409985b68a820ead16f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the internal Utf8 string. <br /></td></tr>
<tr class="separator:a3c0fec33cd00f409985b68a820ead16f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a328c33c66707ecea8ed93512a5ad2465" id="r_a328c33c66707ecea8ed93512a5ad2465"><td class="memTemplParams" colspan="2"><a id="a328c33c66707ecea8ed93512a5ad2465" name="a328c33c66707ecea8ed93512a5ad2465"></a>
template&lt;typename Container &gt; </td></tr>
<tr class="memitem:a328c33c66707ecea8ed93512a5ad2465"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Split</b> (bool bReturnEmptyStrings, Container &amp;ref_output, const char *szSeparator1, const char *szSeparator2=nullptr, const char *szSeparator3=nullptr, const char *szSeparator4=nullptr, const char *szSeparator5=nullptr, const char *szSeparator6=nullptr) const</td></tr>
<tr class="memdesc:a328c33c66707ecea8ed93512a5ad2465"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills the given container with <a class="el" href="../../d9/d18/classez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a>'s which represent each found substring. If bReturnEmptyStrings is true, even empty strings between separators are returned. Output must be a container that stores <a class="el" href="../../d9/d18/classez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a>'s and provides the functions 'Clear' and 'Append'. szSeparator1 to szSeparator6 are strings which act as separators and indicate where to split the string. This string itself will not be modified. <br /></td></tr>
<tr class="separator:a328c33c66707ecea8ed93512a5ad2465"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31f4090e3be6134eb1702f909cd3ba33" id="r_a31f4090e3be6134eb1702f909cd3ba33"><td class="memItemLeft" align="right" valign="top"><a id="a31f4090e3be6134eb1702f909cd3ba33" name="a31f4090e3be6134eb1702f909cd3ba33"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>HasAnyExtension</b> () const</td></tr>
<tr class="memdesc:a31f4090e3be6134eb1702f909cd3ba33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given path has any file extension. <br /></td></tr>
<tr class="separator:a31f4090e3be6134eb1702f909cd3ba33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdbb18858405f981767e683d858fb73c" id="r_afdbb18858405f981767e683d858fb73c"><td class="memItemLeft" align="right" valign="top"><a id="afdbb18858405f981767e683d858fb73c" name="afdbb18858405f981767e683d858fb73c"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>HasExtension</b> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sExtension) const</td></tr>
<tr class="memdesc:afdbb18858405f981767e683d858fb73c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given path ends with the given extension. szExtension should start with a '.' for performance reasons, but it will work without a '.' too. <br /></td></tr>
<tr class="separator:afdbb18858405f981767e683d858fb73c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5643d2cd395334ef41df8d253cfe85b1" id="r_a5643d2cd395334ef41df8d253cfe85b1"><td class="memItemLeft" align="right" valign="top"><a id="a5643d2cd395334ef41df8d253cfe85b1" name="a5643d2cd395334ef41df8d253cfe85b1"></a>
<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetFileExtension</b> (bool bFullExtension=false) const</td></tr>
<tr class="memdesc:a5643d2cd395334ef41df8d253cfe85b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file extension of the given path. Will be empty, if the path does not end with a proper extension. <br /></td></tr>
<tr class="separator:a5643d2cd395334ef41df8d253cfe85b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e36684efb429bac40152974cd8ca817" id="r_a6e36684efb429bac40152974cd8ca817"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a6e36684efb429bac40152974cd8ca817">GetFileName</a> () const</td></tr>
<tr class="memdesc:a6e36684efb429bac40152974cd8ca817"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file name of a path, excluding the path and extension.  <br /></td></tr>
<tr class="separator:a6e36684efb429bac40152974cd8ca817"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a839a783b7199310da98f5e52f7174c43" id="r_a839a783b7199310da98f5e52f7174c43"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a839a783b7199310da98f5e52f7174c43">GetFileNameAndExtension</a> () const</td></tr>
<tr class="memdesc:a839a783b7199310da98f5e52f7174c43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the substring that represents the file name including the file extension.  <br /></td></tr>
<tr class="separator:a839a783b7199310da98f5e52f7174c43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcd136562b6d279801aa6653c3dbd7c8" id="r_abcd136562b6d279801aa6653c3dbd7c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#abcd136562b6d279801aa6653c3dbd7c8">GetFileDirectory</a> () const</td></tr>
<tr class="memdesc:abcd136562b6d279801aa6653c3dbd7c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the directory of the given file, which is the substring up to the last path separator.  <br /></td></tr>
<tr class="separator:abcd136562b6d279801aa6653c3dbd7c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2bb565f17573d92b3f995ede720b915" id="r_aa2bb565f17573d92b3f995ede720b915"><td class="memItemLeft" align="right" valign="top"><a id="aa2bb565f17573d92b3f995ede720b915" name="aa2bb565f17573d92b3f995ede720b915"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsAbsolutePath</b> () const</td></tr>
<tr class="memdesc:aa2bb565f17573d92b3f995ede720b915"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents an absolute path on the current OS. <br /></td></tr>
<tr class="separator:aa2bb565f17573d92b3f995ede720b915"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2fc8eecf7a508bcb383b70ced7ffc25" id="r_ac2fc8eecf7a508bcb383b70ced7ffc25"><td class="memItemLeft" align="right" valign="top"><a id="ac2fc8eecf7a508bcb383b70ced7ffc25" name="ac2fc8eecf7a508bcb383b70ced7ffc25"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsRelativePath</b> () const</td></tr>
<tr class="memdesc:ac2fc8eecf7a508bcb383b70ced7ffc25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents a relative path on the current OS. <br /></td></tr>
<tr class="separator:ac2fc8eecf7a508bcb383b70ced7ffc25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5981da7976e9bd420dc871da0bfab1a2" id="r_a5981da7976e9bd420dc871da0bfab1a2"><td class="memItemLeft" align="right" valign="top"><a id="a5981da7976e9bd420dc871da0bfab1a2" name="a5981da7976e9bd420dc871da0bfab1a2"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsRootedPath</b> () const</td></tr>
<tr class="memdesc:a5981da7976e9bd420dc871da0bfab1a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents a 'rooted' path. See <a class="el" href="../../d4/d6b/classez_file_system.htm" title="The ezFileSystem provides high-level functionality to manage files in a virtual file system.">ezFileSystem</a> for details. <br /></td></tr>
<tr class="separator:a5981da7976e9bd420dc871da0bfab1a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a501c95c64bd9476f553ea361d0f94a33" id="r_a501c95c64bd9476f553ea361d0f94a33"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a501c95c64bd9476f553ea361d0f94a33">GetRootedPathRootName</a> () const</td></tr>
<tr class="memdesc:a501c95c64bd9476f553ea361d0f94a33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extracts the root name from a rooted path.  <br /></td></tr>
<tr class="separator:a501c95c64bd9476f553ea361d0f94a33"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a8c9dc476c72b564e81def380af713da5" id="r_a8c9dc476c72b564e81def380af713da5"><td class="memTemplParams" colspan="2"><a id="a8c9dc476c72b564e81def380af713da5" name="a8c9dc476c72b564e81def380af713da5"></a>
template&lt;typename Derived2 &gt; </td></tr>
<tr class="memitem:a8c9dc476c72b564e81def380af713da5"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt;::iterator&#160;</td><td class="memTemplItemRight" valign="bottom"><b>begin</b> (const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt; &amp;container)</td></tr>
<tr class="separator:a8c9dc476c72b564e81def380af713da5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add336e51a2a0acdd58c6c2a3eaffa7e6" id="r_add336e51a2a0acdd58c6c2a3eaffa7e6"><td class="memTemplParams" colspan="2"><a id="add336e51a2a0acdd58c6c2a3eaffa7e6" name="add336e51a2a0acdd58c6c2a3eaffa7e6"></a>
template&lt;typename Derived2 &gt; </td></tr>
<tr class="memitem:add336e51a2a0acdd58c6c2a3eaffa7e6"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt;::const_iterator&#160;</td><td class="memTemplItemRight" valign="bottom"><b>cbegin</b> (const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt; &amp;container)</td></tr>
<tr class="separator:add336e51a2a0acdd58c6c2a3eaffa7e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac759e8d8e974880a68d23cdb75137ba9" id="r_ac759e8d8e974880a68d23cdb75137ba9"><td class="memTemplParams" colspan="2"><a id="ac759e8d8e974880a68d23cdb75137ba9" name="ac759e8d8e974880a68d23cdb75137ba9"></a>
template&lt;typename Derived2 &gt; </td></tr>
<tr class="memitem:ac759e8d8e974880a68d23cdb75137ba9"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt;::iterator&#160;</td><td class="memTemplItemRight" valign="bottom"><b>end</b> (const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt; &amp;container)</td></tr>
<tr class="separator:ac759e8d8e974880a68d23cdb75137ba9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58e47a9e5dfe5505277ee2dc68a6b06b" id="r_a58e47a9e5dfe5505277ee2dc68a6b06b"><td class="memTemplParams" colspan="2"><a id="a58e47a9e5dfe5505277ee2dc68a6b06b" name="a58e47a9e5dfe5505277ee2dc68a6b06b"></a>
template&lt;typename Derived2 &gt; </td></tr>
<tr class="memitem:a58e47a9e5dfe5505277ee2dc68a6b06b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt;::const_iterator&#160;</td><td class="memTemplItemRight" valign="bottom"><b>cend</b> (const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt; &amp;container)</td></tr>
<tr class="separator:a58e47a9e5dfe5505277ee2dc68a6b06b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab664251bd2116bfc9c13d8a5011cb561" id="r_ab664251bd2116bfc9c13d8a5011cb561"><td class="memTemplParams" colspan="2"><a id="ab664251bd2116bfc9c13d8a5011cb561" name="ab664251bd2116bfc9c13d8a5011cb561"></a>
template&lt;typename Derived2 &gt; </td></tr>
<tr class="memitem:ab664251bd2116bfc9c13d8a5011cb561"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt;::reverse_iterator&#160;</td><td class="memTemplItemRight" valign="bottom"><b>rbegin</b> (const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt; &amp;container)</td></tr>
<tr class="separator:ab664251bd2116bfc9c13d8a5011cb561"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3100e78cbbbe5d2c400b315ad8bbdfd6" id="r_a3100e78cbbbe5d2c400b315ad8bbdfd6"><td class="memTemplParams" colspan="2"><a id="a3100e78cbbbe5d2c400b315ad8bbdfd6" name="a3100e78cbbbe5d2c400b315ad8bbdfd6"></a>
template&lt;typename Derived2 &gt; </td></tr>
<tr class="memitem:a3100e78cbbbe5d2c400b315ad8bbdfd6"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt;::const_reverse_iterator&#160;</td><td class="memTemplItemRight" valign="bottom"><b>crbegin</b> (const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt; &amp;container)</td></tr>
<tr class="separator:a3100e78cbbbe5d2c400b315ad8bbdfd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e5838194756ad015cc1a6660a6866f4" id="r_a2e5838194756ad015cc1a6660a6866f4"><td class="memTemplParams" colspan="2"><a id="a2e5838194756ad015cc1a6660a6866f4" name="a2e5838194756ad015cc1a6660a6866f4"></a>
template&lt;typename Derived2 &gt; </td></tr>
<tr class="memitem:a2e5838194756ad015cc1a6660a6866f4"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt;::reverse_iterator&#160;</td><td class="memTemplItemRight" valign="bottom"><b>rend</b> (const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt; &amp;container)</td></tr>
<tr class="separator:a2e5838194756ad015cc1a6660a6866f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7e85ff623cb0d4d2e893d7d20e6a2d3" id="r_ac7e85ff623cb0d4d2e893d7d20e6a2d3"><td class="memTemplParams" colspan="2"><a id="ac7e85ff623cb0d4d2e893d7d20e6a2d3" name="ac7e85ff623cb0d4d2e893d7d20e6a2d3"></a>
template&lt;typename Derived2 &gt; </td></tr>
<tr class="memitem:ac7e85ff623cb0d4d2e893d7d20e6a2d3"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt;::const_reverse_iterator&#160;</td><td class="memTemplItemRight" valign="bottom"><b>crend</b> (const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived2 &gt; &amp;container)</td></tr>
<tr class="separator:ac7e85ff623cb0d4d2e893d7d20e6a2d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename Derived&gt;<br />
struct ezStringBase&lt; Derived &gt;</div><p>Base class for strings, which implements all read-only string functions. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="ad59a099496386a4dc0225f2564a9e9cb" name="ad59a099496386a4dc0225f2564a9e9cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad59a099496386a4dc0225f2564a9e9cb">&#9670;&#160;</a></span>CompareN()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ezInt32 <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::CompareN </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sOther</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiCharsToCompare</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compares up to a given number of characters of this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. </p>

</div>
</div>
<a id="aa234e5c9e6b3fb6e0296d00fd863e726" name="aa234e5c9e6b3fb6e0296d00fd863e726"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa234e5c9e6b3fb6e0296d00fd863e726">&#9670;&#160;</a></span>CompareN_NoCase()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ezInt32 <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::CompareN_NoCase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sOther</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiCharsToCompare</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compares up to a given number of characters of this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. Case insensitive. </p>

</div>
</div>
<a id="a1119c28eec83e75e524b7355024cd636" name="a1119c28eec83e75e524b7355024cd636"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1119c28eec83e75e524b7355024cd636">&#9670;&#160;</a></span>FindLastSubString()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::FindLastSubString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sStringToFind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns a pointer to the last occurrence of szStringToFind, or nullptr if none was found. szStartSearchAt allows to start searching at the end of the string (if it is nullptr) or at an earlier position. </p>

</div>
</div>
<a id="a549f29a89a36526391f4e407ca9f3a4b" name="a549f29a89a36526391f4e407ca9f3a4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a549f29a89a36526391f4e407ca9f3a4b">&#9670;&#160;</a></span>FindLastSubString_NoCase()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::FindLastSubString_NoCase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sStringToFind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns a pointer to the last occurrence of szStringToFind, or nullptr if none was found. Case insensitive. szStartSearchAt allows to start searching at the end of the string (if it is nullptr) or at an earlier position. </p>

</div>
</div>
<a id="a7526c38e876eb72118bbb37ab1e36732" name="a7526c38e876eb72118bbb37ab1e36732"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7526c38e876eb72118bbb37ab1e36732">&#9670;&#160;</a></span>FindSubString()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const char * <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::FindSubString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sStringToFind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns a pointer to the first occurrence of szStringToFind, or nullptr if none was found. To find the next occurrence, use an <a class="el" href="../../d9/d18/classez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> which points to the next position and call FindSubString again. </p>

</div>
</div>
<a id="a836c2433b152208146b07be5182aa90d" name="a836c2433b152208146b07be5182aa90d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a836c2433b152208146b07be5182aa90d">&#9670;&#160;</a></span>FindSubString_NoCase()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const char * <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::FindSubString_NoCase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sStringToFind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns a pointer to the first occurrence of szStringToFind, or nullptr if none was found. Case insensitive. To find the next occurrence, use an <a class="el" href="../../d9/d18/classez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> which points to the next position and call FindSubString again. </p>

</div>
</div>
<a id="afcc7196e4bb81b8b3e2da961dd917fde" name="afcc7196e4bb81b8b3e2da961dd917fde"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afcc7196e4bb81b8b3e2da961dd917fde">&#9670;&#160;</a></span>FindWholeWord()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::FindWholeWord </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a>&#160;</td>
          <td class="paramname"><em>isDelimiterCB</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Searches for the word szSearchFor. If IsDelimiterCB returns true for both characters in front and back of the word, the position is returned. Otherwise nullptr. </p>

</div>
</div>
<a id="ab40b7ada5f552ec62ad5c2a87d9eb2e9" name="ab40b7ada5f552ec62ad5c2a87d9eb2e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab40b7ada5f552ec62ad5c2a87d9eb2e9">&#9670;&#160;</a></span>FindWholeWord_NoCase()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::FindWholeWord_NoCase </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a>&#160;</td>
          <td class="paramname"><em>isDelimiterCB</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Searches for the word szSearchFor. If IsDelimiterCB returns true for both characters in front and back of the word, the position is returned. Otherwise nullptr. Ignores case. </p>

</div>
</div>
<a id="abcd136562b6d279801aa6653c3dbd7c8" name="abcd136562b6d279801aa6653c3dbd7c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abcd136562b6d279801aa6653c3dbd7c8">&#9670;&#160;</a></span>GetFileDirectory()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::GetFileDirectory </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the directory of the given file, which is the substring up to the last path separator. </p>
<p>If the path already ends in a path separator, and thus points to a folder, instead of a file, the unchanged path is returned. "path/to/file" -&gt; "path/to/" "path/to/folder/" -&gt; "path/to/folder/" "filename" -&gt; "" "/file_at_root_level" -&gt; "/" </p>

</div>
</div>
<a id="a6e36684efb429bac40152974cd8ca817" name="a6e36684efb429bac40152974cd8ca817"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e36684efb429bac40152974cd8ca817">&#9670;&#160;</a></span>GetFileName()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::GetFileName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the file name of a path, excluding the path and extension. </p>
<p>If the path already ends with a path separator, the result will be empty. </p>

</div>
</div>
<a id="a839a783b7199310da98f5e52f7174c43" name="a839a783b7199310da98f5e52f7174c43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a839a783b7199310da98f5e52f7174c43">&#9670;&#160;</a></span>GetFileNameAndExtension()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::GetFileNameAndExtension </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the substring that represents the file name including the file extension. </p>
<p>Returns an empty string, if sPath already ends in a path separator, or is empty itself. </p>

</div>
</div>
<a id="a3821af6b610f6c40a46336f7accc0c7e" name="a3821af6b610f6c40a46336f7accc0c7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3821af6b610f6c40a46336f7accc0c7e">&#9670;&#160;</a></span>GetIteratorBack()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::reverse_iterator <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::GetIteratorBack </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an iterator to this string, which points to the very last character (NOT the end). </p>
<p>Note that this iterator will only be valid as long as this string lives. Once the original string is destroyed, all iterators to them will point into invalid memory. </p>

</div>
</div>
<a id="a630aa4b168172aef7b32f8085148ed8e" name="a630aa4b168172aef7b32f8085148ed8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a630aa4b168172aef7b32f8085148ed8e">&#9670;&#160;</a></span>GetIteratorFront()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::iterator <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::GetIteratorFront </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an iterator to this string, which points to the very first character. </p>
<p>Note that this iterator will only be valid as long as this string lives. Once the original string is destroyed, all iterators to them will point into invalid memory. </p>

</div>
</div>
<a id="a501c95c64bd9476f553ea361d0f94a33" name="a501c95c64bd9476f553ea361d0f94a33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a501c95c64bd9476f553ea361d0f94a33">&#9670;&#160;</a></span>GetRootedPathRootName()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::GetRootedPathRootName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Extracts the root name from a rooted path. </p>
<p>":MyRoot" -&gt; "MyRoot" ":MyRoot\folder" -&gt; "MyRoot" ":\MyRoot\folder" -&gt; "MyRoot" ":/MyRoot\folder" -&gt; "MyRoot" Returns an empty string, if the path is not rooted. </p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../da/d9c/_string_base_8h_source.htm">StringBase.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../d4/d98/_string_base__inl_8h_source.htm">StringBase_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:18:01 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
