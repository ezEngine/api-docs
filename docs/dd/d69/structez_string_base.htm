<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezStringBase&lt; Derived &gt; Struct Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('dd/d69/structez_string_base.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../dd/db6/structez_string_base-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezStringBase&lt; Derived &gt; Struct Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Base class for strings, which implements all read-only string functions.  
 <a href="../../dd/d69/structez_string_base.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../da/d9c/_string_base_8h_source.htm">StringBase.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ezStringBase&lt; Derived &gt;:</div>
<div class="dyncontent">
<div class="center"><img src="../../d4/d35/structez_string_base__inherit__graph.png" border="0" usemap="#ez_string_base_3_01_derived_01_4_inherit__map" alt="Inheritance graph"/></div>
<map name="ez_string_base_3_01_derived_01_4_inherit__map" id="ez_string_base_3_01_derived_01_4_inherit__map">
<area shape="rect" title="Base class for strings, which implements all read&#45;only string functions." alt="" coords="5,80,193,107"/>
<area shape="rect" href="../../d8/d9a/structez_this_is_a_string.htm" title="Base class which marks a class as containing string data." alt="" coords="38,5,161,32"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ab65f80cd73057c1f83921afc74200c9f"><td class="memItemLeft" align="right" valign="top"><a id="ab65f80cd73057c1f83921afc74200c9f"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>iterator</b> = <a class="el" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&lt; Derived &gt;</td></tr>
<tr class="separator:ab65f80cd73057c1f83921afc74200c9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade6d14a20fb3d7e2074f3b0563146b8e"><td class="memItemLeft" align="right" valign="top"><a id="ade6d14a20fb3d7e2074f3b0563146b8e"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_iterator</b> = <a class="el" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&lt; Derived &gt;</td></tr>
<tr class="separator:ade6d14a20fb3d7e2074f3b0563146b8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae164cffae6bebd68154732c2d72d313c"><td class="memItemLeft" align="right" valign="top"><a id="ae164cffae6bebd68154732c2d72d313c"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>reverse_iterator</b> = <a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&lt; Derived &gt;</td></tr>
<tr class="separator:ae164cffae6bebd68154732c2d72d313c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad740ab8e9cfc9269d50f6da3c532e779"><td class="memItemLeft" align="right" valign="top"><a id="ad740ab8e9cfc9269d50f6da3c532e779"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_reverse_iterator</b> = <a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&lt; Derived &gt;</td></tr>
<tr class="separator:ad740ab8e9cfc9269d50f6da3c532e779"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a3b169646f62ef8a8d33b63e2b8731afb"><td class="memItemLeft" align="right" valign="top"><a id="a3b169646f62ef8a8d33b63e2b8731afb"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a3b169646f62ef8a8d33b63e2b8731afb">IsEmpty</a> () const</td></tr>
<tr class="memdesc:a3b169646f62ef8a8d33b63e2b8731afb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the string is an empty string. <br /></td></tr>
<tr class="separator:a3b169646f62ef8a8d33b63e2b8731afb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40370a42191c470e969d0693385db3f3"><td class="memItemLeft" align="right" valign="top"><a id="a40370a42191c470e969d0693385db3f3"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a40370a42191c470e969d0693385db3f3">StartsWith</a> (const char *szStartsWith) const</td></tr>
<tr class="memdesc:a40370a42191c470e969d0693385db3f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. <br /></td></tr>
<tr class="separator:a40370a42191c470e969d0693385db3f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb6973bde9b2b2b6773b69035c97e8ba"><td class="memItemLeft" align="right" valign="top"><a id="acb6973bde9b2b2b6773b69035c97e8ba"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#acb6973bde9b2b2b6773b69035c97e8ba">StartsWith_NoCase</a> (const char *szStartsWith) const</td></tr>
<tr class="memdesc:acb6973bde9b2b2b6773b69035c97e8ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:acb6973bde9b2b2b6773b69035c97e8ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb83fb2fc2655dfdfea37ef6ae13ef30"><td class="memItemLeft" align="right" valign="top"><a id="afb83fb2fc2655dfdfea37ef6ae13ef30"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#afb83fb2fc2655dfdfea37ef6ae13ef30">EndsWith</a> (const char *szEndsWith) const</td></tr>
<tr class="memdesc:afb83fb2fc2655dfdfea37ef6ae13ef30"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. <br /></td></tr>
<tr class="separator:afb83fb2fc2655dfdfea37ef6ae13ef30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d4ac2126f45dcb7c567dee949cc68ab"><td class="memItemLeft" align="right" valign="top"><a id="a1d4ac2126f45dcb7c567dee949cc68ab"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a1d4ac2126f45dcb7c567dee949cc68ab">EndsWith_NoCase</a> (const char *szEndsWith) const</td></tr>
<tr class="memdesc:a1d4ac2126f45dcb7c567dee949cc68ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:a1d4ac2126f45dcb7c567dee949cc68ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af672ce6437cd3c9d17b3267cfa834b48"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#af672ce6437cd3c9d17b3267cfa834b48">FindSubString</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:af672ce6437cd3c9d17b3267cfa834b48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a139af1709f27a801b784a3f4bd2c12ed"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a139af1709f27a801b784a3f4bd2c12ed">FindSubString_NoCase</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a139af1709f27a801b784a3f4bd2c12ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44351ea491df5b7db1095dde6e6299c5"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a44351ea491df5b7db1095dde6e6299c5">FindLastSubString</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a44351ea491df5b7db1095dde6e6299c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c0563a267bee66f3a1f76cf08af153f"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a0c0563a267bee66f3a1f76cf08af153f">FindLastSubString_NoCase</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a0c0563a267bee66f3a1f76cf08af153f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7990e9f9c36231cd41af33a25f96dbc6"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a7990e9f9c36231cd41af33a25f96dbc6">FindWholeWord</a> (const char *szSearchFor, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> IsDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a7990e9f9c36231cd41af33a25f96dbc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a696c890e2e534cfc0af94091f0f0a5f6"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a696c890e2e534cfc0af94091f0f0a5f6">FindWholeWord_NoCase</a> (const char *szSearchFor, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> IsDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a696c890e2e534cfc0af94091f0f0a5f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8db4d1eaa1ad5ad01395f3d08eb1a0c2"><td class="memItemLeft" align="right" valign="top"><a id="a8db4d1eaa1ad5ad01395f3d08eb1a0c2"></a>
ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">Compare</a> (const char *pString2) const</td></tr>
<tr class="memdesc:a8db4d1eaa1ad5ad01395f3d08eb1a0c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. <br /></td></tr>
<tr class="separator:a8db4d1eaa1ad5ad01395f3d08eb1a0c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fcc6b07403fe714f7823f06e51ed419"><td class="memItemLeft" align="right" valign="top">ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a5fcc6b07403fe714f7823f06e51ed419">CompareN</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:a5fcc6b07403fe714f7823f06e51ed419"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48e98ad28e9cc6c0a3d436b802149443"><td class="memItemLeft" align="right" valign="top"><a id="a48e98ad28e9cc6c0a3d436b802149443"></a>
ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a48e98ad28e9cc6c0a3d436b802149443">Compare_NoCase</a> (const char *pString2) const</td></tr>
<tr class="memdesc:a48e98ad28e9cc6c0a3d436b802149443"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. Case insensitive. <br /></td></tr>
<tr class="separator:a48e98ad28e9cc6c0a3d436b802149443"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af924cf1e0bc6a35338229a7e9ad505a8"><td class="memItemLeft" align="right" valign="top">ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#af924cf1e0bc6a35338229a7e9ad505a8">CompareN_NoCase</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:af924cf1e0bc6a35338229a7e9ad505a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6517806293ce84badc8da6c5d01c67cf"><td class="memItemLeft" align="right" valign="top"><a id="a6517806293ce84badc8da6c5d01c67cf"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">IsEqual</a> (const char *pString2) const</td></tr>
<tr class="memdesc:a6517806293ce84badc8da6c5d01c67cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:a6517806293ce84badc8da6c5d01c67cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77bcaa8c3cc64c21d1311e45033ffae3"><td class="memItemLeft" align="right" valign="top"><a id="a77bcaa8c3cc64c21d1311e45033ffae3"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a77bcaa8c3cc64c21d1311e45033ffae3">IsEqualN</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:a77bcaa8c3cc64c21d1311e45033ffae3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:a77bcaa8c3cc64c21d1311e45033ffae3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba99a929eb858f565e1fa332b6b03723"><td class="memItemLeft" align="right" valign="top"><a id="aba99a929eb858f565e1fa332b6b03723"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#aba99a929eb858f565e1fa332b6b03723">IsEqual_NoCase</a> (const char *pString2) const</td></tr>
<tr class="memdesc:aba99a929eb858f565e1fa332b6b03723"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:aba99a929eb858f565e1fa332b6b03723"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada89e0455b0a9bc13e76af36abb3cf8b"><td class="memItemLeft" align="right" valign="top"><a id="ada89e0455b0a9bc13e76af36abb3cf8b"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#ada89e0455b0a9bc13e76af36abb3cf8b">IsEqualN_NoCase</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:ada89e0455b0a9bc13e76af36abb3cf8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:ada89e0455b0a9bc13e76af36abb3cf8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05bec3cf5581b35aa18849239b2471c6"><td class="memItemLeft" align="right" valign="top"><a id="a05bec3cf5581b35aa18849239b2471c6"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a05bec3cf5581b35aa18849239b2471c6">ComputeCharacterPosition</a> (ezUInt32 uiCharacterIndex) const</td></tr>
<tr class="memdesc:a05bec3cf5581b35aa18849239b2471c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the pointer to the n-th character in the string. This is a linear search from the start. <br /></td></tr>
<tr class="separator:a05bec3cf5581b35aa18849239b2471c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a630aa4b168172aef7b32f8085148ed8e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/ddc/structez_string_iterator.htm">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">GetIteratorFront</a> () const</td></tr>
<tr class="memdesc:a630aa4b168172aef7b32f8085148ed8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very first character.  <a href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">More...</a><br /></td></tr>
<tr class="separator:a630aa4b168172aef7b32f8085148ed8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3821af6b610f6c40a46336f7accc0c7e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">GetIteratorBack</a> () const</td></tr>
<tr class="memdesc:a3821af6b610f6c40a46336f7accc0c7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very last character (NOT the end).  <a href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">More...</a><br /></td></tr>
<tr class="separator:a3821af6b610f6c40a46336f7accc0c7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a8e7ffcf55b8f4defbee8e88ae2a49c66"><td class="memTemplParams" colspan="2"><a id="a8e7ffcf55b8f4defbee8e88ae2a49c66"></a>
template&lt;typename T , bool isString&gt; </td></tr>
<tr class="memitem:a8e7ffcf55b8f4defbee8e88ae2a49c66"><td class="memTemplItemLeft" align="right" valign="top">struct&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ezInternal::HashHelperImpl</b></td></tr>
<tr class="separator:a8e7ffcf55b8f4defbee8e88ae2a49c66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a813c6c388680602c960ed58f62b00e83"><td class="memItemLeft" align="right" valign="top"><a id="a813c6c388680602c960ed58f62b00e83"></a>
struct&#160;</td><td class="memItemRight" valign="bottom"><b>ezStringIterator&lt; Derived &gt;</b></td></tr>
<tr class="separator:a813c6c388680602c960ed58f62b00e83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6730cb0869c5174819eaa983e3e34e0e"><td class="memItemLeft" align="right" valign="top"><a id="a6730cb0869c5174819eaa983e3e34e0e"></a>
struct&#160;</td><td class="memItemRight" valign="bottom"><b>ezStringReverseIterator&lt; Derived &gt;</b></td></tr>
<tr class="separator:a6730cb0869c5174819eaa983e3e34e0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48bc3c2120496f998a81170749c6d643"><td class="memTemplParams" colspan="2"><a id="a48bc3c2120496f998a81170749c6d643"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a48bc3c2120496f998a81170749c6d643"><td class="memTemplItemLeft" align="right" valign="top">struct&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ezCompareHelper</b></td></tr>
<tr class="separator:a48bc3c2120496f998a81170749c6d643"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab25751ed396c89475bbe7dfd7557c2f5"><td class="memItemLeft" align="right" valign="top"><a id="ab25751ed396c89475bbe7dfd7557c2f5"></a>
struct&#160;</td><td class="memItemRight" valign="bottom"><b>ezCompareString_NoCase</b></td></tr>
<tr class="separator:ab25751ed396c89475bbe7dfd7557c2f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9338a8b96a68e97c1ff4afd8e0abfdc0"><td class="memItemLeft" align="right" valign="top"><a id="a9338a8b96a68e97c1ff4afd8e0abfdc0"></a>
struct&#160;</td><td class="memItemRight" valign="bottom"><b>ezHashHelperString_NoCase</b></td></tr>
<tr class="separator:a9338a8b96a68e97c1ff4afd8e0abfdc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae69a9e0ba6407c12463bfda5ef83e2a4"><td class="memTemplParams" colspan="2"><a id="ae69a9e0ba6407c12463bfda5ef83e2a4"></a>
template&lt;typename DerivedLhs , typename DerivedRhs &gt; </td></tr>
<tr class="memitem:ae69a9e0ba6407c12463bfda5ef83e2a4"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; DerivedLhs &gt; &amp;lhs, const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; DerivedRhs &gt; &amp;rhs)</td></tr>
<tr class="separator:ae69a9e0ba6407c12463bfda5ef83e2a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4c988fce933c7b9a465a447a91f8812"><td class="memTemplParams" colspan="2"><a id="ad4c988fce933c7b9a465a447a91f8812"></a>
template&lt;typename DerivedLhs , typename DerivedRhs &gt; </td></tr>
<tr class="memitem:ad4c988fce933c7b9a465a447a91f8812"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator!=</b> (const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; DerivedLhs &gt; &amp;lhs, const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; DerivedRhs &gt; &amp;rhs)</td></tr>
<tr class="separator:ad4c988fce933c7b9a465a447a91f8812"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b225c3265737fe8ab5db27456521112"><td class="memTemplParams" colspan="2"><a id="a5b225c3265737fe8ab5db27456521112"></a>
template&lt;typename DerivedLhs , typename DerivedRhs &gt; </td></tr>
<tr class="memitem:a5b225c3265737fe8ab5db27456521112"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator&lt;</b> (const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; DerivedLhs &gt; &amp;lhs, const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; DerivedRhs &gt; &amp;rhs)</td></tr>
<tr class="separator:a5b225c3265737fe8ab5db27456521112"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0757458526617556dbbda2b7e42884f3"><td class="memTemplParams" colspan="2"><a id="a0757458526617556dbbda2b7e42884f3"></a>
template&lt;typename DerivedLhs , typename DerivedRhs &gt; </td></tr>
<tr class="memitem:a0757458526617556dbbda2b7e42884f3"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator&gt;</b> (const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; DerivedLhs &gt; &amp;lhs, const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; DerivedRhs &gt; &amp;rhs)</td></tr>
<tr class="separator:a0757458526617556dbbda2b7e42884f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4087ed39a245094a17afc15b22501628"><td class="memTemplParams" colspan="2"><a id="a4087ed39a245094a17afc15b22501628"></a>
template&lt;typename DerivedLhs , typename DerivedRhs &gt; </td></tr>
<tr class="memitem:a4087ed39a245094a17afc15b22501628"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator&lt;=</b> (const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; DerivedLhs &gt; &amp;lhs, const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; DerivedRhs &gt; &amp;rhs)</td></tr>
<tr class="separator:a4087ed39a245094a17afc15b22501628"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeabdea4dc90f230890bdb97f59631a3c"><td class="memTemplParams" colspan="2"><a id="aeabdea4dc90f230890bdb97f59631a3c"></a>
template&lt;typename DerivedLhs , typename DerivedRhs &gt; </td></tr>
<tr class="memitem:aeabdea4dc90f230890bdb97f59631a3c"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator&gt;=</b> (const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; DerivedLhs &gt; &amp;lhs, const <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; DerivedRhs &gt; &amp;rhs)</td></tr>
<tr class="separator:aeabdea4dc90f230890bdb97f59631a3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename Derived&gt;<br />
struct ezStringBase&lt; Derived &gt;</h3>

<p>Base class for strings, which implements all read-only string functions. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a5fcc6b07403fe714f7823f06e51ed419"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fcc6b07403fe714f7823f06e51ed419">&#9670;&nbsp;</a></span>CompareN()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ezInt32 <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::CompareN </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>pString2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiCharsToCompare</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compares up to a given number of characters of this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. </p>

</div>
</div>
<a id="af924cf1e0bc6a35338229a7e9ad505a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af924cf1e0bc6a35338229a7e9ad505a8">&#9670;&nbsp;</a></span>CompareN_NoCase()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ezInt32 <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::CompareN_NoCase </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>pString2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiCharsToCompare</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compares up to a given number of characters of this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. Case insensitive. </p>

</div>
</div>
<a id="a44351ea491df5b7db1095dde6e6299c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44351ea491df5b7db1095dde6e6299c5">&#9670;&nbsp;</a></span>FindLastSubString()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::FindLastSubString </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStringToFind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns a pointer to the last occurrence of szStringToFind, or nullptr if none was found. szStartSearchAt allows to start searching at the end of the string (if it is nullptr) or at an earlier position. </p>

</div>
</div>
<a id="a0c0563a267bee66f3a1f76cf08af153f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c0563a267bee66f3a1f76cf08af153f">&#9670;&nbsp;</a></span>FindLastSubString_NoCase()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::FindLastSubString_NoCase </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStringToFind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns a pointer to the last occurrence of szStringToFind, or nullptr if none was found. Case insensitive. szStartSearchAt allows to start searching at the end of the string (if it is nullptr) or at an earlier position. </p>

</div>
</div>
<a id="af672ce6437cd3c9d17b3267cfa834b48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af672ce6437cd3c9d17b3267cfa834b48">&#9670;&nbsp;</a></span>FindSubString()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const char * <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::FindSubString </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStringToFind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns a pointer to the first occurrence of szStringToFind, or nullptr if none was found. To find the next occurrence, use an <a class="el" href="../../de/db8/structez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> which points to the next position and call FindSubString again. </p>

</div>
</div>
<a id="a139af1709f27a801b784a3f4bd2c12ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a139af1709f27a801b784a3f4bd2c12ed">&#9670;&nbsp;</a></span>FindSubString_NoCase()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const char * <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::FindSubString_NoCase </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStringToFind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns a pointer to the first occurrence of szStringToFind, or nullptr if none was found. Case insensitive. To find the next occurrence, use an <a class="el" href="../../de/db8/structez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> which points to the next position and call FindSubString again. </p>

</div>
</div>
<a id="a7990e9f9c36231cd41af33a25f96dbc6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7990e9f9c36231cd41af33a25f96dbc6">&#9670;&nbsp;</a></span>FindWholeWord()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::FindWholeWord </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a>&#160;</td>
          <td class="paramname"><em>IsDelimiterCB</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Searches for the word szSearchFor. If IsDelimiterCB returns true for both characters in front and back of the word, the position is returned. Otherwise nullptr. </p>

</div>
</div>
<a id="a696c890e2e534cfc0af94091f0f0a5f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a696c890e2e534cfc0af94091f0f0a5f6">&#9670;&nbsp;</a></span>FindWholeWord_NoCase()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::FindWholeWord_NoCase </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a>&#160;</td>
          <td class="paramname"><em>IsDelimiterCB</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Searches for the word szSearchFor. If IsDelimiterCB returns true for both characters in front and back of the word, the position is returned. Otherwise nullptr. Ignores case. </p>

</div>
</div>
<a id="a3821af6b610f6c40a46336f7accc0c7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3821af6b610f6c40a46336f7accc0c7e">&#9670;&nbsp;</a></span>GetIteratorBack()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::<a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">reverse_iterator</a> <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::GetIteratorBack</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an iterator to this string, which points to the very last character (NOT the end). </p>
<p>Note that this iterator will only be valid as long as this string lives. Once the original string is destroyed, all iterators to them will point into invalid memory. </p>

</div>
</div>
<a id="a630aa4b168172aef7b32f8085148ed8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a630aa4b168172aef7b32f8085148ed8e">&#9670;&nbsp;</a></span>GetIteratorFront()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Derived &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::<a class="el" href="../../d4/ddc/structez_string_iterator.htm">iterator</a> <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a>&lt; Derived &gt;::GetIteratorFront</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an iterator to this string, which points to the very first character. </p>
<p>Note that this iterator will only be valid as long as this string lives. Once the original string is destroyed, all iterators to them will point into invalid memory. </p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../da/d9c/_string_base_8h_source.htm">StringBase.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../d4/d98/_string_base__inl_8h_source.htm">StringBase_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase</a></li>
    <li class="footer">Generated on Tue Jun 8 2021 21:43:23 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
