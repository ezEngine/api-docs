<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/Implementation/Math_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d6/dd4/_math__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Math_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../db/d78/namespaceez_math.htm">ezMath</a></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;{</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00008"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#ac8095066778945106aee5b72279e9daf">    8</a></span>&#160;  constexpr EZ_ALWAYS_INLINE T <a class="code" href="../../db/d78/namespaceez_math.htm#adfc8bc546fb58a0280cce97f9a40f324">Square</a>(T f)</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  {</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;    <span class="keywordflow">return</span> (f * f);</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  }</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a16900708b1339635f7beae1ed10310db">   14</a></span>&#160;  constexpr EZ_ALWAYS_INLINE T <a class="code" href="../../db/d78/namespaceez_math.htm#a916b088a06b14fe88660d630f8f63489">Sign</a>(T f)</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  {</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <span class="keywordflow">return</span> (f &lt; 0 ? T(-1) : f &gt; 0 ? T(1)</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;                                  : 0);</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  }</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a028afb5ac41bc6ca67d592ea0090bf06">   21</a></span>&#160;  constexpr EZ_ALWAYS_INLINE T <a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">Abs</a>(T f)</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  {</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">return</span> (f &lt; 0 ? -f : f);</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  }</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a5770a829d6885f2169ba6c9598f7473c">   27</a></span>&#160;  constexpr EZ_ALWAYS_INLINE T <a class="code" href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">Min</a>(T f1, T f2)</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  {</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordflow">return</span> (f2 &lt; f1 ? f2 : f1);</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  }</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ARGS&gt;</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#ab989df9ee8187e4224ec8c61fb51bee1">   33</a></span>&#160;  constexpr EZ_ALWAYS_INLINE T <a class="code" href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">Min</a>(T f1, T f2, ARGS... f)</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">Min</a>(<a class="code" href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">Min</a>(f1, f2), f...);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  }</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#ab65962f013f9265ca5e31684e42e14dc">   39</a></span>&#160;  constexpr EZ_ALWAYS_INLINE T <a class="code" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">Max</a>(T f1, T f2)</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  {</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">return</span> (f1 &lt; f2 ? f2 : f1);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  }</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ARGS&gt;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  constexpr EZ_ALWAYS_INLINE T <a class="code" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">Max</a>(T f1, T f2, ARGS... f)</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">Max</a>(<a class="code" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">Max</a>(f1, f2), f...);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  }</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a3c7e949ebcc9c4eee3d1aeb17787edc8">   51</a></span>&#160;  constexpr EZ_ALWAYS_INLINE T <a class="code" href="../../db/d78/namespaceez_math.htm#aaaedc100ad5d35ae5362021b9d1b0e7c">Clamp</a>(T value, T min_val, T max_val)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> value &lt; min_val ? min_val : (max_val &lt; value ? max_val : value);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  }</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a6197d5ec11b917a28264a323bd0d9483">   57</a></span>&#160;  constexpr EZ_ALWAYS_INLINE T <a class="code" href="../../db/d78/namespaceez_math.htm#ade0bbc96e88750c5d07fed586baa0bd6">Saturate</a>(T value)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../db/d78/namespaceez_math.htm#aaaedc100ad5d35ae5362021b9d1b0e7c">Clamp</a>(value, T(0), T(1));</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  }</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#ac0dc1e649849596eedbfa9f54894d779">   63</a></span>&#160;  constexpr Type <a class="code" href="../../db/d78/namespaceez_math.htm#ac0dc1e649849596eedbfa9f54894d779">Invert</a>(Type f)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">return</span> ((Type)1) / f;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#abd76211cdc2079aa00a24f3bc1ea2600">   68</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../db/d78/namespaceez_math.htm#abd76211cdc2079aa00a24f3bc1ea2600">FirstBitLow</a>(ezUInt32 value)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    EZ_ASSERT_DEBUG(value != 0, <span class="stringliteral">&quot;FirstBitLow is undefined for 0&quot;</span>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_PLATFORM_WINDOWS)</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> uiIndex = 0;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    _BitScanForward(&amp;uiIndex, value);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> uiIndex;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#elif EZ_ENABLED(EZ_COMPILER_GCC) || EZ_ENABLED(EZ_COMPILER_CLANG)</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span> __builtin_ctz(value);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    EZ_ASSERT_NOT_IMPLEMENTED;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  }</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a0c2e2218f3595181ce4e63a7795a758e">   84</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../db/d78/namespaceez_math.htm#a0c2e2218f3595181ce4e63a7795a758e">FirstBitHigh</a>(ezUInt32 value)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    EZ_ASSERT_DEBUG(value != 0, <span class="stringliteral">&quot;FirstBitHigh is undefined for 0&quot;</span>);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_PLATFORM_WINDOWS)</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> uiIndex = 0;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    _BitScanReverse(&amp;uiIndex, value);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">return</span> uiIndex;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">#elif EZ_ENABLED(EZ_COMPILER_GCC) || EZ_ENABLED(EZ_COMPILER_CLANG)</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> 31 - __builtin_clz(value);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    EZ_ASSERT_NOT_IMPLEMENTED;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#ab3db4a1a4366c91500898f51655106c8">  100</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../db/d78/namespaceez_math.htm#ab3db4a1a4366c91500898f51655106c8">CountTrailingZeros</a>(ezUInt32 bitmask) { <span class="keywordflow">return</span> (bitmask == 0) ? 32 : <a class="code" href="../../db/d78/namespaceez_math.htm#abd76211cdc2079aa00a24f3bc1ea2600">FirstBitLow</a>(bitmask); }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a6d80fc61efd28c8667541f05ad63936e">  102</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../db/d78/namespaceez_math.htm#a6d80fc61efd28c8667541f05ad63936e">CountLeadingZeros</a>(ezUInt32 bitmask) { <span class="keywordflow">return</span> (bitmask == 0) ? 32 : (31u - <a class="code" href="../../db/d78/namespaceez_math.htm#a0c2e2218f3595181ce4e63a7795a758e">FirstBitHigh</a>(bitmask)); }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a6a78ee109368657dafd74a19d26d6b7c">  105</a></span>&#160;  EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../db/d78/namespaceez_math.htm#a6a78ee109368657dafd74a19d26d6b7c">CountBits</a>(ezUInt32 value)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_COMPILER_MSVC) &amp;&amp; (EZ_ENABLED(EZ_PLATFORM_ARCH_X86) || (EZ_ENABLED(EZ_PLATFORM_ARCH_ARM) &amp;&amp; EZ_ENABLED(EZ_PLATFORM_32BIT)))</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">#  if EZ_ENABLED(EZ_PLATFORM_ARCH_X86)</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> __popcnt(value);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">#  else</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> _CountOneBits(value);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">#  endif</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">#elif EZ_ENABLED(EZ_COMPILER_GCC) || EZ_ENABLED(EZ_COMPILER_CLANG)</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> __builtin_popcount(value);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    value = value - ((value &gt;&gt; 1) &amp; 0x55555555u);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    value = (value &amp; 0x33333333u) + ((value &gt;&gt; 2) &amp; 0x33333333u);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">return</span> ((value + (value &gt;&gt; 4) &amp; 0xF0F0F0Fu) * 0x1010101u) &gt;&gt; 24;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#afdb28b5681c0c0a705e427deb267adc0">  123</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../db/d78/namespaceez_math.htm#ac2cacaea5875d86a0459205bfd82ed13">Swap</a>(T&amp; f1, T&amp; f2)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    std::swap(f1, f2);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a4ec837032f4fd43bc41ed87a67addd47">  129</a></span>&#160;  EZ_FORCE_INLINE T <a class="code" href="../../db/d78/namespaceez_math.htm#a7c8048f0378ce04e04d5c2a444140316">Lerp</a>(T f1, T f2, <span class="keywordtype">float</span> factor)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="comment">// value is not included in format string, to prevent requirement on FormatString.h, to break #include cycles</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    EZ_ASSERT_DEBUG((factor &gt;= -0.00001f) &amp;&amp; (factor &lt;= 1.0f + 0.00001f), <span class="stringliteral">&quot;lerp: factor is not in the range [0; 1]&quot;</span>);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">return</span> (T)(f1 + (factor * (f2 - f1)));</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a7a3f0a3d7fac5fe0a947153d92e57aa6">  138</a></span>&#160;  EZ_FORCE_INLINE T <a class="code" href="../../db/d78/namespaceez_math.htm#a7c8048f0378ce04e04d5c2a444140316">Lerp</a>(T f1, T f2, <span class="keywordtype">double</span> factor)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// value is not included in format string, to prevent requirement on FormatString.h, to break #include cycles</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    EZ_ASSERT_DEBUG((factor &gt;= -0.00001) &amp;&amp; (factor &lt;= 1.0 + 0.00001), <span class="stringliteral">&quot;lerp: factor is not in the range [0; 1]&quot;</span>);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">return</span> (T)(f1 + (factor * (f2 - f1)));</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a1ff7a4d6f62b3a061617690fe04e4433">  148</a></span>&#160;  constexpr EZ_FORCE_INLINE T <a class="code" href="../../db/d78/namespaceez_math.htm#ac3f7bcae4b9569e58e64417ba8b622f5">Step</a>(T value, T edge)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">return</span> (value &gt;= edge ? T(1) : T(0));</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a194e5582f9a01688fc03e4620e231d29">  153</a></span>&#160;  constexpr EZ_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../db/d78/namespaceez_math.htm#a194e5582f9a01688fc03e4620e231d29">IsPowerOf2</a>(ezInt32 value) { <span class="keywordflow">return</span> (value &lt; 1) ? false : ((value &amp; (value - 1)) == 0); }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#aa96f5ff328740dfa93f287fbf4735f6e">  155</a></span>&#160;  constexpr EZ_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../db/d78/namespaceez_math.htm#a194e5582f9a01688fc03e4620e231d29">IsPowerOf2</a>(ezUInt32 value) { <span class="keywordflow">return</span> (value &lt; 1) ? false : ((value &amp; (value - 1)) == 0); }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#aa15fef5dd09bffb82b0d3ce5d7de3255">  158</a></span>&#160;  constexpr <span class="keywordtype">bool</span> <a class="code" href="../../db/d78/namespaceez_math.htm#aa15fef5dd09bffb82b0d3ce5d7de3255">IsEqual</a>(Type lhs, Type rhs, Type fEpsilon)</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">return</span> ((rhs &gt;= lhs - fEpsilon) &amp;&amp; (rhs &lt;= lhs + fEpsilon));</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a10792fb5bb86f18f94fcd0dc2e10e0cf">  164</a></span>&#160;  constexpr <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../db/d78/namespaceez_math.htm#a10792fb5bb86f18f94fcd0dc2e10e0cf">IsInRange</a>(T Value, T MinVal, T MaxVal)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">return</span> MinVal &lt; MaxVal ? (Value &gt;= MinVal) &amp;&amp; (Value &lt;= MaxVal) : (Value &lt;= MinVal) &amp;&amp; (Value &gt;= MaxVal);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#ad0c686588a98fa8c07722fc48f1ffd7f">  170</a></span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../db/d78/namespaceez_math.htm#ad0c686588a98fa8c07722fc48f1ffd7f">IsZero</a>(Type f, Type fEpsilon)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    EZ_ASSERT_DEBUG(fEpsilon &gt;= 0, <span class="stringliteral">&quot;Epsilon may not be negative.&quot;</span>);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">return</span> ((f &gt;= -fEpsilon) &amp;&amp; (f &lt;= fEpsilon));</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a1ffb0ca4148c7d48e792c95d6a35690c">  178</a></span>&#160;  EZ_ALWAYS_INLINE Type <a class="code" href="../../db/d78/namespaceez_math.htm#a89a5cb364bf8bf76155b42b477e2540a">Trunc</a>(Type f)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  {</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">if</span> (f &gt; 0)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;      <span class="keywordflow">return</span> Floor(f);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">return</span> Ceil(f);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#ab8c63bd7f60b10407f8b832899d20c7c">  187</a></span>&#160;  EZ_ALWAYS_INLINE Type <a class="code" href="../../db/d78/namespaceez_math.htm#ab6648cbd915168c7e2b5d4a922ee1974">Fraction</a>(Type f)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">return</span> (f - <a class="code" href="../../db/d78/namespaceez_math.htm#a89a5cb364bf8bf76155b42b477e2540a">Trunc</a>(f));</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#ae5e77037bdf9e792c81afa239f70ad7a">  193</a></span>&#160;  <span class="keyword">inline</span> Type <a class="code" href="../../db/d78/namespaceez_math.htm#ae5e77037bdf9e792c81afa239f70ad7a">SmoothStep</a>(Type x, Type edge1, Type edge2)</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">const</span> Type divider = edge2 - edge1;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">if</span> (divider == (Type)0)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;      <span class="keywordflow">if</span> (x &gt;= edge2)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">return</span> (Type)1;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;      <span class="keywordflow">return</span> (Type)0;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    x = (x - edge1) / divider;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordflow">if</span> (x &lt;= (Type)0)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;      <span class="keywordflow">return</span> (Type)0;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">if</span> (x &gt;= (Type)1)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;      <span class="keywordflow">return</span> (Type)1;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">return</span> (x * x * ((Type)3 - ((Type)2 * x)));</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a457021bab9536d2908c2a0e3cafed9ac">  214</a></span>&#160;  <span class="keyword">inline</span> ezUInt8 <a class="code" href="../../db/d78/namespaceez_math.htm#a457021bab9536d2908c2a0e3cafed9ac">ColorFloatToByte</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">if</span> (IsNaN(value))</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>ezUInt8<span class="keyword">&gt;</span>(<a class="code" href="../../db/d78/namespaceez_math.htm#ade0bbc96e88750c5d07fed586baa0bd6">Saturate</a>(value) * 255.0f + 0.5f);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a30569f90ca9871c3f39ab6090bfa5d1e">  228</a></span>&#160;  <span class="keyword">inline</span> ezUInt16 <a class="code" href="../../db/d78/namespaceez_math.htm#a30569f90ca9871c3f39ab6090bfa5d1e">ColorFloatToShort</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">if</span> (IsNaN(value))</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    {</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>ezUInt16<span class="keyword">&gt;</span>(<a class="code" href="../../db/d78/namespaceez_math.htm#ade0bbc96e88750c5d07fed586baa0bd6">Saturate</a>(value) * 65535.0f + 0.5f);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  }</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; </div>
<div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a156f52cf5bf3a533b7a3525aaf0f4f7a">  242</a></span>&#160;  <span class="keyword">inline</span> ezInt8 <a class="code" href="../../db/d78/namespaceez_math.htm#a156f52cf5bf3a533b7a3525aaf0f4f7a">ColorFloatToSignedByte</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">if</span> (IsNaN(value))</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    }</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;      value = <a class="code" href="../../db/d78/namespaceez_math.htm#aaaedc100ad5d35ae5362021b9d1b0e7c">Clamp</a>(value, -1.0f, 1.0f) * 127.0f;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;      <span class="keywordflow">if</span> (value &gt;= 0.0f)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      {</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        value += 0.5f;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;      }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;      {</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        value -= 0.5f;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;      }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>ezInt8<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#ad79cf3137df7949cc1ab78d3c72f785b">  265</a></span>&#160;  <span class="keyword">inline</span> ezInt16 <a class="code" href="../../db/d78/namespaceez_math.htm#ad79cf3137df7949cc1ab78d3c72f785b">ColorFloatToSignedShort</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  {</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">if</span> (IsNaN(value))</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;      value = <a class="code" href="../../db/d78/namespaceez_math.htm#aaaedc100ad5d35ae5362021b9d1b0e7c">Clamp</a>(value, -1.0f, 1.0f) * 32767.0f;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;      <span class="keywordflow">if</span> (value &gt;= 0.0f)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;      {</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        value += 0.5f;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;      }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;      {</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        value -= 0.5f;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;      }</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>ezInt16<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    }</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160; </div>
<div class="line"><a name="l00288"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a7cd11d5080a5fa2de5dcb370c52b3df1">  288</a></span>&#160;  constexpr <span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="../../db/d78/namespaceez_math.htm#a7cd11d5080a5fa2de5dcb370c52b3df1">ColorByteToFloat</a>(ezUInt8 value)</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  {</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">return</span> value * (1.0f / 255.0f);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a900c21bd68b35b424f5b9062dc8d01dc">  295</a></span>&#160;  constexpr <span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="../../db/d78/namespaceez_math.htm#a900c21bd68b35b424f5b9062dc8d01dc">ColorShortToFloat</a>(ezUInt16 value)</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">return</span> value * (1.0f / 65535.0f);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  }</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a808d5693a74e2431e20be639af567135">  302</a></span>&#160;  constexpr <span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="../../db/d78/namespaceez_math.htm#a808d5693a74e2431e20be639af567135">ColorSignedByteToFloat</a>(ezInt8 value)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordflow">return</span> (value == -128) ? -1.0f : value * (1.0f / 127.0f);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  }</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a5542431bf5124093dcea8d21cff1df7b">  309</a></span>&#160;  constexpr <span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="../../db/d78/namespaceez_math.htm#a5542431bf5124093dcea8d21cff1df7b">ColorSignedShortToFloat</a>(ezInt16 value)</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">return</span> (value == -32768) ? -1.0f : value * (1.0f / 32767.0f);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  }</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> T2&gt;</div>
<div class="line"><a name="l00317"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#abe0f677cabbc6c19aa2dfdc514e21780">  317</a></span>&#160;  T <a class="code" href="../../db/d78/namespaceez_math.htm#abe0f677cabbc6c19aa2dfdc514e21780">EvaluateBezierCurve</a>(T2 t, <span class="keyword">const</span> T&amp; startPoint, <span class="keyword">const</span> T&amp; controlPoint1, <span class="keyword">const</span> T&amp; controlPoint2, <span class="keyword">const</span> T&amp; endPoint)</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  {</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keyword">const</span> T2 mt = 1 - t;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160; </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keyword">const</span> T2 f1 = mt * mt * mt;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keyword">const</span> T2 f2 = 3 * mt * mt * t;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">const</span> T2 f3 = 3 * mt * t * t;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keyword">const</span> T2 f4 = t * t * t;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">return</span> f1 * startPoint + f2 * controlPoint1 + f3 * controlPoint2 + f4 * endPoint;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  }</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;} <span class="comment">// namespace ezMath</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="../../db/d6f/classez_angle.htm#a40c9e62d8a12f9bfd59115f3f3050ab4">  330</a></span>&#160;constexpr EZ_FORCE_INLINE <a class="code" href="../../db/d6f/classez_angle.htm">ezAngle</a> <a class="code" href="../../db/d6f/classez_angle.htm#a40c9e62d8a12f9bfd59115f3f3050ab4">ezAngle::AngleBetween</a>(<a class="code" href="../../db/d6f/classez_angle.htm">ezAngle</a> a, <a class="code" href="../../db/d6f/classez_angle.htm">ezAngle</a> b)</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;{</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  <span class="comment">// taken from http://gamedev.stackexchange.com/questions/4467/comparing-angles-and-working-out-the-difference</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../db/d6f/classez_angle.htm#a4313120f7698856e3215669339486c83">ezAngle</a>(Pi&lt;float&gt;() - <a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(<a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(a.<a class="code" href="../../db/d6f/classez_angle.htm#ad0abad83b3f0b0ff5427034dc99111d0">GetRadian</a>() - b.<a class="code" href="../../db/d6f/classez_angle.htm#ad0abad83b3f0b0ff5427034dc99111d0">GetRadian</a>()) - Pi&lt;float&gt;()));</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;}</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160; </div>
<div class="line"><a name="l00336"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a9781d1a2a59d4b4e8d453a0321b659ca">  336</a></span>&#160;constexpr EZ_FORCE_INLINE ezInt32 <a class="code" href="../../db/d78/namespaceez_math.htm#a9781d1a2a59d4b4e8d453a0321b659ca">ezMath::FloatToInt</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;{</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>ezInt32<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;}</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="preprocessor">#if EZ_DISABLED(EZ_PLATFORM_ARCH_X86) || (_MSC_VER &lt;= 1916)</span></div>
<div class="line"><a name="l00342"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#ab661467737e33099b0a94eeb07a298e6">  342</a></span>&#160;constexpr EZ_FORCE_INLINE ezInt64 <a class="code" href="../../db/d78/namespaceez_math.htm#a9781d1a2a59d4b4e8d453a0321b659ca">ezMath::FloatToInt</a>(<span class="keywordtype">double</span> value)</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>ezInt64<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;}</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="../../db/d78/namespaceez_math.htm#a51839bd1bc0218c3f3f3cac03b3c2fd1">  348</a></span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="code" href="../../db/d78/namespaceez_math.htm#a51839bd1bc0218c3f3f3cac03b3c2fd1">ezMath::TryConvertToSizeT</a>(<span class="keywordtype">size_t</span>&amp; out_Result, ezUInt64 uiValue)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;{</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_PLATFORM_32BIT)</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <span class="keywordflow">if</span> (uiValue &lt;= MaxValue&lt;size_t&gt;())</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  {</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    out_Result = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(uiValue);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  }</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160; </div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  out_Result = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(uiValue);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;}</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_PLATFORM_64BIT)</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">size_t</span> <a class="code" href="../../db/d78/namespaceez_math.htm#a8448ef254ee34432d1fa3c2718dc1dd7">ezMath::SafeConvertToSizeT</a>(ezUInt64 uiValue)</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;{</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  <span class="keywordflow">return</span> uiValue;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;}</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespaceez_math_htm_ae5e77037bdf9e792c81afa239f70ad7a"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ae5e77037bdf9e792c81afa239f70ad7a">ezMath::SmoothStep</a></div><div class="ttdeci">Type SmoothStep(Type x, Type edge1, Type edge2)</div><div class="ttdoc">Returns 0, if value is &lt;= edge1, 1 if value &gt;= edge2 and the hermite interpolation in between.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:193</div></div>
<div class="ttc" id="astructez_result_htm"><div class="ttname"><a href="../../d4/da9/structez_result.htm">ezResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition:</b> Types.h:50</div></div>
<div class="ttc" id="anamespaceez_math_htm_ab3db4a1a4366c91500898f51655106c8"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ab3db4a1a4366c91500898f51655106c8">ezMath::CountTrailingZeros</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 CountTrailingZeros(ezUInt32 bitmask)</div><div class="ttdef"><b>Definition:</b> Math_inl.h:100</div></div>
<div class="ttc" id="anamespaceez_math_htm_a9781d1a2a59d4b4e8d453a0321b659ca"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a9781d1a2a59d4b4e8d453a0321b659ca">ezMath::FloatToInt</a></div><div class="ttdeci">constexpr ezInt32 FloatToInt(float value)</div><div class="ttdoc">Casts the float to an integer, removes the fractional part.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:336</div></div>
<div class="ttc" id="anamespaceez_math_htm_ab6648cbd915168c7e2b5d4a922ee1974"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ab6648cbd915168c7e2b5d4a922ee1974">ezMath::Fraction</a></div><div class="ttdeci">EZ_ALWAYS_INLINE Type Fraction(Type f)</div><div class="ttdoc">Returns the fraction-part of f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:187</div></div>
<div class="ttc" id="aclassez_angle_htm_a40c9e62d8a12f9bfd59115f3f3050ab4"><div class="ttname"><a href="../../db/d6f/classez_angle.htm#a40c9e62d8a12f9bfd59115f3f3050ab4">ezAngle::AngleBetween</a></div><div class="ttdeci">constexpr static ezAngle AngleBetween(ezAngle a, ezAngle b)</div><div class="ttdoc">Computes the smallest angle between the two given angles. The angle will always be a positive value.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:330</div></div>
<div class="ttc" id="anamespaceez_math_htm_a7cd11d5080a5fa2de5dcb370c52b3df1"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a7cd11d5080a5fa2de5dcb370c52b3df1">ezMath::ColorByteToFloat</a></div><div class="ttdeci">constexpr float ColorByteToFloat(ezUInt8 value)</div><div class="ttdoc">Converts a color value from unsigned byte [0;255] range to float [0;1] range, with proper rounding.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:288</div></div>
<div class="ttc" id="anamespaceez_math_htm_ac0dc1e649849596eedbfa9f54894d779"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ac0dc1e649849596eedbfa9f54894d779">ezMath::Invert</a></div><div class="ttdeci">constexpr Type Invert(Type f)</div><div class="ttdoc">Returns 1 / f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:63</div></div>
<div class="ttc" id="anamespaceez_math_htm_a6d80fc61efd28c8667541f05ad63936e"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a6d80fc61efd28c8667541f05ad63936e">ezMath::CountLeadingZeros</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 CountLeadingZeros(ezUInt32 bitmask)</div><div class="ttdef"><b>Definition:</b> Math_inl.h:102</div></div>
<div class="ttc" id="aclassez_angle_htm_ad0abad83b3f0b0ff5427034dc99111d0"><div class="ttname"><a href="../../db/d6f/classez_angle.htm#ad0abad83b3f0b0ff5427034dc99111d0">ezAngle::GetRadian</a></div><div class="ttdeci">constexpr float GetRadian() const</div><div class="ttdoc">Returns the radian value. (No need for any conversion)</div><div class="ttdef"><b>Definition:</b> Angle_inl.h:48</div></div>
<div class="ttc" id="anamespaceez_math_htm_a89a5cb364bf8bf76155b42b477e2540a"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a89a5cb364bf8bf76155b42b477e2540a">ezMath::Trunc</a></div><div class="ttdeci">EZ_ALWAYS_INLINE Type Trunc(Type f)</div><div class="ttdoc">Returns the integer-part of f (removes the fraction).</div><div class="ttdef"><b>Definition:</b> Math_inl.h:178</div></div>
<div class="ttc" id="anamespaceez_math_htm_abd76211cdc2079aa00a24f3bc1ea2600"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#abd76211cdc2079aa00a24f3bc1ea2600">ezMath::FirstBitLow</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 FirstBitLow(ezUInt32 value)</div><div class="ttdoc">Returns the index of the least significant bit set.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:68</div></div>
<div class="ttc" id="anamespaceez_math_htm_a194e5582f9a01688fc03e4620e231d29"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a194e5582f9a01688fc03e4620e231d29">ezMath::IsPowerOf2</a></div><div class="ttdeci">constexpr EZ_FORCE_INLINE bool IsPowerOf2(ezInt32 value)</div><div class="ttdoc">Returns true, if there exists some x with 2^x == value.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:153</div></div>
<div class="ttc" id="anamespaceez_math_htm_a51839bd1bc0218c3f3f3cac03b3c2fd1"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a51839bd1bc0218c3f3f3cac03b3c2fd1">ezMath::TryConvertToSizeT</a></div><div class="ttdeci">ezResult TryConvertToSizeT(size_t &amp;out_Result, ezUInt64 uiValue)</div><div class="ttdoc">Checks whether the given 64bit value actually fits into size_t, If it doesn't EZ_FAILURE is returned.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:348</div></div>
<div class="ttc" id="anamespaceez_math_htm_a7c8048f0378ce04e04d5c2a444140316"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a7c8048f0378ce04e04d5c2a444140316">ezMath::Lerp</a></div><div class="ttdeci">EZ_FORCE_INLINE T Lerp(T f1, T f2, float factor)</div><div class="ttdoc">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:129</div></div>
<div class="ttc" id="anamespaceez_math_htm_a900c21bd68b35b424f5b9062dc8d01dc"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a900c21bd68b35b424f5b9062dc8d01dc">ezMath::ColorShortToFloat</a></div><div class="ttdeci">constexpr float ColorShortToFloat(ezUInt16 value)</div><div class="ttdoc">Converts a color value from unsigned short [0;65535] range to float [0;1] range, with proper rounding...</div><div class="ttdef"><b>Definition:</b> Math_inl.h:295</div></div>
<div class="ttc" id="anamespaceez_math_htm_a6f7ee19d0f8e81ff6ae5f394075e3a56"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:39</div></div>
<div class="ttc" id="anamespaceez_math_htm_a156f52cf5bf3a533b7a3525aaf0f4f7a"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a156f52cf5bf3a533b7a3525aaf0f4f7a">ezMath::ColorFloatToSignedByte</a></div><div class="ttdeci">ezInt8 ColorFloatToSignedByte(float value)</div><div class="ttdoc">Converts a color value from float [-1;1] range to signed byte [-127;127] range, with proper rounding.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:242</div></div>
<div class="ttc" id="anamespaceez_math_htm_a0c2e2218f3595181ce4e63a7795a758e"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a0c2e2218f3595181ce4e63a7795a758e">ezMath::FirstBitHigh</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 FirstBitHigh(ezUInt32 value)</div><div class="ttdoc">Returns the index of the most significant bit set.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:84</div></div>
<div class="ttc" id="anamespaceez_math_htm_a746232810344aec07f7b870fa302fa8f"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Abs(T f)</div><div class="ttdoc">Returns the absolute value of f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:21</div></div>
<div class="ttc" id="aclassez_angle_htm_a4313120f7698856e3215669339486c83"><div class="ttname"><a href="../../db/d6f/classez_angle.htm#a4313120f7698856e3215669339486c83">ezAngle::ezAngle</a></div><div class="ttdeci">constexpr ezAngle()</div><div class="ttdoc">Standard constructor, initializing with 0.</div><div class="ttdef"><b>Definition:</b> Angle.h:39</div></div>
<div class="ttc" id="anamespaceez_math_htm_aaaedc100ad5d35ae5362021b9d1b0e7c"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#aaaedc100ad5d35ae5362021b9d1b0e7c">ezMath::Clamp</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Clamp(T value, T min_val, T max_val)</div><div class="ttdoc">Clamps &quot;value&quot; to the range [min; max]. Returns &quot;value&quot;, if it is inside the range already.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:51</div></div>
<div class="ttc" id="anamespaceez_math_htm_ac3f7bcae4b9569e58e64417ba8b622f5"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ac3f7bcae4b9569e58e64417ba8b622f5">ezMath::Step</a></div><div class="ttdeci">constexpr EZ_FORCE_INLINE T Step(T value, T edge)</div><div class="ttdoc">Returns 0, if value &lt; edge, and 1, if value &gt;= edge.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:148</div></div>
<div class="ttc" id="anamespaceez_math_htm_ad79cf3137df7949cc1ab78d3c72f785b"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ad79cf3137df7949cc1ab78d3c72f785b">ezMath::ColorFloatToSignedShort</a></div><div class="ttdeci">ezInt16 ColorFloatToSignedShort(float value)</div><div class="ttdoc">Converts a color value from float [-1;1] range to signed short [-32767;32767] range,...</div><div class="ttdef"><b>Definition:</b> Math_inl.h:265</div></div>
<div class="ttc" id="anamespaceez_math_htm_a10792fb5bb86f18f94fcd0dc2e10e0cf"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a10792fb5bb86f18f94fcd0dc2e10e0cf">ezMath::IsInRange</a></div><div class="ttdeci">constexpr bool IsInRange(T Value, T MinVal, T MaxVal)</div><div class="ttdoc">Checks whether the value of the first parameter lies between the value of the second and third.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:164</div></div>
<div class="ttc" id="anamespaceez_math_htm_abe0f677cabbc6c19aa2dfdc514e21780"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#abe0f677cabbc6c19aa2dfdc514e21780">ezMath::EvaluateBezierCurve</a></div><div class="ttdeci">T EvaluateBezierCurve(T2 t, const T &amp;startPoint, const T &amp;controlPoint1, const T &amp;controlPoint2, const T &amp;endPoint)</div><div class="ttdoc">Evaluates the cubic spline defined by four control points at time t and returns the interpolated resu...</div><div class="ttdef"><b>Definition:</b> Math_inl.h:317</div></div>
<div class="ttc" id="anamespaceez_math_htm_ad0c686588a98fa8c07722fc48f1ffd7f"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ad0c686588a98fa8c07722fc48f1ffd7f">ezMath::IsZero</a></div><div class="ttdeci">bool IsZero(Type f, Type fEpsilon)</div><div class="ttdoc">Checks whether the given number is close to zero.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:170</div></div>
<div class="ttc" id="anamespaceez_math_htm_a916b088a06b14fe88660d630f8f63489"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a916b088a06b14fe88660d630f8f63489">ezMath::Sign</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Sign(T f)</div><div class="ttdoc">Returns the sign of f (i.e: -1, 1 or 0)</div><div class="ttdef"><b>Definition:</b> Math_inl.h:14</div></div>
<div class="ttc" id="anamespaceez_math_htm_a5542431bf5124093dcea8d21cff1df7b"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a5542431bf5124093dcea8d21cff1df7b">ezMath::ColorSignedShortToFloat</a></div><div class="ttdeci">constexpr float ColorSignedShortToFloat(ezInt16 value)</div><div class="ttdoc">Converts a color value from signed short [-32768;32767] range to float [0;1] range,...</div><div class="ttdef"><b>Definition:</b> Math_inl.h:309</div></div>
<div class="ttc" id="anamespaceez_math_htm_a30569f90ca9871c3f39ab6090bfa5d1e"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a30569f90ca9871c3f39ab6090bfa5d1e">ezMath::ColorFloatToShort</a></div><div class="ttdeci">ezUInt16 ColorFloatToShort(float value)</div><div class="ttdoc">Converts a color value from float [0;1] range to unsigned short [0;65535] range, with proper rounding...</div><div class="ttdef"><b>Definition:</b> Math_inl.h:228</div></div>
<div class="ttc" id="anamespaceez_math_htm_a808d5693a74e2431e20be639af567135"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a808d5693a74e2431e20be639af567135">ezMath::ColorSignedByteToFloat</a></div><div class="ttdeci">constexpr float ColorSignedByteToFloat(ezInt8 value)</div><div class="ttdoc">Converts a color value from signed byte [-128;127] range to float [-1;1] range, with proper rounding.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:302</div></div>
<div class="ttc" id="aclassez_angle_htm"><div class="ttname"><a href="../../db/d6f/classez_angle.htm">ezAngle</a></div><div class="ttdoc">Float wrapper struct for a safe usage and conversions of angles.</div><div class="ttdef"><b>Definition:</b> Angle.h:9</div></div>
<div class="ttc" id="anamespaceez_math_htm"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm">ezMath</a></div><div class="ttdoc">This namespace provides common math-functionality as functions.</div><div class="ttdef"><b>Definition:</b> Constants.h:5</div></div>
<div class="ttc" id="anamespaceez_math_htm_ad8009b4da9cb427658d71e30576f209e"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">ezMath::Min</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:27</div></div>
<div class="ttc" id="anamespaceez_math_htm_adfc8bc546fb58a0280cce97f9a40f324"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#adfc8bc546fb58a0280cce97f9a40f324">ezMath::Square</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Square(T f)</div><div class="ttdoc">Returns f * f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:8</div></div>
<div class="ttc" id="anamespaceez_math_htm_ade0bbc96e88750c5d07fed586baa0bd6"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ade0bbc96e88750c5d07fed586baa0bd6">ezMath::Saturate</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Saturate(T value)</div><div class="ttdoc">Clamps &quot;value&quot; to the range [0; 1]. Returns &quot;value&quot;, if it is inside the range already.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:57</div></div>
<div class="ttc" id="anamespaceez_math_htm_aa15fef5dd09bffb82b0d3ce5d7de3255"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#aa15fef5dd09bffb82b0d3ce5d7de3255">ezMath::IsEqual</a></div><div class="ttdeci">constexpr bool IsEqual(Type lhs, Type rhs, Type fEpsilon)</div><div class="ttdoc">Checks, whether fValue is in the range [fDesired - fMaxImprecision; fDesired + fMaxImprecision].</div><div class="ttdef"><b>Definition:</b> Math_inl.h:158</div></div>
<div class="ttc" id="anamespaceez_math_htm_a457021bab9536d2908c2a0e3cafed9ac"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a457021bab9536d2908c2a0e3cafed9ac">ezMath::ColorFloatToByte</a></div><div class="ttdeci">ezUInt8 ColorFloatToByte(float value)</div><div class="ttdoc">Converts a color value from float [0;1] range to unsigned byte [0;255] range, with proper rounding.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:214</div></div>
<div class="ttc" id="anamespaceez_math_htm_a8448ef254ee34432d1fa3c2718dc1dd7"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a8448ef254ee34432d1fa3c2718dc1dd7">ezMath::SafeConvertToSizeT</a></div><div class="ttdeci">EZ_FOUNDATION_DLL size_t SafeConvertToSizeT(ezUInt64 uiValue)</div><div class="ttdoc">Checks whether the given 64bit value actually fits into size_t, If it doesn't the program is terminat...</div></div>
<div class="ttc" id="anamespaceez_math_htm_ac2cacaea5875d86a0459205bfd82ed13"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ac2cacaea5875d86a0459205bfd82ed13">ezMath::Swap</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void Swap(T &amp;f1, T &amp;f2)</div><div class="ttdoc">Swaps the values in the two variables f1 and f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:123</div></div>
<div class="ttc" id="anamespaceez_math_htm_a6a78ee109368657dafd74a19d26d6b7c"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a6a78ee109368657dafd74a19d26d6b7c">ezMath::CountBits</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 CountBits(ezUInt32 value)</div><div class="ttdoc">Returns the number of bits set.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:105</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_4ad0f5fbee83b30173e7fecedeea26f0.htm">Math</a></li><li class="navelem"><a class="el" href="../../dir_89ec743f7412cd7cb287fad7b6649245.htm">Implementation</a></li><li class="navelem"><b>Math_inl.h</b></li>
    <li class="footer">Generated on Tue Jun 8 2021 21:43:11 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
