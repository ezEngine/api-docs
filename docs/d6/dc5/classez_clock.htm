<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezClock Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search','.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d6/dc5/classez_clock.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="../../d8/d2b/classez_clock-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezClock Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A clock that can be speed up, slowed down, paused, etc. Useful for updating game logic, rendering, etc.  
 <a href="../../d6/dc5/classez_clock.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../dd/dba/_clock_8h_source.htm">Clock.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d1a/structez_clock_1_1_event_data.htm">EventData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The data that is sent through the event interface.  <a href="../../d5/d1a/structez_clock_1_1_event_data.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a6e36c2f7209acac6f42b6df3a5d58323"><td class="memItemLeft" align="right" valign="top"><a id="a6e36c2f7209acac6f42b6df3a5d58323"></a>
typedef <a class="el" href="../../d0/daf/classez_event.htm">ezEvent</a>&lt; const <a class="el" href="../../d5/d1a/structez_clock_1_1_event_data.htm">EventData</a> &amp;, <a class="el" href="../../dd/dbe/classez_mutex.htm">ezMutex</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>Event</b></td></tr>
<tr class="separator:a6e36c2f7209acac6f42b6df3a5d58323"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5ca8b8a7af1cf5430adc7ab470643fa0"><td class="memItemLeft" align="right" valign="top"><a id="a5ca8b8a7af1cf5430adc7ab470643fa0"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#a5ca8b8a7af1cf5430adc7ab470643fa0">ezClock</a> (const char *szName)</td></tr>
<tr class="memdesc:a5ca8b8a7af1cf5430adc7ab470643fa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor. <br /></td></tr>
<tr class="separator:a5ca8b8a7af1cf5430adc7ab470643fa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a973bf6b541313218411bb85e0a75a603"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#a973bf6b541313218411bb85e0a75a603">Reset</a> (bool bEverything)</td></tr>
<tr class="memdesc:a973bf6b541313218411bb85e0a75a603"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets all values to their default. E.g. call this after a new level has loaded to start fresh.  <a href="../../d6/dc5/classez_clock.htm#a973bf6b541313218411bb85e0a75a603">More...</a><br /></td></tr>
<tr class="separator:a973bf6b541313218411bb85e0a75a603"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a968d274719157a469fe4e8f7dc81e42c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#a968d274719157a469fe4e8f7dc81e42c">Update</a> ()</td></tr>
<tr class="memdesc:a968d274719157a469fe4e8f7dc81e42c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the clock using the time difference since the last call to <a class="el" href="../../d6/dc5/classez_clock.htm#a968d274719157a469fe4e8f7dc81e42c" title="Updates the clock using the time difference since the last call to Update().">Update()</a>.  <a href="../../d6/dc5/classez_clock.htm#a968d274719157a469fe4e8f7dc81e42c">More...</a><br /></td></tr>
<tr class="separator:a968d274719157a469fe4e8f7dc81e42c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc1fe284c9087923df4fec5ccab811a5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#abc1fe284c9087923df4fec5ccab811a5">SetTimeStepSmoothing</a> (<a class="el" href="../../d1/db8/classez_time_step_smoothing.htm">ezTimeStepSmoothing</a> *pSmoother)</td></tr>
<tr class="memdesc:abc1fe284c9087923df4fec5ccab811a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a time step smoother for this clock. Pass nullptr to deactivate time step smoothing.  <a href="../../d6/dc5/classez_clock.htm#abc1fe284c9087923df4fec5ccab811a5">More...</a><br /></td></tr>
<tr class="separator:abc1fe284c9087923df4fec5ccab811a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab321cf84c1a90cb24b48e6f97a348088"><td class="memItemLeft" align="right" valign="top"><a id="ab321cf84c1a90cb24b48e6f97a348088"></a>
<a class="el" href="../../d1/db8/classez_time_step_smoothing.htm">ezTimeStepSmoothing</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#ab321cf84c1a90cb24b48e6f97a348088">GetTimeStepSmoothing</a> () const</td></tr>
<tr class="memdesc:ab321cf84c1a90cb24b48e6f97a348088"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the object used for time step smoothing (if any). <br /></td></tr>
<tr class="separator:ab321cf84c1a90cb24b48e6f97a348088"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ac5a4c55e6ed6be365456e32a7f2a82"><td class="memItemLeft" align="right" valign="top"><a id="a8ac5a4c55e6ed6be365456e32a7f2a82"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#a8ac5a4c55e6ed6be365456e32a7f2a82">SetPaused</a> (bool bPaused)</td></tr>
<tr class="memdesc:a8ac5a4c55e6ed6be365456e32a7f2a82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the clock to be paused or running. <br /></td></tr>
<tr class="separator:a8ac5a4c55e6ed6be365456e32a7f2a82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaa37f367a1f3ac76a500d12b87cbc49"><td class="memItemLeft" align="right" valign="top"><a id="aaaa37f367a1f3ac76a500d12b87cbc49"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#aaaa37f367a1f3ac76a500d12b87cbc49">GetPaused</a> () const</td></tr>
<tr class="memdesc:aaaa37f367a1f3ac76a500d12b87cbc49"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the paused state. <br /></td></tr>
<tr class="separator:aaaa37f367a1f3ac76a500d12b87cbc49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7409ff3dfbc5c3fb7c3c0c0ea266214e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#a7409ff3dfbc5c3fb7c3c0c0ea266214e">SetFixedTimeStep</a> (<a class="el" href="../../d3/d90/structez_time.htm">ezTime</a> tDiff=<a class="el" href="../../d3/d90/structez_time.htm">ezTime</a>())</td></tr>
<tr class="memdesc:a7409ff3dfbc5c3fb7c3c0c0ea266214e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a fixed time step for updating the clock.  <a href="../../d6/dc5/classez_clock.htm#a7409ff3dfbc5c3fb7c3c0c0ea266214e">More...</a><br /></td></tr>
<tr class="separator:a7409ff3dfbc5c3fb7c3c0c0ea266214e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19efa13954604bf7d7230e390d71bbb7"><td class="memItemLeft" align="right" valign="top"><a id="a19efa13954604bf7d7230e390d71bbb7"></a>
<a class="el" href="../../d3/d90/structez_time.htm">ezTime</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#a19efa13954604bf7d7230e390d71bbb7">GetFixedTimeStep</a> () const</td></tr>
<tr class="memdesc:a19efa13954604bf7d7230e390d71bbb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value for the fixed time step (zero if it is disabled). <br /></td></tr>
<tr class="separator:a19efa13954604bf7d7230e390d71bbb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc67d87b1cb930701a6cd882efa7ae51"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#acc67d87b1cb930701a6cd882efa7ae51">SetAccumulatedTime</a> (<a class="el" href="../../d3/d90/structez_time.htm">ezTime</a> t)</td></tr>
<tr class="memdesc:acc67d87b1cb930701a6cd882efa7ae51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows to replace the current accumulated time.  <a href="../../d6/dc5/classez_clock.htm#acc67d87b1cb930701a6cd882efa7ae51">More...</a><br /></td></tr>
<tr class="separator:acc67d87b1cb930701a6cd882efa7ae51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f5e2055f7b140728fc7d5a1493d8934"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#a8f5e2055f7b140728fc7d5a1493d8934">GetAccumulatedTime</a> () const</td></tr>
<tr class="memdesc:a8f5e2055f7b140728fc7d5a1493d8934"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the accumulated time since the last call to <a class="el" href="../../d6/dc5/classez_clock.htm#a973bf6b541313218411bb85e0a75a603" title="Resets all values to their default. E.g. call this after a new level has loaded to start fresh.">Reset()</a>.  <a href="../../d6/dc5/classez_clock.htm#a8f5e2055f7b140728fc7d5a1493d8934">More...</a><br /></td></tr>
<tr class="separator:a8f5e2055f7b140728fc7d5a1493d8934"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a783b68d409a85c586c5d27174417f7de"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#a783b68d409a85c586c5d27174417f7de">GetTimeDiff</a> () const</td></tr>
<tr class="memdesc:a783b68d409a85c586c5d27174417f7de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the time difference between the last two calls to <a class="el" href="../../d6/dc5/classez_clock.htm#a968d274719157a469fe4e8f7dc81e42c" title="Updates the clock using the time difference since the last call to Update().">Update()</a>.  <a href="../../d6/dc5/classez_clock.htm#a783b68d409a85c586c5d27174417f7de">More...</a><br /></td></tr>
<tr class="separator:a783b68d409a85c586c5d27174417f7de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d36d93fac4c9c94854cfde632258a74"><td class="memItemLeft" align="right" valign="top"><a id="a5d36d93fac4c9c94854cfde632258a74"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#a5d36d93fac4c9c94854cfde632258a74">SetSpeed</a> (double fFactor)</td></tr>
<tr class="memdesc:a5d36d93fac4c9c94854cfde632258a74"><td class="mdescLeft">&#160;</td><td class="mdescRight">The factor with which to scale the time step during calls to <a class="el" href="../../d6/dc5/classez_clock.htm#a968d274719157a469fe4e8f7dc81e42c" title="Updates the clock using the time difference since the last call to Update().">Update()</a>. <br /></td></tr>
<tr class="separator:a5d36d93fac4c9c94854cfde632258a74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafe180ba9d620dd616a421de89857027"><td class="memItemLeft" align="right" valign="top"><a id="aafe180ba9d620dd616a421de89857027"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#aafe180ba9d620dd616a421de89857027">GetSpeed</a> () const</td></tr>
<tr class="memdesc:aafe180ba9d620dd616a421de89857027"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the clock speed multiplier. <br /></td></tr>
<tr class="separator:aafe180ba9d620dd616a421de89857027"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7ea2d6a0f2122c920897cefad24b4b3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#ac7ea2d6a0f2122c920897cefad24b4b3">SetMinimumTimeStep</a> (<a class="el" href="../../d3/d90/structez_time.htm">ezTime</a> tMin)</td></tr>
<tr class="memdesc:ac7ea2d6a0f2122c920897cefad24b4b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the minimum time that must pass between clock updates.  <a href="../../d6/dc5/classez_clock.htm#ac7ea2d6a0f2122c920897cefad24b4b3">More...</a><br /></td></tr>
<tr class="separator:ac7ea2d6a0f2122c920897cefad24b4b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3811bc16b9beae75e1f3f77064418c24"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#a3811bc16b9beae75e1f3f77064418c24">SetMaximumTimeStep</a> (<a class="el" href="../../d3/d90/structez_time.htm">ezTime</a> tMax)</td></tr>
<tr class="memdesc:a3811bc16b9beae75e1f3f77064418c24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the maximum time that may pass between clock updates.  <a href="../../d6/dc5/classez_clock.htm#a3811bc16b9beae75e1f3f77064418c24">More...</a><br /></td></tr>
<tr class="separator:a3811bc16b9beae75e1f3f77064418c24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f4637cfab7e1c26632ff06670ddc943"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#a4f4637cfab7e1c26632ff06670ddc943">GetMinimumTimeStep</a> () const</td></tr>
<tr class="memdesc:a4f4637cfab7e1c26632ff06670ddc943"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value for the minimum time step.  <a href="../../d6/dc5/classez_clock.htm#a4f4637cfab7e1c26632ff06670ddc943">More...</a><br /></td></tr>
<tr class="separator:a4f4637cfab7e1c26632ff06670ddc943"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad36530f127b040fa60377c94950b73f1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#ad36530f127b040fa60377c94950b73f1">GetMaximumTimeStep</a> () const</td></tr>
<tr class="memdesc:ad36530f127b040fa60377c94950b73f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value for the maximum time step.  <a href="../../d6/dc5/classez_clock.htm#ad36530f127b040fa60377c94950b73f1">More...</a><br /></td></tr>
<tr class="separator:ad36530f127b040fa60377c94950b73f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8a107e155ad830b786c2959eaf049d6"><td class="memItemLeft" align="right" valign="top"><a id="ad8a107e155ad830b786c2959eaf049d6"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#ad8a107e155ad830b786c2959eaf049d6">Save</a> (<a class="el" href="../../d6/dcc/classez_stream_writer.htm">ezStreamWriter</a> &amp;Stream) const</td></tr>
<tr class="memdesc:ad8a107e155ad830b786c2959eaf049d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Serializes the current clock state to a stream. <br /></td></tr>
<tr class="separator:ad8a107e155ad830b786c2959eaf049d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9e4598332aed402457ec855f898279f"><td class="memItemLeft" align="right" valign="top"><a id="ae9e4598332aed402457ec855f898279f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#ae9e4598332aed402457ec855f898279f">Load</a> (<a class="el" href="../../d2/d19/classez_stream_reader.htm">ezStreamReader</a> &amp;Stream)</td></tr>
<tr class="memdesc:ae9e4598332aed402457ec855f898279f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deserializes the current clock state from a stream. <br /></td></tr>
<tr class="separator:ae9e4598332aed402457ec855f898279f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9f5a40644c0f689f3bacb655dd9767f"><td class="memItemLeft" align="right" valign="top"><a id="af9f5a40644c0f689f3bacb655dd9767f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#af9f5a40644c0f689f3bacb655dd9767f">SetClockName</a> (const char *szName)</td></tr>
<tr class="memdesc:af9f5a40644c0f689f3bacb655dd9767f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the name of the clock. Useful to identify the clock in tools such as ezInspector. <br /></td></tr>
<tr class="separator:af9f5a40644c0f689f3bacb655dd9767f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2dd73760e25079c0dc9785f6df6468f"><td class="memItemLeft" align="right" valign="top"><a id="af2dd73760e25079c0dc9785f6df6468f"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#af2dd73760e25079c0dc9785f6df6468f">GetClockName</a> () const</td></tr>
<tr class="memdesc:af2dd73760e25079c0dc9785f6df6468f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the name of the clock. All clocks get default names 'Clock N', unless the user specifies another name with SetClockName. <br /></td></tr>
<tr class="separator:af2dd73760e25079c0dc9785f6df6468f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a824a9035aa24b04dfe386ac072864d28"><td class="memItemLeft" align="right" valign="top"><a id="a824a9035aa24b04dfe386ac072864d28"></a>
static <a class="el" href="../../d6/dc5/classez_clock.htm">ezClock</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#a824a9035aa24b04dfe386ac072864d28">GetGlobalClock</a> ()</td></tr>
<tr class="memdesc:a824a9035aa24b04dfe386ac072864d28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the global clock. <br /></td></tr>
<tr class="separator:a824a9035aa24b04dfe386ac072864d28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd0b5b0729a158b0bee6661290d883b7"><td class="memItemLeft" align="right" valign="top"><a id="afd0b5b0729a158b0bee6661290d883b7"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#afd0b5b0729a158b0bee6661290d883b7">AddEventHandler</a> (<a class="el" href="../../dd/de2/classez_event_base.htm#a15db4b9552ac331db5b96c866d745f6b">Event::Handler</a> handler)</td></tr>
<tr class="memdesc:afd0b5b0729a158b0bee6661290d883b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows to register a function as an event receiver. All receivers will be notified in the order that they registered. <br /></td></tr>
<tr class="separator:afd0b5b0729a158b0bee6661290d883b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec60a3ece52c8a9a1b836a09aae15e0f"><td class="memItemLeft" align="right" valign="top"><a id="aec60a3ece52c8a9a1b836a09aae15e0f"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc5/classez_clock.htm#aec60a3ece52c8a9a1b836a09aae15e0f">RemoveEventHandler</a> (<a class="el" href="../../dd/de2/classez_event_base.htm#a15db4b9552ac331db5b96c866d745f6b">Event::Handler</a> handler)</td></tr>
<tr class="memdesc:aec60a3ece52c8a9a1b836a09aae15e0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unregisters a previously registered receiver. It is an error to unregister a receiver that was not registered. <br /></td></tr>
<tr class="separator:aec60a3ece52c8a9a1b836a09aae15e0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A clock that can be speed up, slowed down, paused, etc. Useful for updating game logic, rendering, etc. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a8f5e2055f7b140728fc7d5a1493d8934"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f5e2055f7b140728fc7d5a1493d8934">&#9670;&nbsp;</a></span>GetAccumulatedTime()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a> ezClock::GetAccumulatedTime </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the accumulated time since the last call to <a class="el" href="../../d6/dc5/classez_clock.htm#a973bf6b541313218411bb85e0a75a603" title="Resets all values to their default. E.g. call this after a new level has loaded to start fresh.">Reset()</a>. </p>
<p>The accumulated time is basically the 'absolute' time in the game world. Since this is the accumulation of all scaled, paused and clamped time steps, it will most likely have no relation to the real time that has passed. </p>

</div>
</div>
<a id="ad36530f127b040fa60377c94950b73f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad36530f127b040fa60377c94950b73f1">&#9670;&nbsp;</a></span>GetMaximumTimeStep()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a> ezClock::GetMaximumTimeStep </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the value for the maximum time step. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d6/dc5/classez_clock.htm#a3811bc16b9beae75e1f3f77064418c24" title="Sets the maximum time that may pass between clock updates.">SetMaximumTimeStep</a> </dd></dl>

</div>
</div>
<a id="a4f4637cfab7e1c26632ff06670ddc943"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f4637cfab7e1c26632ff06670ddc943">&#9670;&nbsp;</a></span>GetMinimumTimeStep()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a> ezClock::GetMinimumTimeStep </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the value for the minimum time step. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d6/dc5/classez_clock.htm#ac7ea2d6a0f2122c920897cefad24b4b3" title="Sets the minimum time that must pass between clock updates.">SetMinimumTimeStep</a> </dd></dl>

</div>
</div>
<a id="a783b68d409a85c586c5d27174417f7de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a783b68d409a85c586c5d27174417f7de">&#9670;&nbsp;</a></span>GetTimeDiff()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a> ezClock::GetTimeDiff </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the time difference between the last two calls to <a class="el" href="../../d6/dc5/classez_clock.htm#a968d274719157a469fe4e8f7dc81e42c" title="Updates the clock using the time difference since the last call to Update().">Update()</a>. </p>
<p>This is the main function to use to query how much to advance some simulation. The time step is already scaled, clamped, etc. </p>

</div>
</div>
<a id="a973bf6b541313218411bb85e0a75a603"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a973bf6b541313218411bb85e0a75a603">&#9670;&nbsp;</a></span>Reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezClock::Reset </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bEverything</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Resets all values to their default. E.g. call this after a new level has loaded to start fresh. </p>
<p>If <em>bEverything</em> is false, only the current state of the clock is reset (accumulated time, speed, paused). Otherwise the clock is entirely reset, clearing also the time step smoother, min/max time steps and fixed time step. </p>

</div>
</div>
<a id="acc67d87b1cb930701a6cd882efa7ae51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc67d87b1cb930701a6cd882efa7ae51">&#9670;&nbsp;</a></span>SetAccumulatedTime()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezClock::SetAccumulatedTime </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a>&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allows to replace the current accumulated time. </p>
<p>This can be used to reset the time to a specific point, e.g. when a game state is loaded from file, one should also reset the time to the time that was used when the game state was saved, to ensure that game objects that stored the accumulated time for reference, will continue to work. However, prefer to use <a class="el" href="../../d6/dc5/classez_clock.htm#ad8a107e155ad830b786c2959eaf049d6" title="Serializes the current clock state to a stream.">Save()</a> and <a class="el" href="../../d6/dc5/classez_clock.htm#ae9e4598332aed402457ec855f898279f" title="Deserializes the current clock state from a stream.">Load()</a> as those functions will store and restore the entire clock state. </p>

</div>
</div>
<a id="a7409ff3dfbc5c3fb7c3c0c0ea266214e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7409ff3dfbc5c3fb7c3c0c0ea266214e">&#9670;&nbsp;</a></span>SetFixedTimeStep()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezClock::SetFixedTimeStep </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a>&#160;</td>
          <td class="paramname"><em>tDiff</em> = <code><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a>()</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets a fixed time step for updating the clock. </p>
<p>If tDiff is set to zero (the default), fixed time stepping is disabled. Fixed time stepping allows to run the simulation at a constant rate, which is useful for recording videos or to step subsystems that require constant steps. Clock speed, pause and min/max time step are still being applied even when the time step is fixed. </p>

</div>
</div>
<a id="a3811bc16b9beae75e1f3f77064418c24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3811bc16b9beae75e1f3f77064418c24">&#9670;&nbsp;</a></span>SetMaximumTimeStep()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezClock::SetMaximumTimeStep </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a>&#160;</td>
          <td class="paramname"><em>tMax</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the maximum time that may pass between clock updates. </p>
<p>By default a maximum time step of 0.1 seconds is enabled to ensure that code does not break down due to very large time steps. The maximum time step is applied after the clock speed is applied. When a custom time step smoother is set, that class needs to apply the clock speed AND also clamp the value to the min/max time step (which means it can ignore or override that feature). </p><dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d6/dc5/classez_clock.htm#ac7ea2d6a0f2122c920897cefad24b4b3" title="Sets the minimum time that must pass between clock updates.">SetMinimumTimeStep</a> </dd></dl>

</div>
</div>
<a id="ac7ea2d6a0f2122c920897cefad24b4b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7ea2d6a0f2122c920897cefad24b4b3">&#9670;&nbsp;</a></span>SetMinimumTimeStep()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezClock::SetMinimumTimeStep </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a>&#160;</td>
          <td class="paramname"><em>tMin</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the minimum time that must pass between clock updates. </p>
<p>By default a minimum time step of 0.001 seconds is enabled to ensure that code does not break down due to very small time steps. The minimum time step is applied after the clock speed is applied. When a custom time step smoother is set, that class needs to apply the clock speed AND also clamp the value to the min/max time step (which means it can ignore or override that feature). When the clock is paused, it will always return a time step of zero. </p>

</div>
</div>
<a id="abc1fe284c9087923df4fec5ccab811a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc1fe284c9087923df4fec5ccab811a5">&#9670;&nbsp;</a></span>SetTimeStepSmoothing()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezClock::SetTimeStepSmoothing </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d1/db8/classez_time_step_smoothing.htm">ezTimeStepSmoothing</a> *&#160;</td>
          <td class="paramname"><em>pSmoother</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets a time step smoother for this clock. Pass nullptr to deactivate time step smoothing. </p>
<p>Also calls <a class="el" href="../../d1/db8/classez_time_step_smoothing.htm#af3f7a078d5064bef83d749a3d8916d4b" title="Called when ezClock::Reset(), ezClock::Load() or ezClock::SetPaused(true) was called.">ezTimeStepSmoothing::Reset()</a> on any non-nullptr pSmoother. </p>

</div>
</div>
<a id="a968d274719157a469fe4e8f7dc81e42c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a968d274719157a469fe4e8f7dc81e42c">&#9670;&nbsp;</a></span>Update()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezClock::Update </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Updates the clock using the time difference since the last call to <a class="el" href="../../d6/dc5/classez_clock.htm#a968d274719157a469fe4e8f7dc81e42c" title="Updates the clock using the time difference since the last call to Update().">Update()</a>. </p>
<p>If a fixed time step is set, that will be used as the time difference. If the timer is paused, the time difference is set to zero. The time difference will then be scaled and clamped according to the clock speed and minimum and maximum time step. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/Time/<a class="el" href="../../dd/dba/_clock_8h_source.htm">Clock.h</a></li>
<li>Code/Engine/Foundation/Time/Implementation/Clock.cpp</li>
<li>Code/Engine/Foundation/Time/Implementation/<a class="el" href="../../d9/dc4/_clock__inl_8h_source.htm">Clock_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d6/dc5/classez_clock.htm">ezClock</a></li>
    <li class="footer">Generated on Tue Jun 8 2021 14:34:01 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
