<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Tools/Libs/ModelImporter2/ImporterMagicaVoxel/ogt_voxel_meshify.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 25.03</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d6/d02/ogt__voxel__meshify_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ogt_voxel_meshify.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">    opengametools voxel meshifier - v0.9 - MIT license - Justin Paver, April 2020</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">    This is a single-header-file library that provides easy-to-use</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">    support for converting paletted voxel grid data into an indexed triangle mesh.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">    Please see the MIT license information at the end of this file.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">    Also, please consider sharing any improvements you make.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">    For more information and more tools, visit:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">      https://github.com/jpaver/opengametools</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">    USAGE</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">    1. load your voxel grid data and palette data (see ogt_vox_model inside ogt_vox_loader.h for example)</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">       and obtain the x, y and z dimensions of the grid.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">    2. convert into a mesh</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">        ogt_mesh* mesh = ogt_mesh_from_paletted_voxels_simple( voxel_data, size_x, size_y, size_z, voxel_palette );</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">    3. use the indexed triangle list in the mesh to construct renderable geometry, collision geometry.</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">        // This is old sceen OpenGL immediate mode rendering for demonstration purposes only.</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">        // Ideally you&#39;d use more modern practices for rendering, including converting ogt_mesh data to</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">        // your own engine&#39;s layout.</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">        glBegin(GL_TRIANGLES);</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">        for (uint32_t i = 0; i &lt; mesh-&gt;index_count; i+=3)</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">        {</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">          uint32_t i0 = mesh-&gt;indices[i + 0];</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">          uint32_t i1 = mesh-&gt;indices[i + 1];</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">          uint32_t i2 = mesh-&gt;indices[i + 2];</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">          const ogt_mesh_vertex* v0 = &amp;mesh-&gt;vertices[i0];</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">          const ogt_mesh_vertex* v1 = &amp;mesh-&gt;vertices[i1];</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">          const ogt_mesh_vertex* v2 = &amp;mesh-&gt;vertices[i2];</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">          glColor4ubv(&amp;v0-&gt;color);</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">          glNormal3fv(&amp;v0-&gt;normal);</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">          glVertex3fv(&amp;v0-&gt;pos);</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">          glColor4ubv(&amp;v1-&gt;color);</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">          glNormal3fv(&amp;v1-&gt;normal);</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">          glVertex3fv(&amp;v1-&gt;pos);</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">          glColor4ubv(&amp;v2-&gt;color);</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">          glNormal3fv(&amp;v2-&gt;normal);</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">          glVertex3fv(&amp;v2-&gt;pos);</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">        glEnd();</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">    EXPLANATION</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">        We currently only support paletted voxel data as input to the meshing algorithms here.</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">        Paletted voxel mesh data assumes each voxel within the grid is a single byte</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">        that represents a color index into a 256 color palette.</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">        If the color index is 0, the voxel is assumed to be empty, otherwise it is solid.</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">        For this reason, palette[0] will never be used.</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">        Voxel data is laid out in x, then y, then z order. In other words, given</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">        a coordinate (x,y,z) within your grid, you can compute where it is in your voxel</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">        array using the following logic:</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">            voxel_index = x + (y * size_x) + (z * size_x * size_y);</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">        We support the following algorithms for meshing the voxel data for now:</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">        * ogt_mesh_from_paletted_voxels_simple:  creates 2 triangles for every visible voxel face.</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">        * ogt_mesh_from_paletted_voxels_greedy:  creates 2 triangles for every rectangular region of voxel faces with the same color</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">        * ogt_mesh_from_paletted_voxels_polygon: determines the polygon contour of every connected voxel face with the same color and then triangulates that.</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#ifndef OGT_VOXEL_MESHIFY_H__</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#  define OGT_VOXEL_MESHIFY_H__</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#  if _MSC_VER == 1400</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">// VS2005 doesn&#39;t have inttypes or stdint so we just define what we need here.</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> uint8_t;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">typedef</span> <span class="keywordtype">signed</span> <span class="keywordtype">int</span> int32_t;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uint32_t;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> uint16_t;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">#    ifndef UINT32_MAX</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">#      define UINT32_MAX 0xFFFFFFFF</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">#    endif</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">#  elif defined(_MSC_VER)</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">// general VS*</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">#    include &lt;inttypes.h&gt;</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">#  elif __APPLE__</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">// general Apple compiler</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">#  elif defined(__GNUC__)</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">// any GCC*</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">#    include &lt;inttypes.h&gt;</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="preprocessor">#    include &lt;stdlib.h&gt;</span> <span class="comment">// for size_t</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">#  else</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">#    error some fixup needed for this platform?</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor">#  endif</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">// a 3 dimensional quantity</span></div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="../../d8/db5/structogt__mesh__vec3.htm">  100</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keywordtype">float</span> x, y, z;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;};</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">// a color</span></div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="../../d6/dea/structogt__mesh__rgba.htm">  106</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  uint8_t r, g, b, a;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;};</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">// represents a vertex</span></div>
<div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="../../de/d6e/structogt__mesh__vertex.htm">  112</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> pos;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> normal;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a> color;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;};</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">// a mesh that contains an indexed triangle list of vertices</span></div>
<div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="../../d1/dd7/structogt__mesh.htm">  120</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  uint32_t vertex_count;     <span class="comment">// number of vertices</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  uint32_t index_count;      <span class="comment">// number of indices</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>* vertices; <span class="comment">// array of vertices</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  uint32_t* indices;         <span class="comment">// array of indices</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;};</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">// allocate memory function interface. pass in size, and get a pointer to memory with at least that size available.</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword">typedef</span> <span class="keywordtype">void</span>* (*ogt_voxel_meshify_alloc_func)(<span class="keywordtype">size_t</span> size, <span class="keywordtype">void</span>* user_data);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">// free memory function interface. pass in a pointer previously allocated and it will be released back to the system managing memory.</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keyword">typedef</span> void (*ogt_voxel_meshify_free_func)(<span class="keywordtype">void</span>* ptr, <span class="keywordtype">void</span>* user_data);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">// stream function can receive a batch of triangles for each voxel processed by ogt_stream_from_paletted_voxels_simple. (i,j,k)</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword">typedef</span> void (*ogt_voxel_simple_stream_func)(uint32_t x, uint32_t y, uint32_t z, <span class="keyword">const</span> <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>* vertices, uint32_t vertex_count, <span class="keyword">const</span> uint32_t* indices, uint32_t index_count, <span class="keywordtype">void</span>* user_data);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">// a context that allows you to override various internal operations of the below api functions.</span></div>
<div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="../../dd/d6f/structogt__voxel__meshify__context.htm">  138</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  ogt_voxel_meshify_alloc_func alloc_func; <span class="comment">// override allocation function</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  ogt_voxel_meshify_free_func free_func;   <span class="comment">// override free function</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keywordtype">void</span>* alloc_free_user_data;              <span class="comment">// alloc/free user-data (passed to alloc_func / free_func )</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;};</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">// returns the number of quad faces that would be generated by tessellating the specified voxel field using the simple algorithm. Useful for preallocating memory.</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">// number of vertices needed would 4x this value, and number of indices needed would be 6x this value.</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;uint32_t ogt_face_count_from_paletted_voxels_simple(<span class="keyword">const</span> uint8_t* pVoxels, uint32_t size_x, uint32_t size_y, uint32_t size_z);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">// The simple meshifier returns the most naieve mesh possible, which will be tessellated at voxel granularity.</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* ogt_mesh_from_paletted_voxels_simple(<span class="keyword">const</span> <a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a>* pCtx, <span class="keyword">const</span> uint8_t* pVoxels, uint32_t size_x, uint32_t size_y, uint32_t size_z, <span class="keyword">const</span> <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a>* pPalette);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">// The greedy meshifier will use a greedy box-expansion pass to replace the polygons of adjacent voxels of the same color with a larger polygon that covers the box.</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">// It will generally produce t-junctions which can make rasterization not water-tight based on your camera/project/distances.</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* ogt_mesh_from_paletted_voxels_greedy(<span class="keyword">const</span> <a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a>* pCtx, <span class="keyword">const</span> uint8_t* pVoxels, uint32_t size_x, uint32_t size_y, uint32_t size_z, <span class="keyword">const</span> <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a>* pPalette);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">// The polygon meshifier will polygonize and triangulate connected voxels that are of the same color. The boundary of the polygon</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">// will be tessellated only to the degree that is necessary to there are tessellations at color discontinuities.</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">// This will mostly be water-tight, except for a very small number of cases.</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* ogt_mesh_from_paletted_voxels_polygon(<span class="keyword">const</span> <a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a>* pCtx, <span class="keyword">const</span> uint8_t* pVoxels, uint32_t size_x, uint32_t size_y, uint32_t size_z, <span class="keyword">const</span> <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a>* pPalette);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">// ogt_mesh_remove_duplicate_vertices will in-place remove identical vertices and remap indices to produce an identical mesh.</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">// Use this after a call to ogt_mesh_from_paletted_voxels_* functions to remove duplicate vertices with the same attributes.</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="keywordtype">void</span> ogt_mesh_remove_duplicate_vertices(<span class="keyword">const</span> <a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a>* pCtx, <a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* pMesh);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">// Removes faceted normals on the mesh and averages vertex normals based on the faces that are adjacent.</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">// It is recommended only to call this on  ogt_mesh_from_paletted_voxels_simple.</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keywordtype">void</span> ogt_mesh_smooth_normals(<span class="keyword">const</span> <a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a>* pCtx, <a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* pMesh);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">// destroys the mesh returned by ogt_mesh_from_paletted_voxels* functions.</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keywordtype">void</span> ogt_mesh_destroy(<span class="keyword">const</span> <a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a>* pCtx, <a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* pMesh);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">// The simple stream function will stream geometry for the specified voxel field, to the specified stream function, which will be invoked on each voxel that requires geometry.</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keywordtype">void</span> ogt_stream_from_paletted_voxels_simple(<span class="keyword">const</span> uint8_t* pVoxels, uint32_t size_x, uint32_t size_y, uint32_t size_z, <span class="keyword">const</span> <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a>* pPalette, ogt_voxel_simple_stream_func stream_func, <span class="keywordtype">void</span>* pStream_func_data);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">#endif // OGT_VOXEL_MESHIFY_H__</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">//-----------------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">// If you&#39;re only interested in using this library, everything you need is above this point.</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">// If you&#39;re interested in how this library works, everything you need is below this point.</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">//-----------------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">#ifdef OGT_VOXEL_MESHIFY_IMPLEMENTATION</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">#  include &lt;assert.h&gt;</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#  include &lt;math.h&gt;</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor">#  include &lt;memory.h&gt;</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="preprocessor">#  include &lt;stdlib.h&gt;</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">// a set of up to 65536 bits</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="keyword">struct </span>ogt_mesh_bitset_64k</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  uint8_t bits[8192];</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <span class="keywordtype">void</span> clear(uint32_t max_bits)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">if</span> (max_bits &gt; (8192 * 8))</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      max_bits = (8192 * 8);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    memset(bits, 0, (max_bits + 7) / 8);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  uint8_t is_set(uint32_t index) { <span class="keywordflow">return</span> bits[index / 8] &amp; (1 &lt;&lt; (index % 8)); }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  <span class="keywordtype">void</span> set(uint32_t index) { bits[index / 8] |= (1 &lt;&lt; (index % 8)); }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  <span class="keywordtype">void</span> unset(uint32_t index) { bits[index / 8] &amp;= ~(1 &lt;&lt; (index % 8)); }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;};</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span>* _voxel_meshify_malloc(<span class="keyword">const</span> <a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a>* pCtx, <span class="keywordtype">size_t</span> uiSize)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;{</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keywordflow">return</span> uiSize ? (pCtx-&gt;alloc_func ? pCtx-&gt;alloc_func(uiSize, pCtx-&gt;alloc_free_user_data) : malloc(uiSize)) : NULL;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> _voxel_meshify_free(<span class="keyword">const</span> <a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a>* pCtx, <span class="keywordtype">void</span>* pOld_ptr)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;{</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  <span class="keywordflow">if</span> (pOld_ptr)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">if</span> (pCtx-&gt;free_func)</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      pCtx-&gt;free_func(pOld_ptr, pCtx-&gt;alloc_free_user_data);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;      free(pOld_ptr);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;}</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">// column-major 4x4 matrix</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="keyword">struct </span>ogt_mesh_transform</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;{</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  <span class="keywordtype">float</span> m00, m01, m02, m03; <span class="comment">// column 0 of 4x4 matrix, 1st three elements = x axis vector, last element always 0.0</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  <span class="keywordtype">float</span> m10, m11, m12, m13; <span class="comment">// column 1 of 4x4 matrix, 1st three elements = y axis vector, last element always 0.0</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  <span class="keywordtype">float</span> m20, m21, m22, m23; <span class="comment">// column 2 of 4x4 matrix, 1st three elements = z axis vector, last element always 0.0</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  <span class="keywordtype">float</span> m30, m31, m32, m33; <span class="comment">// column 3 of 4x4 matrix. 1st three elements = translation vector, last element always 1.0</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;};</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">// replaces transforms the point computes: transform * (vec.x, vec.y, vec.z, 1.0)</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">inline</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> _transform_point(<span class="keyword">const</span> ogt_mesh_transform&amp; transform, <span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>&amp; vec)</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;{</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> ret;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  ret.x = transform.m30 + (transform.m00 * vec.x) + (transform.m10 * vec.y) + (transform.m20 * vec.z);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  ret.y = transform.m31 + (transform.m01 * vec.x) + (transform.m11 * vec.y) + (transform.m21 * vec.z);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  ret.z = transform.m32 + (transform.m02 * vec.x) + (transform.m12 * vec.y) + (transform.m22 * vec.z);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;}</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">// replaces transforms the point computes: transform * (vec.x, vec.y, vec.z, 0.0)</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="keyword">inline</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> _transform_vector(<span class="keyword">const</span> ogt_mesh_transform&amp; transform, <span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>&amp; vec)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;{</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> ret;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  ret.x = (transform.m00 * vec.x) + (transform.m10 * vec.y) + (transform.m20 * vec.z);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  ret.y = (transform.m01 * vec.x) + (transform.m11 * vec.y) + (transform.m21 * vec.z);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  ret.z = (transform.m02 * vec.x) + (transform.m12 * vec.y) + (transform.m22 * vec.z);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="keyword">inline</span> ogt_mesh_transform _make_transform(</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  <span class="keywordtype">float</span> f00, <span class="keywordtype">float</span> f01, <span class="keywordtype">float</span> f02, <span class="keywordtype">float</span> f03,</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  <span class="keywordtype">float</span> f10, <span class="keywordtype">float</span> f11, <span class="keywordtype">float</span> f12, <span class="keywordtype">float</span> f13,</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  <span class="keywordtype">float</span> f20, <span class="keywordtype">float</span> f21, <span class="keywordtype">float</span> f22, <span class="keywordtype">float</span> f23,</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  <span class="keywordtype">float</span> f30, <span class="keywordtype">float</span> f31, <span class="keywordtype">float</span> f32, <span class="keywordtype">float</span> f33)</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;{</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  ogt_mesh_transform ret;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  ret.m00 = f00;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  ret.m01 = f01;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  ret.m02 = f02;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  ret.m03 = f03;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  ret.m10 = f10;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  ret.m11 = f11;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  ret.m12 = f12;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  ret.m13 = f13;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  ret.m20 = f20;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  ret.m21 = f21;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  ret.m22 = f22;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  ret.m23 = f23;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  ret.m30 = f30;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  ret.m31 = f31;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  ret.m32 = f32;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  ret.m33 = f33;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;}</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160; </div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="keyword">inline</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> _make_vec3(<span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;{</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> ret;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  ret.x = x;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  ret.y = y;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  ret.z = z;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;}</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>* _make_vec3_ptr(<span class="keyword">const</span> <span class="keywordtype">float</span>* pXyz_elements)</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;{</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="keywordflow">return</span> (<a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>*)pXyz_elements;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">float</span> _dot3(<span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>&amp; a, <span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>&amp; b)</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  <span class="keywordflow">return</span> (a.x * b.x) + (a.y * b.y) + (a.z * b.z);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;}</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> _cross3(<span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>&amp; a, <span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>&amp; b)</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;{</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> ret;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  ret.x = (a.y * b.z) - (a.z * b.y);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  ret.y = (a.z * b.x) - (a.x * b.z);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  ret.z = (a.x * b.y) - (a.y * b.x);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;}</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> _sub3(<span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>&amp; a, <span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>&amp; b)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;{</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> ret;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  ret.x = a.x - b.x;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  ret.y = a.y - b.y;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  ret.z = a.z - b.z;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> _add3(<span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>&amp; a, <span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>&amp; b)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;{</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> ret;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;  ret.x = a.x + b.x;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  ret.y = a.y + b.y;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  ret.z = a.z + b.z;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;}</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> _normalize3(<span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>&amp; a)</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;{</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  <span class="keywordtype">float</span> len = sqrtf(a.x * a.x + a.y * a.y + a.z * a.z);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  assert(len &gt; 0.0f);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keywordtype">float</span> len_inv = 1.0f / len;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> ret;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  ret.x = a.x * len_inv;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  ret.y = a.y * len_inv;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  ret.z = a.z * len_inv;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;}</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a> _mesh_make_vertex(<span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>&amp; pos, <span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>&amp; normal, <span class="keyword">const</span> <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a> color)</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;{</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a> ret;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  ret.pos = pos;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  ret.normal = normal;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  ret.color = color;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;}</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a> _mesh_make_vertex(<span class="keywordtype">float</span> fPos_x, <span class="keywordtype">float</span> fPos_y, <span class="keywordtype">float</span> fPos_z, <span class="keywordtype">float</span> fNormal_x, <span class="keywordtype">float</span> fNormal_y, <span class="keywordtype">float</span> fNormal_z, <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a> color)</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;{</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  <span class="keywordflow">return</span> _mesh_make_vertex(_make_vec3(fPos_x, fPos_y, fPos_z), _make_vec3(fNormal_x, fNormal_y, fNormal_z), color);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;}</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160; </div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">// counts the number of voxel sized faces that are needed for this voxel grid.</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="keyword">static</span> uint32_t _count_voxel_sized_faces(<span class="keyword">const</span> uint8_t* pVoxels, uint32_t size_x, uint32_t size_y, uint32_t size_z)</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;{</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  <span class="keyword">const</span> int32_t k_stride_x = 1;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  <span class="keyword">const</span> int32_t k_stride_y = size_x;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <span class="keyword">const</span> int32_t k_stride_z = size_x * size_y;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  <span class="keyword">const</span> int32_t k_max_x = size_x - 1;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  <span class="keyword">const</span> int32_t k_max_y = size_y - 1;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  <span class="keyword">const</span> int32_t k_max_z = size_z - 1;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  uint32_t face_count = 0;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  <span class="keyword">const</span> uint8_t* current_voxel = pVoxels;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  <span class="keywordflow">for</span> (uint32_t k = 0; k &lt; size_z; k++)</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  {</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keywordflow">for</span> (uint32_t j = 0; j &lt; size_y; j++)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;      <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; size_x; i++, current_voxel++)</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;      {</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keywordflow">if</span> (current_voxel[0] != 0) <span class="comment">// voxel is not empty.</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        {</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;          <span class="comment">// check each of the -X,+X,-Y,+Y,-Z,+Z directions to see if a face is needed in that direction.</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;          face_count += ((i == 0) || (current_voxel[-k_stride_x] == 0)) ? 1 : 0;      <span class="comment">// if on min x boundary of voxel grid, or neighbor to -1 on x is empty</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;          face_count += ((i == k_max_x) || (current_voxel[k_stride_x] == 0)) ? 1 : 0; <span class="comment">// if on max x boundary of voxel grid, or neighbor to +1 on x is empty</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;          face_count += ((j == 0) || (current_voxel[-k_stride_y] == 0)) ? 1 : 0;      <span class="comment">// if on min y boundary of voxel grid, or neighbor to -1 on y is empty</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;          face_count += ((j == k_max_y) || (current_voxel[k_stride_y] == 0)) ? 1 : 0; <span class="comment">// if on max y boundary of voxel grid, or neighbor to +1 on y is empty</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;          face_count += ((k == 0) || (current_voxel[-k_stride_z] == 0)) ? 1 : 0;      <span class="comment">// if on min z boundary of voxel grid, or neighbor to -1 on z is empty</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;          face_count += ((k == k_max_z) || (current_voxel[k_stride_z] == 0)) ? 1 : 0; <span class="comment">// if on max z boundary of voxel grid, or neighbor to +1 on z is empty</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        }</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;      }</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    }</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  }</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  <span class="keywordflow">return</span> face_count;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;}</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160; </div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">// murmur_hash2 - this variant deals with only 4 bytes at a time</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="keyword">static</span> uint32_t murmur_hash2_size4(uint32_t h, <span class="keyword">const</span> uint32_t* pData, uint32_t data_len)</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;{</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;  assert(data_len % 4 == 0);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  <span class="keyword">const</span> uint32_t m = 0x5bd1e995;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  <span class="keywordflow">while</span> (data_len &gt;= 4)</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    uint32_t k = pData[0];</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    k *= m;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    k ^= k &gt;&gt; (signed)24;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    k *= m;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    h *= m;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    h ^= k;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    pData++;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    data_len -= 4;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;  }</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;  <span class="keywordflow">return</span> h;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;}</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment">// quadratic probing in the hash table.</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="keyword">static</span> uint32_t* hash_table_find_vertex(uint32_t* pTable, uint32_t table_index_mask, <span class="keyword">const</span> uint8_t* pVertex_data, uint32_t vertex_size, uint32_t vertex_index)</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;{</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  uint32_t* this_vertex = (uint32_t*)&amp;pVertex_data[vertex_index * vertex_size];</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  uint32_t bucket_index = murmur_hash2_size4(0, this_vertex, vertex_size) &amp; table_index_mask;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; </div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;  <span class="keywordflow">for</span> (uint32_t probe_count = 0; probe_count &lt;= table_index_mask; probe_count++)</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;  {</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    uint32_t* existing_index = &amp;pTable[bucket_index];</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="comment">// if there is an uninitialized value at this bucket, the vertex is definitely not already in the hash table.</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordflow">if</span> (*existing_index == UINT32_MAX)</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;      <span class="keywordflow">return</span> existing_index;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="comment">// this item is potentially in the table, we compare to see if the existing vertex matches the one we&#39;re trying to find.</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    uint32_t* existing_vertex = (uint32_t*)&amp;pVertex_data[*existing_index * vertex_size];</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keywordflow">if</span> (memcmp(this_vertex, existing_vertex, vertex_size) == 0)</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    {</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;      assert(*existing_index &lt; vertex_index);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;      <span class="keywordflow">return</span> existing_index;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    }</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="comment">// use quadratic probing to find the next bucket in the case of a collision.</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    bucket_index = (bucket_index + probe_count + 1) &amp; table_index_mask;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;  }</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;  <span class="comment">// hash table is full. We should technically never get here because we always allocate more buckets in the table than vertices we search for.</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;  assert(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;  <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;}</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160; </div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160; </div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment">// quadratic probing in the hash table</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="keyword">static</span> uint32_t* hash_table_find_vertex_position(uint32_t* pTable, uint32_t table_index_mask, <span class="keyword">const</span> <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>* pVertex_data, uint32_t vertex_index)</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;{</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>* this_vertex = &amp;pVertex_data[vertex_index];</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;  uint32_t bucket_index = murmur_hash2_size4(0, (uint32_t*)&amp;this_vertex-&gt;pos, <span class="keyword">sizeof</span>(this_vertex-&gt;pos)) &amp; table_index_mask;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160; </div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  <span class="keywordflow">for</span> (uint32_t probe_count = 0; probe_count &lt;= table_index_mask; probe_count++)</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;  {</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    uint32_t* existing_index = &amp;pTable[bucket_index];</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="comment">// if there is an uninitialized value at this bucket, the vertex is definitely not already in the hash table.</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordflow">if</span> (*existing_index == UINT32_MAX)</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;      <span class="keywordflow">return</span> existing_index;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="comment">// this item is potentially in the table, we compare to see if the existing vertex matches the one we&#39;re trying to find.</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keyword">const</span> <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>* existing_vertex = &amp;pVertex_data[*existing_index];</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keywordflow">if</span> (memcmp(&amp;this_vertex-&gt;pos, &amp;existing_vertex-&gt;pos, <span class="keyword">sizeof</span>(this_vertex-&gt;pos)) == 0)</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    {</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;      assert(*existing_index &lt; vertex_index);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;      <span class="keywordflow">return</span> existing_index;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    }</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="comment">// use quadratic probing to find the next bucket in the case of a collision.</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    bucket_index = (bucket_index + probe_count + 1) &amp; table_index_mask;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;  }</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;  <span class="comment">// hash table is full. We should technically never get here because we always allocate more buckets in the table than vertices we search for.</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;  assert(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;  <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;}</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160; </div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment">// removes duplicate vertices in-place from the specified mesh.</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="keywordtype">void</span> ogt_mesh_remove_duplicate_vertices(<span class="keyword">const</span> <a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a>* pCtx, <a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* pMesh)</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;{</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160; </div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;  uint32_t* indices = pMesh-&gt;indices;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;  uint32_t index_count = pMesh-&gt;index_count;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;  uint8_t* vertices = (uint8_t*)pMesh-&gt;vertices;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;  uint32_t vertex_count = pMesh-&gt;vertex_count;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;  uint32_t vertex_size = <span class="keyword">sizeof</span>(<a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;  assert(indices &amp;&amp; index_count &amp;&amp; vertices &amp;&amp; vertex_count &amp;&amp; vertex_size);</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160; </div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;  <span class="comment">// allocate a hash table that is sized at the next power of 2 above the vertex count</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;  uint32_t hash_table_size = 1;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;  <span class="keywordflow">while</span> (hash_table_size &lt; vertex_count)</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    hash_table_size *= 2;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;  uint32_t hash_table_mask = hash_table_size - 1;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  uint32_t* hash_table = (uint32_t*)_voxel_meshify_malloc(pCtx, <span class="keyword">sizeof</span>(uint32_t) * hash_table_size);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;  memset(hash_table, -1, hash_table_size * <span class="keyword">sizeof</span>(uint32_t));</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160; </div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;  <span class="comment">// generate an remap table for vertex indices</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;  uint32_t* remap_indices = (uint32_t*)_voxel_meshify_malloc(pCtx, <span class="keyword">sizeof</span>(uint32_t) * vertex_count);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;  memset(remap_indices, -1, vertex_count * <span class="keyword">sizeof</span>(uint32_t));</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;  uint32_t num_unique_vertices = 0;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;  <span class="keywordflow">for</span> (uint32_t vertex_index = 0; vertex_index &lt; vertex_count; vertex_index++)</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;  {</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    uint32_t* hash_table_entry = hash_table_find_vertex(hash_table, hash_table_mask, vertices, vertex_size, vertex_index);</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keywordflow">if</span> (*hash_table_entry == UINT32_MAX)</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    {</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;      <span class="comment">// vertex is not already in the hash table. allocate a unique index for it.</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;      *hash_table_entry = vertex_index;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;      ;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;      remap_indices[vertex_index] = num_unique_vertices++;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    }</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    {</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;      <span class="comment">// vertex is already in the hash table. Point this to the index that is already existing!</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;      assert(remap_indices[*hash_table_entry] != UINT32_MAX);</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;      remap_indices[vertex_index] = remap_indices[*hash_table_entry];</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;  }</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160; </div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;  <span class="comment">// compact all vertices using the remap_indices map.</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;  <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; vertex_count; i++)</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;  {</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    uint32_t dst_index = remap_indices[i];</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    uint32_t src_index = i;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    assert(dst_index &lt;= src_index);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    memcpy(&amp;vertices[dst_index * vertex_size], &amp;vertices[src_index * vertex_size], vertex_size);</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;  }</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;  <span class="comment">// remap all indices now</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;  <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; index_count; i++)</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;  {</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    indices[i] = remap_indices[indices[i]];</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;  }</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160; </div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;  _voxel_meshify_free(pCtx, hash_table);</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;  _voxel_meshify_free(pCtx, remap_indices);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160; </div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;  assert(num_unique_vertices &lt;= pMesh-&gt;vertex_count);</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;  pMesh-&gt;vertex_count = num_unique_vertices;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;}</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160; </div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment">// resets normals for the mesh so they are based on triangle connectivity, while preserving triangle colors.</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="keywordtype">void</span> ogt_mesh_smooth_normals(<span class="keyword">const</span> <a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a>* pCtx, <a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* pMesh)</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;{</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;  <span class="comment">// generate an remap table for vertex indices based on the vertex positions.</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;  uint32_t* remap_indices = (uint32_t*)_voxel_meshify_malloc(pCtx, <span class="keyword">sizeof</span>(uint32_t) * pMesh-&gt;vertex_count);</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;  memset(remap_indices, -1, pMesh-&gt;vertex_count * <span class="keyword">sizeof</span>(uint32_t));</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;  {</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="comment">// allocate a hash table that is sized at the next power of 2 above the vertex count</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    uint32_t hash_table_size = 1;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keywordflow">while</span> (hash_table_size &lt; pMesh-&gt;vertex_count)</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;      hash_table_size *= 2;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    uint32_t hash_table_mask = hash_table_size - 1;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    uint32_t* hash_table = (uint32_t*)_voxel_meshify_malloc(pCtx, <span class="keyword">sizeof</span>(uint32_t) * hash_table_size);</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    memset(hash_table, -1, hash_table_size * <span class="keyword">sizeof</span>(uint32_t));</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160; </div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="comment">// create a unique mapping for each vertex based purely on its position</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    uint32_t num_unique_vertices = 0;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keywordflow">for</span> (uint32_t vertex_index = 0; vertex_index &lt; pMesh-&gt;vertex_count; vertex_index++)</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    {</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;      uint32_t* hash_table_entry = hash_table_find_vertex_position(hash_table, hash_table_mask, pMesh-&gt;vertices, vertex_index);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;      <span class="keywordflow">if</span> (*hash_table_entry == UINT32_MAX)</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;      {</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <span class="comment">// vertex is not already in the hash table. allocate a unique index for it.</span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        *hash_table_entry = vertex_index;</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        remap_indices[vertex_index] = num_unique_vertices++;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;      }</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;      {</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        <span class="comment">// vertex is already in the hash table. Point this to the index that is already existing!</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        assert(remap_indices[*hash_table_entry] != UINT32_MAX);</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        remap_indices[vertex_index] = remap_indices[*hash_table_entry];</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;      }</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    }</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <span class="comment">// now that we have remap_indices, we no longer need the hash table.</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    _voxel_meshify_free(pCtx, hash_table);</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;  }</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160; </div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;  <span class="comment">// for each triangle face, add the normal of the face to the unique normal for the vertex</span></div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;  <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>* remap_normals = (<a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>*)_voxel_meshify_malloc(pCtx, <span class="keyword">sizeof</span>(<a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>) * pMesh-&gt;vertex_count);</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;  memset(remap_normals, 0, <span class="keyword">sizeof</span>(<a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>) * pMesh-&gt;vertex_count);</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160; </div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;  <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; pMesh-&gt;index_count; i += 3)</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;  {</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    uint32_t i0 = pMesh-&gt;indices[i + 0];</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    uint32_t i1 = pMesh-&gt;indices[i + 1];</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    uint32_t i2 = pMesh-&gt;indices[i + 2];</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a> v0 = pMesh-&gt;vertices[i0];</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a> v1 = pMesh-&gt;vertices[i1];</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a> v2 = pMesh-&gt;vertices[i2];</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> normal = _cross3(_sub3(v1.pos, v0.pos), _sub3(v2.pos, v0.pos));</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160; </div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    uint32_t ri0 = remap_indices[i0];</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    uint32_t ri1 = remap_indices[i1];</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    uint32_t ri2 = remap_indices[i2];</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    remap_normals[ri0] = _add3(remap_normals[ri0], normal);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    remap_normals[ri1] = _add3(remap_normals[ri1], normal);</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    remap_normals[ri2] = _add3(remap_normals[ri2], normal);</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;  }</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160; </div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;  <span class="comment">// for each vertex, copy over remap normal if it&#39;s non-zero.</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;  <span class="keywordflow">for</span> (uint32_t vertex_index = 0; vertex_index &lt; pMesh-&gt;vertex_count; vertex_index++)</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;  {</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> accumulated_normal = remap_normals[remap_indices[vertex_index]];</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="keywordflow">if</span> (_dot3(accumulated_normal, accumulated_normal) &gt; 0.001f)</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;      pMesh-&gt;vertices[vertex_index].normal = _normalize3(accumulated_normal);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;  }</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160; </div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;  _voxel_meshify_free(pCtx, remap_normals);</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;  _voxel_meshify_free(pCtx, remap_indices);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;}</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160; </div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> _streaming_add_to_mesh(uint32_t x, uint32_t y, uint32_t z, <span class="keyword">const</span> <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>* pVertices, uint32_t vertex_count, <span class="keyword">const</span> uint32_t* pIndices, uint32_t index_count, <span class="keywordtype">void</span>* pStream_func_data)</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;{</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;  <span class="comment">// these params are unused for now.</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;  (void)x;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;  (void)y;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;  (void)z;</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;  <span class="comment">// copy the specified vertices and indices into the mesh</span></div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;  <a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* mesh = (<a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>*)pStream_func_data;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;  memcpy(&amp;mesh-&gt;vertices[mesh-&gt;vertex_count], pVertices, vertex_count * <span class="keyword">sizeof</span>(<a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>));</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;  memcpy(&amp;mesh-&gt;indices[mesh-&gt;index_count], pIndices, index_count * <span class="keyword">sizeof</span>(uint32_t));</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;  mesh-&gt;vertex_count += vertex_count;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;  mesh-&gt;index_count += index_count;</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;}</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160; </div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="comment">// returns the number of quad faces that would be generated by tessellating the specified voxel field using the simple algorithm.</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;uint32_t ogt_face_count_from_paletted_voxels_simple(<span class="keyword">const</span> uint8_t* pVoxels, uint32_t size_x, uint32_t size_y, uint32_t size_z)</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;{</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;  <span class="keywordflow">return</span> _count_voxel_sized_faces(pVoxels, size_x, size_y, size_z);</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;}</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160; </div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="comment">// constructs and returns a mesh from the specified voxel grid with no optimization to the geometry.</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* ogt_mesh_from_paletted_voxels_simple(</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a>* pCtx,</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;  <span class="keyword">const</span> uint8_t* pVoxels, uint32_t size_x, uint32_t size_y, uint32_t size_z, <span class="keyword">const</span> <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a>* pPalette)</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;{</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;  uint32_t max_face_count = _count_voxel_sized_faces(pVoxels, size_x, size_y, size_z);</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;  uint32_t max_vertex_count = max_face_count * 4;</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;  uint32_t max_index_count = max_face_count * 6;</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160; </div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;  uint32_t mesh_size = <span class="keyword">sizeof</span>(<a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>) + (max_vertex_count * <span class="keyword">sizeof</span>(<a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>)) + (max_index_count * <span class="keyword">sizeof</span>(uint32_t));</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;  <a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* mesh = (<a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>*)_voxel_meshify_malloc(pCtx, mesh_size);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;  <span class="keywordflow">if</span> (!mesh)</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160; </div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;  mesh-&gt;vertices = (<a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>*)&amp;mesh[1];</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;  mesh-&gt;indices = (uint32_t*)&amp;mesh-&gt;vertices[max_vertex_count];</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;  mesh-&gt;vertex_count = 0;</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;  mesh-&gt;index_count = 0;</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160; </div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;  ogt_stream_from_paletted_voxels_simple(pVoxels, size_x, size_y, size_z, pPalette, _streaming_add_to_mesh, mesh);</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160; </div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;  assert(mesh-&gt;vertex_count == max_vertex_count);</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;  assert(mesh-&gt;index_count == max_index_count);</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;  <span class="keywordflow">return</span> mesh;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;}</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160; </div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment">// streams geometry for each voxel at a time to a specified user function.</span></div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="keywordtype">void</span> ogt_stream_from_paletted_voxels_simple(</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;  <span class="keyword">const</span> uint8_t* pVoxels, uint32_t size_x, uint32_t size_y, uint32_t size_z, <span class="keyword">const</span> <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a>* pPalette,</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;  ogt_voxel_simple_stream_func stream_func, <span class="keywordtype">void</span>* pStream_func_data)</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;{</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;  assert(stream_func);</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;  <span class="keyword">const</span> int32_t k_stride_x = 1;</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;  <span class="keyword">const</span> int32_t k_stride_y = size_x;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;  <span class="keyword">const</span> int32_t k_stride_z = size_x * size_y;</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;  <span class="keyword">const</span> int32_t k_max_x = size_x - 1;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;  <span class="keyword">const</span> int32_t k_max_y = size_y - 1;</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;  <span class="keyword">const</span> int32_t k_max_z = size_z - 1;</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160; </div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;  <span class="keyword">const</span> uint8_t* current_voxel = pVoxels;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160; </div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;  uint32_t total_vertex_count = 0;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;  uint32_t total_index_count = 0;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;  <span class="keywordflow">for</span> (uint32_t k = 0; k &lt; size_z; k++)</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;  {</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> min_z = (float)k;</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> max_z = min_z + 1.0f;</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keywordflow">for</span> (uint32_t j = 0; j &lt; size_y; j++)</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    {</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">float</span> min_y = (float)j;</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">float</span> max_y = min_y + 1.0f;</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;      <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; size_x; i++, current_voxel++)</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;      {</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        <span class="comment">// current voxel slot is empty? skip it.</span></div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        <span class="keywordflow">if</span> (current_voxel[0] == 0)</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;          <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160; </div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a> color = pPalette[current_voxel[0]];</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160; </div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        <span class="comment">// determine the min/max coords of the voxel for each dimension.</span></div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> min_x = (float)i;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> max_x = min_x + 1.0f;</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160; </div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        <span class="comment">// determine which faces we need to generate</span></div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        uint32_t neg_x = ((i == 0) || (current_voxel[-k_stride_x] == 0));</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        uint32_t pos_x = ((i == k_max_x) || (current_voxel[k_stride_x] == 0));</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        uint32_t neg_y = ((j == 0) || (current_voxel[-k_stride_y] == 0));</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        uint32_t pos_y = ((j == k_max_y) || (current_voxel[k_stride_y] == 0));</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        uint32_t neg_z = ((k == 0) || (current_voxel[-k_stride_z] == 0));</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        uint32_t pos_z = ((k == k_max_z) || (current_voxel[k_stride_z] == 0));</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160; </div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        <span class="comment">// count the number of faces. skip if zero.</span></div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        <span class="keyword">const</span> uint32_t face_count_needed = (neg_x + pos_x + neg_y + pos_y + neg_z + pos_z);</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        <span class="keywordflow">if</span> (!face_count_needed)</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;          <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160; </div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        <span class="comment">// generate geometry for this voxel to a local buffer first.</span></div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a> local_vertex[24];</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        uint32_t local_index[36];</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>* current_vertex = local_vertex;</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        uint32_t* current_index = local_index;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160; </div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        <span class="comment">// -X direction face</span></div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        <span class="keywordflow">if</span> (neg_x)</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        {</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;          current_vertex[0] = _mesh_make_vertex(min_x, min_y, min_z, -1.0f, 0.0f, 0.0f, color);</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;          current_vertex[1] = _mesh_make_vertex(min_x, max_y, min_z, -1.0f, 0.0f, 0.0f, color);</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;          current_vertex[2] = _mesh_make_vertex(min_x, max_y, max_z, -1.0f, 0.0f, 0.0f, color);</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;          current_vertex[3] = _mesh_make_vertex(min_x, min_y, max_z, -1.0f, 0.0f, 0.0f, color);</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;          current_index[0] = total_vertex_count + 2;</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;          current_index[1] = total_vertex_count + 1;</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;          current_index[2] = total_vertex_count + 0;</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;          current_index[3] = total_vertex_count + 0;</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;          current_index[4] = total_vertex_count + 3;</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;          current_index[5] = total_vertex_count + 2;</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;          total_vertex_count += 4;</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;          total_index_count += 6;</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;          current_vertex += 4;</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;          current_index += 6;</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        }</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160; </div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        <span class="comment">// +X direction face</span></div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        <span class="keywordflow">if</span> (pos_x)</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        {</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;          current_vertex[0] = _mesh_make_vertex(max_x, min_y, min_z, 1.0f, 0.0f, 0.0f, color);</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;          current_vertex[1] = _mesh_make_vertex(max_x, max_y, min_z, 1.0f, 0.0f, 0.0f, color);</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;          current_vertex[2] = _mesh_make_vertex(max_x, max_y, max_z, 1.0f, 0.0f, 0.0f, color);</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;          current_vertex[3] = _mesh_make_vertex(max_x, min_y, max_z, 1.0f, 0.0f, 0.0f, color);</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;          current_index[0] = total_vertex_count + 0;</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;          current_index[1] = total_vertex_count + 1;</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;          current_index[2] = total_vertex_count + 2;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;          current_index[3] = total_vertex_count + 2;</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;          current_index[4] = total_vertex_count + 3;</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;          current_index[5] = total_vertex_count + 0;</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;          total_vertex_count += 4;</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;          total_index_count += 6;</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;          current_vertex += 4;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;          current_index += 6;</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        }</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160; </div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;        <span class="comment">// -Y direction face</span></div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        <span class="keywordflow">if</span> (neg_y)</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        {</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;          current_vertex[0] = _mesh_make_vertex(min_x, min_y, min_z, 0.0f, -1.0f, 0.0f, color);</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;          current_vertex[1] = _mesh_make_vertex(max_x, min_y, min_z, 0.0f, -1.0f, 0.0f, color);</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;          current_vertex[2] = _mesh_make_vertex(max_x, min_y, max_z, 0.0f, -1.0f, 0.0f, color);</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;          current_vertex[3] = _mesh_make_vertex(min_x, min_y, max_z, 0.0f, -1.0f, 0.0f, color);</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;          current_index[0] = total_vertex_count + 0;</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;          current_index[1] = total_vertex_count + 1;</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;          current_index[2] = total_vertex_count + 2;</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;          current_index[3] = total_vertex_count + 2;</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;          current_index[4] = total_vertex_count + 3;</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;          current_index[5] = total_vertex_count + 0;</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;          total_vertex_count += 4;</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;          total_index_count += 6;</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;          current_vertex += 4;</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;          current_index += 6;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;        }</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        <span class="comment">// +Y direction face</span></div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;        <span class="keywordflow">if</span> (pos_y)</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        {</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;          current_vertex[0] = _mesh_make_vertex(min_x, max_y, min_z, 0.0f, 1.0f, 0.0f, color);</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;          current_vertex[1] = _mesh_make_vertex(max_x, max_y, min_z, 0.0f, 1.0f, 0.0f, color);</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;          current_vertex[2] = _mesh_make_vertex(max_x, max_y, max_z, 0.0f, 1.0f, 0.0f, color);</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;          current_vertex[3] = _mesh_make_vertex(min_x, max_y, max_z, 0.0f, 1.0f, 0.0f, color);</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;          current_index[0] = total_vertex_count + 2;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;          current_index[1] = total_vertex_count + 1;</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;          current_index[2] = total_vertex_count + 0;</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;          current_index[3] = total_vertex_count + 0;</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;          current_index[4] = total_vertex_count + 3;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;          current_index[5] = total_vertex_count + 2;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;          total_vertex_count += 4;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;          total_index_count += 6;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;          current_vertex += 4;</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;          current_index += 6;</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        }</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        <span class="comment">// -Z direction face</span></div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        <span class="keywordflow">if</span> (neg_z)</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        {</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;          current_vertex[0] = _mesh_make_vertex(min_x, min_y, min_z, 0.0f, 0.0f, -1.0f, color);</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;          current_vertex[1] = _mesh_make_vertex(max_x, min_y, min_z, 0.0f, 0.0f, -1.0f, color);</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;          current_vertex[2] = _mesh_make_vertex(max_x, max_y, min_z, 0.0f, 0.0f, -1.0f, color);</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;          current_vertex[3] = _mesh_make_vertex(min_x, max_y, min_z, 0.0f, 0.0f, -1.0f, color);</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;          current_index[0] = total_vertex_count + 2;</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;          current_index[1] = total_vertex_count + 1;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;          current_index[2] = total_vertex_count + 0;</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;          current_index[3] = total_vertex_count + 0;</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;          current_index[4] = total_vertex_count + 3;</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;          current_index[5] = total_vertex_count + 2;</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;          total_vertex_count += 4;</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;          total_index_count += 6;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;          current_vertex += 4;</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;          current_index += 6;</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        }</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        <span class="comment">// +Z direction face</span></div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        <span class="keywordflow">if</span> (pos_z)</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        {</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;          current_vertex[0] = _mesh_make_vertex(min_x, min_y, max_z, 0.0f, 0.0f, 1.0f, color);</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;          current_vertex[1] = _mesh_make_vertex(max_x, min_y, max_z, 0.0f, 0.0f, 1.0f, color);</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;          current_vertex[2] = _mesh_make_vertex(max_x, max_y, max_z, 0.0f, 0.0f, 1.0f, color);</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;          current_vertex[3] = _mesh_make_vertex(min_x, max_y, max_z, 0.0f, 0.0f, 1.0f, color);</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;          current_index[0] = total_vertex_count + 0;</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;          current_index[1] = total_vertex_count + 1;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;          current_index[2] = total_vertex_count + 2;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;          current_index[3] = total_vertex_count + 2;</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;          current_index[4] = total_vertex_count + 3;</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;          current_index[5] = total_vertex_count + 0;</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;          total_vertex_count += 4;</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;          total_index_count += 6;</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;          current_vertex += 4;</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;          current_index += 6;</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        }</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160; </div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        <span class="comment">// geometry for this voxel is provided to a caller-specified stream function/callback</span></div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        stream_func(i, j, k, local_vertex, face_count_needed * 4, local_index, face_count_needed * 6, pStream_func_data);</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;      }</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    }</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;  }</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;}</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160; </div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160; </div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;<span class="comment">// The base algorithm that is used here, is as follows:</span></div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;<span class="comment">// On a per slice basis, we find a voxel that has not yet been polygonized. We then try to</span></div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;<span class="comment">// grow a rectangle from that voxel within the slice that can be represented by a polygon.</span></div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;<span class="comment">// We create the quad polygon to represent the voxel, mark the voxels in the slice that are</span></div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;<span class="comment">// covered by the rectangle as having been polygonized, and continue on the search through</span></div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;<span class="comment">// the rest of the slice.</span></div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="keywordtype">void</span> _greedy_meshify_voxels_in_face_direction(</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;  <span class="keyword">const</span> uint8_t* pVoxels,</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a>* pPalette,</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;  int32_t size_x, int32_t size_y, int32_t size_z,             <span class="comment">// how many voxels in each of X,Y,Z dimensions</span></div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;  int32_t k_stride_x, int32_t k_stride_y, int32_t k_stride_z, <span class="comment">// the memory stride for each of those X,Y,Z dimensions within the voxel data.</span></div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;  <span class="keyword">const</span> ogt_mesh_transform&amp; transform,                        <span class="comment">// transform to convert from X,Y,Z to &quot;objectSpace&quot;</span></div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;  <a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* out_pMesh)</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;{</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160; </div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;  <span class="comment">// enable aggressive voxel optimization for now.</span></div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;  uint32_t max_voxels_per_slice = size_x * size_y;</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160; </div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;  <span class="comment">// allocate a structure that is used for tracking which voxels in a slice have already been included in output mesh.</span></div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;  assert(max_voxels_per_slice &lt;= 65536); <span class="comment">//</span></div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;  ogt_mesh_bitset_64k voxel_polygonized;</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160; </div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;  <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> normal = _transform_vector(transform, _make_vec3(0.0f, 0.0f, 1.0f));</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160; </div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="preprocessor">#  define VOXELDATA_INDEX(_x, _y, _z) ((_x) * k_stride_x) + ((_y) * k_stride_y) + ((_z) * k_stride_z)</span></div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;<span class="preprocessor">#  define LOCALDATA_INDEX(_x, _y) ((_x) + ((_y) * size_x))</span></div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160; </div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;  <span class="comment">// use this to remap parity where necessary.</span></div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;  uint32_t base_index_start = out_pMesh-&gt;index_count;</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160; </div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;  uint32_t* index_data = &amp;out_pMesh-&gt;indices[out_pMesh-&gt;index_count];</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;  <a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>* vertex_data = &amp;out_pMesh-&gt;vertices[out_pMesh-&gt;vertex_count];</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160; </div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;  <span class="comment">// determine if the transform parity has flipped in a way that winding would have been switched.</span></div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>* side = _make_vec3_ptr(&amp;transform.m00);</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>* up = _make_vec3_ptr(&amp;transform.m10);</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>* fwd = _make_vec3_ptr(&amp;transform.m20);</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;  <span class="keywordtype">bool</span> is_parity_flipped = _dot3(*fwd, _cross3(*side, *up)) &lt; 0.0f;</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160; </div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;  <span class="keywordflow">for</span> (int32_t k0 = 0; k0 &lt; size_z; k0++)</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;  {</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <span class="comment">// k0 = current slice, k1 = next slice</span></div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    int32_t k1 = k0 + 1;</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160; </div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    <span class="comment">// reset the per-voxel X/Y status for this slice.</span></div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    voxel_polygonized.clear(max_voxels_per_slice);</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160; </div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="comment">// is this the last slice? If yes, we don&#39;t check</span></div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="keywordtype">bool</span> is_last_k_slice = (k1 == size_z);</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160; </div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <span class="comment">// here, we search for the first unprocessed voxel</span></div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <span class="keywordflow">for</span> (int32_t j0 = 0; j0 &lt; size_y; j0++)</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    {</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;      <span class="keywordflow">for</span> (int32_t i0 = 0; i0 &lt; size_x; i0++)</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;      {</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;        <span class="comment">// determine the polygon color index</span></div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        uint8_t color_index = pVoxels[VOXELDATA_INDEX(i0, j0, k0)];</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160; </div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;        <span class="comment">// this voxel doesn&#39;t need to be polygonized if...</span></div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        <span class="keywordflow">if</span> ((color_index == 0) ||                                            <span class="comment">// (1) voxel is empty</span></div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;            voxel_polygonized.is_set(LOCALDATA_INDEX(i0, j0)) ||             <span class="comment">// (2) voxel is already part of a polygon for the zslice.</span></div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;            (!is_last_k_slice &amp;&amp; pVoxels[VOXELDATA_INDEX(i0, j0, k1)] != 0)) <span class="comment">// (3) voxel in the next slice (+z direction) is solid</span></div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;        {</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;          <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;        }</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160; </div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;        <span class="comment">// compute i1. This is the coord bounding the longest span of identical voxels in the +i direction.</span></div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;        int32_t i1 = i0 + 1;</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;        <span class="keywordflow">for</span> (i1 = i0 + 1; i1 &lt; size_x; i1++)</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;        {</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;          <span class="comment">// stop extending i1 if...</span></div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;          <span class="keywordflow">if</span> ((pVoxels[VOXELDATA_INDEX(i1, j0, k0)] != color_index) ||         <span class="comment">// (1) this voxel doesn&#39;t match the match color</span></div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;              (voxel_polygonized.is_set(LOCALDATA_INDEX(i1, j0))) ||           <span class="comment">// (2) voxel is already part of a polygon for the zslice</span></div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;              (!is_last_k_slice &amp;&amp; pVoxels[VOXELDATA_INDEX(i1, j0, k1)] != 0)) <span class="comment">// (3) voxel in the next slice (+z direction) is solid</span></div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;          {</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;          }</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;        }</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160; </div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160; </div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;        <span class="comment">// compute j1. The is the coord bounding the longest span of identical voxels [i0..i1] in the +j direction</span></div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;        int32_t j1 = j0 + 1;</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;        <span class="keywordflow">for</span> (j1 = j0 + 1; j1 &lt; size_y; j1++)</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;        {</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;          <span class="keywordtype">bool</span> got_j1 = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;          <span class="keywordflow">for</span> (int32_t a = i0; a &lt; i1; a++)</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;          {</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;            <span class="comment">// stop extending i1 if...</span></div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;            <span class="keywordflow">if</span> ((pVoxels[VOXELDATA_INDEX(a, j1, k0)] != color_index) ||         <span class="comment">// (1) this voxel doesn&#39;t match the match color</span></div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                (voxel_polygonized.is_set(LOCALDATA_INDEX(a, j1))) ||           <span class="comment">// (2) voxel is already part of a polygon for the zslice</span></div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;                (!is_last_k_slice &amp;&amp; pVoxels[VOXELDATA_INDEX(a, j1, k1)] != 0)) <span class="comment">// (3) voxel in the next slice (+z direction) is solid</span></div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;            {</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;              got_j1 = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;              <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;            }</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;          }</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;          <span class="keywordflow">if</span> (got_j1)</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;        }</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160; </div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160; </div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;        <span class="comment">// now j1 and i1 are the upper bound (exclusive) of the rectangle starting from i0,j0.</span></div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;        <span class="comment">// mark all of this slice voxels in that rectangle as processed.</span></div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;        <span class="keywordflow">for</span> (int32_t b = j0; b &lt; j1; b++)</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;          <span class="keywordflow">for</span> (int32_t a = i0; a &lt; i1; a++)</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;            voxel_polygonized.set(LOCALDATA_INDEX(a, b));</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160; </div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;        <span class="comment">// determine the min/max coords of the polygon for each dimension.</span></div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        <span class="keywordtype">float</span> min_x = (float)i0;</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;        <span class="keywordtype">float</span> max_x = (float)i1;</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        <span class="keywordtype">float</span> min_y = (float)j0;</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;        <span class="keywordtype">float</span> max_y = (float)j1;</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;        <span class="keywordtype">float</span> max_z = (float)k1;</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160; </div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;        <span class="comment">// cache the color</span></div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;        <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a> color = pPalette[color_index];</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160; </div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;        <span class="comment">// write the verts for this face</span></div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;        vertex_data[0] = _mesh_make_vertex(_transform_point(transform, _make_vec3(min_x, min_y, max_z)), normal, color);</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;        vertex_data[1] = _mesh_make_vertex(_transform_point(transform, _make_vec3(max_x, min_y, max_z)), normal, color);</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;        vertex_data[2] = _mesh_make_vertex(_transform_point(transform, _make_vec3(max_x, max_y, max_z)), normal, color);</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        vertex_data[3] = _mesh_make_vertex(_transform_point(transform, _make_vec3(min_x, max_y, max_z)), normal, color);</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160; </div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;        <span class="comment">// reserve the index order to ensure parity/winding is still correct.</span></div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;        <span class="keywordflow">if</span> (is_parity_flipped)</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;        {</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;          index_data[0] = out_pMesh-&gt;vertex_count + 0;</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;          index_data[1] = out_pMesh-&gt;vertex_count + 3;</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;          index_data[2] = out_pMesh-&gt;vertex_count + 2;</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;          index_data[3] = out_pMesh-&gt;vertex_count + 2;</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;          index_data[4] = out_pMesh-&gt;vertex_count + 1;</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;          index_data[5] = out_pMesh-&gt;vertex_count + 0;</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;        }</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;        {</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;          index_data[0] = out_pMesh-&gt;vertex_count + 0;</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;          index_data[1] = out_pMesh-&gt;vertex_count + 1;</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;          index_data[2] = out_pMesh-&gt;vertex_count + 2;</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;          index_data[3] = out_pMesh-&gt;vertex_count + 2;</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;          index_data[4] = out_pMesh-&gt;vertex_count + 3;</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;          index_data[5] = out_pMesh-&gt;vertex_count + 0;</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;        }</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160; </div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;        vertex_data += 4;</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;        index_data += 6;</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160; </div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;        out_pMesh-&gt;vertex_count += 4;</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;        out_pMesh-&gt;index_count += 6;</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;      }</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    }</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;  }</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160; </div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;<span class="preprocessor">#  undef VOXELDATA_INDEX</span></div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;<span class="preprocessor">#  undef LOCALDATA_INDEX</span></div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;}</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160; </div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;<a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* ogt_mesh_from_paletted_voxels_greedy(</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a>* pCtx,</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;  <span class="keyword">const</span> uint8_t* pVoxels, uint32_t size_x, uint32_t size_y, uint32_t size_z, <span class="keyword">const</span> <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a>* pPalette)</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;{</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;  uint32_t max_face_count = _count_voxel_sized_faces(pVoxels, size_x, size_y, size_z);</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;  uint32_t max_vertex_count = max_face_count * 4;</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;  uint32_t max_index_count = max_face_count * 6;</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160; </div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;  uint32_t mesh_size = <span class="keyword">sizeof</span>(<a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>) + (max_vertex_count * <span class="keyword">sizeof</span>(<a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>)) + (max_index_count * <span class="keyword">sizeof</span>(uint32_t));</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;  <a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* mesh = (<a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>*)_voxel_meshify_malloc(pCtx, mesh_size);</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;  <span class="keywordflow">if</span> (!mesh)</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160; </div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;  mesh-&gt;vertices = (<a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>*)&amp;mesh[1];</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;  mesh-&gt;indices = (uint32_t*)&amp;mesh-&gt;vertices[max_vertex_count];</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;  mesh-&gt;vertex_count = 0;</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;  mesh-&gt;index_count = 0;</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160; </div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;  <span class="keyword">const</span> int32_t k_stride_x = 1;</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;  <span class="keyword">const</span> int32_t k_stride_y = size_x;</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;  <span class="keyword">const</span> int32_t k_stride_z = size_x * size_y;</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160; </div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;  <span class="comment">// do the +y PASS</span></div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;  {</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    ogt_mesh_transform transform_pos_y = _make_transform(</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;      0.0f, 0.0f, 1.0f, 0.0f,</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;      1.0f, 0.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;      0.0f, 1.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;      0.0f, 0.0f, 0.0f, 0.0f);</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160; </div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    _greedy_meshify_voxels_in_face_direction(</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;      pVoxels, pPalette,</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;      size_z, size_x, size_y,</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;      k_stride_z, k_stride_x, k_stride_y,</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;      transform_pos_y,</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;      mesh);</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;  }</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;  <span class="comment">// do the -y PASS</span></div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;  {</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;    ogt_mesh_transform transform_neg_y = _make_transform(</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;      0.0f, 0.0f, 1.0f, 0.0f,</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;      1.0f, 0.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;      0.0f, -1.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;      0.0f, (<span class="keywordtype">float</span>)(size_y), 0.0f, 0.0f);</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160; </div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    _greedy_meshify_voxels_in_face_direction(</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;      pVoxels + (size_y - 1) * k_stride_y,</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;      pPalette,</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;      size_z, size_x, size_y,</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;      k_stride_z, k_stride_x, -k_stride_y,</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;      transform_neg_y,</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;      mesh);</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;  }</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;  <span class="comment">// do the +X pass</span></div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;  {</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;    ogt_mesh_transform transform_pos_x = _make_transform(</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;      0.0f, 1.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;      0.0f, 0.0f, 1.0f, 0.0f,</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;      1.0f, 0.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;      0.0f, 0.0f, 0.0f, 0.0f);</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160; </div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    _greedy_meshify_voxels_in_face_direction(</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;      pVoxels, pPalette,</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;      size_y, size_z, size_x,</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;      k_stride_y, k_stride_z, k_stride_x,</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;      transform_pos_x,</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;      mesh);</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;  }</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;  <span class="comment">// do the -X pass</span></div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;  {</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    ogt_mesh_transform transform_neg_x = _make_transform(</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;      0.0f, 1.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;      0.0f, 0.0f, 1.0f, 0.0f,</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;      -1.0f, 0.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;      (<span class="keywordtype">float</span>)size_x, 0.0f, 0.0f, 0.0f);</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160; </div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;    _greedy_meshify_voxels_in_face_direction(</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;      pVoxels + (size_x - 1) * k_stride_x,</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;      pPalette,</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;      size_y, size_z, size_x,</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;      k_stride_y, k_stride_z, -k_stride_x,</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;      transform_neg_x,</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;      mesh);</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;  }</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;  <span class="comment">// do the +Z pass</span></div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;  {</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    ogt_mesh_transform transform_pos_z = _make_transform(</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;      1.0f, 0.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;      0.0f, 1.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;      0.0f, 0.0f, 1.0f, 0.0f,</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;      0.0f, 0.0f, 0.0f, 0.0f);</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160; </div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;    _greedy_meshify_voxels_in_face_direction(</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;      pVoxels, pPalette,</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;      size_x, size_y, size_z,</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;      k_stride_x, k_stride_y, k_stride_z,</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;      transform_pos_z,</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;      mesh);</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;  }</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;  <span class="comment">// do the -Z pass</span></div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;  {</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    ogt_mesh_transform transform_neg_z = _make_transform(</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;      1.0f, 0.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;      0.0f, 1.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;      0.0f, 0.0f, -1.0f, 0.0f,</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;      0.0f, 0.0f, (<span class="keywordtype">float</span>)size_z, 0.0f);</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160; </div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    _greedy_meshify_voxels_in_face_direction(</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;      pVoxels + (size_z - 1) * k_stride_z,</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;      pPalette,</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;      size_x, size_y, size_z,</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;      k_stride_x, k_stride_y, -k_stride_z,</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;      transform_neg_z,</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;      mesh);</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;  }</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160; </div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;  assert(mesh-&gt;vertex_count &lt;= max_vertex_count);</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;  assert(mesh-&gt;index_count &lt;= max_index_count);</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;  <span class="keywordflow">return</span> mesh;</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;}</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160; </div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;<span class="keyword">struct </span>ogt_mesh_vec2i</div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;{</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;  int32_t x, y;</div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;};</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160; </div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;<span class="keyword">inline</span> ogt_mesh_vec2i make_vec2i(int32_t x, int32_t y)</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;{</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;  ogt_mesh_vec2i ret;</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;  ret.x = x;</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;  ret.y = y;</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;  <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;}</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160; </div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;<span class="keyword">inline</span> ogt_mesh_vec2i operator+(<span class="keyword">const</span> ogt_mesh_vec2i&amp; lhs, <span class="keyword">const</span> ogt_mesh_vec2i&amp; rhs)</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;{</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;  ogt_mesh_vec2i ret;</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;  ret.x = lhs.x + rhs.x;</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;  ret.y = lhs.y + rhs.y;</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;  <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;}</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160; </div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;<span class="keyword">inline</span> ogt_mesh_vec2i operator-(<span class="keyword">const</span> ogt_mesh_vec2i&amp; lhs, <span class="keyword">const</span> ogt_mesh_vec2i&amp; rhs)</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;{</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;  ogt_mesh_vec2i ret;</div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;  ret.x = lhs.x - rhs.x;</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;  ret.y = lhs.y - rhs.y;</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;  <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;}</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160; </div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;<span class="keyword">inline</span> ogt_mesh_vec2i operator*(<span class="keyword">const</span> ogt_mesh_vec2i&amp; lhs, <span class="keyword">const</span> int32_t&amp; rhs)</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;{</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;  ogt_mesh_vec2i ret;</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;  ret.x = lhs.x * rhs;</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;  ret.y = lhs.y * rhs;</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;  <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;}</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160; </div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> is_vec2i_equal(<span class="keyword">const</span> ogt_mesh_vec2i&amp; lhs, <span class="keyword">const</span> ogt_mesh_vec2i&amp; rhs)</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;{</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;  <span class="keywordflow">return</span> lhs.x == rhs.x &amp;&amp; lhs.y == rhs.y;</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;}</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160; </div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;ogt_mesh_vec2i get_cardinal_unit_vector(<span class="keyword">const</span> ogt_mesh_vec2i&amp; vec)</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;{</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;  assert((vec.x == 0 &amp;&amp; vec.y != 0) || (vec.y == 0 &amp;&amp; vec.x != 0)); <span class="comment">// assumes this is a cardinal vector</span></div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;  <span class="keywordflow">if</span> (vec.x &lt;= -1)</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    <span class="keywordflow">return</span> make_vec2i(-1, 0);</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;  <span class="keywordflow">if</span> (vec.x &gt;= 1)</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    <span class="keywordflow">return</span> make_vec2i(1, 0);</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;  <span class="keywordflow">if</span> (vec.y &lt;= -1)</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    <span class="keywordflow">return</span> make_vec2i(0, -1);</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;  <span class="keywordflow">if</span> (vec.y &gt;= 1)</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    <span class="keywordflow">return</span> make_vec2i(0, 1);</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;  assert(0); <span class="comment">// unreachable unless the above assert already failed!</span></div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;  <span class="keywordflow">return</span> make_vec2i(0, 0);</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;}</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160; </div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;int32_t get_cardinal_vector_length(<span class="keyword">const</span> ogt_mesh_vec2i&amp; vec)</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;{</div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;  assert((vec.x == 0 &amp;&amp; vec.y != 0) || (vec.y == 0 &amp;&amp; vec.x != 0));</div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;  <span class="keywordflow">return</span> vec.x == 0 ? abs(vec.y) : vec.y == 0 ? abs(vec.x)</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;                                              : 0;</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;}</div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160; </div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;<span class="comment">// gets the signed area of the triangle</span></div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;<span class="keyword">inline</span> int32_t get_triangle_signed_area(<span class="keyword">const</span> ogt_mesh_vec2i&amp; v0, <span class="keyword">const</span> ogt_mesh_vec2i&amp; v1, <span class="keyword">const</span> ogt_mesh_vec2i&amp; v2)</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;{</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;  <span class="keywordflow">return</span> ((v0.x - v1.x) * (v2.y - v1.y)) - ((v0.y - v1.y) * (v2.x - v1.x));</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;}</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160; </div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;<span class="comment">// determines whether the triangle is convex or not</span></div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> is_triangle_convex(<span class="keyword">const</span> ogt_mesh_vec2i&amp; v0, <span class="keyword">const</span> ogt_mesh_vec2i&amp; v1, <span class="keyword">const</span> ogt_mesh_vec2i&amp; v2)</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;{</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;  <span class="keywordflow">return</span> get_triangle_signed_area(v0, v1, v2) &gt; 0;</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;}</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160; </div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;<span class="comment">// determines whether the point p is inside the triangle v0,v1,v2</span></div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;<span class="keywordtype">bool</span> is_point_in_triangle(<span class="keyword">const</span> ogt_mesh_vec2i&amp; v0, <span class="keyword">const</span> ogt_mesh_vec2i&amp; v1, <span class="keyword">const</span> ogt_mesh_vec2i&amp; v2, <span class="keyword">const</span> ogt_mesh_vec2i&amp; p)</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;{</div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;  <span class="keywordtype">bool</span> convex_v0v1 = get_triangle_signed_area(v0, v1, p) &gt;= 0;</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;  <span class="keywordtype">bool</span> convex_v1v2 = get_triangle_signed_area(v1, v2, p) &gt;= 0;</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;  <span class="keywordtype">bool</span> convex_v2v0 = get_triangle_signed_area(v2, v0, p) &gt;= 0;</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;  <span class="keywordflow">return</span> (convex_v0v1 == convex_v1v2) &amp;&amp; (convex_v0v1 == convex_v2v0);</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;}</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160; </div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;uint32_t _tessellate_polygon(uint32_t* pIndices, <span class="keyword">const</span> ogt_mesh_vec2i* pVerts, uint32_t vert_count)</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;{</div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> uint32_t k_max_polygon_size = 16384; <span class="comment">// 32KB of stack!</span></div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;  uint16_t ring_indices[k_max_polygon_size];</div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;  assert(vert_count &gt;= 3 &amp;&amp; vert_count &lt;= k_max_polygon_size);</div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160; </div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;  <span class="keywordflow">for</span> (uint16_t i = 0; i &lt; vert_count; i++)</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    ring_indices[i] = i;</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;  uint32_t ring_count = vert_count;</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160; </div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;  uint32_t index_count = 0;</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160; </div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;  <span class="comment">// naieve &quot;ear clipping&quot; algorithm. Start with a ring of polygon corners.</span></div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;  <span class="comment">// Find 3 sequential corners on the polygon and make sure no other points of the polygon are contained within it.</span></div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;  <span class="comment">// If so, remove the inner point from the ring. Rinse and repeat.</span></div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;  uint32_t no_progress_counter = 0;</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;  uint32_t i0 = 0;</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;  <span class="keywordflow">while</span> (ring_count &gt; 3)</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;  {</div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;    i0 = (i0 + 0) % ring_count;</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    uint32_t i1 = (i0 + 1) % ring_count;</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    uint32_t i2 = (i0 + 2) % ring_count;</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160; </div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    ogt_mesh_vec2i v0 = pVerts[ring_indices[i0]];</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    ogt_mesh_vec2i v1 = pVerts[ring_indices[i1]];</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    ogt_mesh_vec2i v2 = pVerts[ring_indices[i2]];</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160; </div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    <span class="comment">// check whether we can carve off this ear.</span></div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    <span class="keywordtype">bool</span> can_triangulate = is_triangle_convex(v0, v1, v2);</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160; </div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    <span class="keywordflow">if</span> (can_triangulate)</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    {</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;      <span class="comment">// make sure that no other points are inside this triangle. We do allow points to be coincident with corners of the triangle though.</span></div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;      <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; ring_count; i++)</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;      {</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;        <span class="keywordflow">if</span> (i == i0 || i == i1 || i == i2)</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;          <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;        <span class="keyword">const</span> ogt_mesh_vec2i&amp; p = pVerts[ring_indices[i]];</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;        <span class="keywordtype">bool</span> point_on_corner = is_vec2i_equal(v0, p) || is_vec2i_equal(v1, p) || is_vec2i_equal(v2, p);</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;        <span class="keywordflow">if</span> (!point_on_corner &amp;&amp; is_point_in_triangle(v0, v1, v2, pVerts[ring_indices[i]]))</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;        {</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;          can_triangulate = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;        }</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;      }</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    }</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160; </div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    <span class="keywordflow">if</span> (can_triangulate)</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    {</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;      pIndices[index_count++] = (uint32_t)ring_indices[i2];</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;      pIndices[index_count++] = (uint32_t)ring_indices[i1];</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;      pIndices[index_count++] = (uint32_t)ring_indices[i0];</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;      <span class="comment">// compact verts down in the ring indices</span></div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;      ring_count--;</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;      <span class="keywordflow">for</span> (uint32_t i = i1; i &lt; ring_count; i++)</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;        ring_indices[i] = ring_indices[i + 1];</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;      <span class="comment">// reset no progress counter because we just made progress!</span></div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;      no_progress_counter = 0;</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;    }</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    {</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;      no_progress_counter++;</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;      i0++;</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;    }</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;    <span class="comment">// we haven&#39;t made progress in a full trip around the ring -- the geometry is probably malformed and cannot be tessellated</span></div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    <span class="keywordflow">if</span> (no_progress_counter == ring_count)</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    {</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;      <span class="keywordflow">return</span> index_count;</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;    }</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;  }</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;  <span class="comment">// trailing case, just have one triangle left -- emit it.</span></div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;  pIndices[index_count++] = (uint32_t)ring_indices[2];</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;  pIndices[index_count++] = (uint32_t)ring_indices[1];</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;  pIndices[index_count++] = (uint32_t)ring_indices[0];</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160; </div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;  <span class="keywordflow">return</span> index_count;</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;}</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160; </div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;<span class="comment">// where do we sample for the specified edge</span></div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;ogt_mesh_vec2i get_edge_bias(<span class="keyword">const</span> ogt_mesh_vec2i&amp; edge_vert0, <span class="keyword">const</span> ogt_mesh_vec2i&amp; edge_vert1)</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;{</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;  <span class="keywordflow">if</span> (edge_vert0.x &lt; edge_vert1.x)</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;  {</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;    assert(edge_vert0.y == edge_vert1.y);</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;    <span class="keywordflow">return</span> make_vec2i(0, 0);</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;  }</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (edge_vert0.x &gt; edge_vert1.x)</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;  {</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;    assert(edge_vert0.y == edge_vert1.y);</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;    <span class="keywordflow">return</span> make_vec2i(-1, -1);</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;  }</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (edge_vert0.y &lt; edge_vert1.y)</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;  {</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    assert(edge_vert0.x == edge_vert1.x);</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;    <span class="keywordflow">return</span> make_vec2i(-1, 0);</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;  }</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (edge_vert0.y &gt; edge_vert1.y)</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;  {</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;    assert(edge_vert0.x == edge_vert1.x);</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    <span class="keywordflow">return</span> make_vec2i(0, -1);</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;  }</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;  {</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    assert(0);</div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    <span class="keywordflow">return</span> make_vec2i(0, 0);</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;  }</div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;}</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160; </div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;uint32_t _tessellate_edge(ogt_mesh_vec2i* pTess, uint32_t max_tess, <span class="keyword">const</span> ogt_mesh_vec2i&amp; edge_vert0, <span class="keyword">const</span> ogt_mesh_vec2i&amp; edge_vert1,</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;  <span class="keyword">const</span> uint8_t* pSlice_colors, int32_t size_x, int32_t size_y)</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;{</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160; </div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;  uint32_t num_tess = 0;</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;  int32_t edge_len = get_cardinal_vector_length(edge_vert1 - edge_vert0);</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;  ogt_mesh_vec2i edge_bias = get_edge_bias(edge_vert0, edge_vert1);</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;  ogt_mesh_vec2i edge_step = get_cardinal_unit_vector(edge_vert1 - edge_vert0);</div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;  ogt_mesh_vec2i curr_pos = edge_vert0 + edge_bias;</div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160; </div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;  <span class="comment">// do early-out logic if the entire edge is out-of-bounds</span></div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;  <span class="keywordflow">if</span> (edge_vert0.x &lt; edge_vert1.x)</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;  {</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;    <span class="comment">// handle left-to-right edges</span></div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;    assert(curr_pos.y &lt;= size_y);</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;    <span class="keywordflow">if</span> (curr_pos.y == size_y)</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;  }</div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (edge_vert0.x &gt; edge_vert1.x)</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;  {</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;    <span class="comment">// handle right-to-left edges</span></div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;    assert(curr_pos.y &gt;= -1);</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;    <span class="keywordflow">if</span> (curr_pos.y == -1)</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;  }</div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (edge_vert0.y &lt; edge_vert1.y)</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;  {</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;    <span class="comment">// handle bottom-to-top edges</span></div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;    assert(curr_pos.x &gt;= -1);</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;    <span class="keywordflow">if</span> (curr_pos.x == -1)</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;  }</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (edge_vert0.y &gt; edge_vert1.y)</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;  {</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;    <span class="comment">// handle top-to-bottom</span></div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    assert(curr_pos.x &lt;= size_x);</div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    <span class="keywordflow">if</span> (curr_pos.x == size_x)</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;  }</div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;  {</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;    assert(0);</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;  }</div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160; </div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;  uint8_t last_color_index = pSlice_colors[curr_pos.x + (curr_pos.y * size_x)];</div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;  curr_pos = curr_pos + edge_step;</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160; </div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;  <span class="keywordflow">for</span> (int32_t i = 1; i &lt; edge_len; i++)</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;  {</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    uint8_t curr_color_index = pSlice_colors[curr_pos.x + (curr_pos.y * size_x)];</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;    <span class="keywordflow">if</span> (curr_color_index != last_color_index)</div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    {</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;      assert(num_tess &lt; max_tess);</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;      pTess[num_tess++] = curr_pos - edge_bias;</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;      last_color_index = curr_color_index;</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    }</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    curr_pos = curr_pos + edge_step;</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;  }</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;  <span class="keywordflow">return</span> num_tess;</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;}</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160; </div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;<span class="comment">// My algorithm for flood-filling the polygon.</span></div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;<span class="comment">// We start with a simple set of verts that represents a polygon ring</span></div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;<span class="comment">// surrounding a single voxel.</span></div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;<span class="comment">//    v1 +---+ v2</span></div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;<span class="comment">//       | C |</span></div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;<span class="comment">//    v0 +---+ v3</span></div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;<span class="comment">// This initial state has 4 verts on the polygon boundary which</span></div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;<span class="comment">// represents 4 edges on the polygon boundary, and the color of</span></div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;<span class="comment">// the polygon is the voxel color.</span></div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;<span class="comment">// The algorithm from here is fairly simple:</span></div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;<span class="comment">// 1. select the next edge from the polygon ring</span></div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;<span class="comment">// 2. try extrude the edge as far as possible along its outward</span></div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;<span class="comment">//    facing normal one voxel at a time.</span></div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;<span class="comment">//    - stop pushing the edge outward if we&#39;d consume an already polygonized voxel, or if the edge</span></div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;<span class="comment">//      would push a different color to the inside of the polygon ring.</span></div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;<span class="comment">// 3. if the edge could be extruded, insert new points for the edge and each of its left/right</span></div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;<span class="comment">//    neighbor edges such that color discontinuities on the outside of the edge have a vertex between them.</span></div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;<span class="comment">// 4. if the edge could not be extruded and we have gone around the entire ring with no progress,</span></div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;<span class="comment">//    terminate, otherwise goto 1.</span></div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;<span class="comment">// 5. we now have a polygon ring that can be tessellated.</span></div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;<span class="comment">// Example</span></div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;<span class="comment">// step(1):</span></div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;<span class="comment">//        (e1)</span></div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;<span class="comment">//   v1 +-------+ v2</span></div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;<span class="comment">//(e0)  | X | X |  (e2)   X is the color inside the polygon</span></div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;<span class="comment">//   v0 +       + v3</span></div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;<span class="comment">// edge1 corresponds to the next_edge_index edge within the current polygon ring.</span></div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;<span class="comment">// step(2)</span></div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;<span class="comment">// We now try to push edge1 out as far as we can by holding v0 &amp; v3 fixed</span></div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;<span class="comment">// and moving v1/v2 in the direction of the edge normal:</span></div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;<span class="comment">//          ^</span></div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;<span class="comment">//          ^</span></div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;<span class="comment">//   v1 +-------+ v2</span></div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;<span class="comment">//      | X | X |</span></div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;<span class="comment">//      |   |   |</span></div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;<span class="comment">//      | X | X |</span></div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;<span class="comment">//      |   |   |</span></div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;<span class="comment">//      | X | X |</span></div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;<span class="comment">//   v0 +       + v3</span></div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;<span class="comment">// We can only extend the edge as long as by doing so the polygon remains</span></div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;<span class="comment">// filled with it&#39;s current color and if the polygon does not cover a</span></div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;<span class="comment">// voxel that was already polygonized by a prior pass.</span></div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;<span class="comment">// step(3)</span></div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;<span class="comment">// Once we&#39;ve finished pushing v1/v2 forward, we now check whether we have</span></div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;<span class="comment">// to tessellate any of the edges e0, e1, e2. This is now mostly a function</span></div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;<span class="comment">// of which colors are on the outside of the polygon boundary.</span></div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;<span class="comment">//        X   C</span></div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;<span class="comment">//      +---*---+</span></div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;<span class="comment">//    B | X | X | D     A,B,C,D are colors along the outside of the edges.</span></div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;<span class="comment">//      *   |   |           Here * are new points of the edges because of an</span></div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;<span class="comment">//    A | X | X | D     exterior change of color along the edge.</span></div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;<span class="comment">//      |   |   |</span></div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;<span class="comment">//    A | X | X | D</span></div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;<span class="comment">//      +       +</span></div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;<span class="comment">// We then insert the new edges into the polygon ring and select a new</span></div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;<span class="comment">// edge to start extruding.</span></div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;<span class="comment">// If we tessellated e1, then we set next_edge_index to the first child-edge</span></div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;<span class="comment">// on that edge again:</span></div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;<span class="comment">//         v2</span></div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;<span class="comment">//   v1 +---*---+ v3</span></div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;<span class="comment">//      | X   X</span></div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;<span class="comment">//   v0 *</span></div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;<span class="comment">// When we can no longer extrude any of the polygon ring edges, we</span></div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;<span class="comment">// terminate, as that&#39;ll mean we&#39;ve flood filled the space.</span></div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;int32_t _construct_polygon_for_slice(ogt_mesh_vec2i* pVerts, uint32_t max_verts, int32_t i, int32_t j, int32_t size_x, int32_t size_y, <span class="keyword">const</span> uint8_t* pSlice_colors, ogt_mesh_bitset_64k&amp; ref_voxel_polygonized)</div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;{</div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;  assert(max_verts &gt; 4);</div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;  <span class="comment">// start with just a single 4 vertex closed polygon</span></div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;  pVerts[0] = make_vec2i(i, j);</div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;  pVerts[1] = make_vec2i(i, j + 1);</div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;  pVerts[2] = make_vec2i(i + 1, j + 1);</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;  pVerts[3] = make_vec2i(i + 1, j);</div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;  int32_t vert_count = 4;</div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160; </div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;  uint8_t polygon_color_index = pSlice_colors[i + (j * size_x)];</div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160; </div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;  <span class="comment">// mark this voxel as polygonized so it can&#39;t be further considered.</span></div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;  ref_voxel_polygonized.set(i + (j * size_x));</div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160; </div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;  int32_t next_edge_index = 0;</div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;  int32_t no_progress_counter = 0;</div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;  <span class="keywordflow">while</span> (no_progress_counter &lt; vert_count)</div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;  {</div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;    <span class="comment">// this is just figuring out the vertices for 3 successive edges.</span></div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;    <span class="comment">// edge0 from v0...v1, edge1 from v1...v2, edge2 from v2...v3</span></div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;    int32_t v0 = next_edge_index &lt; 1 ? vert_count - 1 : next_edge_index - 1;</div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;    int32_t v1 = next_edge_index;</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;    int32_t v2 = (v1 &lt; (vert_count - 1)) ? v1 + 1 : 0;</div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;    int32_t v3 = (v2 &lt; (vert_count - 1)) ? v2 + 1 : 0;</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160; </div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    <span class="comment">// compute the direction of edge1.</span></div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;    ogt_mesh_vec2i edge0_unitvec = get_cardinal_unit_vector(pVerts[v1] - pVerts[v0]);</div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    ogt_mesh_vec2i edge1_unitvec = get_cardinal_unit_vector(pVerts[v2] - pVerts[v1]);</div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;    ogt_mesh_vec2i edge2_unitvec = get_cardinal_unit_vector(pVerts[v3] - pVerts[v2]);</div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;    ogt_mesh_vec2i edge1_normal = make_vec2i(-edge1_unitvec.y, edge1_unitvec.x);</div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160; </div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;    <span class="keywordtype">bool</span> can_extrude_edge1 = !is_vec2i_equal(edge1_normal, (edge0_unitvec * -1)) &amp;&amp; !is_vec2i_equal(edge1_normal, edge2_unitvec);</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160; </div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    int32_t edge1_pushed_distance = 0;</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    <span class="keywordflow">if</span> (can_extrude_edge1)</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;    {</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;      int32_t edge1_len = get_cardinal_vector_length(pVerts[v2] - pVerts[v1]);</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;      <span class="comment">// start 1 unit pushed forward along the edge normal</span></div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;      ogt_mesh_vec2i edge1_origin = pVerts[v1] + get_edge_bias(pVerts[v1], pVerts[v2]);</div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160; </div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;      <span class="keywordflow">while</span> (edge1_origin.x &gt;= 0 &amp;&amp; edge1_origin.y &gt;= 0 &amp;&amp; edge1_origin.x &lt; size_x &amp;&amp; edge1_origin.y &lt; size_y)</div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;      {</div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;        <span class="comment">// scan along the entire edge to see if the following criteria are met by pushing the edge forward to this position:</span></div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;        <span class="comment">// 1. all of the cells it occupies match the existing polygon color</span></div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;        <span class="comment">// 2. none of the cells are already voxelized.</span></div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;        ogt_mesh_vec2i edge1_cursor = edge1_origin;</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;        <span class="keywordtype">bool</span> can_push_edge = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;        <span class="keywordflow">for</span> (int32_t idx = 0; idx &lt; edge1_len; idx++)</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;        {</div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;          assert(edge1_cursor.x &gt;= 0 &amp;&amp; edge1_cursor.x &lt; size_x &amp;&amp; edge1_cursor.y &gt;= 0 &amp;&amp; edge1_cursor.y &lt; size_y);</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;          int32_t slice_index = edge1_cursor.x + (edge1_cursor.y * size_x);</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;          <span class="keywordflow">if</span> (pSlice_colors[slice_index] != polygon_color_index || ref_voxel_polygonized.is_set(slice_index))</div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;          {</div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;            can_push_edge = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;          }</div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;          edge1_cursor = edge1_cursor + edge1_unitvec;</div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;        }</div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;        <span class="comment">// we can&#39;t push the edge to this location, we&#39;ve gone as far as we can go with this edge, so jump out immediately.</span></div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;        <span class="keywordflow">if</span> (!can_push_edge)</div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;        <span class="comment">// mark these cells as voxelized as they&#39;ll now be part of the polygon.</span></div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;        {</div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;          ogt_mesh_vec2i edge1_cursor2 = edge1_origin;</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;          <span class="keywordflow">for</span> (int32_t idx = 0; idx &lt; edge1_len; idx++)</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;          {</div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;            int32_t slice_index = edge1_cursor2.x + (edge1_cursor2.y * size_x);</div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;            ref_voxel_polygonized.set(slice_index);</div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;            edge1_cursor2 = edge1_cursor2 + edge1_unitvec;</div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;          }</div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;        }</div>
<div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160; </div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;        <span class="comment">// we can push the edge, bump up the distance we&#39;ve pushed it.</span></div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;        edge1_pushed_distance++;</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;        edge1_origin = edge1_origin + edge1_normal; <span class="comment">// step to the next candidate origin.</span></div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;      }</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;    }</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160; </div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;    <span class="keywordflow">if</span> (!edge1_pushed_distance)</div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;    {</div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;      <span class="comment">// step to the next edge</span></div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;      next_edge_index = (next_edge_index + 1) % vert_count;</div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;      <span class="comment">// bump the exit counter</span></div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;      no_progress_counter++;</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;    }</div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    {</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;      <span class="comment">// if edge1 was pushed out, we now replace</span></div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;      <span class="comment">//  v0, v1, v2, v3 in the poly ringbuffer with t0, t1, t2, t3  where t* represents multiple points.</span></div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160; </div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;      <span class="comment">// (0) cache verts v0,v3 and update verts v1, v2</span></div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;      ogt_mesh_vec2i cached_v0 = pVerts[v0];</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;      ogt_mesh_vec2i cached_v1 = pVerts[v1];</div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;      ogt_mesh_vec2i cached_v2 = pVerts[v2];</div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;      ogt_mesh_vec2i cached_v3 = pVerts[v3];</div>
<div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;      ogt_mesh_vec2i extruded_v1 = pVerts[v1] + (edge1_normal * edge1_pushed_distance);</div>
<div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;      ogt_mesh_vec2i extruded_v2 = pVerts[v2] + (edge1_normal * edge1_pushed_distance);</div>
<div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160; </div>
<div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;      <span class="comment">// determine if edge1 is an extrude from edge0 and if edge1 is an extrude from edge2.</span></div>
<div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;      <span class="comment">// If it is not an extrude, it is an extension.</span></div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;      <span class="keywordtype">bool</span> is_e0e1_extrude = is_vec2i_equal(edge0_unitvec, edge1_unitvec);</div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;      <span class="keywordtype">bool</span> is_e1e2_extrude = is_vec2i_equal(edge1_unitvec, edge2_unitvec);</div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160; </div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;      <span class="comment">// (1) try tessellate edge0, edge1, edge2.</span></div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;      <span class="keyword">const</span> uint32_t k_max_tessellations = 512;</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;      assert(edge1_pushed_distance &lt; k_max_tessellations);</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;      ogt_mesh_vec2i tess_buffer[k_max_tessellations];</div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;      uint32_t tess_offset = 0;</div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160; </div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;      <span class="comment">// allocate tess_e0</span></div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;      uint32_t e0_offset = tess_offset;</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;      <span class="keywordflow">if</span> (is_e0e1_extrude)</div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;      {</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;        tess_buffer[tess_offset++] = cached_v0;</div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;        tess_buffer[tess_offset++] = cached_v1;</div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;      }</div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;      {</div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;        tess_buffer[tess_offset++] = cached_v0;</div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;        tess_offset += _tessellate_edge(&amp;tess_buffer[tess_offset], k_max_tessellations - tess_offset, cached_v0, extruded_v1, pSlice_colors, size_x, size_y);</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;      }</div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;      uint32_t tess_count_e0 = tess_offset - e0_offset;</div>
<div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;      <span class="comment">// allocate tess_e1</span></div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;      uint32_t e1_offset = tess_offset;</div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;      <span class="keywordflow">if</span> (is_e0e1_extrude)</div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;        tess_offset += _tessellate_edge(&amp;tess_buffer[tess_offset], k_max_tessellations - tess_offset, cached_v1, extruded_v1, pSlice_colors, size_x, size_y);</div>
<div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;      tess_buffer[tess_offset++] = extruded_v1;</div>
<div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;      tess_offset += _tessellate_edge(&amp;tess_buffer[tess_offset], k_max_tessellations - tess_offset, extruded_v1, extruded_v2, pSlice_colors, size_x, size_y);</div>
<div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;      tess_buffer[tess_offset++] = extruded_v2;</div>
<div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;      <span class="keywordflow">if</span> (is_e1e2_extrude)</div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;        tess_offset += _tessellate_edge(&amp;tess_buffer[tess_offset], k_max_tessellations - tess_offset, extruded_v2, cached_v2, pSlice_colors, size_x, size_y);</div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;      uint32_t tess_count_e1 = tess_offset - e1_offset;</div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;      <span class="comment">// allocate tess_e2</span></div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;      uint32_t e2_offset = tess_offset;</div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;      <span class="keywordflow">if</span> (is_e1e2_extrude)</div>
<div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;        tess_buffer[tess_offset++] = cached_v2;</div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;        tess_offset += _tessellate_edge(&amp;tess_buffer[tess_offset], k_max_tessellations - tess_offset, extruded_v2, cached_v3, pSlice_colors, size_x, size_y);</div>
<div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;      uint32_t tess_count_e2 = tess_offset - e2_offset;</div>
<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;      <span class="comment">// allocate tess_e3</span></div>
<div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;      uint32_t e3_offset = tess_offset;</div>
<div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;      tess_buffer[tess_offset++] = cached_v3;</div>
<div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;      uint32_t tess_count_e3 = tess_offset - e3_offset;</div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160; </div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;      <span class="keyword">const</span> ogt_mesh_vec2i* new_tess_e0 = &amp;tess_buffer[e0_offset];</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;      <span class="keyword">const</span> ogt_mesh_vec2i* new_tess_e1 = &amp;tess_buffer[e1_offset];</div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;      <span class="keyword">const</span> ogt_mesh_vec2i* new_tess_e2 = &amp;tess_buffer[e2_offset];</div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;      <span class="keyword">const</span> ogt_mesh_vec2i* new_tess_e3 = &amp;tess_buffer[e3_offset];</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160; </div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;      <span class="comment">// (2) insert the tessellations into the polygon ring.</span></div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;      <span class="comment">// This bit is tricky as v0,v1,v2,v3 can straddle the end of the polygon ring in 4 different combinations which we handle here:</span></div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;      int32_t other1_count = vert_count - 4;</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;      int32_t other2_count = 0;</div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;      int32_t old_other1 = (v3 + 1) % vert_count;</div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;      int32_t old_other2 = 0;</div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;      int32_t new_other2 = -1;</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;      int32_t new_v0, new_v1, new_v2, new_v3, new_other1;</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160; </div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;      <span class="keywordflow">if</span> (v1 &lt; v0)</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;      {</div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;        <span class="comment">//   [v1][v2][v3] (.... other1 ....) [v0]</span></div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;        assert(v1 == 0 &amp;&amp; v0 == (vert_count - 1));</div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;        new_v1 = 0;</div>
<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;        new_v2 = new_v1 + tess_count_e1;</div>
<div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;        new_v3 = new_v2 + tess_count_e2;</div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;        new_other1 = new_v3 + tess_count_e3;</div>
<div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;        new_v0 = new_other1 + other1_count;</div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;      }</div>
<div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (v2 &lt; v0)</div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;      {</div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;        <span class="comment">//   [v2][v3] (.... other1 ....) [v0][v1]</span></div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;        assert(v2 == 0 &amp;&amp; v1 == (vert_count - 1));</div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;        new_v2 = 0;</div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;        new_v3 = new_v2 + tess_count_e2;</div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;        new_other1 = new_v3 + tess_count_e3;</div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;        new_v0 = new_other1 + other1_count;</div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;        new_v1 = new_v0 + tess_count_e0;</div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;      }</div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (v3 &lt; v0)</div>
<div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;      {</div>
<div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;        <span class="comment">//   [v3] (.... other1 ....) [v0][v1][v2]</span></div>
<div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;        assert(v3 == 0 &amp;&amp; v2 == (vert_count - 1));</div>
<div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;        new_v3 = 0;</div>
<div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;        new_other1 = new_v3 + tess_count_e3;</div>
<div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;        new_v0 = new_other1 + other1_count;</div>
<div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;        new_v1 = new_v0 + tess_count_e0;</div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;        new_v2 = new_v1 + tess_count_e1;</div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;      }</div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;      {</div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;        <span class="comment">//   (.... other1 ....)  [v0][v1][v2][v3] (...other2...)</span></div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;        other2_count = vert_count - v3 - 1;</div>
<div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;        old_other2 = v3 + 1;</div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;        other1_count = vert_count - 4 - other2_count;</div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;        old_other1 = 0;</div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;        new_other1 = 0;</div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;        new_v0 = new_other1 + other1_count;</div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;        new_v1 = new_v0 + tess_count_e0;</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;        new_v2 = new_v1 + tess_count_e1;</div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;        new_v3 = new_v2 + tess_count_e2;</div>
<div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;        new_other2 = new_v3 + tess_count_e3;</div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;      }</div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;      uint32_t new_vert_count = vert_count - 4 + tess_count_e0 + tess_count_e1 + tess_count_e2 + tess_count_e3;</div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;      <span class="comment">// make sure we wouldn&#39;t exceed our polygon ring memory size by inserting these tessellated points</span></div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;      assert(new_vert_count &lt;= max_verts);</div>
<div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160; </div>
<div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;      <span class="keywordflow">if</span> (old_other2 != new_other2 &amp;&amp; other2_count)</div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;        memmove(&amp;pVerts[new_other2], &amp;pVerts[old_other2], other2_count * <span class="keyword">sizeof</span>(ogt_mesh_vec2i));</div>
<div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;      <span class="keywordflow">if</span> (old_other1 != new_other1 &amp;&amp; other1_count)</div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;        memmove(&amp;pVerts[new_other1], &amp;pVerts[old_other1], other1_count * <span class="keyword">sizeof</span>(ogt_mesh_vec2i));</div>
<div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;      <span class="keywordflow">if</span> (tess_count_e0)</div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;        memcpy(&amp;pVerts[new_v0], new_tess_e0, tess_count_e0 * <span class="keyword">sizeof</span>(ogt_mesh_vec2i));</div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;      <span class="keywordflow">if</span> (tess_count_e1)</div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;        memcpy(&amp;pVerts[new_v1], new_tess_e1, tess_count_e1 * <span class="keyword">sizeof</span>(ogt_mesh_vec2i));</div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;      <span class="keywordflow">if</span> (tess_count_e2)</div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;        memcpy(&amp;pVerts[new_v2], new_tess_e2, tess_count_e2 * <span class="keyword">sizeof</span>(ogt_mesh_vec2i));</div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;      <span class="keywordflow">if</span> (tess_count_e3)</div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;        memcpy(&amp;pVerts[new_v3], new_tess_e3, tess_count_e3 * <span class="keyword">sizeof</span>(ogt_mesh_vec2i));</div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;      <span class="comment">// grow the polygon ring size</span></div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;      vert_count = new_vert_count;</div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160; </div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;      <span class="comment">// (3) set next edge to first tessellated edge of edge1.</span></div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;      next_edge_index = new_v1;</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160; </div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;      <span class="comment">// (4) we&#39;ve progressed, clear the no-progress counter</span></div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;      no_progress_counter = 0;</div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;    }</div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;  }</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;  <span class="keywordflow">return</span> vert_count;</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;}</div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160; </div>
<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;<span class="keywordtype">void</span> _polygon_meshify_voxels_in_face_direction(</div>
<div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;  <span class="keyword">const</span> uint8_t* pVoxels,</div>
<div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a>* pPalette,</div>
<div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;  int32_t size_x, int32_t size_y, int32_t size_z,             <span class="comment">// how many voxels in each of X,Y,Z dimensions</span></div>
<div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;  int32_t k_stride_x, int32_t k_stride_y, int32_t k_stride_z, <span class="comment">// the memory stride for each of those X,Y,Z dimensions within the voxel data.</span></div>
<div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;  <span class="keyword">const</span> ogt_mesh_transform&amp; transform,                        <span class="comment">// transform to convert from X,Y,Z to &quot;objectSpace&quot;</span></div>
<div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;  <a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* pMesh)</div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;{</div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;  <span class="comment">// enable aggressive voxel optimization for now.</span></div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;  uint32_t max_voxels_per_slice = size_x * size_y;</div>
<div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;  assert(max_voxels_per_slice &lt;= 65536); <span class="comment">// voxel_polygonized and slice_colors requires this.</span></div>
<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;  ogt_mesh_bitset_64k voxel_polygonized;</div>
<div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;  uint8_t slice_colors[65536];</div>
<div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160; </div>
<div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;  <span class="comment">// determine if the transform parity has flipped in a way that winding would have been switched.</span></div>
<div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>* side = _make_vec3_ptr(&amp;transform.m00);</div>
<div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>* up = _make_vec3_ptr(&amp;transform.m10);</div>
<div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a>* fwd = _make_vec3_ptr(&amp;transform.m20);</div>
<div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;  <span class="keywordtype">bool</span> is_parity_flipped = _dot3(*fwd, _cross3(*side, *up)) &lt; 0.0f;</div>
<div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160; </div>
<div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;  <a class="code" href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a> normal = _transform_vector(transform, _make_vec3(0.0f, 0.0f, 1.0f));</div>
<div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160; </div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;  <span class="keywordflow">for</span> (int32_t k = 0; k &lt; (int32_t)size_z; k++)</div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;  {</div>
<div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;    <span class="keywordtype">bool</span> is_last_slice = (k == (size_z - 1)) ? true : <span class="keyword">false</span>;</div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160; </div>
<div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;    <span class="comment">// clear this slice</span></div>
<div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;    voxel_polygonized.clear(max_voxels_per_slice);</div>
<div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160; </div>
<div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;    <span class="comment">// first, fill this slice with all colors for the voxel grid but set to zero where the</span></div>
<div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;    <span class="comment">// slice has a non-empty voxel in the corresponding location in the k+1 slice.</span></div>
<div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;    uint32_t num_non_empty_cells = 0;</div>
<div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;    <span class="keywordflow">for</span> (int32_t j = 0; j &lt; size_y; j++)</div>
<div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;    {</div>
<div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;      <span class="keywordflow">for</span> (int32_t i = 0; i &lt; size_x; i++)</div>
<div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;      {</div>
<div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;        int32_t index_in_slice = i + (j * size_x);</div>
<div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;        uint8_t cell_color = pVoxels[i * k_stride_x + j * k_stride_y + (k + 0) * k_stride_z];</div>
<div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160; </div>
<div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;        <span class="comment">// if the this cell on this slice is occluded by the corresponding cell on the next slice, we</span></div>
<div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;        <span class="comment">// mark this polygon as voxelized already so it doesn&#39;t get included in any polygons for the current slice.</span></div>
<div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;        <span class="comment">// we also inherit the next slice&#39;s color to ensure the polygon flood fill inserts</span></div>
<div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;        <span class="comment">// discontinuities where necessary in order to generate a water-tight tessellation</span></div>
<div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;        <span class="comment">// to the next slice.</span></div>
<div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;        uint8_t next_cell_color = !is_last_slice ? pVoxels[i * k_stride_x + j * k_stride_y + (k + 1) * k_stride_z] : 0;</div>
<div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;        <span class="keywordflow">if</span> (next_cell_color != 0)</div>
<div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;        {</div>
<div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;          cell_color = next_cell_color;</div>
<div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;          voxel_polygonized.set(index_in_slice);</div>
<div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;        }</div>
<div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;        slice_colors[index_in_slice] = cell_color;</div>
<div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160; </div>
<div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;        num_non_empty_cells += (cell_color != 0) ? 1 : 0;</div>
<div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;      }</div>
<div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;    }</div>
<div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;    <span class="comment">// skip to the next slice if the entire slice is empty.</span></div>
<div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;    <span class="keywordflow">if</span> (!num_non_empty_cells)</div>
<div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;      <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160; </div>
<div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;    <span class="comment">// polygonize all voxels for this slice.</span></div>
<div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;    <span class="keywordflow">for</span> (int32_t j = 0; j &lt; (int32_t)size_y; j++)</div>
<div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;    {</div>
<div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;      <span class="keywordflow">for</span> (int32_t i = 0; i &lt; (int32_t)size_x; i++)</div>
<div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;      {</div>
<div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;        int32_t index_in_slice = i + j * size_x;</div>
<div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;        <span class="comment">// this voxel does not need to be polygonized on this slice?</span></div>
<div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;        <span class="comment">// early out: empty-cell, we don&#39;t consider it.</span></div>
<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;        uint8_t color_index = slice_colors[index_in_slice];</div>
<div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;        <span class="keywordflow">if</span> (color_index == 0)</div>
<div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;          <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160; </div>
<div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;        <span class="comment">// this voxel is already polygonized, skip it.</span></div>
<div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;        <span class="keywordflow">if</span> (voxel_polygonized.is_set(index_in_slice))</div>
<div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;          <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160; </div>
<div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;        <span class="comment">// we always start polygon rasterization with any lower-left corner in (i,j)</span></div>
<div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;        <span class="comment">// space and fill outward from there. So skip any coords that don&#39;t match this</span></div>
<div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;        <span class="comment">// criteria.</span></div>
<div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;        <span class="comment">// if ((i &gt; 0 &amp;&amp; slice_colors[index_in_slice-1] == color_index) ||</span></div>
<div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;        <span class="comment">//  (j &gt; 0 &amp;&amp; slice_colors[index_in_slice-size_x] == color_index))</span></div>
<div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;        <span class="comment">//  continue;</span></div>
<div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160; </div>
<div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;        <span class="keyword">const</span> uint32_t MAX_VERTS = 4096;</div>
<div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;        ogt_mesh_vec2i verts[MAX_VERTS];</div>
<div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;        uint32_t vert_count = _construct_polygon_for_slice(verts, MAX_VERTS, i, j, size_x, size_y, slice_colors, voxel_polygonized);</div>
<div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160; </div>
<div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;        <span class="keyword">const</span> <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a>&amp; color = pPalette[color_index];</div>
<div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160; </div>
<div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;        <span class="comment">// generate the verts in the output mesh</span></div>
<div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;        uint32_t base_vertex_index = pMesh-&gt;vertex_count;</div>
<div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;        <span class="keywordflow">for</span> (uint32_t idx = 0; idx &lt; vert_count; idx++)</div>
<div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;        {</div>
<div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;          pMesh-&gt;vertices[pMesh-&gt;vertex_count++] = _mesh_make_vertex(_transform_point(transform, _make_vec3((<span class="keywordtype">float</span>)verts[idx].x, (<span class="keywordtype">float</span>)verts[idx].y, (<span class="keywordtype">float</span>)(k + 1))), normal, color);</div>
<div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;        }</div>
<div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160; </div>
<div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;        <span class="comment">// generate the indices in the output mesh.</span></div>
<div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;        uint32_t tessellated_index_count = _tessellate_polygon(&amp;pMesh-&gt;indices[pMesh-&gt;index_count], verts, vert_count);</div>
<div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160; </div>
<div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;        <span class="comment">// flip the winding of tessellated triangles to account for an inversion in the transform.</span></div>
<div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;        <span class="keywordflow">if</span> (is_parity_flipped)</div>
<div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;        {</div>
<div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;          <span class="keywordflow">for</span> (uint32_t idx = 0; idx &lt; tessellated_index_count; idx += 3)</div>
<div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;          {</div>
<div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;            uint32_t i0 = pMesh-&gt;indices[pMesh-&gt;index_count + idx + 0];</div>
<div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;            uint32_t i1 = pMesh-&gt;indices[pMesh-&gt;index_count + idx + 1];</div>
<div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;            uint32_t i2 = pMesh-&gt;indices[pMesh-&gt;index_count + idx + 2];</div>
<div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;            pMesh-&gt;indices[pMesh-&gt;index_count + idx + 0] = base_vertex_index + i2;</div>
<div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;            pMesh-&gt;indices[pMesh-&gt;index_count + idx + 1] = base_vertex_index + i1;</div>
<div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;            pMesh-&gt;indices[pMesh-&gt;index_count + idx + 2] = base_vertex_index + i0;</div>
<div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;          }</div>
<div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;        }</div>
<div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;        {</div>
<div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;          <span class="keywordflow">for</span> (uint32_t idx = 0; idx &lt; tessellated_index_count; idx += 3)</div>
<div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;          {</div>
<div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;            uint32_t i0 = pMesh-&gt;indices[pMesh-&gt;index_count + idx + 0];</div>
<div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;            uint32_t i1 = pMesh-&gt;indices[pMesh-&gt;index_count + idx + 1];</div>
<div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;            uint32_t i2 = pMesh-&gt;indices[pMesh-&gt;index_count + idx + 2];</div>
<div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;            pMesh-&gt;indices[pMesh-&gt;index_count + idx + 0] = base_vertex_index + i0;</div>
<div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;            pMesh-&gt;indices[pMesh-&gt;index_count + idx + 1] = base_vertex_index + i1;</div>
<div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;            pMesh-&gt;indices[pMesh-&gt;index_count + idx + 2] = base_vertex_index + i2;</div>
<div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;          }</div>
<div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;        }</div>
<div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160; </div>
<div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;        pMesh-&gt;index_count += tessellated_index_count;</div>
<div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;      }</div>
<div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;    }</div>
<div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;  }</div>
<div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160; </div>
<div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;<span class="preprocessor">#  undef SLICE_INDEX</span></div>
<div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;}</div>
<div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160; </div>
<div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;<span class="comment">// for each slice</span></div>
<div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;<span class="comment">//   for each voxel cell</span></div>
<div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;<span class="comment">//     if not already polygonized</span></div>
<div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;<span class="comment">//        initialize polygon to a single cell</span></div>
<div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;<span class="comment">//        while (can expand polygon)</span></div>
<div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;<span class="comment">//          choose an edge and expand it out as far as possible, tessellating surrounding edges if neccessary, marking newly expanded cells as polygonized</span></div>
<div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;<span class="comment">//        triangulate the output polygon.</span></div>
<div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;<a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* ogt_mesh_from_paletted_voxels_polygon(</div>
<div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a>* pCtx,</div>
<div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;  <span class="keyword">const</span> uint8_t* pVoxels, uint32_t size_x, uint32_t size_y, uint32_t size_z, <span class="keyword">const</span> <a class="code" href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a>* pPalette)</div>
<div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;{</div>
<div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;  uint32_t max_face_count = _count_voxel_sized_faces(pVoxels, size_x, size_y, size_z);</div>
<div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;  uint32_t max_vertex_count = max_face_count * 4;</div>
<div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;  uint32_t max_index_count = max_face_count * 6;</div>
<div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160; </div>
<div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;  uint32_t mesh_size = <span class="keyword">sizeof</span>(<a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>) + (max_vertex_count * <span class="keyword">sizeof</span>(<a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>)) + (max_index_count * <span class="keyword">sizeof</span>(uint32_t));</div>
<div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;  <a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* mesh = (<a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>*)_voxel_meshify_malloc(pCtx, mesh_size);</div>
<div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;  <span class="keywordflow">if</span> (!mesh)</div>
<div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;    <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160; </div>
<div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;  mesh-&gt;vertices = (<a class="code" href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a>*)&amp;mesh[1];</div>
<div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;  mesh-&gt;indices = (uint32_t*)&amp;mesh-&gt;vertices[max_vertex_count];</div>
<div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;  mesh-&gt;vertex_count = 0;</div>
<div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;  mesh-&gt;index_count = 0;</div>
<div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160; </div>
<div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;  <span class="keyword">const</span> int32_t k_stride_x = 1;</div>
<div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;  <span class="keyword">const</span> int32_t k_stride_y = size_x;</div>
<div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;  <span class="keyword">const</span> int32_t k_stride_z = size_x * size_y;</div>
<div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160; </div>
<div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;  <span class="comment">// do the +y PASS</span></div>
<div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;  {</div>
<div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;    ogt_mesh_transform transform_pos_y = _make_transform(</div>
<div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;      0.0f, 0.0f, 1.0f, 0.0f,</div>
<div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;      1.0f, 0.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;      0.0f, 1.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;      0.0f, 0.0f, 0.0f, 0.0f);</div>
<div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160; </div>
<div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;    _polygon_meshify_voxels_in_face_direction(</div>
<div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;      pVoxels, pPalette,</div>
<div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;      size_z, size_x, size_y,</div>
<div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;      k_stride_z, k_stride_x, k_stride_y,</div>
<div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;      transform_pos_y,</div>
<div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;      mesh);</div>
<div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;  }</div>
<div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160; </div>
<div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;  <span class="comment">// do the -y PASS</span></div>
<div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;  {</div>
<div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;    ogt_mesh_transform transform_neg_y = _make_transform(</div>
<div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;      0.0f, 0.0f, 1.0f, 0.0f,</div>
<div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;      1.0f, 0.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;      0.0f, -1.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;      0.0f, (<span class="keywordtype">float</span>)(size_y), 0.0f, 0.0f);</div>
<div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160; </div>
<div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;    _polygon_meshify_voxels_in_face_direction(</div>
<div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;      pVoxels + (size_y - 1) * k_stride_y,</div>
<div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;      pPalette,</div>
<div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;      size_z, size_x, size_y,</div>
<div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;      k_stride_z, k_stride_x, -k_stride_y,</div>
<div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;      transform_neg_y,</div>
<div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;      mesh);</div>
<div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;  }</div>
<div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;  <span class="comment">// do the +X pass</span></div>
<div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;  {</div>
<div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;    ogt_mesh_transform transform_pos_x = _make_transform(</div>
<div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;      0.0f, 1.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;      0.0f, 0.0f, 1.0f, 0.0f,</div>
<div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;      1.0f, 0.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;      0.0f, 0.0f, 0.0f, 0.0f);</div>
<div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160; </div>
<div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;    _polygon_meshify_voxels_in_face_direction(</div>
<div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;      pVoxels, pPalette,</div>
<div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;      size_y, size_z, size_x,</div>
<div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;      k_stride_y, k_stride_z, k_stride_x,</div>
<div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;      transform_pos_x,</div>
<div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;      mesh);</div>
<div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;  }</div>
<div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;  <span class="comment">// do the -X pass</span></div>
<div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;  {</div>
<div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;    ogt_mesh_transform transform_neg_x = _make_transform(</div>
<div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;      0.0f, 1.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;      0.0f, 0.0f, 1.0f, 0.0f,</div>
<div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;      -1.0f, 0.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;      (<span class="keywordtype">float</span>)size_x, 0.0f, 0.0f, 0.0f);</div>
<div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160; </div>
<div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;    _polygon_meshify_voxels_in_face_direction(</div>
<div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;      pVoxels + (size_x - 1) * k_stride_x,</div>
<div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;      pPalette,</div>
<div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;      size_y, size_z, size_x,</div>
<div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;      k_stride_y, k_stride_z, -k_stride_x,</div>
<div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;      transform_neg_x,</div>
<div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;      mesh);</div>
<div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;  }</div>
<div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;  <span class="comment">// do the +Z pass</span></div>
<div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;  {</div>
<div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;    ogt_mesh_transform transform_pos_z = _make_transform(</div>
<div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;      1.0f, 0.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;      0.0f, 1.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;      0.0f, 0.0f, 1.0f, 0.0f,</div>
<div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;      0.0f, 0.0f, 0.0f, 0.0f);</div>
<div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160; </div>
<div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;    _polygon_meshify_voxels_in_face_direction(</div>
<div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;      pVoxels, pPalette,</div>
<div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;      size_x, size_y, size_z,</div>
<div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;      k_stride_x, k_stride_y, k_stride_z,</div>
<div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;      transform_pos_z,</div>
<div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;      mesh);</div>
<div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;  }</div>
<div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;  <span class="comment">// do the -Z pass</span></div>
<div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;  {</div>
<div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;    ogt_mesh_transform transform_neg_z = _make_transform(</div>
<div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;      1.0f, 0.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;      0.0f, 1.0f, 0.0f, 0.0f,</div>
<div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;      0.0f, 0.0f, -1.0f, 0.0f,</div>
<div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;      0.0f, 0.0f, (<span class="keywordtype">float</span>)size_z, 0.0f);</div>
<div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160; </div>
<div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;    _polygon_meshify_voxels_in_face_direction(</div>
<div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;      pVoxels + (size_z - 1) * k_stride_z,</div>
<div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;      pPalette,</div>
<div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;      size_x, size_y, size_z,</div>
<div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;      k_stride_x, k_stride_y, -k_stride_z,</div>
<div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;      transform_neg_z,</div>
<div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;      mesh);</div>
<div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;  }</div>
<div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160; </div>
<div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;  assert(mesh-&gt;vertex_count &lt;= max_vertex_count);</div>
<div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;  assert(mesh-&gt;index_count &lt;= max_index_count);</div>
<div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160; </div>
<div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;  <span class="keywordflow">return</span> mesh;</div>
<div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;}</div>
<div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160; </div>
<div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160; </div>
<div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;<span class="keywordtype">void</span> ogt_mesh_destroy(<span class="keyword">const</span> <a class="code" href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a>* pCtx, <a class="code" href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a>* pMesh)</div>
<div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;{</div>
<div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;  _voxel_meshify_free(pCtx, pMesh);</div>
<div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;}</div>
<div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160; </div>
<div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;<span class="preprocessor">#endif // #ifdef OGT_VOXEL_MESHIFY_IMPLEMENTATION</span></div>
<div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160; </div>
<div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;<span class="comment">/* -------------------------------------------------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;<span class="comment">    MIT License</span></div>
<div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;<span class="comment">    Copyright (c) 2020 Justin Paver</span></div>
<div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;<span class="comment">    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;),</span></div>
<div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;<span class="comment">    to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,</span></div>
<div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;<span class="comment">    and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;<span class="comment">    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;<span class="comment">    THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;<span class="comment">    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;<span class="comment">    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS</span></div>
<div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;<span class="comment">    IN THE SOFTWARE.</span></div>
<div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;<span class="comment">------------------------------------------------------------------------------------------------------------------------------------------------- */</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructogt__mesh_htm"><div class="ttname"><a href="../../d1/dd7/structogt__mesh.htm">ogt_mesh</a></div><div class="ttdef"><b>Definition:</b> ogt_voxel_meshify.h:120</div></div>
<div class="ttc" id="astructogt__mesh__vec3_htm"><div class="ttname"><a href="../../d8/db5/structogt__mesh__vec3.htm">ogt_mesh_vec3</a></div><div class="ttdef"><b>Definition:</b> ogt_voxel_meshify.h:100</div></div>
<div class="ttc" id="astructogt__mesh__vertex_htm"><div class="ttname"><a href="../../de/d6e/structogt__mesh__vertex.htm">ogt_mesh_vertex</a></div><div class="ttdef"><b>Definition:</b> ogt_voxel_meshify.h:112</div></div>
<div class="ttc" id="astructogt__voxel__meshify__context_htm"><div class="ttname"><a href="../../dd/d6f/structogt__voxel__meshify__context.htm">ogt_voxel_meshify_context</a></div><div class="ttdef"><b>Definition:</b> ogt_voxel_meshify.h:138</div></div>
<div class="ttc" id="astructogt__mesh__rgba_htm"><div class="ttname"><a href="../../d6/dea/structogt__mesh__rgba.htm">ogt_mesh_rgba</a></div><div class="ttdef"><b>Definition:</b> ogt_voxel_meshify.h:106</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_07792d309f5611e62640e8ec1fb96105.htm">Tools</a></li><li class="navelem"><a class="el" href="../../dir_8e80be223102188e67d1ce7cce146de0.htm">Libs</a></li><li class="navelem"><a class="el" href="../../dir_9a22f53500ad7dc6bb404786c71cf46f.htm">ModelImporter2</a></li><li class="navelem"><a class="el" href="../../dir_cb4584dd146d64f7b6e8fa31e07a7a33.htm">ImporterMagicaVoxel</a></li><li class="navelem"><b>ogt_voxel_meshify.h</b></li>
    <li class="footer">Generated on Mon Mar 3 2025 17:23:49 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
