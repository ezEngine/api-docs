<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Reflection/Implementation/SetProperty.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function() { init_codefold(1); });
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('d6/d41/_set_property_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">SetProperty.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/AbstractProperty.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00009" data-start="{" data-end="};">
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno"><a class="line" href="../../d4/d93/classez_typed_set_property.htm">    9</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d9/dc6/classez_abstract_set_property.htm">ezAbstractSetProperty</a></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>{</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>  <a class="code hl_class" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName)</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>    : <a class="code hl_class" href="../../d9/dc6/classez_abstract_set_property.htm">ezAbstractSetProperty</a>(szPropertyName)</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>  {</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>    m_Flags = ezPropertyFlags::GetParameterFlags&lt;Type&gt;();</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>  }</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span> </div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno"><a class="line" href="../../d4/d93/classez_typed_set_property.htm#ac682ee0c1bb444cf12e7f05b5bd83f95">   18</a></span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* <a class="code hl_function" href="../../d4/d93/classez_typed_set_property.htm#ac682ee0c1bb444cf12e7f05b5bd83f95">GetSpecificType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> ezGetStaticRTTI&lt;typename ezTypeTraits&lt;Type&gt;::NonConstReferencePointerType&gt;(); }</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>};</div>
</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span> </div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="foldopen" id="foldopen00023" data-start="{" data-end="};">
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno"><a class="line" href="../../da/d9d/classez_typed_set_property_3_01const_01char_01_5_01_4.htm">   23</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty</a>&lt;const char*&gt; : <span class="keyword">public</span> <a class="code hl_class" href="../../d9/dc6/classez_abstract_set_property.htm">ezAbstractSetProperty</a></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>{</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>  <a class="code hl_class" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName)</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>    : <a class="code hl_class" href="../../d9/dc6/classez_abstract_set_property.htm">ezAbstractSetProperty</a>(szPropertyName)</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  {</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>    m_Flags = ezPropertyFlags::GetParameterFlags&lt;const char*&gt;();</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  }</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span> </div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno"><a class="line" href="../../da/d9d/classez_typed_set_property_3_01const_01char_01_5_01_4.htm#aa2bd18354bb2526c279ac549290e72d3">   32</a></span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* <a class="code hl_function" href="../../da/d9d/classez_typed_set_property_3_01const_01char_01_5_01_4.htm#aa2bd18354bb2526c279ac549290e72d3">GetSpecificType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> ezGetStaticRTTI&lt;const char*&gt;(); }</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>};</div>
</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span> </div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type, <span class="keyword">typename</span> Container&gt;</div>
<div class="foldopen" id="foldopen00037" data-start="{" data-end="};">
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno"><a class="line" href="../../d0/d0a/classez_accessor_set_property.htm">   37</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d0/d0a/classez_accessor_set_property.htm">ezAccessorSetProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty</a>&lt;Type&gt;</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>{</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>  <span class="keyword">using </span>ContainerType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>  <span class="keyword">using </span>RealType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span> </div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>  <span class="keyword">using </span>InsertFunc = void (Class::*)(Type value);</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>  <span class="keyword">using </span>RemoveFunc = void (Class::*)(Type value);</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>  <span class="keyword">using </span>GetValuesFunc = Container (Class::*)() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span> </div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>  <a class="code hl_class" href="../../d0/d0a/classez_accessor_set_property.htm">ezAccessorSetProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetValuesFunc getValues, InsertFunc insert, RemoveFunc remove)</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>    : <a class="code hl_class" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty&lt;Type&gt;</a>(szPropertyName)</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>  {</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>    EZ_ASSERT_DEBUG(getValues != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The get values function of an set property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>    m_GetValues = getValues;</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>    m_Insert = insert;</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>    m_Remove = remove;</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>    <span class="keywordflow">if</span> (m_Insert == <span class="keyword">nullptr</span> || m_Remove == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>      ezAbstractSetProperty::m_Flags.<a class="code hl_function" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<a class="code hl_enumvalue" href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  }</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span> </div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span> </div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno"><a class="line" href="../../d0/d0a/classez_accessor_set_property.htm#ab56508fa2b9148fbe37e1a5eae09832c">   61</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d0/d0a/classez_accessor_set_property.htm#ab56508fa2b9148fbe37e1a5eae09832c">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValues)().<a class="code hl_function" href="../../d0/d0a/classez_accessor_set_property.htm#ab56508fa2b9148fbe37e1a5eae09832c">IsEmpty</a>(); }</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span> </div>
<div class="foldopen" id="foldopen00063" data-start="{" data-end="}">
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno"><a class="line" href="../../d0/d0a/classez_accessor_set_property.htm#a34267fe698878ec7797e32080d0dc432">   63</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d0a/classez_accessor_set_property.htm#a34267fe698878ec7797e32080d0dc432">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>    EZ_ASSERT_DEBUG(m_Insert != <span class="keyword">nullptr</span> &amp;&amp; m_Remove != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no remove and insert function, thus it is read-only&quot;</span>,</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>      <a class="code hl_function" href="../../d6/d81/classez_abstract_property.htm#aa9de7a38815952c004c7d2cca9360133">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span> </div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>    <span class="comment">// We must not cache the container c here as the Remove can make it invalid</span></div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>    <span class="comment">// e.g. ezArrayPtr by value.</span></div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>    <span class="keywordflow">while</span> (!<a class="code hl_function" href="../../d0/d0a/classez_accessor_set_property.htm#ab56508fa2b9148fbe37e1a5eae09832c">IsEmpty</a>(pInstance))</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>    {</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>      <span class="comment">// this should be decltype(auto) c = ...; but MSVC 16 is too dumb for that (MSVC 15 works fine)</span></div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>      <span class="keyword">decltype</span>((<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValues)()) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValues)();</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>      <span class="keyword">auto</span> it = cbegin(c);</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>      RealType value = *it;</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>      <a class="code hl_function" href="../../d0/d0a/classez_accessor_set_property.htm#a0fc103a97c8664415576c220aa9f7843">Remove</a>(pInstance, &amp;value);</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>    }</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  }</div>
</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span> </div>
<div class="foldopen" id="foldopen00080" data-start="{" data-end="}">
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno"><a class="line" href="../../d0/d0a/classez_accessor_set_property.htm#a44525109f2b47fe1f3784df996795c34">   80</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d0a/classez_accessor_set_property.htm#a44525109f2b47fe1f3784df996795c34">Insert</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>    EZ_ASSERT_DEBUG(m_Insert != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no insert function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d6/d81/classez_abstract_property.htm#aa9de7a38815952c004c7d2cca9360133">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Insert)(*<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>  }</div>
</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span> </div>
<div class="foldopen" id="foldopen00086" data-start="{" data-end="}">
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno"><a class="line" href="../../d0/d0a/classez_accessor_set_property.htm#a0fc103a97c8664415576c220aa9f7843">   86</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d0a/classez_accessor_set_property.htm#a0fc103a97c8664415576c220aa9f7843">Remove</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>    EZ_ASSERT_DEBUG(m_Remove != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no setter function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d6/d81/classez_abstract_property.htm#aa9de7a38815952c004c7d2cca9360133">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Remove)(*<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  }</div>
</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span> </div>
<div class="foldopen" id="foldopen00092" data-start="{" data-end="}">
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno"><a class="line" href="../../d0/d0a/classez_accessor_set_property.htm#a91f42e742073a1783f102bb5bfabab7f">   92</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d0/d0a/classez_accessor_set_property.htm#a91f42e742073a1783f102bb5bfabab7f">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; value : (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValues)())</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>    {</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>      <span class="keywordflow">if</span> (value == *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject))</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>    }</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>  }</div>
</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span> </div>
<div class="foldopen" id="foldopen00102" data-start="{" data-end="}">
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno"><a class="line" href="../../d0/d0a/classez_accessor_set_property.htm#a6189a5b61b314b4a1e55e5a9acff800a">  102</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d0a/classez_accessor_set_property.htm#a6189a5b61b314b4a1e55e5a9acff800a">GetValues</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code hl_class" href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray&lt;ezVariant&gt;</a>&amp; out_keys)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>    out_keys.<a class="code hl_function" href="../../dc/d59/classez_array_base.htm#a74099c2d7681df345aedf8cfe24f0bc4">Clear</a>();</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; value : (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValues)())</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>    {</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>      out_keys.<a class="code hl_function" href="../../dc/d59/classez_array_base.htm#abc514bdf8b2de7b5b220ffdbd862e830">PushBack</a>(<a class="code hl_class" href="../../de/de6/classez_variant.htm">ezVariant</a>(value));</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>    }</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>  }</div>
</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span> </div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  GetValuesFunc m_GetValues;</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>  InsertFunc m_Insert;</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>  RemoveFunc m_Remove;</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>};</div>
</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span> </div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span> </div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, Container Class::*Member&gt;</div>
<div class="foldopen" id="foldopen00120" data-start="{" data-end="};">
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno"><a class="line" href="../../df/d0a/structez_set_property_accessor.htm">  120</a></span><span class="keyword">struct </span><a class="code hl_struct" href="../../df/d0a/structez_set_property_accessor.htm">ezSetPropertyAccessor</a></div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>{</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>  <span class="keyword">using </span>ContainerType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  <span class="keyword">using </span>Type = <span class="keyword">typename</span> <a class="code hl_struct" href="../../d1/d32/structez_type_traits.htm">ezTypeTraits&lt;typename ezContainerSubTypeResolver&lt;ContainerType&gt;::Type</a>&gt;::NonConstReferenceType;</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span> </div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  <span class="keyword">static</span> <span class="keyword">const</span> ContainerType&amp; GetConstContainer(<span class="keyword">const</span> Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>  <span class="keyword">static</span> ContainerType&amp; GetContainer(Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>};</div>
</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span> </div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span> </div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, <span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00132" data-start="{" data-end="};">
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno"><a class="line" href="../../dd/db3/classez_member_set_property.htm">  132</a></span><span class="keyword">class </span><a class="code hl_class" href="../../dd/db3/classez_member_set_property.htm">ezMemberSetProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty</a>&lt;typename ezTypeTraits&lt;Type&gt;::NonConstReferenceType&gt;</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>{</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>  <span class="keyword">using </span>RealType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  <span class="keyword">using </span>GetConstContainerFunc = <span class="keyword">const</span> Container&amp; (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  <span class="keyword">using </span>GetContainerFunc = Container&amp; (*)(Class* pInstance);</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>  <a class="code hl_class" href="../../dd/db3/classez_member_set_property.htm">ezMemberSetProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetConstContainerFunc constGetter, GetContainerFunc getter)</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>    : <a class="code hl_class" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty&lt;RealType&gt;</a>(szPropertyName)</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  {</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>    EZ_ASSERT_DEBUG(constGetter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The const get count function of an set property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span> </div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>    m_ConstGetter = constGetter;</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>    m_Getter = getter;</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span> </div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>    <span class="keywordflow">if</span> (m_Getter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>      ezAbstractSetProperty::m_Flags.<a class="code hl_function" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<a class="code hl_enumvalue" href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>  }</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span> </div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno"><a class="line" href="../../dd/db3/classez_member_set_property.htm#a1b1d2d99f33bdad73de760db9633816e">  151</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../dd/db3/classez_member_set_property.htm#a1b1d2d99f33bdad73de760db9633816e">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).IsEmpty(); }</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span> </div>
<div class="foldopen" id="foldopen00153" data-start="{" data-end="}">
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno"><a class="line" href="../../dd/db3/classez_member_set_property.htm#ac96cda7999e7d850d24510e2072c9a66">  153</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../dd/db3/classez_member_set_property.htm#ac96cda7999e7d850d24510e2072c9a66">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>    EZ_ASSERT_DEBUG(</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>      m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d6/d81/classez_abstract_property.htm#aa9de7a38815952c004c7d2cca9360133">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Clear();</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>  }</div>
</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span> </div>
<div class="foldopen" id="foldopen00160" data-start="{" data-end="}">
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno"><a class="line" href="../../dd/db3/classez_member_set_property.htm#ac4584d80dd7b1f029f6576429d52cb70">  160</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../dd/db3/classez_member_set_property.htm#ac4584d80dd7b1f029f6576429d52cb70">Insert</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>    EZ_ASSERT_DEBUG(</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>      m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d6/d81/classez_abstract_property.htm#aa9de7a38815952c004c7d2cca9360133">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Insert(*<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>  }</div>
</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="foldopen" id="foldopen00167" data-start="{" data-end="}">
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno"><a class="line" href="../../dd/db3/classez_member_set_property.htm#aa38f6fa9280eb73cd4c86ff457766c49">  167</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../dd/db3/classez_member_set_property.htm#aa38f6fa9280eb73cd4c86ff457766c49">Remove</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>    EZ_ASSERT_DEBUG(</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>      m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d6/d81/classez_abstract_property.htm#aa9de7a38815952c004c7d2cca9360133">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Remove(*<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  }</div>
</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span> </div>
<div class="foldopen" id="foldopen00174" data-start="{" data-end="}">
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno"><a class="line" href="../../dd/db3/classez_member_set_property.htm#a329adceea5f089fcd7cdfa59c4bd553b">  174</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../dd/db3/classez_member_set_property.htm#a329adceea5f089fcd7cdfa59c4bd553b">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>    <span class="keywordflow">return</span> m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).Contains(*<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  }</div>
</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span> </div>
<div class="foldopen" id="foldopen00179" data-start="{" data-end="}">
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno"><a class="line" href="../../dd/db3/classez_member_set_property.htm#af58ad72151a93306e74ab4cc8624c101">  179</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../dd/db3/classez_member_set_property.htm#af58ad72151a93306e74ab4cc8624c101">GetValues</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code hl_class" href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray&lt;ezVariant&gt;</a>&amp; out_keys)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>    out_keys.<a class="code hl_function" href="../../dc/d59/classez_array_base.htm#a74099c2d7681df345aedf8cfe24f0bc4">Clear</a>();</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; value : m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)))</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>    {</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>      out_keys.<a class="code hl_function" href="../../dc/d59/classez_array_base.htm#abc514bdf8b2de7b5b220ffdbd862e830">PushBack</a>(<a class="code hl_class" href="../../de/de6/classez_variant.htm">ezVariant</a>(value));</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>    }</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  }</div>
</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>  GetConstContainerFunc m_ConstGetter;</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>  GetContainerFunc m_Getter;</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>};</div>
</div>
<div class="ttc" id="aclassez_abstract_property_htm_aa9de7a38815952c004c7d2cca9360133"><div class="ttname"><a href="../../d6/d81/classez_abstract_property.htm#aa9de7a38815952c004c7d2cca9360133">ezAbstractProperty::GetPropertyName</a></div><div class="ttdeci">const char * GetPropertyName() const</div><div class="ttdoc">Returns the name of the property.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:160</div></div>
<div class="ttc" id="aclassez_abstract_set_property_htm"><div class="ttname"><a href="../../d9/dc6/classez_abstract_set_property.htm">ezAbstractSetProperty</a></div><div class="ttdoc">The base class for a property that represents a set of values.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:320</div></div>
<div class="ttc" id="aclassez_accessor_set_property_htm"><div class="ttname"><a href="../../d0/d0a/classez_accessor_set_property.htm">ezAccessorSetProperty</a></div><div class="ttdef"><b>Definition</b> SetProperty.h:38</div></div>
<div class="ttc" id="aclassez_accessor_set_property_htm_a0fc103a97c8664415576c220aa9f7843"><div class="ttname"><a href="../../d0/d0a/classez_accessor_set_property.htm#a0fc103a97c8664415576c220aa9f7843">ezAccessorSetProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, const void *pObject) const override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition</b> SetProperty.h:86</div></div>
<div class="ttc" id="aclassez_accessor_set_property_htm_a34267fe698878ec7797e32080d0dc432"><div class="ttname"><a href="../../d0/d0a/classez_accessor_set_property.htm#a34267fe698878ec7797e32080d0dc432">ezAccessorSetProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) const override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition</b> SetProperty.h:63</div></div>
<div class="ttc" id="aclassez_accessor_set_property_htm_a44525109f2b47fe1f3784df996795c34"><div class="ttname"><a href="../../d0/d0a/classez_accessor_set_property.htm#a44525109f2b47fe1f3784df996795c34">ezAccessorSetProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, const void *pObject) const override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition</b> SetProperty.h:80</div></div>
<div class="ttc" id="aclassez_accessor_set_property_htm_a6189a5b61b314b4a1e55e5a9acff800a"><div class="ttname"><a href="../../d0/d0a/classez_accessor_set_property.htm#a6189a5b61b314b4a1e55e5a9acff800a">ezAccessorSetProperty::GetValues</a></div><div class="ttdeci">virtual void GetValues(const void *pInstance, ezDynamicArray&lt; ezVariant &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition</b> SetProperty.h:102</div></div>
<div class="ttc" id="aclassez_accessor_set_property_htm_a91f42e742073a1783f102bb5bfabab7f"><div class="ttname"><a href="../../d0/d0a/classez_accessor_set_property.htm#a91f42e742073a1783f102bb5bfabab7f">ezAccessorSetProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, const void *pObject) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition</b> SetProperty.h:92</div></div>
<div class="ttc" id="aclassez_accessor_set_property_htm_ab56508fa2b9148fbe37e1a5eae09832c"><div class="ttname"><a href="../../d0/d0a/classez_accessor_set_property.htm#ab56508fa2b9148fbe37e1a5eae09832c">ezAccessorSetProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition</b> SetProperty.h:61</div></div>
<div class="ttc" id="aclassez_array_base_htm_a74099c2d7681df345aedf8cfe24f0bc4"><div class="ttname"><a href="../../dc/d59/classez_array_base.htm#a74099c2d7681df345aedf8cfe24f0bc4">ezArrayBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition</b> ArrayBase_inl.h:184</div></div>
<div class="ttc" id="aclassez_array_base_htm_abc514bdf8b2de7b5b220ffdbd862e830"><div class="ttname"><a href="../../dc/d59/classez_array_base.htm#abc514bdf8b2de7b5b220ffdbd862e830">ezArrayBase::PushBack</a></div><div class="ttdeci">void PushBack(const T &amp;value)</div><div class="ttdoc">Pushes value at the end of the array.</div><div class="ttdef"><b>Definition</b> ArrayBase_inl.h:333</div></div>
<div class="ttc" id="aclassez_dynamic_array_htm"><div class="ttname"><a href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray</a></div><div class="ttdef"><b>Definition</b> DynamicArray.h:81</div></div>
<div class="ttc" id="aclassez_member_set_property_htm"><div class="ttname"><a href="../../dd/db3/classez_member_set_property.htm">ezMemberSetProperty</a></div><div class="ttdef"><b>Definition</b> SetProperty.h:133</div></div>
<div class="ttc" id="aclassez_member_set_property_htm_a1b1d2d99f33bdad73de760db9633816e"><div class="ttname"><a href="../../dd/db3/classez_member_set_property.htm#a1b1d2d99f33bdad73de760db9633816e">ezMemberSetProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition</b> SetProperty.h:151</div></div>
<div class="ttc" id="aclassez_member_set_property_htm_a329adceea5f089fcd7cdfa59c4bd553b"><div class="ttname"><a href="../../dd/db3/classez_member_set_property.htm#a329adceea5f089fcd7cdfa59c4bd553b">ezMemberSetProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, const void *pObject) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition</b> SetProperty.h:174</div></div>
<div class="ttc" id="aclassez_member_set_property_htm_aa38f6fa9280eb73cd4c86ff457766c49"><div class="ttname"><a href="../../dd/db3/classez_member_set_property.htm#aa38f6fa9280eb73cd4c86ff457766c49">ezMemberSetProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, const void *pObject) const override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition</b> SetProperty.h:167</div></div>
<div class="ttc" id="aclassez_member_set_property_htm_ac4584d80dd7b1f029f6576429d52cb70"><div class="ttname"><a href="../../dd/db3/classez_member_set_property.htm#ac4584d80dd7b1f029f6576429d52cb70">ezMemberSetProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, const void *pObject) const override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition</b> SetProperty.h:160</div></div>
<div class="ttc" id="aclassez_member_set_property_htm_ac96cda7999e7d850d24510e2072c9a66"><div class="ttname"><a href="../../dd/db3/classez_member_set_property.htm#ac96cda7999e7d850d24510e2072c9a66">ezMemberSetProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) const override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition</b> SetProperty.h:153</div></div>
<div class="ttc" id="aclassez_member_set_property_htm_af58ad72151a93306e74ab4cc8624c101"><div class="ttname"><a href="../../dd/db3/classez_member_set_property.htm#af58ad72151a93306e74ab4cc8624c101">ezMemberSetProperty::GetValues</a></div><div class="ttdeci">virtual void GetValues(const void *pInstance, ezDynamicArray&lt; ezVariant &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition</b> SetProperty.h:179</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a></div><div class="ttdoc">This class holds information about reflected types. Each instance represents one type that is known t...</div><div class="ttdef"><b>Definition</b> RTTI.h:30</div></div>
<div class="ttc" id="aclassez_typed_set_property_3_01const_01char_01_5_01_4_htm_aa2bd18354bb2526c279ac549290e72d3"><div class="ttname"><a href="../../da/d9d/classez_typed_set_property_3_01const_01char_01_5_01_4.htm#aa2bd18354bb2526c279ac549290e72d3">ezTypedSetProperty&lt; const char * &gt;::GetSpecificType</a></div><div class="ttdeci">virtual const ezRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition</b> SetProperty.h:32</div></div>
<div class="ttc" id="aclassez_typed_set_property_htm"><div class="ttname"><a href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty</a></div><div class="ttdoc">Do not cast into this class or any of its derived classes, use ezAbstractSetProperty instead.</div><div class="ttdef"><b>Definition</b> SetProperty.h:10</div></div>
<div class="ttc" id="aclassez_typed_set_property_htm_ac682ee0c1bb444cf12e7f05b5bd83f95"><div class="ttname"><a href="../../d4/d93/classez_typed_set_property.htm#ac682ee0c1bb444cf12e7f05b5bd83f95">ezTypedSetProperty::GetSpecificType</a></div><div class="ttdeci">virtual const ezRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition</b> SetProperty.h:18</div></div>
<div class="ttc" id="aclassez_variant_htm"><div class="ttname"><a href="../../de/de6/classez_variant.htm">ezVariant</a></div><div class="ttdoc">ezVariant is a class that can store different types of variables, which is useful in situations where...</div><div class="ttdef"><b>Definition</b> Variant.h:44</div></div>
<div class="ttc" id="astructez_bitflags_htm_aaa83c1e77b70d0b549604a64c20f8a83"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">ezBitflags::Add</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void Add(const ezBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Sets the given flag.</div><div class="ttdef"><b>Definition</b> Bitflags.h:151</div></div>
<div class="ttc" id="astructez_property_flags_htm_a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a"><div class="ttname"><a href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a></div><div class="ttdeci">@ ReadOnly</div><div class="ttdoc">Can only be read but not modified.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:63</div></div>
<div class="ttc" id="astructez_set_property_accessor_htm"><div class="ttname"><a href="../../df/d0a/structez_set_property_accessor.htm">ezSetPropertyAccessor</a></div><div class="ttdef"><b>Definition</b> SetProperty.h:121</div></div>
<div class="ttc" id="astructez_type_traits_htm"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm">ezTypeTraits</a></div><div class="ttdef"><b>Definition</b> TypeTraits.h:207</div></div>
<div class="ttc" id="astructez_type_traits_htm_af2051eb05a731b9618b107540f8f46f8"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits::NonConstReferenceType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type NonConstReferenceType</div><div class="ttdoc">removes reference and const qualifier</div><div class="ttdef"><b>Definition</b> TypeTraits.h:218</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_217b90e143c3d27cf4319fb9e916f4ad.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_4d499b0494fc84c22e280b98d7f4832b.htm">Implementation</a></li><li class="navelem"><b>SetProperty.h</b></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:17:52 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
