<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Reflection/Implementation/SetProperty.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d6/d41/_set_property_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">SetProperty.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/AbstractProperty.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00009"></a><span class="lineno"><a class="line" href="../../d4/d93/classez_typed_set_property.htm">    9</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty</a> : <span class="keyword">public</span> <a class="code" href="../../d9/dc6/classez_abstract_set_property.htm">ezAbstractSetProperty</a></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;{</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <a class="code" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName)</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    : <a class="code" href="../../d9/dc6/classez_abstract_set_property.htm#a66b2ad9bd143e86a50e086442de19982">ezAbstractSetProperty</a>(szPropertyName)</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  {</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    m_Flags = ezPropertyFlags::GetParameterFlags&lt;Type&gt;();</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  }</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="../../d4/d93/classez_typed_set_property.htm#aae7b5475a31f70a5bcae464dafeb016c">   18</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* <a class="code" href="../../d4/d93/classez_typed_set_property.htm#aae7b5475a31f70a5bcae464dafeb016c">GetSpecificType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> ezGetStaticRTTI&lt;typename ezTypeTraits&lt;Type&gt;::NonConstReferencePointerType&gt;(); }</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;};</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../da/d9d/classez_typed_set_property_3_01const_01char_01_5_01_4.htm">   23</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty</a>&lt;const char*&gt; : <span class="keyword">public</span> <a class="code" href="../../d9/dc6/classez_abstract_set_property.htm">ezAbstractSetProperty</a></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  <a class="code" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName)</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    : <a class="code" href="../../d9/dc6/classez_abstract_set_property.htm#a66b2ad9bd143e86a50e086442de19982">ezAbstractSetProperty</a>(szPropertyName)</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  {</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    m_Flags = ezPropertyFlags::GetParameterFlags&lt;const char*&gt;();</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  }</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="../../da/d9d/classez_typed_set_property_3_01const_01char_01_5_01_4.htm#aa69ff94567888e9d3a0061951deb605f">   32</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* <a class="code" href="../../da/d9d/classez_typed_set_property_3_01const_01char_01_5_01_4.htm#aa69ff94567888e9d3a0061951deb605f">GetSpecificType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> ezGetStaticRTTI&lt;const char*&gt;(); }</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;};</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type, <span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="../../d0/d0a/classez_accessor_set_property.htm">   37</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d0/d0a/classez_accessor_set_property.htm">ezAccessorSetProperty</a> : <span class="keyword">public</span> <a class="code" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty</a>&lt;Type&gt;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="keyword">using</span> ContainerType = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <span class="keyword">using</span> RealType = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="keyword">using</span> InsertFunc = void (Class::*)(Type value);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keyword">using</span> RemoveFunc = void (Class::*)(Type value);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keyword">using</span> GetValuesFunc = Container (Class::*)() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <a class="code" href="../../d0/d0a/classez_accessor_set_property.htm">ezAccessorSetProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetValuesFunc getValues, InsertFunc insert, RemoveFunc remove)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    : <a class="code" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty&lt;Type&gt;</a>(szPropertyName)</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    EZ_ASSERT_DEBUG(getValues != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The get values function of an set property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    m_GetValues = getValues;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    m_Insert = insert;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    m_Remove = remove;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">if</span> (m_Insert == <span class="keyword">nullptr</span> || m_Remove == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      ezAbstractSetProperty::m_Flags.<a class="code" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<a class="code" href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="../../d0/d0a/classez_accessor_set_property.htm#ab56508fa2b9148fbe37e1a5eae09832c">   61</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../d0/d0a/classez_accessor_set_property.htm#ab56508fa2b9148fbe37e1a5eae09832c">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValues)().<a class="code" href="../../d0/d0a/classez_accessor_set_property.htm#ab56508fa2b9148fbe37e1a5eae09832c">IsEmpty</a>(); }</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="../../d0/d0a/classez_accessor_set_property.htm#a4c1013e8a7848404a24ab4a01fe3ec9a">   63</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d0/d0a/classez_accessor_set_property.htm#a4c1013e8a7848404a24ab4a01fe3ec9a">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> override</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    EZ_ASSERT_DEBUG(m_Insert != <span class="keyword">nullptr</span> &amp;&amp; m_Remove != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no remove and insert function, thus it is read-only&quot;</span>,</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// We must not cache the container c here as the Remove can make it invalid</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// e.g. ezArrayPtr by value.</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">while</span> (!<a class="code" href="../../d0/d0a/classez_accessor_set_property.htm#ab56508fa2b9148fbe37e1a5eae09832c">IsEmpty</a>(pInstance))</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      <span class="comment">// this should be decltype(auto) c = ...; but MSVC 16 is too dumb for that (MSVC 15 works fine)</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      decltype((<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValues)()) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValues)();</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      <span class="keyword">auto</span> it = cbegin(c);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      RealType value = *it;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      <a class="code" href="../../d0/d0a/classez_accessor_set_property.htm#aaef3c6f7ef157152e2791dfbf78fc06d">Remove</a>(pInstance, &amp;value);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="../../d0/d0a/classez_accessor_set_property.htm#a95c0cbe9873aa5728bb40cd97b247236">   80</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d0/d0a/classez_accessor_set_property.htm#a95c0cbe9873aa5728bb40cd97b247236">Insert</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    EZ_ASSERT_DEBUG(m_Insert != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no insert function, thus it is read-only.&quot;</span>, <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Insert)(*<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="../../d0/d0a/classez_accessor_set_property.htm#aaef3c6f7ef157152e2791dfbf78fc06d">   86</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d0/d0a/classez_accessor_set_property.htm#aaef3c6f7ef157152e2791dfbf78fc06d">Remove</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    EZ_ASSERT_DEBUG(m_Remove != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no setter function, thus it is read-only.&quot;</span>, <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Remove)(*<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="../../d0/d0a/classez_accessor_set_property.htm#a91f42e742073a1783f102bb5bfabab7f">   92</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../d0/d0a/classez_accessor_set_property.htm#a91f42e742073a1783f102bb5bfabab7f">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; value : (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValues)())</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      <span class="keywordflow">if</span> (value == *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject))</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="../../d0/d0a/classez_accessor_set_property.htm#a6189a5b61b314b4a1e55e5a9acff800a">  102</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d0/d0a/classez_accessor_set_property.htm#a6189a5b61b314b4a1e55e5a9acff800a">GetValues</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray&lt;ezVariant&gt;</a>&amp; out_keys)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    out_keys.<a class="code" href="../../dc/d59/classez_array_base.htm#a74099c2d7681df345aedf8cfe24f0bc4">Clear</a>();</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; value : (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValues)())</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;      out_keys.<a class="code" href="../../dc/d59/classez_array_base.htm#abc514bdf8b2de7b5b220ffdbd862e830">PushBack</a>(<a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(value));</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  GetValuesFunc m_GetValues;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  InsertFunc m_Insert;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  RemoveFunc m_Remove;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;};</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, Container Class::*Member&gt;</div>
<div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="../../df/d0a/structez_set_property_accessor.htm">  120</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../df/d0a/structez_set_property_accessor.htm">ezSetPropertyAccessor</a></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keyword">using</span> ContainerType = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keyword">using</span> Type = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm">ezTypeTraits&lt;typename ezContainerSubTypeResolver&lt;ContainerType&gt;::Type</a>&gt;::NonConstReferenceType;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> ContainerType&amp; GetConstContainer(<span class="keyword">const</span> Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keyword">static</span> ContainerType&amp; GetContainer(Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;};</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, <span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="../../dd/db3/classez_member_set_property.htm">  132</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../dd/db3/classez_member_set_property.htm">ezMemberSetProperty</a> : <span class="keyword">public</span> <a class="code" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty</a>&lt;typename ezTypeTraits&lt;Type&gt;::NonConstReferenceType&gt;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="keyword">using</span> RealType = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keyword">using</span> GetConstContainerFunc = <span class="keyword">const</span> Container&amp; (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keyword">using</span> GetContainerFunc = Container&amp; (*)(Class* pInstance);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <a class="code" href="../../dd/db3/classez_member_set_property.htm">ezMemberSetProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetConstContainerFunc constGetter, GetContainerFunc getter)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    : <a class="code" href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty&lt;RealType&gt;</a>(szPropertyName)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    EZ_ASSERT_DEBUG(constGetter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The const get count function of an set property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    m_ConstGetter = constGetter;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    m_Getter = getter;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">if</span> (m_Getter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      ezAbstractSetProperty::m_Flags.<a class="code" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<a class="code" href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="../../dd/db3/classez_member_set_property.htm#a1b1d2d99f33bdad73de760db9633816e">  151</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../dd/db3/classez_member_set_property.htm#a1b1d2d99f33bdad73de760db9633816e">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).IsEmpty(); }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="../../dd/db3/classez_member_set_property.htm#a0f37d157876d6f518ce81559cb90d60c">  153</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dd/db3/classez_member_set_property.htm#a0f37d157876d6f518ce81559cb90d60c">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> override</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    EZ_ASSERT_DEBUG(</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Clear();</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="../../dd/db3/classez_member_set_property.htm#a6b8f5b845ff16b4a87f24719855ebea8">  160</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dd/db3/classez_member_set_property.htm#a6b8f5b845ff16b4a87f24719855ebea8">Insert</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    EZ_ASSERT_DEBUG(</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Insert(*<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="../../dd/db3/classez_member_set_property.htm#a8de791e34171f56ae7e53f4f9826ff71">  167</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dd/db3/classez_member_set_property.htm#a8de791e34171f56ae7e53f4f9826ff71">Remove</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    EZ_ASSERT_DEBUG(</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;      m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Remove(*<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="../../dd/db3/classez_member_set_property.htm#a329adceea5f089fcd7cdfa59c4bd553b">  174</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../dd/db3/classez_member_set_property.htm#a329adceea5f089fcd7cdfa59c4bd553b">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">return</span> m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).Contains(*<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="../../dd/db3/classez_member_set_property.htm#af58ad72151a93306e74ab4cc8624c101">  179</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dd/db3/classez_member_set_property.htm#af58ad72151a93306e74ab4cc8624c101">GetValues</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray&lt;ezVariant&gt;</a>&amp; out_keys)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    out_keys.<a class="code" href="../../dc/d59/classez_array_base.htm#a74099c2d7681df345aedf8cfe24f0bc4">Clear</a>();</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; value : m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)))</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    {</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      out_keys.<a class="code" href="../../dc/d59/classez_array_base.htm#abc514bdf8b2de7b5b220ffdbd862e830">PushBack</a>(<a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(value));</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  GetConstContainerFunc m_ConstGetter;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  GetContainerFunc m_Getter;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;};</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassez_abstract_set_property_htm"><div class="ttname"><a href="../../d9/dc6/classez_abstract_set_property.htm">ezAbstractSetProperty</a></div><div class="ttdoc">The base class for a property that represents a set of values.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:313</div></div>
<div class="ttc" id="astructez_type_traits_htm_af2051eb05a731b9618b107540f8f46f8"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits::NonConstReferenceType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type NonConstReferenceType</div><div class="ttdoc">removes reference and const qualifier</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:220</div></div>
<div class="ttc" id="astructez_type_traits_htm"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm">ezTypeTraits</a></div><div class="ttdef"><b>Definition:</b> TypeTraits.h:208</div></div>
<div class="ttc" id="aclassez_member_set_property_htm"><div class="ttname"><a href="../../dd/db3/classez_member_set_property.htm">ezMemberSetProperty</a></div><div class="ttdef"><b>Definition:</b> SetProperty.h:132</div></div>
<div class="ttc" id="aclassez_member_set_property_htm_af58ad72151a93306e74ab4cc8624c101"><div class="ttname"><a href="../../dd/db3/classez_member_set_property.htm#af58ad72151a93306e74ab4cc8624c101">ezMemberSetProperty::GetValues</a></div><div class="ttdeci">virtual void GetValues(const void *pInstance, ezDynamicArray&lt; ezVariant &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition:</b> SetProperty.h:179</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a></div><div class="ttdoc">This enumerable class holds information about reflected types. Each instance represents one type that...</div><div class="ttdef"><b>Definition:</b> RTTI.h:30</div></div>
<div class="ttc" id="astructez_bitflags_htm_aaa83c1e77b70d0b549604a64c20f8a83"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">ezBitflags::Add</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void Add(const ezBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Sets the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:148</div></div>
<div class="ttc" id="aclassez_array_base_htm_abc514bdf8b2de7b5b220ffdbd862e830"><div class="ttname"><a href="../../dc/d59/classez_array_base.htm#abc514bdf8b2de7b5b220ffdbd862e830">ezArrayBase::PushBack</a></div><div class="ttdeci">void PushBack(const T &amp;value)</div><div class="ttdoc">Pushes value at the end of the array.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:327</div></div>
<div class="ttc" id="aclassez_accessor_set_property_htm_a95c0cbe9873aa5728bb40cd97b247236"><div class="ttname"><a href="../../d0/d0a/classez_accessor_set_property.htm#a95c0cbe9873aa5728bb40cd97b247236">ezAccessorSetProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, const void *pObject) override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition:</b> SetProperty.h:80</div></div>
<div class="ttc" id="aclassez_accessor_set_property_htm_a6189a5b61b314b4a1e55e5a9acff800a"><div class="ttname"><a href="../../d0/d0a/classez_accessor_set_property.htm#a6189a5b61b314b4a1e55e5a9acff800a">ezAccessorSetProperty::GetValues</a></div><div class="ttdeci">virtual void GetValues(const void *pInstance, ezDynamicArray&lt; ezVariant &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition:</b> SetProperty.h:102</div></div>
<div class="ttc" id="aclassez_member_set_property_htm_a0f37d157876d6f518ce81559cb90d60c"><div class="ttname"><a href="../../dd/db3/classez_member_set_property.htm#a0f37d157876d6f518ce81559cb90d60c">ezMemberSetProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition:</b> SetProperty.h:153</div></div>
<div class="ttc" id="aclassez_abstract_set_property_htm_a66b2ad9bd143e86a50e086442de19982"><div class="ttname"><a href="../../d9/dc6/classez_abstract_set_property.htm#a66b2ad9bd143e86a50e086442de19982">ezAbstractSetProperty::ezAbstractSetProperty</a></div><div class="ttdeci">ezAbstractSetProperty(const char *szPropertyName)</div><div class="ttdoc">Passes the property name through to ezAbstractProperty.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:317</div></div>
<div class="ttc" id="aclassez_accessor_set_property_htm"><div class="ttname"><a href="../../d0/d0a/classez_accessor_set_property.htm">ezAccessorSetProperty</a></div><div class="ttdef"><b>Definition:</b> SetProperty.h:37</div></div>
<div class="ttc" id="aclassez_abstract_property_htm_a978bb805adf38827ef6485801fb25341"><div class="ttname"><a href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a></div><div class="ttdeci">const char * GetPropertyName() const</div><div class="ttdoc">Returns the name of the property.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:161</div></div>
<div class="ttc" id="aclassez_typed_set_property_htm"><div class="ttname"><a href="../../d4/d93/classez_typed_set_property.htm">ezTypedSetProperty</a></div><div class="ttdoc">Do not cast into this class or any of its derived classes, use ezAbstractSetProperty instead.</div><div class="ttdef"><b>Definition:</b> SetProperty.h:9</div></div>
<div class="ttc" id="aclassez_accessor_set_property_htm_a91f42e742073a1783f102bb5bfabab7f"><div class="ttname"><a href="../../d0/d0a/classez_accessor_set_property.htm#a91f42e742073a1783f102bb5bfabab7f">ezAccessorSetProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, const void *pObject) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition:</b> SetProperty.h:92</div></div>
<div class="ttc" id="aclassez_dynamic_array_htm"><div class="ttname"><a href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray&lt; ezVariant &gt;</a></div></div>
<div class="ttc" id="aclassez_accessor_set_property_htm_a4c1013e8a7848404a24ab4a01fe3ec9a"><div class="ttname"><a href="../../d0/d0a/classez_accessor_set_property.htm#a4c1013e8a7848404a24ab4a01fe3ec9a">ezAccessorSetProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition:</b> SetProperty.h:63</div></div>
<div class="ttc" id="aclassez_variant_htm"><div class="ttname"><a href="../../de/de6/classez_variant.htm">ezVariant</a></div><div class="ttdoc">ezVariant is a class that can store different types of variables, which is useful in situations where...</div><div class="ttdef"><b>Definition:</b> Variant.h:45</div></div>
<div class="ttc" id="astructez_property_flags_htm_a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a"><div class="ttname"><a href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a></div><div class="ttdeci">@ ReadOnly</div><div class="ttdoc">Can only be read but not modified.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:63</div></div>
<div class="ttc" id="aclassez_typed_set_property_htm_aae7b5475a31f70a5bcae464dafeb016c"><div class="ttname"><a href="../../d4/d93/classez_typed_set_property.htm#aae7b5475a31f70a5bcae464dafeb016c">ezTypedSetProperty::GetSpecificType</a></div><div class="ttdeci">virtual const ezRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition:</b> SetProperty.h:18</div></div>
<div class="ttc" id="aclassez_member_set_property_htm_a6b8f5b845ff16b4a87f24719855ebea8"><div class="ttname"><a href="../../dd/db3/classez_member_set_property.htm#a6b8f5b845ff16b4a87f24719855ebea8">ezMemberSetProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, const void *pObject) override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition:</b> SetProperty.h:160</div></div>
<div class="ttc" id="aclassez_member_set_property_htm_a329adceea5f089fcd7cdfa59c4bd553b"><div class="ttname"><a href="../../dd/db3/classez_member_set_property.htm#a329adceea5f089fcd7cdfa59c4bd553b">ezMemberSetProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, const void *pObject) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition:</b> SetProperty.h:174</div></div>
<div class="ttc" id="aclassez_array_base_htm_a74099c2d7681df345aedf8cfe24f0bc4"><div class="ttname"><a href="../../dc/d59/classez_array_base.htm#a74099c2d7681df345aedf8cfe24f0bc4">ezArrayBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:176</div></div>
<div class="ttc" id="aclassez_accessor_set_property_htm_ab56508fa2b9148fbe37e1a5eae09832c"><div class="ttname"><a href="../../d0/d0a/classez_accessor_set_property.htm#ab56508fa2b9148fbe37e1a5eae09832c">ezAccessorSetProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition:</b> SetProperty.h:61</div></div>
<div class="ttc" id="aclassez_member_set_property_htm_a8de791e34171f56ae7e53f4f9826ff71"><div class="ttname"><a href="../../dd/db3/classez_member_set_property.htm#a8de791e34171f56ae7e53f4f9826ff71">ezMemberSetProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, const void *pObject) override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition:</b> SetProperty.h:167</div></div>
<div class="ttc" id="aclassez_member_set_property_htm_a1b1d2d99f33bdad73de760db9633816e"><div class="ttname"><a href="../../dd/db3/classez_member_set_property.htm#a1b1d2d99f33bdad73de760db9633816e">ezMemberSetProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition:</b> SetProperty.h:151</div></div>
<div class="ttc" id="aclassez_typed_set_property_3_01const_01char_01_5_01_4_htm_aa69ff94567888e9d3a0061951deb605f"><div class="ttname"><a href="../../da/d9d/classez_typed_set_property_3_01const_01char_01_5_01_4.htm#aa69ff94567888e9d3a0061951deb605f">ezTypedSetProperty&lt; const char * &gt;::GetSpecificType</a></div><div class="ttdeci">virtual const ezRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition:</b> SetProperty.h:32</div></div>
<div class="ttc" id="astructez_set_property_accessor_htm"><div class="ttname"><a href="../../df/d0a/structez_set_property_accessor.htm">ezSetPropertyAccessor</a></div><div class="ttdef"><b>Definition:</b> SetProperty.h:120</div></div>
<div class="ttc" id="aclassez_accessor_set_property_htm_aaef3c6f7ef157152e2791dfbf78fc06d"><div class="ttname"><a href="../../d0/d0a/classez_accessor_set_property.htm#aaef3c6f7ef157152e2791dfbf78fc06d">ezAccessorSetProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, const void *pObject) override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition:</b> SetProperty.h:86</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_217b90e143c3d27cf4319fb9e916f4ad.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_4d499b0494fc84c22e280b98d7f4832b.htm">Implementation</a></li><li class="navelem"><b>SetProperty.h</b></li>
    <li class="footer">Generated on Fri Nov 18 2022 14:47:59 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
