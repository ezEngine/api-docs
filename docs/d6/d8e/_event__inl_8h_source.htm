<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Communication/Implementation/Event_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d6/d8e/_event__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Event_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;Foundation/Types/ScopeExit.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EventData, <span class="keyword">typename</span> MutexType, ezEventType EventType&gt;</div>
<div class="line"><a name="l00006"></a><span class="lineno"><a class="line" href="../../dd/de2/classez_event_base.htm#a091e9f94c1fae72cd796663b173a02c3">    6</a></span>&#160;<a class="code" href="../../dd/de2/classez_event_base.htm#a091e9f94c1fae72cd796663b173a02c3">ezEventBase&lt;EventData, MutexType, EventType&gt;::ezEventBase</a>(<a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  : m_EventHandlers(pAllocator)</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;{</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_COMPILE_FOR_DEVELOPMENT)</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  m_pSelf = <span class="keyword">this</span>;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;}</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160; </div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EventData, <span class="keyword">typename</span> MutexType, ezEventType EventType&gt;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<a class="code" href="../../dd/de2/classez_event_base.htm">ezEventBase&lt;EventData, MutexType, EventType&gt;::~ezEventBase</a>()</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_COMPILE_FOR_DEVELOPMENT)</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  EZ_ASSERT_ALWAYS(m_pSelf == <span class="keyword">this</span>, <span class="stringliteral">&quot;The ezEvent was relocated in memory. This is not allowed, as it breaks the Unsubscribers.&quot;</span>);</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;}</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EventData, <span class="keyword">typename</span> MutexType, ezEventType EventType&gt;</div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="../../dd/de2/classez_event_base.htm#ab46b4d55704bf9f41af5be830ac46cf9">   25</a></span>&#160;ezEventSubscriptionID <a class="code" href="../../dd/de2/classez_event_base.htm#ab46b4d55704bf9f41af5be830ac46cf9">ezEventBase&lt;EventData, MutexType, EventType&gt;::AddEventHandler</a>(<a class="code" href="../../d5/d68/structez_delegate.htm">Handler</a> handler)<span class="keyword"> const</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  EZ_LOCK(m_Mutex);</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;MutexType, ezNoMutex&gt;)</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  {</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">if</span> (EventType == ezEventType::Default)</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;      EZ_ASSERT_DEV(m_uiRecursionDepth == 0, <span class="stringliteral">&quot;Can&#39;t add or remove event handlers while broadcasting (without a mutex). Either enable the use of a mutex on this event, or switch to ezCopyOnBroadcastEvent if this should be allowed. Since this event does not have a mutex, this error can also happen due to multi-threaded access.&quot;</span>);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    }</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  }</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  EZ_ASSERT_DEV(!handler.IsComparable() || !HasEventHandler(handler), <span class="stringliteral">&quot;The same event handler cannot be added twice&quot;</span>);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keyword">auto</span>&amp; item = m_EventHandlers.ExpandAndGetRef();</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  item.m_Handler = std::move(handler);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  item.m_SubscriptionID = ++m_NextSubscriptionID;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="keywordflow">return</span> item.m_SubscriptionID;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EventData, <span class="keyword">typename</span> MutexType, ezEventType EventType&gt;</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="../../dd/de2/classez_event_base.htm#a07fdb25581967df8f384bdbcc1bf6fa7">   47</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/de2/classez_event_base.htm#ab46b4d55704bf9f41af5be830ac46cf9">ezEventBase&lt;EventData, MutexType, EventType&gt;::AddEventHandler</a>(<a class="code" href="../../d5/d68/structez_delegate.htm">Handler</a> handler, Unsubscriber&amp; inout_unsubscriber)<span class="keyword"> const</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  EZ_LOCK(m_Mutex);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;MutexType, ezNoMutex&gt;)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">if</span> constexpr (EventType == ezEventType::Default)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      EZ_ASSERT_DEV(m_uiRecursionDepth == 0, <span class="stringliteral">&quot;Can&#39;t add or remove event handlers while broadcasting (without a mutex). Either enable the use of a mutex on this event, or switch to ezCopyOnBroadcastEvent if this should be allowed. Since this event does not have a mutex, this error can also happen due to multi-threaded access.&quot;</span>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  }</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  inout_unsubscriber.Unsubscribe();</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  inout_unsubscriber.m_pEvent = <span class="keyword">this</span>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  inout_unsubscriber.m_SubscriptionID = AddEventHandler(std::move(handler));</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EventData, <span class="keyword">typename</span> MutexType, ezEventType EventType&gt;</div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="../../dd/de2/classez_event_base.htm#a0be39de527a1a143849442573c074c20">   68</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/de2/classez_event_base.htm#a0be39de527a1a143849442573c074c20">ezEventBase&lt;EventData, MutexType, EventType&gt;::RemoveEventHandler</a>(<span class="keyword">const</span> <a class="code" href="../../d5/d68/structez_delegate.htm">Handler</a>&amp; handler)<span class="keyword"> const</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  EZ_ASSERT_DEV(handler.IsComparable(), <span class="stringliteral">&quot;Lambdas that capture data cannot be removed via function pointer. Use an ezEventSubscriptionID instead.&quot;</span>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  EZ_LOCK(m_Mutex);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <span class="keywordflow">if</span> constexpr (EventType == ezEventType::Default)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;MutexType, ezNoMutex&gt;)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      EZ_ASSERT_DEV(m_uiRecursionDepth == 0, <span class="stringliteral">&quot;Can&#39;t add or remove event handlers while broadcasting (without a mutex). Either enable the use of a mutex on this event, or switch to ezCopyOnBroadcastEvent if this should be allowed. Since this event does not have a mutex, this error can also happen due to multi-threaded access.&quot;</span>);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordflow">for</span> (ezUInt32 idx = 0; idx &lt; m_EventHandlers.GetCount(); ++idx)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">if</span> (m_EventHandlers[idx].m_Handler.IsEqualIfComparable(handler))</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      <span class="keywordflow">if</span> constexpr (EventType == ezEventType::Default)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="comment">// if this event does not copy the handlers, and we are currently broadcasting</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="comment">// we can&#39;t shrink the size of the array, however, we can replace elements (the check above says that we have a mutex, so this is fine)</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">if</span> (m_uiRecursionDepth &gt; 0)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;          <span class="comment">// we just write an invalid handler here, and let the broadcast function clean it up for us</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;          m_EventHandlers[idx].m_Handler = {};</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;          m_EventHandlers[idx].m_SubscriptionID = {};</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;          <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;      }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      <span class="comment">// if we are not broadcasting, or the broadcast uses a copy anyway, we can just modify the handler array directly</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      m_EventHandlers.RemoveAtAndCopy(idx);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  EZ_ASSERT_DEV(<span class="keyword">false</span>, <span class="stringliteral">&quot;ezEvent::RemoveEventHandler: Handler has not been registered or already been unregistered.&quot;</span>);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EventData, <span class="keyword">typename</span> MutexType, ezEventType EventType&gt;</div>
<div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="../../dd/de2/classez_event_base.htm#a2961d9089af776759ce8e83e98ed5431">  110</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/de2/classez_event_base.htm#a0be39de527a1a143849442573c074c20">ezEventBase&lt;EventData, MutexType, EventType&gt;::RemoveEventHandler</a>(ezEventSubscriptionID&amp; inout_id)<span class="keyword"> const</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordflow">if</span> (inout_id == 0)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keyword">const</span> ezEventSubscriptionID subId = inout_id;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  inout_id = 0;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  EZ_LOCK(m_Mutex);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordflow">if</span> constexpr (EventType == ezEventType::Default)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;MutexType, ezNoMutex&gt;)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      EZ_ASSERT_DEV(m_uiRecursionDepth == 0, <span class="stringliteral">&quot;Can&#39;t add or remove event handlers while broadcasting (without a mutex). Either enable the use of a mutex on this event, or switch to ezCopyOnBroadcastEvent if this should be allowed. Since this event does not have a mutex, this error can also happen due to multi-threaded access.&quot;</span>);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keywordflow">for</span> (ezUInt32 idx = 0; idx &lt; m_EventHandlers.GetCount(); ++idx)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">if</span> (m_EventHandlers[idx].m_SubscriptionID == subId)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;      <span class="keywordflow">if</span> constexpr (EventType == ezEventType::Default)</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;      {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="comment">// if this event does not copy the handlers, and we are currently broadcasting</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="comment">// we can&#39;t shrink the size of the array, however, we can replace elements (the check above says that we have a mutex, so this is fine)</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">if</span> (m_uiRecursionDepth &gt; 0)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        {</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;          <span class="comment">// we just write an invalid handler here, and let the broadcast function clean it up for us</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;          m_EventHandlers[idx].m_Handler = {};</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;          m_EventHandlers[idx].m_SubscriptionID = {};</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;          <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      <span class="comment">// if we are not broadcasting, or the broadcast uses a copy anyway, we can just modify the handler array directly</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      m_EventHandlers.RemoveAtAndCopy(idx);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  EZ_ASSERT_DEV(<span class="keyword">false</span>, <span class="stringliteral">&quot;ezEvent::RemoveEventHandler: Invalid subscription ID &#39;{0}&#39;.&quot;</span>, (ezInt32)subId);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EventData, <span class="keyword">typename</span> MutexType, ezEventType EventType&gt;</div>
<div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="../../dd/de2/classez_event_base.htm#a686305d9df13fe5d5bca50b1bda0de4e">  156</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/de2/classez_event_base.htm#a686305d9df13fe5d5bca50b1bda0de4e">ezEventBase&lt;EventData, MutexType, EventType&gt;::HasEventHandler</a>(<span class="keyword">const</span> <a class="code" href="../../d5/d68/structez_delegate.htm">Handler</a>&amp; handler)<span class="keyword"> const</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  EZ_ASSERT_DEV(handler.IsComparable(), <span class="stringliteral">&quot;Lambdas that capture data cannot be checked via function pointer. Use an ezEventSubscriptionID instead.&quot;</span>);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  EZ_LOCK(m_Mutex);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; m_EventHandlers.GetCount(); ++i)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">if</span> (m_EventHandlers[i].m_Handler.IsEqualIfComparable(handler))</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EventData, <span class="keyword">typename</span> MutexType, ezEventType EventType&gt;</div>
<div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="../../dd/de2/classez_event_base.htm#ab5ad9619f606338a1fa6b0d081bd864c">  172</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/de2/classez_event_base.htm#ab5ad9619f606338a1fa6b0d081bd864c">ezEventBase&lt;EventData, MutexType, EventType&gt;::Clear</a>()</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  EZ_LOCK(m_Mutex);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  m_EventHandlers.Clear();</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;}</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EventData, <span class="keyword">typename</span> MutexType, ezEventType EventType&gt;</div>
<div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="../../dd/de2/classez_event_base.htm#a76defef8fca2904347e06e9cc2328a72">  179</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/de2/classez_event_base.htm#a76defef8fca2904347e06e9cc2328a72">ezEventBase&lt;EventData, MutexType, EventType&gt;::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  EZ_LOCK(m_Mutex);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keywordflow">return</span> m_EventHandlers.IsEmpty();</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EventData, <span class="keyword">typename</span> MutexType, ezEventType EventType&gt;</div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="../../dd/de2/classez_event_base.htm#aa59795140c900c874a24c09e2a6731a4">  187</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/de2/classez_event_base.htm#aa59795140c900c874a24c09e2a6731a4">ezEventBase&lt;EventData, MutexType, EventType&gt;::Broadcast</a>(EventData eventData, ezUInt8 uiMaxRecursionDepth)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <span class="keywordflow">if</span> constexpr (EventType == ezEventType::Default)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    EZ_LOCK(m_Mutex);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    EZ_ASSERT_DEV(m_uiRecursionDepth &lt;= uiMaxRecursionDepth, <span class="stringliteral">&quot;The event has been triggered recursively or from several threads simultaneously.&quot;</span>);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">if</span> (m_uiRecursionDepth &gt; uiMaxRecursionDepth)</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_COMPILE_FOR_DEVELOPMENT)</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    EZ_ASSERT_ALWAYS(m_pSelf == <span class="keyword">this</span>, <span class="stringliteral">&quot;The ezEvent was relocated in memory. This is not allowed, as it breaks the Unsubscribers.&quot;</span>);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    m_uiRecursionDepth++;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// RAII to ensure correctness in case exceptions are used</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">auto</span> scopeExit = ezMakeScopeExit([&amp;]() {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;      m_uiRecursionDepth--;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    });</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="comment">// don&#39;t execute handlers that are added while we are broadcasting</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    ezUInt32 uiMaxHandlers = m_EventHandlers.GetCount();</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">for</span> (ezUInt32 ui = 0; ui &lt; uiMaxHandlers;)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      <span class="keywordflow">if</span> (m_EventHandlers[ui].m_Handler.IsValid())</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        m_EventHandlers[ui].m_Handler(eventData);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        ++ui;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        m_EventHandlers.RemoveAtAndCopy(ui);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        --uiMaxHandlers;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;      }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="../../d8/deb/classez_hybrid_array.htm">ezHybridArray&lt;HandlerData, 16&gt;</a> eventHandlers;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      EZ_LOCK(m_Mutex);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      <span class="keywordflow">if</span> constexpr (RecursionDepthSupported)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;      {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        EZ_ASSERT_DEV(m_uiRecursionDepth &lt;= uiMaxRecursionDepth, <span class="stringliteral">&quot;The event has been triggered recursively or from several threads simultaneously.&quot;</span>);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keywordflow">if</span> (m_uiRecursionDepth &gt; uiMaxRecursionDepth)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;          <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_COMPILE_FOR_DEVELOPMENT)</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        EZ_ASSERT_ALWAYS(m_pSelf == <span class="keyword">this</span>, <span class="stringliteral">&quot;The ezEvent was relocated in memory. This is not allowed, as it breaks the Unsubscribers.&quot;</span>);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        m_uiRecursionDepth++;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;      {</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        EZ_ASSERT_DEV(uiMaxRecursionDepth == 255, <span class="stringliteral">&quot;uiMaxRecursionDepth is not supported if ezEventType::CopyOnBroadcast is used and the event needs to be threadsafe.&quot;</span>);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_COMPILE_FOR_DEVELOPMENT)</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;      EZ_ASSERT_ALWAYS(m_pSelf == <span class="keyword">this</span>, <span class="stringliteral">&quot;The ezEvent was relocated in memory. This is not allowed, as it breaks the Unsubscribers.&quot;</span>);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      eventHandlers = m_EventHandlers;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="comment">// RAII to ensure correctness in case exceptions are used</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">auto</span> scopeExit = ezMakeScopeExit([&amp;]() {</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="comment">// Bug in MSVC 2017. Can&#39;t use if constexpr.</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_COMPILER_MSVC) &amp;&amp; _MSC_VER &lt; 1920</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;      <span class="keywordflow">if</span> (RecursionDepthSupported)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;      {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        m_uiRecursionDepth--;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;      }</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;      <span class="keywordflow">if</span> constexpr (RecursionDepthSupported)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;      {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        m_uiRecursionDepth--;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;      }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    });</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">const</span> ezUInt32 uiHandlerCount = eventHandlers.<a class="code" href="../../dc/d59/classez_array_base.htm#a51ba61fcbd2350ae8850754a41acbaa1">GetCount</a>();</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">for</span> (ezUInt32 ui = 0; ui &lt; uiHandlerCount; ++ui)</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;      eventHandlers[ui].m_Handler(eventData);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EventData, <span class="keyword">typename</span> MutexType, <span class="keyword">typename</span> AllocatorWrapper, ezEventType EventType&gt;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<a class="code" href="../../d0/daf/classez_event.htm">ezEvent&lt;EventData, MutexType, AllocatorWrapper, EventType&gt;::ezEvent</a>()</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  : <a class="code" href="../../dd/de2/classez_event_base.htm">ezEventBase</a>&lt;EventData, MutexType, EventType&gt;(AllocatorWrapper::GetAllocator())</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;{</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;}</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160; </div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> EventData, <span class="keyword">typename</span> MutexType, <span class="keyword">typename</span> AllocatorWrapper, ezEventType EventType&gt;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<a class="code" href="../../d0/daf/classez_event.htm">ezEvent&lt;EventData, MutexType, AllocatorWrapper, EventType&gt;::ezEvent</a>(<a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  : <a class="code" href="../../dd/de2/classez_event_base.htm">ezEventBase</a>&lt;EventData, MutexType, EventType&gt;(pAllocator)</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassez_event_base_htm_a76defef8fca2904347e06e9cc2328a72"><div class="ttname"><a href="../../dd/de2/classez_event_base.htm#a76defef8fca2904347e06e9cc2328a72">ezEventBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns true, if no event handlers are registered.</div><div class="ttdef"><b>Definition:</b> Event_inl.h:179</div></div>
<div class="ttc" id="aclassez_event_base_htm_a0be39de527a1a143849442573c074c20"><div class="ttname"><a href="../../dd/de2/classez_event_base.htm#a0be39de527a1a143849442573c074c20">ezEventBase::RemoveEventHandler</a></div><div class="ttdeci">void RemoveEventHandler(const Handler &amp;handler) const</div><div class="ttdoc">Removes a previously registered handler. It is an error to remove a handler that was not registered.</div><div class="ttdef"><b>Definition:</b> Event_inl.h:68</div></div>
<div class="ttc" id="aclassez_allocator_base_htm"><div class="ttname"><a href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> AllocatorBase.h:22</div></div>
<div class="ttc" id="aclassez_array_base_htm_a51ba61fcbd2350ae8850754a41acbaa1"><div class="ttname"><a href="../../dc/d59/classez_array_base.htm#a51ba61fcbd2350ae8850754a41acbaa1">ezArrayBase&lt; T, ezDynamicArrayBase&lt; T &gt; &gt;::GetCount</a></div><div class="ttdeci">ezUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active elements in the array.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:161</div></div>
<div class="ttc" id="aclassez_event_base_htm_a091e9f94c1fae72cd796663b173a02c3"><div class="ttname"><a href="../../dd/de2/classez_event_base.htm#a091e9f94c1fae72cd796663b173a02c3">ezEventBase::ezEventBase</a></div><div class="ttdeci">ezEventBase(ezAllocatorBase *pAllocator)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> Event_inl.h:6</div></div>
<div class="ttc" id="astructez_delegate_htm"><div class="ttname"><a href="../../d5/d68/structez_delegate.htm">ezDelegate</a></div><div class="ttdoc">A generic delegate class which supports static functions and member functions.</div><div class="ttdef"><b>Definition:</b> Delegate.h:75</div></div>
<div class="ttc" id="aclassez_event_base_htm_a686305d9df13fe5d5bca50b1bda0de4e"><div class="ttname"><a href="../../dd/de2/classez_event_base.htm#a686305d9df13fe5d5bca50b1bda0de4e">ezEventBase::HasEventHandler</a></div><div class="ttdeci">bool HasEventHandler(const Handler &amp;handler) const</div><div class="ttdoc">Checks whether an event handler has already been registered.</div><div class="ttdef"><b>Definition:</b> Event_inl.h:156</div></div>
<div class="ttc" id="aclassez_event_htm"><div class="ttname"><a href="../../d0/daf/classez_event.htm">ezEvent</a></div><div class="ttdef"><b>Definition:</b> Event.h:176</div></div>
<div class="ttc" id="aclassez_event_base_htm_ab46b4d55704bf9f41af5be830ac46cf9"><div class="ttname"><a href="../../dd/de2/classez_event_base.htm#ab46b4d55704bf9f41af5be830ac46cf9">ezEventBase::AddEventHandler</a></div><div class="ttdeci">ezEventSubscriptionID AddEventHandler(Handler handler) const</div><div class="ttdoc">Adds a function as an event handler. All handlers will be notified in the order that they were regist...</div><div class="ttdef"><b>Definition:</b> Event_inl.h:25</div></div>
<div class="ttc" id="aclassez_event_base_htm"><div class="ttname"><a href="../../dd/de2/classez_event_base.htm">ezEventBase</a></div><div class="ttdoc">This class propagates event information to registered event handlers.</div><div class="ttdef"><b>Definition:</b> Event.h:36</div></div>
<div class="ttc" id="aclassez_event_base_htm_aa59795140c900c874a24c09e2a6731a4"><div class="ttname"><a href="../../dd/de2/classez_event_base.htm#aa59795140c900c874a24c09e2a6731a4">ezEventBase::Broadcast</a></div><div class="ttdeci">void Broadcast(EventData pEventData, ezUInt8 uiMaxRecursionDepth=MaxRecursionDepthDefault)</div><div class="ttdoc">This function will broadcast to all registered users, that this event has just happened....</div><div class="ttdef"><b>Definition:</b> Event_inl.h:187</div></div>
<div class="ttc" id="aclassez_hybrid_array_htm"><div class="ttname"><a href="../../d8/deb/classez_hybrid_array.htm">ezHybridArray</a></div><div class="ttdoc">A hybrid array uses in-place storage to handle the first few elements without any allocation....</div><div class="ttdef"><b>Definition:</b> HybridArray.h:11</div></div>
<div class="ttc" id="aclassez_event_base_htm_ab5ad9619f606338a1fa6b0d081bd864c"><div class="ttname"><a href="../../dd/de2/classez_event_base.htm#ab5ad9619f606338a1fa6b0d081bd864c">ezEventBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Removes all registered event handlers.</div><div class="ttdef"><b>Definition:</b> Event_inl.h:172</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_6842fd92e2bb67127825eb6bd43440c7.htm">Communication</a></li><li class="navelem"><a class="el" href="../../dir_d3382816f6d65c06a1f9ee25730eaa5d.htm">Implementation</a></li><li class="navelem"><b>Event_inl.h</b></li>
    <li class="footer">Generated on Sat Nov 11 2023 19:40:48 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
