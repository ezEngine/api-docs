<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezHybridStringBase&lt; Size &gt; Struct Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d6/d43/structez_hybrid_string_base.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../d7/dbb/structez_hybrid_string_base-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezHybridStringBase&lt; Size &gt; Struct Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A string class for storing and passing around strings.  
 <a href="../../d6/d43/structez_hybrid_string_base.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../db/db5/_string_8h_source.htm">String.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ezHybridStringBase&lt; Size &gt;:</div>
<div class="dyncontent">
<div class="center"><img src="../../d5/dd6/structez_hybrid_string_base__inherit__graph.png" border="0" usemap="#ez_hybrid_string_base_3_01_size_01_4_inherit__map" alt="Inheritance graph"/></div>
<map name="ez_hybrid_string_base_3_01_size_01_4_inherit__map" id="ez_hybrid_string_base_3_01_size_01_4_inherit__map">
<area shape="rect" title="A string class for storing and passing around strings." alt="" coords="39,169,190,211"/>
<area shape="rect" href="../../dd/d69/structez_string_base.htm" title=" " alt="" coords="5,80,224,121"/>
<area shape="rect" href="../../d8/d9a/structez_this_is_a_string.htm" title="Base class which marks a class as containing string data." alt="" coords="53,5,176,32"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a30c22dfff6b304e3516a2f5b9a968333"><td class="memItemLeft" align="right" valign="top"><a id="a30c22dfff6b304e3516a2f5b9a968333"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a30c22dfff6b304e3516a2f5b9a968333">operator ezStringView</a> () const</td></tr>
<tr class="memdesc:a30c22dfff6b304e3516a2f5b9a968333"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:a30c22dfff6b304e3516a2f5b9a968333"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85492a66f49799e7b46292e00869b8a3"><td class="memItemLeft" align="right" valign="top"><a id="a85492a66f49799e7b46292e00869b8a3"></a>
<a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a85492a66f49799e7b46292e00869b8a3">GetView</a> () const</td></tr>
<tr class="memdesc:a85492a66f49799e7b46292e00869b8a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:a85492a66f49799e7b46292e00869b8a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8800bc535469a4dc5f0d0847fd592934"><td class="memItemLeft" align="right" valign="top"><a id="a8800bc535469a4dc5f0d0847fd592934"></a>
EZ_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a8800bc535469a4dc5f0d0847fd592934">operator const char *</a> () const</td></tr>
<tr class="memdesc:a8800bc535469a4dc5f0d0847fd592934"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the internal Utf8 string. <br /></td></tr>
<tr class="separator:a8800bc535469a4dc5f0d0847fd592934"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaced07b48ca63da8bd4bacc7ebb1ad86"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#aaced07b48ca63da8bd4bacc7ebb1ad86">Clear</a> ()</td></tr>
<tr class="memdesc:aaced07b48ca63da8bd4bacc7ebb1ad86"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets this string to an empty string.  <a href="../../d6/d43/structez_hybrid_string_base.htm#aaced07b48ca63da8bd4bacc7ebb1ad86">More...</a><br /></td></tr>
<tr class="separator:aaced07b48ca63da8bd4bacc7ebb1ad86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e11b053ec999656b2b39354bdacf99e"><td class="memItemLeft" align="right" valign="top"><a id="a7e11b053ec999656b2b39354bdacf99e"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a7e11b053ec999656b2b39354bdacf99e">GetData</a> () const</td></tr>
<tr class="memdesc:a7e11b053ec999656b2b39354bdacf99e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the internal Utf8 string. <br /></td></tr>
<tr class="separator:a7e11b053ec999656b2b39354bdacf99e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab479457ea5ea6c0c5307003b65661042"><td class="memItemLeft" align="right" valign="top"><a id="ab479457ea5ea6c0c5307003b65661042"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#ab479457ea5ea6c0c5307003b65661042">GetElementCount</a> () const</td></tr>
<tr class="memdesc:ab479457ea5ea6c0c5307003b65661042"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of bytes that this string takes (excluding the '\0' terminator). <br /></td></tr>
<tr class="separator:ab479457ea5ea6c0c5307003b65661042"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af20ba0a27cc7fd6c9c98f8bad4d4d18f"><td class="memItemLeft" align="right" valign="top"><a id="af20ba0a27cc7fd6c9c98f8bad4d4d18f"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#af20ba0a27cc7fd6c9c98f8bad4d4d18f">GetCharacterCount</a> () const</td></tr>
<tr class="memdesc:af20ba0a27cc7fd6c9c98f8bad4d4d18f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of characters in this string. <br /></td></tr>
<tr class="separator:af20ba0a27cc7fd6c9c98f8bad4d4d18f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67adf8196229df696cb7d877bcb474ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a67adf8196229df696cb7d877bcb474ee">GetSubString</a> (ezUInt32 uiFirstCharacter, ezUInt32 uiNumCharacters) const</td></tr>
<tr class="memdesc:a67adf8196229df696cb7d877bcb474ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to a sub-string of this string, starting at character uiFirstCharacter, up until uiFirstCharacter + uiNumCharacters.  <a href="../../d6/d43/structez_hybrid_string_base.htm#a67adf8196229df696cb7d877bcb474ee">More...</a><br /></td></tr>
<tr class="separator:a67adf8196229df696cb7d877bcb474ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57069e63a857e02a96ce058b7e08b5a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a57069e63a857e02a96ce058b7e08b5a2">GetFirst</a> (ezUInt32 uiNumCharacters) const</td></tr>
<tr class="memdesc:a57069e63a857e02a96ce058b7e08b5a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to the sub-string containing the first uiNumCharacters characters of this string.  <a href="../../d6/d43/structez_hybrid_string_base.htm#a57069e63a857e02a96ce058b7e08b5a2">More...</a><br /></td></tr>
<tr class="separator:a57069e63a857e02a96ce058b7e08b5a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81959562e8f0dc60eb14d5a02b92a608"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a81959562e8f0dc60eb14d5a02b92a608">GetLast</a> (ezUInt32 uiNumCharacters) const</td></tr>
<tr class="memdesc:a81959562e8f0dc60eb14d5a02b92a608"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to the sub-string containing the last uiNumCharacters characters of this string.  <a href="../../d6/d43/structez_hybrid_string_base.htm#a81959562e8f0dc60eb14d5a02b92a608">More...</a><br /></td></tr>
<tr class="separator:a81959562e8f0dc60eb14d5a02b92a608"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6ed257766f300943d9707f716837c76"><td class="memItemLeft" align="right" valign="top"><a id="ae6ed257766f300943d9707f716837c76"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#ae6ed257766f300943d9707f716837c76">ReadAll</a> (<a class="el" href="../../d2/d19/classez_stream_reader.htm">ezStreamReader</a> &amp;Stream)</td></tr>
<tr class="memdesc:ae6ed257766f300943d9707f716837c76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the current string with the content from the stream. Reads the stream to its end. <br /></td></tr>
<tr class="separator:ae6ed257766f300943d9707f716837c76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a451a7e85318f69f8c6715b2d9059aa73"><td class="memItemLeft" align="right" valign="top"><a id="a451a7e85318f69f8c6715b2d9059aa73"></a>
ezUInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a451a7e85318f69f8c6715b2d9059aa73">GetHeapMemoryUsage</a> () const</td></tr>
<tr class="memdesc:a451a7e85318f69f8c6715b2d9059aa73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of bytes that are currently allocated on the heap. <br /></td></tr>
<tr class="separator:a451a7e85318f69f8c6715b2d9059aa73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_structez_string_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_structez_string_base')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt; ezHybridStringBase&lt; Size &gt; &gt;</a></td></tr>
<tr class="memitem:a3b169646f62ef8a8d33b63e2b8731afb inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a3b169646f62ef8a8d33b63e2b8731afb"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a3b169646f62ef8a8d33b63e2b8731afb">IsEmpty</a> () const</td></tr>
<tr class="memdesc:a3b169646f62ef8a8d33b63e2b8731afb inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the string is an empty string. <br /></td></tr>
<tr class="separator:a3b169646f62ef8a8d33b63e2b8731afb inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40370a42191c470e969d0693385db3f3 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a40370a42191c470e969d0693385db3f3"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a40370a42191c470e969d0693385db3f3">StartsWith</a> (const char *szStartsWith) const</td></tr>
<tr class="memdesc:a40370a42191c470e969d0693385db3f3 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. <br /></td></tr>
<tr class="separator:a40370a42191c470e969d0693385db3f3 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb6973bde9b2b2b6773b69035c97e8ba inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="acb6973bde9b2b2b6773b69035c97e8ba"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#acb6973bde9b2b2b6773b69035c97e8ba">StartsWith_NoCase</a> (const char *szStartsWith) const</td></tr>
<tr class="memdesc:acb6973bde9b2b2b6773b69035c97e8ba inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:acb6973bde9b2b2b6773b69035c97e8ba inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb83fb2fc2655dfdfea37ef6ae13ef30 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="afb83fb2fc2655dfdfea37ef6ae13ef30"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#afb83fb2fc2655dfdfea37ef6ae13ef30">EndsWith</a> (const char *szEndsWith) const</td></tr>
<tr class="memdesc:afb83fb2fc2655dfdfea37ef6ae13ef30 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. <br /></td></tr>
<tr class="separator:afb83fb2fc2655dfdfea37ef6ae13ef30 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d4ac2126f45dcb7c567dee949cc68ab inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a1d4ac2126f45dcb7c567dee949cc68ab"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a1d4ac2126f45dcb7c567dee949cc68ab">EndsWith_NoCase</a> (const char *szEndsWith) const</td></tr>
<tr class="memdesc:a1d4ac2126f45dcb7c567dee949cc68ab inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:a1d4ac2126f45dcb7c567dee949cc68ab inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af672ce6437cd3c9d17b3267cfa834b48 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#af672ce6437cd3c9d17b3267cfa834b48">FindSubString</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:af672ce6437cd3c9d17b3267cfa834b48 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a139af1709f27a801b784a3f4bd2c12ed inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a139af1709f27a801b784a3f4bd2c12ed">FindSubString_NoCase</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a139af1709f27a801b784a3f4bd2c12ed inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44351ea491df5b7db1095dde6e6299c5 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a44351ea491df5b7db1095dde6e6299c5">FindLastSubString</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a44351ea491df5b7db1095dde6e6299c5 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c0563a267bee66f3a1f76cf08af153f inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a0c0563a267bee66f3a1f76cf08af153f">FindLastSubString_NoCase</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a0c0563a267bee66f3a1f76cf08af153f inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7990e9f9c36231cd41af33a25f96dbc6 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a7990e9f9c36231cd41af33a25f96dbc6">FindWholeWord</a> (const char *szSearchFor, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> IsDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a7990e9f9c36231cd41af33a25f96dbc6 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a696c890e2e534cfc0af94091f0f0a5f6 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a696c890e2e534cfc0af94091f0f0a5f6">FindWholeWord_NoCase</a> (const char *szSearchFor, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> IsDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a696c890e2e534cfc0af94091f0f0a5f6 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8db4d1eaa1ad5ad01395f3d08eb1a0c2 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a8db4d1eaa1ad5ad01395f3d08eb1a0c2"></a>
ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">Compare</a> (const char *pString2) const</td></tr>
<tr class="memdesc:a8db4d1eaa1ad5ad01395f3d08eb1a0c2 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. <br /></td></tr>
<tr class="separator:a8db4d1eaa1ad5ad01395f3d08eb1a0c2 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fcc6b07403fe714f7823f06e51ed419 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a5fcc6b07403fe714f7823f06e51ed419">CompareN</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:a5fcc6b07403fe714f7823f06e51ed419 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48e98ad28e9cc6c0a3d436b802149443 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a48e98ad28e9cc6c0a3d436b802149443"></a>
ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a48e98ad28e9cc6c0a3d436b802149443">Compare_NoCase</a> (const char *pString2) const</td></tr>
<tr class="memdesc:a48e98ad28e9cc6c0a3d436b802149443 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. Case insensitive. <br /></td></tr>
<tr class="separator:a48e98ad28e9cc6c0a3d436b802149443 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af924cf1e0bc6a35338229a7e9ad505a8 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#af924cf1e0bc6a35338229a7e9ad505a8">CompareN_NoCase</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:af924cf1e0bc6a35338229a7e9ad505a8 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6517806293ce84badc8da6c5d01c67cf inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a6517806293ce84badc8da6c5d01c67cf"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">IsEqual</a> (const char *pString2) const</td></tr>
<tr class="memdesc:a6517806293ce84badc8da6c5d01c67cf inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:a6517806293ce84badc8da6c5d01c67cf inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77bcaa8c3cc64c21d1311e45033ffae3 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a77bcaa8c3cc64c21d1311e45033ffae3"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a77bcaa8c3cc64c21d1311e45033ffae3">IsEqualN</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:a77bcaa8c3cc64c21d1311e45033ffae3 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:a77bcaa8c3cc64c21d1311e45033ffae3 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba99a929eb858f565e1fa332b6b03723 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="aba99a929eb858f565e1fa332b6b03723"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#aba99a929eb858f565e1fa332b6b03723">IsEqual_NoCase</a> (const char *pString2) const</td></tr>
<tr class="memdesc:aba99a929eb858f565e1fa332b6b03723 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:aba99a929eb858f565e1fa332b6b03723 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada89e0455b0a9bc13e76af36abb3cf8b inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ada89e0455b0a9bc13e76af36abb3cf8b"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#ada89e0455b0a9bc13e76af36abb3cf8b">IsEqualN_NoCase</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:ada89e0455b0a9bc13e76af36abb3cf8b inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:ada89e0455b0a9bc13e76af36abb3cf8b inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05bec3cf5581b35aa18849239b2471c6 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a05bec3cf5581b35aa18849239b2471c6"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a05bec3cf5581b35aa18849239b2471c6">ComputeCharacterPosition</a> (ezUInt32 uiCharacterIndex) const</td></tr>
<tr class="memdesc:a05bec3cf5581b35aa18849239b2471c6 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the pointer to the n-th character in the string. This is a linear search from the start. <br /></td></tr>
<tr class="separator:a05bec3cf5581b35aa18849239b2471c6 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a630aa4b168172aef7b32f8085148ed8e inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/ddc/structez_string_iterator.htm">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">GetIteratorFront</a> () const</td></tr>
<tr class="memdesc:a630aa4b168172aef7b32f8085148ed8e inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very first character.  <a href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">More...</a><br /></td></tr>
<tr class="separator:a630aa4b168172aef7b32f8085148ed8e inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3821af6b610f6c40a46336f7accc0c7e inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">GetIteratorBack</a> () const</td></tr>
<tr class="memdesc:a3821af6b610f6c40a46336f7accc0c7e inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very last character (NOT the end).  <a href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">More...</a><br /></td></tr>
<tr class="separator:a3821af6b610f6c40a46336f7accc0c7e inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a5171d9569cd4cb2689dd3a1b02829f8c"><td class="memItemLeft" align="right" valign="top"><a id="a5171d9569cd4cb2689dd3a1b02829f8c"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a5171d9569cd4cb2689dd3a1b02829f8c">ezHybridStringBase</a> (<a class="el" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:a5171d9569cd4cb2689dd3a1b02829f8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an empty string. <br /></td></tr>
<tr class="separator:a5171d9569cd4cb2689dd3a1b02829f8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acaa81fc9eb336873ca476afc95f27d91"><td class="memItemLeft" align="right" valign="top"><a id="acaa81fc9eb336873ca476afc95f27d91"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#acaa81fc9eb336873ca476afc95f27d91">ezHybridStringBase</a> (const <a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a> &amp;rhs, <a class="el" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:acaa81fc9eb336873ca476afc95f27d91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:acaa81fc9eb336873ca476afc95f27d91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0907d3426f9d87e106607fe4bffe835"><td class="memItemLeft" align="right" valign="top"><a id="ae0907d3426f9d87e106607fe4bffe835"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#ae0907d3426f9d87e106607fe4bffe835">ezHybridStringBase</a> (<a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a> &amp;&amp;rhs, <a class="el" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:ae0907d3426f9d87e106607fe4bffe835"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:ae0907d3426f9d87e106607fe4bffe835"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae84baf6c6614e1c38bd8dbbc14e7f27e"><td class="memItemLeft" align="right" valign="top"><a id="ae84baf6c6614e1c38bd8dbbc14e7f27e"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#ae84baf6c6614e1c38bd8dbbc14e7f27e">ezHybridStringBase</a> (const char *rhs, <a class="el" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:ae84baf6c6614e1c38bd8dbbc14e7f27e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:ae84baf6c6614e1c38bd8dbbc14e7f27e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a095c6cd027e92019ba9d03a0360de1e7"><td class="memItemLeft" align="right" valign="top"><a id="a095c6cd027e92019ba9d03a0360de1e7"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a095c6cd027e92019ba9d03a0360de1e7">ezHybridStringBase</a> (const wchar_t *rhs, <a class="el" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:a095c6cd027e92019ba9d03a0360de1e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a095c6cd027e92019ba9d03a0360de1e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a493ad2fabfcbbf2c7b231fce61782f37"><td class="memItemLeft" align="right" valign="top"><a id="a493ad2fabfcbbf2c7b231fce61782f37"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a493ad2fabfcbbf2c7b231fce61782f37">ezHybridStringBase</a> (const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;rhs, <a class="el" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:a493ad2fabfcbbf2c7b231fce61782f37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a493ad2fabfcbbf2c7b231fce61782f37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6028e687525c58aad7e8b1b9147e94f"><td class="memItemLeft" align="right" valign="top"><a id="ae6028e687525c58aad7e8b1b9147e94f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#ae6028e687525c58aad7e8b1b9147e94f">ezHybridStringBase</a> (const <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;rhs, <a class="el" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:ae6028e687525c58aad7e8b1b9147e94f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:ae6028e687525c58aad7e8b1b9147e94f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93ef47908565a3938eb9253b63f8408d"><td class="memItemLeft" align="right" valign="top"><a id="a93ef47908565a3938eb9253b63f8408d"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a93ef47908565a3938eb9253b63f8408d">ezHybridStringBase</a> (<a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;&amp;rhs, <a class="el" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:a93ef47908565a3938eb9253b63f8408d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a93ef47908565a3938eb9253b63f8408d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae62faf872800bba225ee53e73dff7289"><td class="memItemLeft" align="right" valign="top"><a id="ae62faf872800bba225ee53e73dff7289"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#ae62faf872800bba225ee53e73dff7289">~ezHybridStringBase</a> ()</td></tr>
<tr class="memdesc:ae62faf872800bba225ee53e73dff7289"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor. <br /></td></tr>
<tr class="separator:ae62faf872800bba225ee53e73dff7289"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18183bd86269e0bb7124f5dd4f27b2e5"><td class="memItemLeft" align="right" valign="top"><a id="a18183bd86269e0bb7124f5dd4f27b2e5"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">operator=</a> (const <a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a> &amp;rhs)</td></tr>
<tr class="memdesc:a18183bd86269e0bb7124f5dd4f27b2e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a18183bd86269e0bb7124f5dd4f27b2e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55dbfd982101ad25513f432b624ee7df"><td class="memItemLeft" align="right" valign="top"><a id="a55dbfd982101ad25513f432b624ee7df"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a55dbfd982101ad25513f432b624ee7df">operator=</a> (<a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a> &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a55dbfd982101ad25513f432b624ee7df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a55dbfd982101ad25513f432b624ee7df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8732f9ecbcab3c7af4de41a9bd89df03"><td class="memItemLeft" align="right" valign="top"><a id="a8732f9ecbcab3c7af4de41a9bd89df03"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a8732f9ecbcab3c7af4de41a9bd89df03">operator=</a> (const char *rhs)</td></tr>
<tr class="memdesc:a8732f9ecbcab3c7af4de41a9bd89df03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a8732f9ecbcab3c7af4de41a9bd89df03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae68d1a260ef632266a596419853b12aa"><td class="memItemLeft" align="right" valign="top"><a id="ae68d1a260ef632266a596419853b12aa"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#ae68d1a260ef632266a596419853b12aa">operator=</a> (const wchar_t *rhs)</td></tr>
<tr class="memdesc:ae68d1a260ef632266a596419853b12aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:ae68d1a260ef632266a596419853b12aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a144a0639f006201f931fd05200f260f5"><td class="memItemLeft" align="right" valign="top"><a id="a144a0639f006201f931fd05200f260f5"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a144a0639f006201f931fd05200f260f5">operator=</a> (const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;rhs)</td></tr>
<tr class="memdesc:a144a0639f006201f931fd05200f260f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a144a0639f006201f931fd05200f260f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c0ddca8b52667378bb4aa181ba27e8c"><td class="memItemLeft" align="right" valign="top"><a id="a3c0ddca8b52667378bb4aa181ba27e8c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a3c0ddca8b52667378bb4aa181ba27e8c">operator=</a> (const <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;rhs)</td></tr>
<tr class="memdesc:a3c0ddca8b52667378bb4aa181ba27e8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a3c0ddca8b52667378bb4aa181ba27e8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a397d42cc575aff87ad3184a73c3cdbd1"><td class="memItemLeft" align="right" valign="top"><a id="a397d42cc575aff87ad3184a73c3cdbd1"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm#a397d42cc575aff87ad3184a73c3cdbd1">operator=</a> (<a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a397d42cc575aff87ad3184a73c3cdbd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a397d42cc575aff87ad3184a73c3cdbd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a5e46a93a55134b0ea1b6b2f7b13fbbdc"><td class="memItemLeft" align="right" valign="top"><a id="a5e46a93a55134b0ea1b6b2f7b13fbbdc"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>ezStringBuilder</b></td></tr>
<tr class="separator:a5e46a93a55134b0ea1b6b2f7b13fbbdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_structez_string_base"><td colspan="2" onclick="javascript:toggleInherit('pub_types_structez_string_base')"><img src="../../closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt; ezHybridStringBase&lt; Size &gt; &gt;</a></td></tr>
<tr class="memitem:ab65f80cd73057c1f83921afc74200c9f inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ab65f80cd73057c1f83921afc74200c9f"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>iterator</b> = <a class="el" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&lt; <a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt; &gt;</td></tr>
<tr class="separator:ab65f80cd73057c1f83921afc74200c9f inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade6d14a20fb3d7e2074f3b0563146b8e inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ade6d14a20fb3d7e2074f3b0563146b8e"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_iterator</b> = <a class="el" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&lt; <a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt; &gt;</td></tr>
<tr class="separator:ade6d14a20fb3d7e2074f3b0563146b8e inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae164cffae6bebd68154732c2d72d313c inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ae164cffae6bebd68154732c2d72d313c"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>reverse_iterator</b> = <a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&lt; <a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt; &gt;</td></tr>
<tr class="separator:ae164cffae6bebd68154732c2d72d313c inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad740ab8e9cfc9269d50f6da3c532e779 inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ad740ab8e9cfc9269d50f6da3c532e779"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_reverse_iterator</b> = <a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&lt; <a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt; &gt;</td></tr>
<tr class="separator:ad740ab8e9cfc9269d50f6da3c532e779 inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;ezUInt16 Size&gt;<br />
struct ezHybridStringBase&lt; Size &gt;</h3>

<p>A string class for storing and passing around strings. </p>
<p>This class only allows read-access to its data. It does not allow modifications. To build / modify strings, use the <a class="el" href="../../d3/d88/classez_string_builder.htm" title="ezStringBuilder is a class that is meant for creating and modifying strings.">ezStringBuilder</a> class. <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a> has an internal array to store short strings without any memory allocations, it will dynamically allocate additional memory, if that cache is insufficient. Thus a hybrid string will always take up a certain amount of memory, which might be of concern when it is used as a member variable, in such cases you might want to use an <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a> with a very small internal array (1 would basically make it into a completely dynamic string). On the other hand, creating <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a> instances on the stack and working locally with them, is quite fast. Prefer to use the typedef'd string types <em>ezString</em>, <em>ezDynamicString</em>, <em>ezString32</em> etc. Most strings in an application are rather short, typically shorter than 20 characters. Use <em>ezString</em>, which is a typedef'd <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a> to use a cache size that is sufficient for more than 90% of all use cases. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="aaced07b48ca63da8bd4bacc7ebb1ad86"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaced07b48ca63da8bd4bacc7ebb1ad86">&#9670;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;ezUInt16 Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt;::Clear</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Resets this string to an empty string. </p>
<p>This will not deallocate any previously allocated data, but reuse that memory. </p>

</div>
</div>
<a id="a57069e63a857e02a96ce058b7e08b5a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57069e63a857e02a96ce058b7e08b5a2">&#9670;&nbsp;</a></span>GetFirst()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;ezUInt16 Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> <a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt;::GetFirst </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumCharacters</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an iterator to the sub-string containing the first uiNumCharacters characters of this string. </p>
<p>Note that this iterator will only be valid as long as this <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a> lives. Once the original string is destroyed, all iterators to them will point into invalid memory. </p>

</div>
</div>
<a id="a81959562e8f0dc60eb14d5a02b92a608"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81959562e8f0dc60eb14d5a02b92a608">&#9670;&nbsp;</a></span>GetLast()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;ezUInt16 Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> <a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt;::GetLast </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumCharacters</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an iterator to the sub-string containing the last uiNumCharacters characters of this string. </p>
<p>Note that this iterator will only be valid as long as this <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a> lives. Once the original string is destroyed, all iterators to them will point into invalid memory. </p>

</div>
</div>
<a id="a67adf8196229df696cb7d877bcb474ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67adf8196229df696cb7d877bcb474ee">&#9670;&nbsp;</a></span>GetSubString()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;ezUInt16 Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> <a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt;::GetSubString </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiFirstCharacter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumCharacters</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an iterator to a sub-string of this string, starting at character uiFirstCharacter, up until uiFirstCharacter + uiNumCharacters. </p>
<p>Note that this iterator will only be valid as long as this <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a> lives. Once the original string is destroyed, all iterators to them will point into invalid memory. </p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/<a class="el" href="../../db/db5/_string_8h_source.htm">String.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../d7/dec/_all_strings__inl_8h_source.htm">AllStrings_inl.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../d7/d4f/_string__inl_8h_source.htm">String_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a></li>
    <li class="footer">Generated on Tue Jun 8 2021 21:43:18 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
