<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezPointerWithFlags&lt; PtrType, NumFlagBits &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('da/dd1/classez_pointer_with_flags.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../d0/d6e/classez_pointer_with_flags-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezPointerWithFlags&lt; PtrType, NumFlagBits &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A wrapper around a raw pointer that allows to use the lower N bits for flags.  
 <a href="../../da/dd1/classez_pointer_with_flags.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../db/da7/_pointer_with_flags_8h_source.htm">PointerWithFlags.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:acb1fb04451c24483047618ac673e6a63"><td class="memItemLeft" align="right" valign="top"><a id="acb1fb04451c24483047618ac673e6a63"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#acb1fb04451c24483047618ac673e6a63">ezPointerWithFlags</a> ()=default</td></tr>
<tr class="memdesc:acb1fb04451c24483047618ac673e6a63"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the pointer and flags with zero. <br /></td></tr>
<tr class="separator:acb1fb04451c24483047618ac673e6a63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a060b873ca57f24e079b99fa6e951435f"><td class="memItemLeft" align="right" valign="top"><a id="a060b873ca57f24e079b99fa6e951435f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#a060b873ca57f24e079b99fa6e951435f">ezPointerWithFlags</a> (PtrType *pPtr, ezUInt8 uiFlags=0)</td></tr>
<tr class="memdesc:a060b873ca57f24e079b99fa6e951435f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the pointer and flags. <br /></td></tr>
<tr class="separator:a060b873ca57f24e079b99fa6e951435f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2455b0538c00f34c152438bdd7a1e4f"><td class="memItemLeft" align="right" valign="top"><a id="af2455b0538c00f34c152438bdd7a1e4f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#af2455b0538c00f34c152438bdd7a1e4f">SetPtrAndFlags</a> (PtrType *pPtr, ezUInt8 uiFlags)</td></tr>
<tr class="memdesc:af2455b0538c00f34c152438bdd7a1e4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the pointer and flags. <br /></td></tr>
<tr class="separator:af2455b0538c00f34c152438bdd7a1e4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0311637d648366070eab3258c8aabbe0"><td class="memItemLeft" align="right" valign="top"><a id="a0311637d648366070eab3258c8aabbe0"></a>
const PtrType *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#a0311637d648366070eab3258c8aabbe0">GetPtr</a> () const</td></tr>
<tr class="memdesc:a0311637d648366070eab3258c8aabbe0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the masked off pointer value. <br /></td></tr>
<tr class="separator:a0311637d648366070eab3258c8aabbe0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52cd270a6284c98d1f6080d4af5a0f37"><td class="memItemLeft" align="right" valign="top"><a id="a52cd270a6284c98d1f6080d4af5a0f37"></a>
PtrType *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#a52cd270a6284c98d1f6080d4af5a0f37">GetPtr</a> ()</td></tr>
<tr class="memdesc:a52cd270a6284c98d1f6080d4af5a0f37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the masked off pointer value. <br /></td></tr>
<tr class="separator:a52cd270a6284c98d1f6080d4af5a0f37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cb464815743755feb005e80b8e25387"><td class="memItemLeft" align="right" valign="top"><a id="a6cb464815743755feb005e80b8e25387"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#a6cb464815743755feb005e80b8e25387">SetPtr</a> (PtrType *pPtr)</td></tr>
<tr class="memdesc:a6cb464815743755feb005e80b8e25387"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the pointer value only. Flags stay unchanged. <br /></td></tr>
<tr class="separator:a6cb464815743755feb005e80b8e25387"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefe75cdd74a5ae072d164cbdf1d19070"><td class="memItemLeft" align="right" valign="top"><a id="aefe75cdd74a5ae072d164cbdf1d19070"></a>
ezUInt8&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#aefe75cdd74a5ae072d164cbdf1d19070">GetFlags</a> () const</td></tr>
<tr class="memdesc:aefe75cdd74a5ae072d164cbdf1d19070"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the flags value only. <br /></td></tr>
<tr class="separator:aefe75cdd74a5ae072d164cbdf1d19070"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55bdc91dcf7838e6cabceb4bbd403537"><td class="memItemLeft" align="right" valign="top"><a id="a55bdc91dcf7838e6cabceb4bbd403537"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#a55bdc91dcf7838e6cabceb4bbd403537">SetFlags</a> (ezUInt8 uiFlags)</td></tr>
<tr class="memdesc:a55bdc91dcf7838e6cabceb4bbd403537"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes only the flags value. The given value must fit into the reserved bits. <br /></td></tr>
<tr class="separator:a55bdc91dcf7838e6cabceb4bbd403537"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a692bba0b0d8ba3f1835632d6450f4a03"><td class="memItemLeft" align="right" valign="top"><a id="a692bba0b0d8ba3f1835632d6450f4a03"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#a692bba0b0d8ba3f1835632d6450f4a03">operator PtrType *</a> ()</td></tr>
<tr class="memdesc:a692bba0b0d8ba3f1835632d6450f4a03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the masked off pointer value. <br /></td></tr>
<tr class="separator:a692bba0b0d8ba3f1835632d6450f4a03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f28c533122e985bab8824498ad5c392"><td class="memItemLeft" align="right" valign="top"><a id="a8f28c533122e985bab8824498ad5c392"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#a8f28c533122e985bab8824498ad5c392">operator const PtrType *</a> () const</td></tr>
<tr class="memdesc:a8f28c533122e985bab8824498ad5c392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the masked off pointer value. <br /></td></tr>
<tr class="separator:a8f28c533122e985bab8824498ad5c392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39e2064fc865f5e430d2e16d8329762e"><td class="memItemLeft" align="right" valign="top"><a id="a39e2064fc865f5e430d2e16d8329762e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#a39e2064fc865f5e430d2e16d8329762e">operator=</a> (PtrType *pPtr)</td></tr>
<tr class="memdesc:a39e2064fc865f5e430d2e16d8329762e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the pointer value only. Flags stay unchanged. <br /></td></tr>
<tr class="separator:a39e2064fc865f5e430d2e16d8329762e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56968a0e3a350235c9c668da94c1b1f4"><td class="memTemplParams" colspan="2"><a id="a56968a0e3a350235c9c668da94c1b1f4"></a>
template&lt;typename  = typename std::enable_if&lt;std::is_const&lt;PtrType&gt;::value == false&gt;&gt; </td></tr>
<tr class="memitem:a56968a0e3a350235c9c668da94c1b1f4"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#a56968a0e3a350235c9c668da94c1b1f4">operator==</a> (const PtrType *pPtr) const</td></tr>
<tr class="memdesc:a56968a0e3a350235c9c668da94c1b1f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the pointer part for equality (flags are ignored) <br /></td></tr>
<tr class="separator:a56968a0e3a350235c9c668da94c1b1f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ccb8daa89807e5761b3a4e3a15f2718"><td class="memTemplParams" colspan="2"><a id="a4ccb8daa89807e5761b3a4e3a15f2718"></a>
template&lt;typename  = typename std::enable_if&lt;std::is_const&lt;PtrType&gt;::value == false&gt;&gt; </td></tr>
<tr class="memitem:a4ccb8daa89807e5761b3a4e3a15f2718"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#a4ccb8daa89807e5761b3a4e3a15f2718">operator!=</a> (const PtrType *pPtr) const</td></tr>
<tr class="memdesc:a4ccb8daa89807e5761b3a4e3a15f2718"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the pointer part for inequality (flags are ignored) <br /></td></tr>
<tr class="separator:a4ccb8daa89807e5761b3a4e3a15f2718"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0026298d95111333814742c1f70c04a"><td class="memItemLeft" align="right" valign="top"><a id="ad0026298d95111333814742c1f70c04a"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#ad0026298d95111333814742c1f70c04a">operator==</a> (PtrType *pPtr) const</td></tr>
<tr class="memdesc:ad0026298d95111333814742c1f70c04a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the pointer part for equality (flags are ignored) <br /></td></tr>
<tr class="separator:ad0026298d95111333814742c1f70c04a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a364fed47bac9c410855d2d4a3d32a1a7"><td class="memItemLeft" align="right" valign="top"><a id="a364fed47bac9c410855d2d4a3d32a1a7"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#a364fed47bac9c410855d2d4a3d32a1a7">operator!=</a> (PtrType *pPtr) const</td></tr>
<tr class="memdesc:a364fed47bac9c410855d2d4a3d32a1a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the pointer part for inequality (flags are ignored) <br /></td></tr>
<tr class="separator:a364fed47bac9c410855d2d4a3d32a1a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af48423015aeaadc1a1b452bf9b60344d"><td class="memItemLeft" align="right" valign="top"><a id="af48423015aeaadc1a1b452bf9b60344d"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#af48423015aeaadc1a1b452bf9b60344d">operator==</a> (std::nullptr_t) const</td></tr>
<tr class="memdesc:af48423015aeaadc1a1b452bf9b60344d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the pointer part for equality (flags are ignored) <br /></td></tr>
<tr class="separator:af48423015aeaadc1a1b452bf9b60344d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8a33d87812c1cb595ac4a373de4ec3d"><td class="memItemLeft" align="right" valign="top"><a id="ad8a33d87812c1cb595ac4a373de4ec3d"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#ad8a33d87812c1cb595ac4a373de4ec3d">operator!=</a> (std::nullptr_t) const</td></tr>
<tr class="memdesc:ad8a33d87812c1cb595ac4a373de4ec3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the pointer part for inequality (flags are ignored) <br /></td></tr>
<tr class="separator:ad8a33d87812c1cb595ac4a373de4ec3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95cbed00000f74e6a795530c5bdd4a96"><td class="memItemLeft" align="right" valign="top"><a id="a95cbed00000f74e6a795530c5bdd4a96"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#a95cbed00000f74e6a795530c5bdd4a96">operator bool</a> () const</td></tr>
<tr class="memdesc:a95cbed00000f74e6a795530c5bdd4a96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the pointer part is not nullptr (flags are ignored) <br /></td></tr>
<tr class="separator:a95cbed00000f74e6a795530c5bdd4a96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1336918eae172c27f9b5036f3dee8208"><td class="memItemLeft" align="right" valign="top"><a id="a1336918eae172c27f9b5036f3dee8208"></a>
const PtrType *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#a1336918eae172c27f9b5036f3dee8208">operator-&gt;</a> () const</td></tr>
<tr class="memdesc:a1336918eae172c27f9b5036f3dee8208"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dereferences the pointer. <br /></td></tr>
<tr class="separator:a1336918eae172c27f9b5036f3dee8208"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7c147c1ad8c17ca38440a1f58a11269"><td class="memItemLeft" align="right" valign="top"><a id="ad7c147c1ad8c17ca38440a1f58a11269"></a>
PtrType *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#ad7c147c1ad8c17ca38440a1f58a11269">operator-&gt;</a> ()</td></tr>
<tr class="memdesc:ad7c147c1ad8c17ca38440a1f58a11269"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dereferences the pointer. <br /></td></tr>
<tr class="separator:ad7c147c1ad8c17ca38440a1f58a11269"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5bf6737d2a166c5c19080e5a75cc454"><td class="memItemLeft" align="right" valign="top"><a id="ab5bf6737d2a166c5c19080e5a75cc454"></a>
const PtrType &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#ab5bf6737d2a166c5c19080e5a75cc454">operator*</a> () const</td></tr>
<tr class="memdesc:ab5bf6737d2a166c5c19080e5a75cc454"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dereferences the pointer. <br /></td></tr>
<tr class="separator:ab5bf6737d2a166c5c19080e5a75cc454"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f626b90bf3ab35ff2fd6f2960c6166c"><td class="memItemLeft" align="right" valign="top"><a id="a6f626b90bf3ab35ff2fd6f2960c6166c"></a>
PtrType &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm#a6f626b90bf3ab35ff2fd6f2960c6166c">operator*</a> ()</td></tr>
<tr class="memdesc:a6f626b90bf3ab35ff2fd6f2960c6166c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dereferences the pointer. <br /></td></tr>
<tr class="separator:a6f626b90bf3ab35ff2fd6f2960c6166c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename PtrType, ezUInt8 NumFlagBits = 2&gt;<br />
class ezPointerWithFlags&lt; PtrType, NumFlagBits &gt;</h3>

<p>A wrapper around a raw pointer that allows to use the lower N bits for flags. </p>
<p>When accessing the pointer, the lower N bits are masked off. Typically one can safely store 3 bits in the lower bits of a pointer as most data is 8 byte aligned, especially when it was heap allocated. </p>
</div><hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Types/<a class="el" href="../../db/da7/_pointer_with_flags_8h_source.htm">PointerWithFlags.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../da/dd1/classez_pointer_with_flags.htm">ezPointerWithFlags</a></li>
    <li class="footer">Generated on Tue Nov 7 2023 21:39:26 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
