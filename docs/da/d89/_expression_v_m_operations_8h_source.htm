<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/CodeUtils/Expression/Implementation/ExpressionVMOperations.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 25.03</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('da/d89/_expression_v_m_operations_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ExpressionVMOperations.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;Foundation/CodeUtils/Expression/ExpressionByteCode.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;Foundation/Math/Float16.h&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/SimdMath/SimdMath.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160; </div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;{</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  <span class="keyword">struct </span>ExecutionContext</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  {</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    <a class="code" href="../../dc/d66/structez_expression_1_1_register.htm">ezExpression::Register</a>* m_pRegisters = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;    ezUInt32 m_uiNumInstances = 0;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    ezUInt32 m_uiNumSimd4Instances = 0;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const ezProcessingStream*&gt;</a> m_Inputs;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezProcessingStream*&gt;</a> m_Outputs;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const ezExpressionFunction*&gt;</a> m_Functions;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <span class="keyword">const</span> <a class="code" href="../../d8/d86/classez_hash_table.htm">ezExpression::GlobalData</a>* m_pGlobalData = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  };</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  <span class="keyword">using</span> ByteCodeType = ezExpressionByteCode::StorageType;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  <span class="keyword">using</span> OpFunc = void (*)(<span class="keyword">const</span> ByteCodeType*&amp; pByteCode, ExecutionContext&amp; context);</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#define DEFINE_TARGET_REGISTER()                                                                                                        \</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">  ezExpression::Register* r = context.m_pRegisters + ezExpressionByteCode::GetRegisterIndex(pByteCode) * context.m_uiNumSimd4Instances; \</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">  ezExpression::Register* re = r + context.m_uiNumSimd4Instances;                                                                       \</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">  EZ_IGNORE_UNUSED(re);</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#define DEFINE_OP_REGISTER(name) \</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">  const ezExpression::Register* name = context.m_pRegisters + ezExpressionByteCode::GetRegisterIndex(pByteCode) * context.m_uiNumSimd4Instances;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#define DEFINE_CONSTANT(name)                                                      \</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">  const ezUInt32 EZ_PP_CONCAT(name, Raw) = *pByteCode;                             \</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">  EZ_IGNORE_UNUSED(EZ_PP_CONCAT(name, Raw));                                       \</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">  const ezExpression::Register tmp = ezExpressionByteCode::GetConstant(pByteCode); \</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">  const ezExpression::Register* name = &amp;tmp;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#define UNARY_OP_INNER_LOOP(code) \</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">  code;                           \</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">  ++r;                            \</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">  ++a;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#define DEFINE_UNARY_OP(name, code)                                                      \</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">  void EZ_PP_CONCAT(name, _4)(const ByteCodeType*&amp; pByteCode, ExecutionContext&amp; context) \</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">  {                                                                                      \</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">    DEFINE_TARGET_REGISTER();                                                            \</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">    DEFINE_OP_REGISTER(a);                                                               \</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">    while (r != re)                                                                      \</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">    {                                                                                    \</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">      UNARY_OP_INNER_LOOP(code)                                                          \</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">    }                                                                                    \</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">  }</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#define BINARY_OP_INNER_LOOP(code)        \</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">  code;                                   \</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">  ++r;                                    \</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">  ++a;                                    \</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">  if constexpr (RightIsConstant == false) \</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">  {                                       \</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor">    ++b;                                  \</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">  }</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">#define DEFINE_BINARY_OP(name, code)                                                                                \</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor">  template &lt;bool RightIsConstant&gt;                                                                                   \</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">  void EZ_PP_CONCAT(name, _4)(const ByteCodeType*&amp; pByteCode, ExecutionContext&amp; context)                            \</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">  {                                                                                                                 \</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">    DEFINE_TARGET_REGISTER();                                                                                       \</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">    DEFINE_OP_REGISTER(a);                                                                                          \</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">    ezUInt32 bRaw;                                                                                                  \</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">    EZ_IGNORE_UNUSED(bRaw);                                                                                         \</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">    ezExpression::Register bConstant;                                                                               \</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">    const ezExpression::Register* b;                                                                                \</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">    EZ_IGNORE_UNUSED(b);                                                                                            \</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">    if constexpr (RightIsConstant)                                                                                  \</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">    {                                                                                                               \</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">      bRaw = *pByteCode;                                                                                            \</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">      bConstant = ezExpressionByteCode::GetConstant(pByteCode);                                                     \</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">      b = &amp;bConstant;                                                                                               \</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">    }                                                                                                               \</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">    else                                                                                                            \</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">    {                                                                                                               \</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">      b = context.m_pRegisters + ezExpressionByteCode::GetRegisterIndex(pByteCode) * context.m_uiNumSimd4Instances; \</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">    }                                                                                                               \</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">    while (r != re)                                                                                                 \</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">    {                                                                                                               \</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">      BINARY_OP_INNER_LOOP(code)                                                                                    \</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">    }                                                                                                               \</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">  }</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">#define TERNARY_OP_INNER_LOOP(code) \</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">  code;                             \</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">  ++r;                              \</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">  ++a;                              \</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="preprocessor">  ++b;                              \</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">  ++c;</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor">#define DEFINE_TERNARY_OP(name, code)                                                    \</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">  void EZ_PP_CONCAT(name, _4)(const ByteCodeType*&amp; pByteCode, ExecutionContext&amp; context) \</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">  {                                                                                      \</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor">    DEFINE_TARGET_REGISTER();                                                            \</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor">    DEFINE_OP_REGISTER(a);                                                               \</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">    DEFINE_OP_REGISTER(b);                                                               \</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">    DEFINE_OP_REGISTER(c);                                                               \</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">    while (r != re)                                                                      \</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">    {                                                                                    \</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor">      TERNARY_OP_INNER_LOOP(code)                                                        \</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">    }                                                                                    \</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">  }</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  DEFINE_UNARY_OP(AbsF, r-&gt;f = a-&gt;f.Abs());</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  DEFINE_UNARY_OP(AbsI, r-&gt;i = a-&gt;i.Abs());</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  DEFINE_UNARY_OP(SqrtF, r-&gt;f = a-&gt;f.GetSqrt());</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  DEFINE_UNARY_OP(ExpF, r-&gt;f = <a class="code" href="../../dc/d8c/structez_simd_math.htm#adb7b0415a46fb21a49d8aa6816a8d3c8">ezSimdMath::Exp</a>(a-&gt;f));</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  DEFINE_UNARY_OP(LnF, r-&gt;f = ezSimdMath::Ln(a-&gt;f));</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  DEFINE_UNARY_OP(Log2F, r-&gt;f = ezSimdMath::Log2(a-&gt;f));</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  DEFINE_UNARY_OP(Log2I, r-&gt;i = ezSimdMath::Log2i(a-&gt;i));</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  DEFINE_UNARY_OP(Log10F, r-&gt;f = ezSimdMath::Log10(a-&gt;f));</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  DEFINE_UNARY_OP(Pow2F, r-&gt;f = ezSimdMath::Pow2(a-&gt;f));</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  DEFINE_UNARY_OP(SinF, r-&gt;f = ezSimdMath::Sin(a-&gt;f));</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  DEFINE_UNARY_OP(CosF, r-&gt;f = ezSimdMath::Cos(a-&gt;f));</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  DEFINE_UNARY_OP(TanF, r-&gt;f = ezSimdMath::Tan(a-&gt;f));</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  DEFINE_UNARY_OP(ASinF, r-&gt;f = ezSimdMath::ASin(a-&gt;f));</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  DEFINE_UNARY_OP(ACosF, r-&gt;f = ezSimdMath::ACos(a-&gt;f));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  DEFINE_UNARY_OP(ATanF, r-&gt;f = ezSimdMath::ATan(a-&gt;f));</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  DEFINE_UNARY_OP(RoundF, r-&gt;f = a-&gt;f.Round());</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  DEFINE_UNARY_OP(FloorF, r-&gt;f = a-&gt;f.Floor());</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  DEFINE_UNARY_OP(CeilF, r-&gt;f = a-&gt;f.Ceil());</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  DEFINE_UNARY_OP(TruncF, r-&gt;f = a-&gt;f.Trunc());</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  DEFINE_UNARY_OP(NotI, r-&gt;i = ~a-&gt;i);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  DEFINE_UNARY_OP(NotB, r-&gt;b = !a-&gt;b);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  DEFINE_UNARY_OP(IToF, r-&gt;f = a-&gt;i.ToFloat());</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  DEFINE_UNARY_OP(FToI, r-&gt;i = ezSimdVec4i::Truncate(a-&gt;f));</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  DEFINE_BINARY_OP(AddF, r-&gt;f = a-&gt;f + b-&gt;f);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  DEFINE_BINARY_OP(AddI, r-&gt;i = a-&gt;i + b-&gt;i);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  DEFINE_BINARY_OP(SubF, r-&gt;f = a-&gt;f - b-&gt;f);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  DEFINE_BINARY_OP(SubI, r-&gt;i = a-&gt;i - b-&gt;i);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  DEFINE_BINARY_OP(MulF, r-&gt;f = a-&gt;f.CompMul(b-&gt;f));</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  DEFINE_BINARY_OP(MulI, r-&gt;i = a-&gt;i.CompMul(b-&gt;i));</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  DEFINE_BINARY_OP(DivF, r-&gt;f = a-&gt;f.CompDiv(b-&gt;f));</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  DEFINE_BINARY_OP(DivI, r-&gt;i = a-&gt;i.CompDiv(b-&gt;i));</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  DEFINE_BINARY_OP(MinF, r-&gt;f = a-&gt;f.CompMin(b-&gt;f));</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  DEFINE_BINARY_OP(MinI, r-&gt;i = a-&gt;i.CompMin(b-&gt;i));</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  DEFINE_BINARY_OP(MaxF, r-&gt;f = a-&gt;f.CompMax(b-&gt;f));</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  DEFINE_BINARY_OP(MaxI, r-&gt;i = a-&gt;i.CompMax(b-&gt;i));</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  DEFINE_BINARY_OP(ShlI, r-&gt;i = a-&gt;i &lt;&lt; b-&gt;i);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  DEFINE_BINARY_OP(ShrI, r-&gt;i = a-&gt;i &gt;&gt; b-&gt;i);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  DEFINE_BINARY_OP(ShlI_C, r-&gt;i = a-&gt;i &lt;&lt; bRaw);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  DEFINE_BINARY_OP(ShrI_C, r-&gt;i = a-&gt;i &gt;&gt; bRaw);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  DEFINE_BINARY_OP(AndI, r-&gt;i = a-&gt;i &amp; b-&gt;i);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  DEFINE_BINARY_OP(XorI, r-&gt;i = a-&gt;i ^ b-&gt;i);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  DEFINE_BINARY_OP(OrI, r-&gt;i = a-&gt;i | b-&gt;i);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  DEFINE_BINARY_OP(EqF, r-&gt;b = a-&gt;f == b-&gt;f);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  DEFINE_BINARY_OP(EqI, r-&gt;b = a-&gt;i == b-&gt;i);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  DEFINE_BINARY_OP(EqB, r-&gt;b = a-&gt;b == b-&gt;b);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  DEFINE_BINARY_OP(NEqF, r-&gt;b = a-&gt;f != b-&gt;f);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  DEFINE_BINARY_OP(NEqI, r-&gt;b = a-&gt;i != b-&gt;i);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  DEFINE_BINARY_OP(NEqB, r-&gt;b = a-&gt;b != b-&gt;b);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  DEFINE_BINARY_OP(LtF, r-&gt;b = a-&gt;f &lt; b-&gt;f);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  DEFINE_BINARY_OP(LtI, r-&gt;b = a-&gt;i &lt; b-&gt;i);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  DEFINE_BINARY_OP(LEqF, r-&gt;b = a-&gt;f &lt;= b-&gt;f);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  DEFINE_BINARY_OP(LEqI, r-&gt;b = a-&gt;i &lt;= b-&gt;i);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  DEFINE_BINARY_OP(GtF, r-&gt;b = a-&gt;f &gt; b-&gt;f);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  DEFINE_BINARY_OP(GtI, r-&gt;b = a-&gt;i &gt; b-&gt;i);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  DEFINE_BINARY_OP(GEqF, r-&gt;b = a-&gt;f &gt;= b-&gt;f);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  DEFINE_BINARY_OP(GEqI, r-&gt;b = a-&gt;i &gt;= b-&gt;i);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  DEFINE_BINARY_OP(AndB, r-&gt;b = a-&gt;b &amp;&amp; b-&gt;b);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  DEFINE_BINARY_OP(OrB, r-&gt;b = a-&gt;b || b-&gt;b);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  DEFINE_TERNARY_OP(SelF, r-&gt;f = ezSimdVec4f::Select(a-&gt;b, b-&gt;f, c-&gt;f));</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  DEFINE_TERNARY_OP(SelI, r-&gt;i = ezSimdVec4i::Select(a-&gt;b, b-&gt;i, c-&gt;i));</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  DEFINE_TERNARY_OP(SelB, r-&gt;b = ezSimdVec4b::Select(a-&gt;b, b-&gt;b, c-&gt;b));</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keywordtype">void</span> VM_MovX_R_4(<span class="keyword">const</span> ByteCodeType*&amp; pByteCode, ExecutionContext&amp; context)</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    DEFINE_TARGET_REGISTER();</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    DEFINE_OP_REGISTER(a);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">while</span> (r != re)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      r-&gt;i = a-&gt;i;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;      ++r;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      ++a;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keywordtype">void</span> VM_MovX_C_4(<span class="keyword">const</span> ByteCodeType*&amp; pByteCode, ExecutionContext&amp; context)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    EZ_WARNING_PUSH()</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    EZ_WARNING_DISABLE_MSVC(4189)</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    DEFINE_TARGET_REGISTER();</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    DEFINE_CONSTANT(a);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    while (r != re)</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      r-&gt;i = a-&gt;i;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      ++r;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    EZ_WARNING_POP()</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> StreamType&gt;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  EZ_ALWAYS_INLINE ValueType ReadInputData(<span class="keyword">const</span> ezUInt8*&amp; ref_pData, ezUInt32 uiStride)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    ValueType value = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>StreamType*<span class="keyword">&gt;</span>(ref_pData);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    ref_pData += uiStride;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">return</span> value;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> RegisterType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> StreamType&gt;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  <span class="keywordtype">void</span> LoadInput(RegisterType* r, RegisterType* pRe, <span class="keyword">const</span> <a class="code" href="../../d6/d22/classez_processing_stream.htm">ezProcessingStream</a>&amp; input, ezUInt32 uiNumRemainderInstances)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">const</span> ezUInt8* pInputData = input.<a class="code" href="../../d6/d22/classez_processing_stream.htm#afef08be508a6bf60d105d8ef2187799d">GetData</a>&lt;ezUInt8&gt;();</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">const</span> ezUInt32 uiByteStride = input.<a class="code" href="../../d6/d22/classez_processing_stream.htm#aa1737f84960e150a3a0dae732d106700">GetElementStride</a>();</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">if</span> (uiByteStride == <span class="keyword">sizeof</span>(ValueType) &amp;&amp; std::is_same&lt;ValueType, StreamType&gt;::value)</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;      <span class="keywordflow">while</span> (r != pRe)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;      {</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        r-&gt;template Load&lt;4&gt;(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ValueType*<span class="keyword">&gt;</span>(pInputData));</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        ++r;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        pInputData += <span class="keyword">sizeof</span>(ValueType) * 4;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;      }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;      ValueType x[4] = {};</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;      <span class="keywordflow">while</span> (r != pRe)</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      {</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        x[0] = ReadInputData&lt;ValueType, StreamType&gt;(pInputData, uiByteStride);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        x[1] = ReadInputData&lt;ValueType, StreamType&gt;(pInputData, uiByteStride);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        x[2] = ReadInputData&lt;ValueType, StreamType&gt;(pInputData, uiByteStride);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        x[3] = ReadInputData&lt;ValueType, StreamType&gt;(pInputData, uiByteStride);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        r-&gt;template Load&lt;4&gt;(x);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        ++r;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">if</span> (uiNumRemainderInstances &gt; 0)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;      ValueType x[3];</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;      x[0] = ReadInputData&lt;ValueType, StreamType&gt;(pInputData, uiByteStride);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;      x[1] = uiNumRemainderInstances &gt;= 2 ? ReadInputData&lt;ValueType, StreamType&gt;(pInputData, uiByteStride) : x[0];</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;      x[2] = uiNumRemainderInstances &gt;= 3 ? ReadInputData&lt;ValueType, StreamType&gt;(pInputData, uiByteStride) : x[1];</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;      r-&gt;Set(x[0], x[1], x[2], x[2]);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> StreamType&gt;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">void</span> StoreOutputData(ezUInt8*&amp; ref_pData, ezUInt32 uiStride, ValueType value)</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    *<span class="keyword">reinterpret_cast&lt;</span>StreamType*<span class="keyword">&gt;</span>(ref_pData) = <span class="keyword">static_cast&lt;</span>StreamType<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    ref_pData += uiStride;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> RegisterType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> StreamType&gt;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  <span class="keywordtype">void</span> StoreOutput(RegisterType* r, RegisterType* pRe, <a class="code" href="../../d6/d22/classez_processing_stream.htm">ezProcessingStream</a>&amp; ref_output, ezUInt32 uiNumRemainderInstances)</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  {</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    ezUInt8* pOutputData = ref_output.<a class="code" href="../../d6/d22/classez_processing_stream.htm#abc8aa1a106a29fd8e22a324784ffdb24">GetWritableData</a>&lt;ezUInt8&gt;();</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keyword">const</span> ezUInt32 uiByteStride = ref_output.<a class="code" href="../../d6/d22/classez_processing_stream.htm#aa1737f84960e150a3a0dae732d106700">GetElementStride</a>();</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">if</span> (uiByteStride == <span class="keyword">sizeof</span>(ValueType) &amp;&amp; std::is_same&lt;ValueType, StreamType&gt;::value)</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    {</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;      <span class="keywordflow">while</span> (r != pRe)</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;      {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        r-&gt;template Store&lt;4&gt;(<span class="keyword">reinterpret_cast&lt;</span>ValueType*<span class="keyword">&gt;</span>(pOutputData));</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        ++r;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        pOutputData += <span class="keyword">sizeof</span>(ValueType) * 4;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;      }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    {</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;      ValueType x[4] = {};</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;      <span class="keywordflow">while</span> (r != pRe)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;      {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        r-&gt;template Store&lt;4&gt;(x);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        StoreOutputData&lt;ValueType, StreamType&gt;(pOutputData, uiByteStride, x[0]);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        StoreOutputData&lt;ValueType, StreamType&gt;(pOutputData, uiByteStride, x[1]);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        StoreOutputData&lt;ValueType, StreamType&gt;(pOutputData, uiByteStride, x[2]);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        StoreOutputData&lt;ValueType, StreamType&gt;(pOutputData, uiByteStride, x[3]);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        ++r;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;      }</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160; </div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">if</span> (uiNumRemainderInstances &gt; 0)</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;      ValueType x[4];</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;      r-&gt;template Store&lt;4&gt;(x);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160; </div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;      <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; uiNumRemainderInstances; ++i)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;      {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        StoreOutputData&lt;ValueType, StreamType&gt;(pOutputData, uiByteStride, x[i]);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;      }</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    }</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  <span class="keywordtype">void</span> VM_LoadF_4(<span class="keyword">const</span> ByteCodeType*&amp; pByteCode, ExecutionContext&amp; context)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keyword">const</span> ezUInt32 uiNumRemainderInstances = context.m_uiNumInstances &amp; 0x3;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    DEFINE_TARGET_REGISTER();</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">if</span> (uiNumRemainderInstances &gt; 0)</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;      --re;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keyword">const</span> ezUInt32 uiInputIndex = ezExpressionByteCode::GetRegisterIndex(pByteCode);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keyword">auto</span>&amp; input = *context.m_Inputs[uiInputIndex];</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keywordflow">if</span> (input.<a class="code" href="../../d6/d22/classez_processing_stream.htm#ab88edf1ce21c772024f0a7e80bac1931">GetDataType</a>() == ezProcessingStream::DataType::Float)</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;      LoadInput&lt;ezSimdVec4f, float, float&gt;(<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>*<span class="keyword">&gt;</span>(r), <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>*<span class="keyword">&gt;</span>(re), input, uiNumRemainderInstances);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    }</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;      EZ_ASSERT_DEBUG(input.<a class="code" href="../../d6/d22/classez_processing_stream.htm#ab88edf1ce21c772024f0a7e80bac1931">GetDataType</a>() == ezProcessingStream::DataType::Half, <span class="stringliteral">&quot;Unsupported input type &#39;{}&#39; for LoadF instruction&quot;</span>, ezProcessingStream::GetDataTypeName(input.<a class="code" href="../../d6/d22/classez_processing_stream.htm#ab88edf1ce21c772024f0a7e80bac1931">GetDataType</a>()));</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;      LoadInput&lt;ezSimdVec4f, float, ezFloat16&gt;(<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>*<span class="keyword">&gt;</span>(r), <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>*<span class="keyword">&gt;</span>(re), input, uiNumRemainderInstances);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    }</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  }</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160; </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  <span class="keywordtype">void</span> VM_LoadI_4(<span class="keyword">const</span> ByteCodeType*&amp; pByteCode, ExecutionContext&amp; context)</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  {</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keyword">const</span> ezUInt32 uiNumRemainderInstances = context.m_uiNumInstances &amp; 0x3;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    DEFINE_TARGET_REGISTER();</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordflow">if</span> (uiNumRemainderInstances &gt; 0)</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;      --re;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keyword">const</span> ezUInt32 uiInputIndex = ezExpressionByteCode::GetRegisterIndex(pByteCode);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keyword">auto</span>&amp; input = *context.m_Inputs[uiInputIndex];</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160; </div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordflow">if</span> (input.<a class="code" href="../../d6/d22/classez_processing_stream.htm#ab88edf1ce21c772024f0a7e80bac1931">GetDataType</a>() == ezProcessingStream::DataType::Int)</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    {</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;      LoadInput&lt;ezSimdVec4i, int, int&gt;(<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>*<span class="keyword">&gt;</span>(r), <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>*<span class="keyword">&gt;</span>(re), input, uiNumRemainderInstances);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    }</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (input.<a class="code" href="../../d6/d22/classez_processing_stream.htm#ab88edf1ce21c772024f0a7e80bac1931">GetDataType</a>() == ezProcessingStream::DataType::Short)</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    {</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;      LoadInput&lt;ezSimdVec4i, int, ezInt16&gt;(<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>*<span class="keyword">&gt;</span>(r), <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>*<span class="keyword">&gt;</span>(re), input, uiNumRemainderInstances);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    }</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    {</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;      EZ_ASSERT_DEBUG(input.<a class="code" href="../../d6/d22/classez_processing_stream.htm#ab88edf1ce21c772024f0a7e80bac1931">GetDataType</a>() == ezProcessingStream::DataType::Byte, <span class="stringliteral">&quot;Unsupported input type &#39;{}&#39; for LoadI instruction&quot;</span>, ezProcessingStream::GetDataTypeName(input.<a class="code" href="../../d6/d22/classez_processing_stream.htm#ab88edf1ce21c772024f0a7e80bac1931">GetDataType</a>()));</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;      LoadInput&lt;ezSimdVec4i, int, ezInt8&gt;(<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>*<span class="keyword">&gt;</span>(r), <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>*<span class="keyword">&gt;</span>(re), input, uiNumRemainderInstances);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    }</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  <span class="keywordtype">void</span> VM_StoreF_4(<span class="keyword">const</span> ByteCodeType*&amp; pByteCode, ExecutionContext&amp; context)</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  {</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keyword">const</span> ezUInt32 uiNumRemainderInstances = context.m_uiNumInstances &amp; 0x3;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160; </div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    ezUInt32 uiOutputIndex = ezExpressionByteCode::GetRegisterIndex(pByteCode);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keyword">auto</span>&amp; output = *context.m_Outputs[uiOutputIndex];</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="comment">// actually not target register but operand register in the is case, but we need something to loop over so we use the target register macro here.</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    DEFINE_TARGET_REGISTER();</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordflow">if</span> (uiNumRemainderInstances &gt; 0)</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;      --re;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160; </div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keywordflow">if</span> (output.GetDataType() == ezProcessingStream::DataType::Float)</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    {</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;      StoreOutput&lt;ezSimdVec4f, float, float&gt;(<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>*<span class="keyword">&gt;</span>(r), <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>*<span class="keyword">&gt;</span>(re), output, uiNumRemainderInstances);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    }</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    {</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;      EZ_ASSERT_DEBUG(output.GetDataType() == ezProcessingStream::DataType::Half, <span class="stringliteral">&quot;Unsupported input type &#39;{}&#39; for StoreF instruction&quot;</span>, ezProcessingStream::GetDataTypeName(output.GetDataType()));</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;      StoreOutput&lt;ezSimdVec4f, float, ezFloat16&gt;(<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>*<span class="keyword">&gt;</span>(r), <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>*<span class="keyword">&gt;</span>(re), output, uiNumRemainderInstances);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    }</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  }</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160; </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  <span class="keywordtype">void</span> VM_StoreI_4(<span class="keyword">const</span> ByteCodeType*&amp; pByteCode, ExecutionContext&amp; context)</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  {</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keyword">const</span> ezUInt32 uiNumRemainderInstances = context.m_uiNumInstances &amp; 0x3;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160; </div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    ezUInt32 uiOutputIndex = ezExpressionByteCode::GetRegisterIndex(pByteCode);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keyword">auto</span>&amp; output = *context.m_Outputs[uiOutputIndex];</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160; </div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="comment">// actually not target register but operand register in the is case, but we need something to loop over so we use the target register macro here.</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    DEFINE_TARGET_REGISTER();</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordflow">if</span> (uiNumRemainderInstances &gt; 0)</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;      --re;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordflow">if</span> (output.GetDataType() == ezProcessingStream::DataType::Int)</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    {</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;      StoreOutput&lt;ezSimdVec4i, int, int&gt;(<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>*<span class="keyword">&gt;</span>(r), <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>*<span class="keyword">&gt;</span>(re), output, uiNumRemainderInstances);</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    }</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (output.GetDataType() == ezProcessingStream::DataType::Short)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    {</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;      StoreOutput&lt;ezSimdVec4i, int, ezInt16&gt;(<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>*<span class="keyword">&gt;</span>(r), <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>*<span class="keyword">&gt;</span>(re), output, uiNumRemainderInstances);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    }</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    {</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;      EZ_ASSERT_DEBUG(output.GetDataType() == ezProcessingStream::DataType::Byte, <span class="stringliteral">&quot;Unsupported input type &#39;{}&#39; for StoreI instruction&quot;</span>, ezProcessingStream::GetDataTypeName(output.GetDataType()));</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;      StoreOutput&lt;ezSimdVec4i, int, ezInt8&gt;(<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>*<span class="keyword">&gt;</span>(r), <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>*<span class="keyword">&gt;</span>(re), output, uiNumRemainderInstances);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    }</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;  }</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160; </div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;  <span class="keywordtype">void</span> VM_Call(<span class="keyword">const</span> ByteCodeType*&amp; pByteCode, ExecutionContext&amp; context)</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;  {</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    EZ_WARNING_PUSH()</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    EZ_WARNING_DISABLE_MSVC(4189)</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160; </div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    ezUInt32 uiFunctionIndex = <a class="code" href="../../da/d22/classez_expression_byte_code.htm">ezExpressionByteCode</a>::GetRegisterIndex(pByteCode);</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    auto&amp; function = *context.m_Functions[uiFunctionIndex];</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160; </div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    DEFINE_TARGET_REGISTER();</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    ezUInt32 uiNumArgs = <a class="code" href="../../da/d22/classez_expression_byte_code.htm">ezExpressionByteCode</a>::GetFunctionArgCount(pByteCode);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160; </div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <a class="code" href="../../d8/deb/classez_hybrid_array.htm">ezHybridArray</a>&lt;<a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt;const ezExpression::Register&gt;, 32&gt; inputs;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    inputs.Reserve(uiNumArgs);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    for (ezUInt32 uiArgIndex = 0; uiArgIndex &lt; uiNumArgs; ++uiArgIndex)</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    {</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;      DEFINE_OP_REGISTER(x);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;      inputs.PushBack(ezMakeArrayPtr(x, context.m_uiNumSimd4Instances));</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    }</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160; </div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezExpression::Output</a> output = ezMakeArrayPtr(r, context.m_uiNumSimd4Instances);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160; </div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keyword">function</span>.m_Func(inputs, output, *context.m_pGlobalData);</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160; </div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    EZ_WARNING_POP()</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;  }</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160; </div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;  <span class="keyword">static</span> constexpr OpFunc s_Simd4Funcs[] = {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keyword">nullptr</span>,         <span class="comment">// Nop,</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160; </div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">nullptr</span>,         <span class="comment">// FirstUnary,</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160; </div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    &amp;AbsF_4,         <span class="comment">// AbsF_R,</span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    &amp;AbsI_4,         <span class="comment">// AbsI_R,</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    &amp;SqrtF_4,        <span class="comment">// SqrtF_R,</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160; </div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    &amp;ExpF_4,         <span class="comment">// ExpF_R,</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    &amp;LnF_4,          <span class="comment">// LnF_R,</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    &amp;Log2F_4,        <span class="comment">// Log2F_R,</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    &amp;Log2I_4,        <span class="comment">// Log2I_R,</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    &amp;Log10F_4,       <span class="comment">// Log10F_R,</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    &amp;Pow2F_4,        <span class="comment">// Pow2F_R,</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160; </div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    &amp;SinF_4,         <span class="comment">// SinF_R,</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    &amp;CosF_4,         <span class="comment">// CosF_R,</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    &amp;TanF_4,         <span class="comment">// TanF_R,</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160; </div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    &amp;ASinF_4,        <span class="comment">// ASinF_R,</span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    &amp;ACosF_4,        <span class="comment">// ACosF_R,</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    &amp;ATanF_4,        <span class="comment">// ATanF_R,</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160; </div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    &amp;RoundF_4,       <span class="comment">// RoundF_R,</span></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    &amp;FloorF_4,       <span class="comment">// FloorF_R,</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    &amp;CeilF_4,        <span class="comment">// CeilF_R,</span></div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    &amp;TruncF_4,       <span class="comment">// TruncF_R,</span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160; </div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    &amp;NotI_4,         <span class="comment">// NotI_R,</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    &amp;NotB_4,         <span class="comment">// NotB_R,</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160; </div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    &amp;IToF_4,         <span class="comment">// IToF_R,</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    &amp;FToI_4,         <span class="comment">// FToI_R,</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160; </div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="keyword">nullptr</span>,         <span class="comment">// LastUnary,</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keyword">nullptr</span>,         <span class="comment">// FirstBinary,</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160; </div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    &amp;AddF_4&lt;false&gt;,  <span class="comment">// AddF_RR,</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    &amp;AddI_4&lt;false&gt;,  <span class="comment">// AddI_RR,</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160; </div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    &amp;SubF_4&lt;false&gt;,  <span class="comment">// SubF_RR,</span></div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    &amp;SubI_4&lt;false&gt;,  <span class="comment">// SubI_RR,</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160; </div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    &amp;MulF_4&lt;false&gt;,  <span class="comment">// MulF_RR,</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    &amp;MulI_4&lt;false&gt;,  <span class="comment">// MulI_RR,</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160; </div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    &amp;DivF_4&lt;false&gt;,  <span class="comment">// DivF_RR,</span></div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    &amp;DivI_4&lt;false&gt;,  <span class="comment">// DivI_RR,</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160; </div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    &amp;MinF_4&lt;false&gt;,  <span class="comment">// MinF_RR,</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    &amp;MinI_4&lt;false&gt;,  <span class="comment">// MinI_RR,</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160; </div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    &amp;MaxF_4&lt;false&gt;,  <span class="comment">// MaxF_RR,</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    &amp;MaxI_4&lt;false&gt;,  <span class="comment">// MaxI_RR,</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160; </div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    &amp;ShlI_4&lt;false&gt;,  <span class="comment">// ShlI_RR,</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    &amp;ShrI_4&lt;false&gt;,  <span class="comment">// ShrI_RR,</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    &amp;AndI_4&lt;false&gt;,  <span class="comment">// AndI_RR,</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    &amp;XorI_4&lt;false&gt;,  <span class="comment">// XorI_RR,</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    &amp;OrI_4&lt;false&gt;,   <span class="comment">// OrI_RR,</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160; </div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    &amp;EqF_4&lt;false&gt;,   <span class="comment">// EqF_RR,</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    &amp;EqI_4&lt;false&gt;,   <span class="comment">// EqI_RR,</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    &amp;EqB_4&lt;false&gt;,   <span class="comment">// EqB_RR,</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160; </div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    &amp;NEqF_4&lt;false&gt;,  <span class="comment">// NEqF_RR,</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    &amp;NEqI_4&lt;false&gt;,  <span class="comment">// NEqI_RR,</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    &amp;NEqB_4&lt;false&gt;,  <span class="comment">// NEqB_RR,</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160; </div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    &amp;LtF_4&lt;false&gt;,   <span class="comment">// LtF_RR,</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    &amp;LtI_4&lt;false&gt;,   <span class="comment">// LtI_RR,</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160; </div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    &amp;LEqF_4&lt;false&gt;,  <span class="comment">// LEqF_RR,</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    &amp;LEqI_4&lt;false&gt;,  <span class="comment">// LEqI_RR,</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160; </div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    &amp;GtF_4&lt;false&gt;,   <span class="comment">// GtF_RR,</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    &amp;GtI_4&lt;false&gt;,   <span class="comment">// GtI_RR,</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160; </div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    &amp;GEqF_4&lt;false&gt;,  <span class="comment">// GEqF_RR,</span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    &amp;GEqI_4&lt;false&gt;,  <span class="comment">// GEqI_RR,</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160; </div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    &amp;AndB_4&lt;false&gt;,  <span class="comment">// AndB_RR,</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    &amp;OrB_4&lt;false&gt;,   <span class="comment">// OrB_RR,</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160; </div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keyword">nullptr</span>,         <span class="comment">// LastBinary,</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keyword">nullptr</span>,         <span class="comment">// FirstBinaryWithConstant,</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160; </div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    &amp;AddF_4&lt;true&gt;,   <span class="comment">// AddF_RC,</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    &amp;AddI_4&lt;true&gt;,   <span class="comment">// AddI_RC,</span></div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160; </div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    &amp;SubF_4&lt;true&gt;,   <span class="comment">// SubF_RC,</span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    &amp;SubI_4&lt;true&gt;,   <span class="comment">// SubI_RC,</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160; </div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    &amp;MulF_4&lt;true&gt;,   <span class="comment">// MulF_RC,</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    &amp;MulI_4&lt;true&gt;,   <span class="comment">// MulI_RC,</span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160; </div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    &amp;DivF_4&lt;true&gt;,   <span class="comment">// DivF_RC,</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    &amp;DivI_4&lt;true&gt;,   <span class="comment">// DivI_RC,</span></div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160; </div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    &amp;MinF_4&lt;true&gt;,   <span class="comment">// MinF_RC,</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    &amp;MinI_4&lt;true&gt;,   <span class="comment">// MinI_RC,</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160; </div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    &amp;MaxF_4&lt;true&gt;,   <span class="comment">// MaxF_RC,</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    &amp;MaxI_4&lt;true&gt;,   <span class="comment">// MaxI_RC,</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160; </div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    &amp;ShlI_C_4&lt;true&gt;, <span class="comment">// ShlI_RC,</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    &amp;ShrI_C_4&lt;true&gt;, <span class="comment">// ShrI_RC,</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    &amp;AndI_4&lt;true&gt;,   <span class="comment">// AndI_RC,</span></div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    &amp;XorI_4&lt;true&gt;,   <span class="comment">// XorI_RC,</span></div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    &amp;OrI_4&lt;true&gt;,    <span class="comment">// OrI_RC,</span></div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160; </div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    &amp;EqF_4&lt;true&gt;,    <span class="comment">// EqF_RC,</span></div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    &amp;EqI_4&lt;true&gt;,    <span class="comment">// EqI_RC,</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    &amp;EqB_4&lt;true&gt;,    <span class="comment">// EqB_RC</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160; </div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    &amp;NEqF_4&lt;true&gt;,   <span class="comment">// NEqF_RC,</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    &amp;NEqI_4&lt;true&gt;,   <span class="comment">// NEqI_RC,</span></div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    &amp;NEqB_4&lt;true&gt;,   <span class="comment">// NEqB_RC</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160; </div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    &amp;LtF_4&lt;true&gt;,    <span class="comment">// LtF_RC,</span></div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    &amp;LtI_4&lt;true&gt;,    <span class="comment">// LtI_RC</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160; </div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    &amp;LEqF_4&lt;true&gt;,   <span class="comment">// LEqF_RC,</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    &amp;LEqI_4&lt;true&gt;,   <span class="comment">// LEqI_RC</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160; </div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    &amp;GtF_4&lt;true&gt;,    <span class="comment">// GtF_RC,</span></div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    &amp;GtI_4&lt;true&gt;,    <span class="comment">// GtI_RC</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160; </div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    &amp;GEqF_4&lt;true&gt;,   <span class="comment">// GEqF_RC,</span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    &amp;GEqI_4&lt;true&gt;,   <span class="comment">// GEqI_RC</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160; </div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    &amp;AndB_4&lt;true&gt;,   <span class="comment">// AndB_RC,</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    &amp;OrB_4&lt;true&gt;,    <span class="comment">// OrB_RC,</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160; </div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keyword">nullptr</span>,         <span class="comment">// LastBinaryWithConstant,</span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="keyword">nullptr</span>,         <span class="comment">// FirstTernary,</span></div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160; </div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    &amp;SelF_4,         <span class="comment">// SelF_RRR,</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    &amp;SelI_4,         <span class="comment">// SelI_RRR,</span></div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    &amp;SelB_4,         <span class="comment">// SelB_RRR,</span></div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160; </div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="keyword">nullptr</span>,         <span class="comment">// LastTernary,</span></div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keyword">nullptr</span>,         <span class="comment">// FirstSpecial,</span></div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160; </div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    &amp;VM_MovX_R_4,    <span class="comment">// MovX_R,</span></div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    &amp;VM_MovX_C_4,    <span class="comment">// MovX_C,</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    &amp;VM_LoadF_4,     <span class="comment">// LoadF,</span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    &amp;VM_LoadI_4,     <span class="comment">// LoadI,</span></div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    &amp;VM_StoreF_4,    <span class="comment">// StoreF,</span></div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    &amp;VM_StoreI_4,    <span class="comment">// StoreI,</span></div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160; </div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    &amp;VM_Call,        <span class="comment">// Call,</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160; </div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keyword">nullptr</span>,         <span class="comment">// LastSpecial,</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;  };</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160; </div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;  static_assert(EZ_ARRAY_SIZE(s_Simd4Funcs) == ezExpressionByteCode::OpCode::Count);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160; </div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160; </div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="preprocessor">#undef DEFINE_TARGET_REGISTER</span></div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="preprocessor">#undef DEFINE_OP_REGISTER</span></div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="preprocessor">#undef DEFINE_CONSTANT</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="preprocessor">#undef UNARY_OP_INNER_LOOP</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="preprocessor">#undef DEFINE_UNARY_OP</span></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="preprocessor">#undef BINARY_OP_INNER_LOOP</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="preprocessor">#undef DEFINE_BINARY_OP</span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="preprocessor">#undef TERNARY_OP_INNER_LOOP</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="preprocessor">#undef DEFINE_TERNARY_OP</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassez_processing_stream_htm_afef08be508a6bf60d105d8ef2187799d"><div class="ttname"><a href="../../d6/d22/classez_processing_stream.htm#afef08be508a6bf60d105d8ef2187799d">ezProcessingStream::GetData</a></div><div class="ttdeci">const T * GetData() const</div><div class="ttdoc">Returns a const pointer to the data casted to the type T, note that no type check is done!</div><div class="ttdef"><b>Definition:</b> ProcessingStream.h:50</div></div>
<div class="ttc" id="aclassez_array_ptr_htm"><div class="ttname"><a href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a></div><div class="ttdoc">This class encapsulates an array and it's size. It is recommended to use this class instead of plain ...</div><div class="ttdef"><b>Definition:</b> ArrayPtr.h:40</div></div>
<div class="ttc" id="astructez_simd_math_htm_adb7b0415a46fb21a49d8aa6816a8d3c8"><div class="ttname"><a href="../../dc/d8c/structez_simd_math.htm#adb7b0415a46fb21a49d8aa6816a8d3c8">ezSimdMath::Exp</a></div><div class="ttdeci">static ezSimdVec4f Exp(const ezSimdVec4f &amp;f)</div><div class="ttdef"><b>Definition:</b> SimdMath_inl.h:6</div></div>
<div class="ttc" id="aclassez_expression_byte_code_htm"><div class="ttname"><a href="../../da/d22/classez_expression_byte_code.htm">ezExpressionByteCode</a></div><div class="ttdef"><b>Definition:</b> ExpressionByteCode.h:9</div></div>
<div class="ttc" id="aclassez_processing_stream_htm"><div class="ttname"><a href="../../d6/d22/classez_processing_stream.htm">ezProcessingStream</a></div><div class="ttdoc">A single stream in a stream group holding contiguous data of a given type.</div><div class="ttdef"><b>Definition:</b> ProcessingStream.h:7</div></div>
<div class="ttc" id="aclassez_processing_stream_htm_abc8aa1a106a29fd8e22a324784ffdb24"><div class="ttname"><a href="../../d6/d22/classez_processing_stream.htm#abc8aa1a106a29fd8e22a324784ffdb24">ezProcessingStream::GetWritableData</a></div><div class="ttdeci">T * GetWritableData() const</div><div class="ttdoc">Returns a non-const pointer to the data casted to the type T, note that no type check is done!</div><div class="ttdef"><b>Definition:</b> ProcessingStream.h:60</div></div>
<div class="ttc" id="aclassez_simd_vec4i_htm"><div class="ttname"><a href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a></div><div class="ttdoc">A SIMD 4-component vector class of signed 32b integers.</div><div class="ttdef"><b>Definition:</b> SimdVec4i.h:8</div></div>
<div class="ttc" id="astructez_expression_1_1_register_htm"><div class="ttname"><a href="../../dc/d66/structez_expression_1_1_register.htm">ezExpression::Register</a></div><div class="ttdef"><b>Definition:</b> ExpressionDeclarations.h:16</div></div>
<div class="ttc" id="aclassez_hybrid_array_htm"><div class="ttname"><a href="../../d8/deb/classez_hybrid_array.htm">ezHybridArray</a></div><div class="ttdoc">A hybrid array uses in-place storage to handle the first few elements without any allocation....</div><div class="ttdef"><b>Definition:</b> HybridArray.h:11</div></div>
<div class="ttc" id="aclassez_processing_stream_htm_aa1737f84960e150a3a0dae732d106700"><div class="ttname"><a href="../../d6/d22/classez_processing_stream.htm#aa1737f84960e150a3a0dae732d106700">ezProcessingStream::GetElementStride</a></div><div class="ttdeci">ezUInt16 GetElementStride() const</div><div class="ttdoc">Returns the stride between two elements of the stream in bytes.</div><div class="ttdef"><b>Definition:</b> ProcessingStream.h:83</div></div>
<div class="ttc" id="aclassez_simd_vec4f_htm"><div class="ttname"><a href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a></div><div class="ttdoc">A 4-component SIMD vector class.</div><div class="ttdef"><b>Definition:</b> SimdVec4f.h:7</div></div>
<div class="ttc" id="aclassez_processing_stream_htm_ab88edf1ce21c772024f0a7e80bac1931"><div class="ttname"><a href="../../d6/d22/classez_processing_stream.htm#ab88edf1ce21c772024f0a7e80bac1931">ezProcessingStream::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdoc">Returns the data type of the stream.</div><div class="ttdef"><b>Definition:</b> ProcessingStream.h:77</div></div>
<div class="ttc" id="aclassez_hash_table_htm"><div class="ttname"><a href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezHashedString, ezVariant &gt;</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_2c7b76dee074c0486b4059e88dfd18f0.htm">CodeUtils</a></li><li class="navelem"><a class="el" href="../../dir_8a03cd053a0d4b8ee4241c2a06b55d89.htm">Expression</a></li><li class="navelem"><a class="el" href="../../dir_6405463430c32561abcbcf63f8d69644.htm">Implementation</a></li><li class="navelem"><b>ExpressionVMOperations.h</b></li>
    <li class="footer">Generated on Mon Mar 3 2025 17:23:39 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
