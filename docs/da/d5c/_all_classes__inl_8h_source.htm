<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/Implementation/AllClasses_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 23.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('da/d5c/_all_classes__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">AllClasses_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;Foundation/Math/BoundingBox.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;Foundation/Math/BoundingSphere.h&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Math/Mat3.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;Foundation/Math/Mat4.h&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;Foundation/Math/Plane.h&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00010"></a><span class="lineno"><a class="line" href="../../d6/d25/classez_bounding_box_template.htm#afc02108000411d120084fe3832ce12c6">   10</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d6/d25/classez_bounding_box_template.htm#a483bf35eb69bb1a1ab87ca0deb7f8a93">ezBoundingBoxTemplate&lt;Type&gt;::Contains</a>(<span class="keyword">const</span> <a class="code" href="../../d2/d50/classez_bounding_sphere_template.htm">ezBoundingSphereTemplate&lt;Type&gt;</a>&amp; sphere)<span class="keyword"> const</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <span class="keywordflow">return</span> Contains(sphere.<a class="code" href="../../d2/d50/classez_bounding_sphere_template.htm#a80b6b541f693e969aff08d2e95747d96">GetBoundingBox</a>());</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;}</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160; </div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="../../d6/d25/classez_bounding_box_template.htm#a01d91e34ce9ed2f2e9c2fe3f040c907e">   16</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d6/d25/classez_bounding_box_template.htm#a50ce4fbb4a3485a58d363ab0e4355663">ezBoundingBoxTemplate&lt;Type&gt;::Overlaps</a>(<span class="keyword">const</span> <a class="code" href="../../d2/d50/classez_bounding_sphere_template.htm">ezBoundingSphereTemplate&lt;Type&gt;</a>&amp; sphere)<span class="keyword"> const</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  <span class="comment">// check whether the closest point between box and sphere is inside the sphere (it is definitely inside the box)</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  <span class="keywordflow">return</span> sphere.<a class="code" href="../../d2/d50/classez_bounding_sphere_template.htm#abbdb7cf5923634895845c419eabea57f">Contains</a>(GetClampedPoint(sphere.m_vCenter));</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;}</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../d6/d25/classez_bounding_box_template.htm#ad5924571951717a84ec1f88f6d8d572a">   23</a></span>&#160;<span class="keyword">inline</span> Type <a class="code" href="../../d6/d25/classez_bounding_box_template.htm#aa6e1b369a4cba10665e6e6fb86fb9176">ezBoundingBoxTemplate&lt;Type&gt;::GetDistanceTo</a>(<span class="keyword">const</span> <a class="code" href="../../d2/d50/classez_bounding_sphere_template.htm">ezBoundingSphereTemplate&lt;Type&gt;</a>&amp; sphere)<span class="keyword"> const</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  <span class="keywordflow">return</span> (GetClampedPoint(sphere.m_vCenter) - sphere.m_vCenter).GetLength() - sphere.m_fRadius;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;}</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="../../d6/d25/classez_bounding_box_template.htm#af21365085336a135e720ba9aac176dbe">   29</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d2/d50/classez_bounding_sphere_template.htm">ezBoundingSphereTemplate&lt;Type&gt;</a> <a class="code" href="../../d6/d25/classez_bounding_box_template.htm#af21365085336a135e720ba9aac176dbe">ezBoundingBoxTemplate&lt;Type&gt;::GetBoundingSphere</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d2/d50/classez_bounding_sphere_template.htm">ezBoundingSphereTemplate&lt;Type&gt;</a>(GetCenter(), (m_vMax - m_vMin).GetLength() * (Type)0.5);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="../../d2/d50/classez_bounding_sphere_template.htm#a8a97266da09d7a57b5708f501972ad2c">   35</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/d50/classez_bounding_sphere_template.htm#a3285adbea41a29b883589fdf0370d855">ezBoundingSphereTemplate&lt;Type&gt;::ExpandToInclude</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBoxTemplate&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <span class="comment">// compute the min and max extends of the AABB relative to the sphere (sphere center is the new origin)</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> vDiffMax = rhs.m_vMax - m_vCenter;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> vDiffMin = rhs.m_vMin - m_vCenter;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <span class="comment">// compute the absolute distance to each AABB extremum, per axis</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> vDiffMaxAbs(<a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(vDiffMax.x), <a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(vDiffMax.y), <a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(vDiffMax.z));</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> vDiffMinAbs(<a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(vDiffMin.x), <a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(vDiffMin.y), <a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(vDiffMin.z));</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="comment">// take the maximum distance for each axis, to compute the point that is the farthest away from the sphere</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> vMostDistantPoint = vDiffMinAbs.<a class="code" href="../../da/df1/classez_vec3_template.htm#a7fa99794e2995ef0c95114b3e6960ff7">CompMax</a>(vDiffMaxAbs);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keyword">const</span> Type fDistSQR = vMostDistantPoint.<a class="code" href="../../da/df1/classez_vec3_template.htm#aa47fcb03a5aa1272b8afe9ba00e66ee9">GetLengthSquared</a>();</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../db/d78/namespaceez_math.htm#adfc8bc546fb58a0280cce97f9a40f324">ezMath::Square</a>(m_fRadius) &lt; fDistSQR)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    m_fRadius = <a class="code" href="../../db/d78/namespaceez_math.htm#a7f4e38e30c7914d11bcc85b0a4b1c09a">ezMath::Sqrt</a>(fDistSQR);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="../../d2/d50/classez_bounding_sphere_template.htm#ad2e267ad691697aa02fe4389ab20ad99">   55</a></span>&#160;Type <a class="code" href="../../d2/d50/classez_bounding_sphere_template.htm#a357eeefbe5000a1c92c37bb5499d618d">ezBoundingSphereTemplate&lt;Type&gt;::GetDistanceTo</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBoxTemplate&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> vPointOnBox = rhs.<a class="code" href="../../d6/d25/classez_bounding_box_template.htm#afe3f92c0e7dbb27f58925aec75e7d9f7">GetClampedPoint</a>(m_vCenter);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  <span class="keywordflow">return</span> GetDistanceTo(vPointOnBox);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="../../d2/d50/classez_bounding_sphere_template.htm#ad2aecda1cdf9eec78e6aa92c2dca24c3">   63</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d50/classez_bounding_sphere_template.htm#abbdb7cf5923634895845c419eabea57f">ezBoundingSphereTemplate&lt;Type&gt;::Contains</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBoxTemplate&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="comment">// compute the min and max extends of the AABB relative to the sphere (sphere center is the new origin)</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> vDiffMax = rhs.m_vMax - m_vCenter;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> vDiffMin = rhs.m_vMin - m_vCenter;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="comment">// compute the absolute distance to each AABB extremum, per axis</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> vDiffMaxAbs(<a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(vDiffMax.x), <a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(vDiffMax.y), <a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(vDiffMax.z));</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> vDiffMinAbs(<a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(vDiffMin.x), <a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(vDiffMin.y), <a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(vDiffMin.z));</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="comment">// take the maximum distance for each axis, to compute the point that is the farthest away from the sphere</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> vMostDistantPoint = vDiffMinAbs.<a class="code" href="../../da/df1/classez_vec3_template.htm#a7fa99794e2995ef0c95114b3e6960ff7">CompMax</a>(vDiffMaxAbs);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="comment">// if the squared length of that point is still smaller than the sphere radius, it is inside the sphere</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="comment">// and thus the whole AABB is inside the sphere</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="keywordflow">return</span> vMostDistantPoint.<a class="code" href="../../da/df1/classez_vec3_template.htm#aa47fcb03a5aa1272b8afe9ba00e66ee9">GetLengthSquared</a>() &lt;= m_fRadius * m_fRadius;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="../../d2/d50/classez_bounding_sphere_template.htm#a8a2da0e6a2f25fbdd97d3512644e46c4">   82</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d50/classez_bounding_sphere_template.htm#a053a860bf2c3e8f708532e1084e842ea">ezBoundingSphereTemplate&lt;Type&gt;::Overlaps</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBoxTemplate&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keywordflow">return</span> Contains(rhs.<a class="code" href="../../d6/d25/classez_bounding_box_template.htm#afe3f92c0e7dbb27f58925aec75e7d9f7">GetClampedPoint</a>(m_vCenter));</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="../../d2/d50/classez_bounding_sphere_template.htm#a80b6b541f693e969aff08d2e95747d96">   88</a></span>&#160;<span class="keyword">const</span> <a class="code" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBoxTemplate&lt;Type&gt;</a> <a class="code" href="../../d2/d50/classez_bounding_sphere_template.htm#a80b6b541f693e969aff08d2e95747d96">ezBoundingSphereTemplate&lt;Type&gt;::GetBoundingBox</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBoxTemplate&lt;Type&gt;</a>(m_vCenter - <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(m_fRadius), m_vCenter + <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(m_fRadius));</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a3db3157b3e8f3652c78be6e213f8bce1">   95</a></span>&#160;<a class="code" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493a">ezPositionOnPlane::Enum</a> <a class="code" href="../../d5/d8d/structez_plane_template.htm#a61bce56755f1ab47838afa42194698ff">ezPlaneTemplate&lt;Type&gt;::GetObjectPosition</a>(<span class="keyword">const</span> <a class="code" href="../../d2/d50/classez_bounding_sphere_template.htm">ezBoundingSphereTemplate&lt;Type&gt;</a>&amp; sphere)<span class="keyword"> const</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keyword">const</span> Type fDist = GetDistanceTo(sphere.m_vCenter);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keywordflow">if</span> (fDist &gt;= sphere.m_fRadius)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaebe326c76bceb98d6abb19c3a5d78069">ezPositionOnPlane::Front</a>;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keywordflow">if</span> (-fDist &gt;= sphere.m_fRadius)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaf7fd432be55b3b305215efa02f3d74df">ezPositionOnPlane::Back</a>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aad02f359204ea0a13cb95b9adda945892">ezPositionOnPlane::Spanning</a>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a5c4285eeffb33fef63dde669abc6b562">  109</a></span>&#160;<a class="code" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493a">ezPositionOnPlane::Enum</a> <a class="code" href="../../d5/d8d/structez_plane_template.htm#a61bce56755f1ab47838afa42194698ff">ezPlaneTemplate&lt;Type&gt;::GetObjectPosition</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBoxTemplate&lt;Type&gt;</a>&amp; box)<span class="keyword"> const</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> vPos = box.m_vMin;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> vNeg = box.m_vMax;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="keywordflow">if</span> (m_vNormal.x &gt;= (Type)0)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    vPos.x = box.m_vMax.x;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    vNeg.x = box.m_vMin.x;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  }</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordflow">if</span> (m_vNormal.y &gt;= (Type)0)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    vPos.y = box.m_vMax.y;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    vNeg.y = box.m_vMin.y;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <span class="keywordflow">if</span> (m_vNormal.z &gt;= (Type)0)</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  {</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    vPos.z = box.m_vMax.z;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    vNeg.z = box.m_vMin.z;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  }</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keywordflow">if</span> (GetDistanceTo(vPos) &lt;= (Type)0)</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaf7fd432be55b3b305215efa02f3d74df">ezPositionOnPlane::Back</a>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="keywordflow">if</span> (GetDistanceTo(vNeg) &gt;= (Type)0)</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaebe326c76bceb98d6abb19c3a5d78069">ezPositionOnPlane::Front</a>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aad02f359204ea0a13cb95b9adda945892">ezPositionOnPlane::Spanning</a>;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a3bb2f9b8741a5a23e9f9e90e19c8bd35">  142</a></span>&#160;Type <a class="code" href="../../d5/d8d/structez_plane_template.htm#a4f31e60fb1708add1aebcbbabfcdaa69">ezPlaneTemplate&lt;Type&gt;::GetMinimumDistanceTo</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBoxTemplate&lt;Type&gt;</a>&amp; box)<span class="keyword"> const</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> vNeg = box.m_vMax;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keywordflow">if</span> (m_vNormal.x &gt;= (Type)0)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    vNeg.x = box.m_vMin.x;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <span class="keywordflow">if</span> (m_vNormal.y &gt;= (Type)0)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    vNeg.y = box.m_vMin.y;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="keywordflow">if</span> (m_vNormal.z &gt;= (Type)0)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    vNeg.z = box.m_vMin.z;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="keywordflow">return</span> GetDistanceTo(vNeg);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#add9e22a79e32c96205fdc1d45c95ecbe">  165</a></span>&#160;Type <a class="code" href="../../d5/d8d/structez_plane_template.htm#add9e22a79e32c96205fdc1d45c95ecbe">ezPlaneTemplate&lt;Type&gt;::GetMaximumDistanceTo</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBoxTemplate&lt;Type&gt;</a>&amp; box)<span class="keyword"> const</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> vPos = box.m_vMin;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <span class="keywordflow">if</span> (m_vNormal.x &gt;= (Type)0)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    vPos.x = box.m_vMax.x;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <span class="keywordflow">if</span> (m_vNormal.y &gt;= (Type)0)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    vPos.y = box.m_vMax.y;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keywordflow">if</span> (m_vNormal.z &gt;= (Type)0)</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    vPos.z = box.m_vMax.z;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <span class="keywordflow">return</span> GetDistanceTo(vPos);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="../../db/daf/classez_mat3_template.htm#a4d287689bebf49ccda7d412b6c0a8d86">  188</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/daf/classez_mat3_template.htm#a4d287689bebf49ccda7d412b6c0a8d86">ezMat3Template&lt;Type&gt;::SetRotationMatrix</a>(<span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vAxis, <a class="code" href="../../db/d6f/classez_angle.htm">ezAngle</a> angle)</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;{</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  EZ_ASSERT_DEBUG(vAxis.<a class="code" href="../../da/df1/classez_vec3_template.htm#a77807aabfdcd88cdba96f5b500fe9522">IsNormalized</a>(0.1f), <span class="stringliteral">&quot;vAxis must be normalized.&quot;</span>);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keyword">const</span> Type cos = <a class="code" href="../../db/d78/namespaceez_math.htm#a40cf3173aac40e0e462c57728e9410ab">ezMath::Cos</a>(angle);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keyword">const</span> Type sin = <a class="code" href="../../db/d78/namespaceez_math.htm#a05995060e61c0946e14619b45cd1adef">ezMath::Sin</a>(angle);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <span class="keyword">const</span> Type oneminuscos = (Type)1 - cos;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keyword">const</span> Type xy = vAxis.x * vAxis.y;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  <span class="keyword">const</span> Type xz = vAxis.x * vAxis.z;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  <span class="keyword">const</span> Type yz = vAxis.y * vAxis.z;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  <span class="keyword">const</span> Type xsin = vAxis.x * sin;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  <span class="keyword">const</span> Type ysin = vAxis.y * sin;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  <span class="keyword">const</span> Type zsin = vAxis.z * sin;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keyword">const</span> Type onecos_xy = oneminuscos * xy;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keyword">const</span> Type onecos_xz = oneminuscos * xz;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="keyword">const</span> Type onecos_yz = oneminuscos * yz;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  <span class="comment">// Column 1</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  Element(0, 0) = cos + (oneminuscos * (vAxis.x * vAxis.x));</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  Element(0, 1) = onecos_xy + zsin;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  Element(0, 2) = onecos_xz - ysin;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  <span class="comment">// Column 2  )</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  Element(1, 0) = onecos_xy - zsin;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  Element(1, 1) = cos + (oneminuscos * (vAxis.y * vAxis.y));</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  Element(1, 2) = onecos_yz + xsin;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <span class="comment">// Column 3  )</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  Element(2, 0) = onecos_xz + ysin;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  Element(2, 1) = onecos_yz - xsin;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  Element(2, 2) = cos + (oneminuscos * (vAxis.z * vAxis.z));</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;}</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="../../db/daf/classez_mat3_template.htm#a47e9ab79d91473ce68a6bfdd35cbd61d">  225</a></span>&#160;<a class="code" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="code" href="../../db/daf/classez_mat3_template.htm#a47e9ab79d91473ce68a6bfdd35cbd61d">ezMat3Template&lt;Type&gt;::Invert</a>(Type fEpsilon)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;{</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  <span class="keyword">const</span> Type fDet = Element(0, 0) * (Element(2, 2) * Element(1, 1) - Element(1, 2) * Element(2, 1)) -</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    Element(0, 1) * (Element(2, 2) * Element(1, 0) - Element(1, 2) * Element(2, 0)) +</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    Element(0, 2) * (Element(2, 1) * Element(1, 0) - Element(1, 1) * Element(2, 0));</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../db/d78/namespaceez_math.htm#ad0c686588a98fa8c07722fc48f1ffd7f">ezMath::IsZero</a>(fDet, fEpsilon))</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  <span class="keyword">const</span> Type fOneDivDet = (Type)1 / fDet;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  <a class="code" href="../../db/daf/classez_mat3_template.htm">ezMat3Template&lt;Type&gt;</a> Inverse;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  Inverse.Element(0, 0) = (Element(2, 2) * Element(1, 1) - Element(1, 2) * Element(2, 1));</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  Inverse.Element(0, 1) = -(Element(2, 2) * Element(0, 1) - Element(0, 2) * Element(2, 1));</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  Inverse.Element(0, 2) = (Element(1, 2) * Element(0, 1) - Element(0, 2) * Element(1, 1));</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; </div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  Inverse.Element(1, 0) = -(Element(2, 2) * Element(1, 0) - Element(1, 2) * Element(2, 0));</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  Inverse.Element(1, 1) = (Element(2, 2) * Element(0, 0) - Element(0, 2) * Element(2, 0));</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  Inverse.Element(1, 2) = -(Element(1, 2) * Element(0, 0) - Element(0, 2) * Element(1, 0));</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  Inverse.Element(2, 0) = (Element(2, 1) * Element(1, 0) - Element(1, 1) * Element(2, 0));</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  Inverse.Element(2, 1) = -(Element(2, 1) * Element(0, 0) - Element(0, 1) * Element(2, 0));</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  Inverse.Element(2, 2) = (Element(1, 1) * Element(0, 0) - Element(0, 1) * Element(1, 0));</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  *<span class="keyword">this</span> = Inverse * fOneDivDet;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;}</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="../../d7/d9b/classez_mat4_template.htm#ae8f960a47f1f133d453e2ef64820e260">  255</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d7/d9b/classez_mat4_template.htm#ae8f960a47f1f133d453e2ef64820e260">ezMat4Template&lt;Type&gt;::SetRotationMatrix</a>(<span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vAxis, <a class="code" href="../../db/d6f/classez_angle.htm">ezAngle</a> angle)</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;{</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  EZ_ASSERT_DEBUG(vAxis.<a class="code" href="../../da/df1/classez_vec3_template.htm#a77807aabfdcd88cdba96f5b500fe9522">IsNormalized</a>(), <span class="stringliteral">&quot;vAxis must be normalized.&quot;</span>);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  <span class="keyword">const</span> Type cos = <a class="code" href="../../db/d78/namespaceez_math.htm#a40cf3173aac40e0e462c57728e9410ab">ezMath::Cos</a>(angle);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  <span class="keyword">const</span> Type sin = <a class="code" href="../../db/d78/namespaceez_math.htm#a05995060e61c0946e14619b45cd1adef">ezMath::Sin</a>(angle);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  <span class="keyword">const</span> Type oneminuscos = (Type)1 - cos;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  <span class="keyword">const</span> Type xy = vAxis.x * vAxis.y;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  <span class="keyword">const</span> Type xz = vAxis.x * vAxis.z;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <span class="keyword">const</span> Type yz = vAxis.y * vAxis.z;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  <span class="keyword">const</span> Type xsin = vAxis.x * sin;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="keyword">const</span> Type ysin = vAxis.y * sin;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  <span class="keyword">const</span> Type zsin = vAxis.z * sin;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <span class="keyword">const</span> Type onecos_xy = oneminuscos * xy;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <span class="keyword">const</span> Type onecos_xz = oneminuscos * xz;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keyword">const</span> Type onecos_yz = oneminuscos * yz;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160; </div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  <span class="comment">// Column 1</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  Element(0, 0) = cos + (oneminuscos * (vAxis.x * vAxis.x));</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  Element(0, 1) = onecos_xy + zsin;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  Element(0, 2) = onecos_xz - ysin;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  Element(0, 3) = 0;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  <span class="comment">// Column 2</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  Element(1, 0) = onecos_xy - zsin;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  Element(1, 1) = cos + (oneminuscos * (vAxis.y * vAxis.y));</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  Element(1, 2) = onecos_yz + xsin;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  Element(1, 3) = 0;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="comment">// Column 3</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  Element(2, 0) = onecos_xz + ysin;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  Element(2, 1) = onecos_yz - xsin;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  Element(2, 2) = cos + (oneminuscos * (vAxis.z * vAxis.z));</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  Element(2, 3) = 0;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="comment">// Column 4</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  Element(3, 0) = 0;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  Element(3, 1) = 0;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  Element(3, 2) = 0;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  Element(3, 3) = 1;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;}</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00301"></a><span class="lineno"><a class="line" href="../../d7/d9b/classez_mat4_template.htm#aa06a574bed25144d4fdec2d8b4c5627e">  301</a></span>&#160;<a class="code" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="code" href="../../d7/d9b/classez_mat4_template.htm#aa06a574bed25144d4fdec2d8b4c5627e">ezMat4Template&lt;Type&gt;::Invert</a>(Type fEpsilon)</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;{</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <a class="code" href="../../d7/d9b/classez_mat4_template.htm">ezMat4Template&lt;Type&gt;</a> Inverse;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  <span class="keyword">const</span> Type fDet = GetDeterminantOf4x4Matrix(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../db/d78/namespaceez_math.htm#ad0c686588a98fa8c07722fc48f1ffd7f">ezMath::IsZero</a>(fDet, fEpsilon))</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160; </div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  Type fOneDivDet = <a class="code" href="../../db/d78/namespaceez_math.htm#ac0dc1e649849596eedbfa9f54894d779">ezMath::Invert</a>(fDet);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  <span class="keywordflow">for</span> (ezInt32 i = 0; i &lt; 4; ++i)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160; </div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    Inverse.Element(i, 0) = GetDeterminantOf3x3SubMatrix(*<span class="keyword">this</span>, i, 0) * fOneDivDet;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    fOneDivDet = -fOneDivDet;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    Inverse.Element(i, 1) = GetDeterminantOf3x3SubMatrix(*<span class="keyword">this</span>, i, 1) * fOneDivDet;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    fOneDivDet = -fOneDivDet;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    Inverse.Element(i, 2) = GetDeterminantOf3x3SubMatrix(*<span class="keyword">this</span>, i, 2) * fOneDivDet;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    fOneDivDet = -fOneDivDet;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    Inverse.Element(i, 3) = GetDeterminantOf3x3SubMatrix(*<span class="keyword">this</span>, i, 3) * fOneDivDet;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160; </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  *<span class="keyword">this</span> = Inverse;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassez_vec3_template_htm_a77807aabfdcd88cdba96f5b500fe9522"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#a77807aabfdcd88cdba96f5b500fe9522">ezVec3Template::IsNormalized</a></div><div class="ttdeci">bool IsNormalized(Type fEpsilon=ezMath::HugeEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Returns, whether the squared length of this vector is between 0.999f and 1.001f.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:121</div></div>
<div class="ttc" id="aclassez_bounding_box_template_htm_aa6e1b369a4cba10665e6e6fb86fb9176"><div class="ttname"><a href="../../d6/d25/classez_bounding_box_template.htm#aa6e1b369a4cba10665e6e6fb86fb9176">ezBoundingBoxTemplate::GetDistanceTo</a></div><div class="ttdeci">Type GetDistanceTo(const ezVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Returns the minimum distance from the box's surface to the point. Zero if the point is inside the box...</div><div class="ttdef"><b>Definition:</b> BoundingBox_inl.h:313</div></div>
<div class="ttc" id="astructez_result_htm"><div class="ttname"><a href="../../d4/da9/structez_result.htm">ezResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition:</b> Types.h:50</div></div>
<div class="ttc" id="aclassez_vec3_template_htm_a7fa99794e2995ef0c95114b3e6960ff7"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#a7fa99794e2995ef0c95114b3e6960ff7">ezVec3Template::CompMax</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; CompMax(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise maximum of *this and rhs.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:318</div></div>
<div class="ttc" id="aclassez_bounding_sphere_template_htm"><div class="ttname"><a href="../../d2/d50/classez_bounding_sphere_template.htm">ezBoundingSphereTemplate</a></div><div class="ttdoc">An implementation of a bounding sphere.</div><div class="ttdef"><b>Definition:</b> BoundingSphere.h:10</div></div>
<div class="ttc" id="aclassez_mat4_template_htm_aa06a574bed25144d4fdec2d8b4c5627e"><div class="ttname"><a href="../../d7/d9b/classez_mat4_template.htm#aa06a574bed25144d4fdec2d8b4c5627e">ezMat4Template::Invert</a></div><div class="ttdeci">ezResult Invert(Type fEpsilon=ezMath::SmallEpsilon&lt; Type &gt;())</div><div class="ttdoc">Inverts this matrix. Return value indicates whether the matrix could be inverted.</div><div class="ttdef"><b>Definition:</b> AllClasses_inl.h:301</div></div>
<div class="ttc" id="anamespaceez_math_htm_ac0dc1e649849596eedbfa9f54894d779"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ac0dc1e649849596eedbfa9f54894d779">ezMath::Invert</a></div><div class="ttdeci">constexpr Type Invert(Type f)</div><div class="ttdoc">Returns 1 / f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:62</div></div>
<div class="ttc" id="aclassez_vec3_template_htm_aa47fcb03a5aa1272b8afe9ba00e66ee9"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#aa47fcb03a5aa1272b8afe9ba00e66ee9">ezVec3Template::GetLengthSquared</a></div><div class="ttdeci">Type GetLengthSquared() const</div><div class="ttdoc">Returns the squared length. Faster, since no square-root is taken. Useful, if one only wants to compa...</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:70</div></div>
<div class="ttc" id="anamespaceez_math_htm_a7f4e38e30c7914d11bcc85b0a4b1c09a"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a7f4e38e30c7914d11bcc85b0a4b1c09a">ezMath::Sqrt</a></div><div class="ttdeci">EZ_ALWAYS_INLINE double Sqrt(double f)</div><div class="ttdoc">Returns the square root of f.</div><div class="ttdef"><b>Definition:</b> MathDouble_inl.h:63</div></div>
<div class="ttc" id="aclassez_mat4_template_htm_ae8f960a47f1f133d453e2ef64820e260"><div class="ttname"><a href="../../d7/d9b/classez_mat4_template.htm#ae8f960a47f1f133d453e2ef64820e260">ezMat4Template::SetRotationMatrix</a></div><div class="ttdeci">void SetRotationMatrix(const ezVec3Template&lt; Type &gt; &amp;vAxis, ezAngle angle)</div><div class="ttdoc">Sets this matrix to be a rotation matrix around the given axis.</div><div class="ttdef"><b>Definition:</b> AllClasses_inl.h:255</div></div>
<div class="ttc" id="astructez_position_on_plane_htm_a377e6d93106db3d72713f119abba493aaf7fd432be55b3b305215efa02f3d74df"><div class="ttname"><a href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaf7fd432be55b3b305215efa02f3d74df">ezPositionOnPlane::Back</a></div><div class="ttdeci">@ Back</div><div class="ttdoc">Something is completely on the back side of a plane.</div><div class="ttdef"><b>Definition:</b> Plane.h:11</div></div>
<div class="ttc" id="aclassez_mat3_template_htm_a4d287689bebf49ccda7d412b6c0a8d86"><div class="ttname"><a href="../../db/daf/classez_mat3_template.htm#a4d287689bebf49ccda7d412b6c0a8d86">ezMat3Template::SetRotationMatrix</a></div><div class="ttdeci">void SetRotationMatrix(const ezVec3Template&lt; Type &gt; &amp;vAxis, ezAngle angle)</div><div class="ttdoc">Sets this matrix to be a rotation matrix around the given axis.</div><div class="ttdef"><b>Definition:</b> AllClasses_inl.h:188</div></div>
<div class="ttc" id="aclassez_bounding_box_template_htm_afe3f92c0e7dbb27f58925aec75e7d9f7"><div class="ttname"><a href="../../d6/d25/classez_bounding_box_template.htm#afe3f92c0e7dbb27f58925aec75e7d9f7">ezBoundingBoxTemplate::GetClampedPoint</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; GetClampedPoint(const ezVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">The given point is clamped to the volume of the box, i.e. it will be either inside the box or on its ...</div><div class="ttdef"><b>Definition:</b> BoundingBox_inl.h:307</div></div>
<div class="ttc" id="anamespaceez_math_htm_a05995060e61c0946e14619b45cd1adef"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a05995060e61c0946e14619b45cd1adef">ezMath::Sin</a></div><div class="ttdeci">EZ_ALWAYS_INLINE float Sin(ezAngle a)</div><div class="ttdoc">***** Trigonometric Functions *****</div><div class="ttdef"><b>Definition:</b> MathFloat_inl.h:50</div></div>
<div class="ttc" id="astructez_plane_template_htm_a61bce56755f1ab47838afa42194698ff"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a61bce56755f1ab47838afa42194698ff">ezPlaneTemplate::GetObjectPosition</a></div><div class="ttdeci">ezPositionOnPlane::Enum GetObjectPosition(const ezVec3Template&lt; Type &gt; *const pPoints, ezUInt32 uiVertices) const</div><div class="ttdoc">Returns on which side of the plane the set of points lies. Might be on both sides.</div><div class="ttdef"><b>Definition:</b> Plane_inl.h:305</div></div>
<div class="ttc" id="anamespaceez_math_htm_a746232810344aec07f7b870fa302fa8f"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Abs(T f)</div><div class="ttdoc">Returns the absolute value of f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:20</div></div>
<div class="ttc" id="aclassez_bounding_sphere_template_htm_a053a860bf2c3e8f708532e1084e842ea"><div class="ttname"><a href="../../d2/d50/classez_bounding_sphere_template.htm#a053a860bf2c3e8f708532e1084e842ea">ezBoundingSphereTemplate::Overlaps</a></div><div class="ttdeci">bool Overlaps(const ezVec3Template&lt; Type &gt; *pPoints, ezUInt32 uiNumPoints, ezUInt32 uiStride=sizeof(ezVec3Template&lt; Type &gt;)) const</div><div class="ttdoc">Checks whether any of the given points is inside the sphere.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:234</div></div>
<div class="ttc" id="astructez_position_on_plane_htm_a377e6d93106db3d72713f119abba493aad02f359204ea0a13cb95b9adda945892"><div class="ttname"><a href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aad02f359204ea0a13cb95b9adda945892">ezPositionOnPlane::Spanning</a></div><div class="ttdeci">@ Spanning</div><div class="ttdoc">Something is spanning a plane, i.e. some points are on the front and some on the back.</div><div class="ttdef"><b>Definition:</b> Plane.h:14</div></div>
<div class="ttc" id="aclassez_bounding_box_template_htm"><div class="ttname"><a href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBoxTemplate</a></div><div class="ttdoc">An axis-aligned bounding box implementation.</div><div class="ttdef"><b>Definition:</b> BoundingBox.h:11</div></div>
<div class="ttc" id="astructez_plane_template_htm_add9e22a79e32c96205fdc1d45c95ecbe"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#add9e22a79e32c96205fdc1d45c95ecbe">ezPlaneTemplate::GetMaximumDistanceTo</a></div><div class="ttdeci">Type GetMaximumDistanceTo(const ezBoundingBoxTemplate&lt; Type &gt; &amp;box) const</div><div class="ttdoc">Returns the maximum distance between given box and a plane.</div><div class="ttdef"><b>Definition:</b> AllClasses_inl.h:165</div></div>
<div class="ttc" id="astructez_position_on_plane_htm_a377e6d93106db3d72713f119abba493a"><div class="ttname"><a href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493a">ezPositionOnPlane::Enum</a></div><div class="ttdeci">Enum</div><div class="ttdef"><b>Definition:</b> Plane.h:9</div></div>
<div class="ttc" id="aclassez_mat4_template_htm"><div class="ttname"><a href="../../d7/d9b/classez_mat4_template.htm">ezMat4Template</a></div><div class="ttdoc">A 4x4 component matrix class.</div><div class="ttdef"><b>Definition:</b> Declarations.h:160</div></div>
<div class="ttc" id="aclassez_mat3_template_htm"><div class="ttname"><a href="../../db/daf/classez_mat3_template.htm">ezMat3Template</a></div><div class="ttdoc">A 3x3 component matrix class.</div><div class="ttdef"><b>Definition:</b> Declarations.h:154</div></div>
<div class="ttc" id="anamespaceez_math_htm_ad0c686588a98fa8c07722fc48f1ffd7f"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ad0c686588a98fa8c07722fc48f1ffd7f">ezMath::IsZero</a></div><div class="ttdeci">bool IsZero(Type f, Type fEpsilon)</div><div class="ttdoc">Checks whether the given number is close to zero.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:250</div></div>
<div class="ttc" id="aclassez_bounding_sphere_template_htm_a80b6b541f693e969aff08d2e95747d96"><div class="ttname"><a href="../../d2/d50/classez_bounding_sphere_template.htm#a80b6b541f693e969aff08d2e95747d96">ezBoundingSphereTemplate::GetBoundingBox</a></div><div class="ttdeci">const ezBoundingBoxTemplate&lt; Type &gt; GetBoundingBox() const</div><div class="ttdoc">Returns a bounding box that encloses this sphere.</div><div class="ttdef"><b>Definition:</b> AllClasses_inl.h:88</div></div>
<div class="ttc" id="aclassez_angle_htm"><div class="ttname"><a href="../../db/d6f/classez_angle.htm">ezAngle</a></div><div class="ttdoc">Float wrapper struct for a safe usage and conversions of angles.</div><div class="ttdef"><b>Definition:</b> Angle.h:9</div></div>
<div class="ttc" id="astructez_position_on_plane_htm_a377e6d93106db3d72713f119abba493aaebe326c76bceb98d6abb19c3a5d78069"><div class="ttname"><a href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaebe326c76bceb98d6abb19c3a5d78069">ezPositionOnPlane::Front</a></div><div class="ttdeci">@ Front</div><div class="ttdoc">Something is completely in front of a plane.</div><div class="ttdef"><b>Definition:</b> Plane.h:12</div></div>
<div class="ttc" id="anamespaceez_math_htm_a40cf3173aac40e0e462c57728e9410ab"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a40cf3173aac40e0e462c57728e9410ab">ezMath::Cos</a></div><div class="ttdeci">EZ_ALWAYS_INLINE float Cos(ezAngle a)</div><div class="ttdoc">Takes an angle, returns its cosine.</div><div class="ttdef"><b>Definition:</b> MathFloat_inl.h:52</div></div>
<div class="ttc" id="aclassez_bounding_sphere_template_htm_abbdb7cf5923634895845c419eabea57f"><div class="ttname"><a href="../../d2/d50/classez_bounding_sphere_template.htm#abbdb7cf5923634895845c419eabea57f">ezBoundingSphereTemplate::Contains</a></div><div class="ttdeci">bool Contains(const ezVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Returns true if the given point is inside the sphere.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:176</div></div>
<div class="ttc" id="anamespaceez_math_htm_adfc8bc546fb58a0280cce97f9a40f324"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#adfc8bc546fb58a0280cce97f9a40f324">ezMath::Square</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Square(T f)</div><div class="ttdoc">Returns f * f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:8</div></div>
<div class="ttc" id="aclassez_bounding_box_template_htm_a483bf35eb69bb1a1ab87ca0deb7f8a93"><div class="ttname"><a href="../../d6/d25/classez_bounding_box_template.htm#a483bf35eb69bb1a1ab87ca0deb7f8a93">ezBoundingBoxTemplate::Contains</a></div><div class="ttdeci">bool Contains(const ezVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Checks whether the given point is inside the box.</div><div class="ttdef"><b>Definition:</b> BoundingBox_inl.h:149</div></div>
<div class="ttc" id="aclassez_bounding_sphere_template_htm_a3285adbea41a29b883589fdf0370d855"><div class="ttname"><a href="../../d2/d50/classez_bounding_sphere_template.htm#a3285adbea41a29b883589fdf0370d855">ezBoundingSphereTemplate::ExpandToInclude</a></div><div class="ttdeci">void ExpandToInclude(const ezVec3Template&lt; Type &gt; &amp;vPoint)</div><div class="ttdoc">Increases the sphere's radius to include this point. Does NOT change its position,...</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:65</div></div>
<div class="ttc" id="aclassez_bounding_sphere_template_htm_a357eeefbe5000a1c92c37bb5499d618d"><div class="ttname"><a href="../../d2/d50/classez_bounding_sphere_template.htm#a357eeefbe5000a1c92c37bb5499d618d">ezBoundingSphereTemplate::GetDistanceTo</a></div><div class="ttdeci">Type GetDistanceTo(const ezVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Computes the distance of the point to the sphere's surface. Returns negative values for points inside...</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:164</div></div>
<div class="ttc" id="astructez_plane_template_htm_a4f31e60fb1708add1aebcbbabfcdaa69"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a4f31e60fb1708add1aebcbbabfcdaa69">ezPlaneTemplate::GetMinimumDistanceTo</a></div><div class="ttdeci">Type GetMinimumDistanceTo(const ezVec3Template&lt; Type &gt; *pPoints, ezUInt32 uiNumPoints, ezUInt32 uiStride=sizeof(ezVec3Template&lt; Type &gt;)) const</div><div class="ttdoc">Returns the minimum distance that any of the given points had to the plane.</div><div class="ttdef"><b>Definition:</b> Plane_inl.h:431</div></div>
<div class="ttc" id="aclassez_bounding_box_template_htm_a50ce4fbb4a3485a58d363ab0e4355663"><div class="ttname"><a href="../../d6/d25/classez_bounding_box_template.htm#a50ce4fbb4a3485a58d363ab0e4355663">ezBoundingBoxTemplate::Overlaps</a></div><div class="ttdeci">bool Overlaps(const ezBoundingBoxTemplate &amp;rhs) const</div><div class="ttdoc">Checks whether this box overlaps with the given box.</div><div class="ttdef"><b>Definition:</b> BoundingBox_inl.h:185</div></div>
<div class="ttc" id="aclassez_mat3_template_htm_a47e9ab79d91473ce68a6bfdd35cbd61d"><div class="ttname"><a href="../../db/daf/classez_mat3_template.htm#a47e9ab79d91473ce68a6bfdd35cbd61d">ezMat3Template::Invert</a></div><div class="ttdeci">ezResult Invert(Type fEpsilon=ezMath::SmallEpsilon&lt; Type &gt;())</div><div class="ttdoc">Inverts this matrix. Return value indicates whether the matrix could be Inverted.</div><div class="ttdef"><b>Definition:</b> AllClasses_inl.h:225</div></div>
<div class="ttc" id="aclassez_vec3_template_htm"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt; float &gt;</a></div></div>
<div class="ttc" id="aclassez_bounding_box_template_htm_af21365085336a135e720ba9aac176dbe"><div class="ttname"><a href="../../d6/d25/classez_bounding_box_template.htm#af21365085336a135e720ba9aac176dbe">ezBoundingBoxTemplate::GetBoundingSphere</a></div><div class="ttdeci">const ezBoundingSphereTemplate&lt; Type &gt; GetBoundingSphere() const</div><div class="ttdoc">Returns a bounding sphere that encloses this box.</div><div class="ttdef"><b>Definition:</b> AllClasses_inl.h:29</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_4ad0f5fbee83b30173e7fecedeea26f0.htm">Math</a></li><li class="navelem"><a class="el" href="../../dir_89ec743f7412cd7cb287fad7b6649245.htm">Implementation</a></li><li class="navelem"><b>AllClasses_inl.h</b></li>
    <li class="footer">Generated on Sat Mar 25 2023 19:21:55 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
