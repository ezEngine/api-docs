<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezVec3Template&lt; Type &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('da/df1/classez_vec3_template.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="../../d0/ded/classez_vec3_template-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezVec3Template&lt; Type &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A 3-component vector class.  
 <a href="../../da/df1/classez_vec3_template.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d3/d42/_vec3_8h_source.htm">Vec3.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a74dc66766ef8fb74727260f36b043c1b"><td class="memItemLeft" align="right" valign="top"><a id="a74dc66766ef8fb74727260f36b043c1b"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ComponentType</b> = Type</td></tr>
<tr class="separator:a74dc66766ef8fb74727260f36b043c1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a229fe053368224a2142fb8f3242ca45c"><td class="memItemLeft" align="right" valign="top"><a id="a229fe053368224a2142fb8f3242ca45c"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>EZ_DECLARE_POD_TYPE</b> ()</td></tr>
<tr class="separator:a229fe053368224a2142fb8f3242ca45c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96f63b8bd98381acc8603773f183ab44"><td class="memItemLeft" align="right" valign="top"><a id="a96f63b8bd98381acc8603773f183ab44"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a96f63b8bd98381acc8603773f183ab44">ezVec3Template</a> ()</td></tr>
<tr class="memdesc:a96f63b8bd98381acc8603773f183ab44"><td class="mdescLeft">&#160;</td><td class="mdescRight">default-constructed vector is uninitialized (for speed) <br /></td></tr>
<tr class="separator:a96f63b8bd98381acc8603773f183ab44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08a6ef5ad90156b8321da9930d1f668a"><td class="memItemLeft" align="right" valign="top"><a id="a08a6ef5ad90156b8321da9930d1f668a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a08a6ef5ad90156b8321da9930d1f668a">ezVec3Template</a> (Type x, Type y, Type z)</td></tr>
<tr class="memdesc:a08a6ef5ad90156b8321da9930d1f668a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the vector with x,y,z. <br /></td></tr>
<tr class="separator:a08a6ef5ad90156b8321da9930d1f668a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea114ce8511b08a3af04d36d43ecbcde"><td class="memItemLeft" align="right" valign="top"><a id="aea114ce8511b08a3af04d36d43ecbcde"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#aea114ce8511b08a3af04d36d43ecbcde">ezVec3Template</a> (Type v)</td></tr>
<tr class="memdesc:aea114ce8511b08a3af04d36d43ecbcde"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes all 3 components with xyz. <br /></td></tr>
<tr class="separator:aea114ce8511b08a3af04d36d43ecbcde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a005eb534e4471169af6cda436925ad8c"><td class="memItemLeft" align="right" valign="top"><a id="a005eb534e4471169af6cda436925ad8c"></a>
const <a class="el" href="../../d1/df8/classez_vec2_template.htm">ezVec2Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a005eb534e4471169af6cda436925ad8c">GetAsVec2</a> () const</td></tr>
<tr class="memdesc:a005eb534e4471169af6cda436925ad8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an <a class="el" href="../../d1/df8/classez_vec2_template.htm" title="A 2-component vector class.">ezVec2Template</a> with x and y from this vector. <br /></td></tr>
<tr class="separator:a005eb534e4471169af6cda436925ad8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa8ece8eae7a8a5be1ff2296a9416787"><td class="memItemLeft" align="right" valign="top"><a id="afa8ece8eae7a8a5be1ff2296a9416787"></a>
const <a class="el" href="../../da/dd2/classez_vec4_template.htm">ezVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#afa8ece8eae7a8a5be1ff2296a9416787">GetAsVec4</a> (Type w) const</td></tr>
<tr class="memdesc:afa8ece8eae7a8a5be1ff2296a9416787"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an <a class="el" href="../../da/dd2/classez_vec4_template.htm" title="A 4-component vector class.">ezVec4Template</a> with x,y,z from this vector and w set to the parameter. <br /></td></tr>
<tr class="separator:afa8ece8eae7a8a5be1ff2296a9416787"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acef8f620ac07de279d490cb6189a70a6"><td class="memItemLeft" align="right" valign="top"><a id="acef8f620ac07de279d490cb6189a70a6"></a>
const <a class="el" href="../../da/dd2/classez_vec4_template.htm">ezVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#acef8f620ac07de279d490cb6189a70a6">GetAsPositionVec4</a> () const</td></tr>
<tr class="memdesc:acef8f620ac07de279d490cb6189a70a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an <a class="el" href="../../da/dd2/classez_vec4_template.htm" title="A 4-component vector class.">ezVec4Template</a> with x,y,z from this vector and w set 1. <br /></td></tr>
<tr class="separator:acef8f620ac07de279d490cb6189a70a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a731d6d3a758ead159d81b1a206fa2cd1"><td class="memItemLeft" align="right" valign="top"><a id="a731d6d3a758ead159d81b1a206fa2cd1"></a>
const <a class="el" href="../../da/dd2/classez_vec4_template.htm">ezVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a731d6d3a758ead159d81b1a206fa2cd1">GetAsDirectionVec4</a> () const</td></tr>
<tr class="memdesc:a731d6d3a758ead159d81b1a206fa2cd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an <a class="el" href="../../da/dd2/classez_vec4_template.htm" title="A 4-component vector class.">ezVec4Template</a> with x,y,z from this vector and w set 0. <br /></td></tr>
<tr class="separator:a731d6d3a758ead159d81b1a206fa2cd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabd2131f43f6d1c6f18738830fcba13f"><td class="memItemLeft" align="right" valign="top"><a id="aabd2131f43f6d1c6f18738830fcba13f"></a>
const Type *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#aabd2131f43f6d1c6f18738830fcba13f">GetData</a> () const</td></tr>
<tr class="memdesc:aabd2131f43f6d1c6f18738830fcba13f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the data as an array. <br /></td></tr>
<tr class="separator:aabd2131f43f6d1c6f18738830fcba13f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d0e7f20d7af9da9092570ec7ee772d3"><td class="memItemLeft" align="right" valign="top"><a id="a6d0e7f20d7af9da9092570ec7ee772d3"></a>
Type *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a6d0e7f20d7af9da9092570ec7ee772d3">GetData</a> ()</td></tr>
<tr class="memdesc:a6d0e7f20d7af9da9092570ec7ee772d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the data as an array. <br /></td></tr>
<tr class="separator:a6d0e7f20d7af9da9092570ec7ee772d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4693ce7e3ea568fb31504369e69836fb"><td class="memItemLeft" align="right" valign="top"><a id="a4693ce7e3ea568fb31504369e69836fb"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a4693ce7e3ea568fb31504369e69836fb">Set</a> (Type xyz)</td></tr>
<tr class="memdesc:a4693ce7e3ea568fb31504369e69836fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets all 3 components to this value. <br /></td></tr>
<tr class="separator:a4693ce7e3ea568fb31504369e69836fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb04ac1c5183e80b22c690c5daa16574"><td class="memItemLeft" align="right" valign="top"><a id="adb04ac1c5183e80b22c690c5daa16574"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#adb04ac1c5183e80b22c690c5daa16574">Set</a> (Type x, Type y, Type z)</td></tr>
<tr class="memdesc:adb04ac1c5183e80b22c690c5daa16574"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the vector to these values. <br /></td></tr>
<tr class="separator:adb04ac1c5183e80b22c690c5daa16574"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af217f183c290134d4db0d382759bdfe3"><td class="memItemLeft" align="right" valign="top"><a id="af217f183c290134d4db0d382759bdfe3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#af217f183c290134d4db0d382759bdfe3">SetZero</a> ()</td></tr>
<tr class="memdesc:af217f183c290134d4db0d382759bdfe3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the vector to all zero. <br /></td></tr>
<tr class="separator:af217f183c290134d4db0d382759bdfe3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aceb7b6c4aa4040fb03d85f0adb27a433"><td class="memItemLeft" align="right" valign="top"><a id="aceb7b6c4aa4040fb03d85f0adb27a433"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#aceb7b6c4aa4040fb03d85f0adb27a433">GetLength</a> () const</td></tr>
<tr class="memdesc:aceb7b6c4aa4040fb03d85f0adb27a433"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the length of the vector. <br /></td></tr>
<tr class="separator:aceb7b6c4aa4040fb03d85f0adb27a433"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0ba74a3f20ca18355119f33c328f0c6"><td class="memItemLeft" align="right" valign="top"><a id="ab0ba74a3f20ca18355119f33c328f0c6"></a>
<a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#ab0ba74a3f20ca18355119f33c328f0c6">SetLength</a> (Type fNewLength, Type fEpsilon=ezMath::DefaultEpsilon&lt; Type &gt;())</td></tr>
<tr class="memdesc:ab0ba74a3f20ca18355119f33c328f0c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to rescale the vector to the given length. If the vector is too close to zero, EZ_FAILURE is returned and the vector is set to zero. <br /></td></tr>
<tr class="separator:ab0ba74a3f20ca18355119f33c328f0c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa47fcb03a5aa1272b8afe9ba00e66ee9"><td class="memItemLeft" align="right" valign="top"><a id="aa47fcb03a5aa1272b8afe9ba00e66ee9"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#aa47fcb03a5aa1272b8afe9ba00e66ee9">GetLengthSquared</a> () const</td></tr>
<tr class="memdesc:aa47fcb03a5aa1272b8afe9ba00e66ee9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the squared length. Faster, since no square-root is taken. Useful, if one only wants to compare the lengths of two vectors. <br /></td></tr>
<tr class="separator:aa47fcb03a5aa1272b8afe9ba00e66ee9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74e9b90edf238ac0678959334e4f3b6c"><td class="memItemLeft" align="right" valign="top"><a id="a74e9b90edf238ac0678959334e4f3b6c"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a74e9b90edf238ac0678959334e4f3b6c">GetLengthAndNormalize</a> ()</td></tr>
<tr class="memdesc:a74e9b90edf238ac0678959334e4f3b6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalizes this vector and returns its previous length in one operation. More efficient than calling GetLength and then Normalize. <br /></td></tr>
<tr class="separator:a74e9b90edf238ac0678959334e4f3b6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0dbd093d6f8abe8f783ea83b0b40a744"><td class="memItemLeft" align="right" valign="top"><a id="a0dbd093d6f8abe8f783ea83b0b40a744"></a>
const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a0dbd093d6f8abe8f783ea83b0b40a744">GetNormalized</a> () const</td></tr>
<tr class="memdesc:a0dbd093d6f8abe8f783ea83b0b40a744"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a normalized version of this vector, leaves the vector itself unchanged. <br /></td></tr>
<tr class="separator:a0dbd093d6f8abe8f783ea83b0b40a744"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0a6d50203589742653c50484734ef19"><td class="memItemLeft" align="right" valign="top"><a id="af0a6d50203589742653c50484734ef19"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#af0a6d50203589742653c50484734ef19">Normalize</a> ()</td></tr>
<tr class="memdesc:af0a6d50203589742653c50484734ef19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalizes this vector. <br /></td></tr>
<tr class="separator:af0a6d50203589742653c50484734ef19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a371533372c47fa274e0e39144d51f73c"><td class="memItemLeft" align="right" valign="top"><a id="a371533372c47fa274e0e39144d51f73c"></a>
<a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a371533372c47fa274e0e39144d51f73c">NormalizeIfNotZero</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vFallback=<a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>(1, 0, 0), Type fEpsilon=ezMath::SmallEpsilon&lt; Type &gt;())</td></tr>
<tr class="memdesc:a371533372c47fa274e0e39144d51f73c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to normalize this vector. If the vector is too close to zero, EZ_FAILURE is returned and the vector is set to the given fallback value. <br /></td></tr>
<tr class="separator:a371533372c47fa274e0e39144d51f73c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52d86f05731890b4a5ca7762a5d65bb3"><td class="memItemLeft" align="right" valign="top"><a id="a52d86f05731890b4a5ca7762a5d65bb3"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a52d86f05731890b4a5ca7762a5d65bb3">IsZero</a> () const</td></tr>
<tr class="memdesc:a52d86f05731890b4a5ca7762a5d65bb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns, whether this vector is (0, 0, 0). <br /></td></tr>
<tr class="separator:a52d86f05731890b4a5ca7762a5d65bb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a070fded3017061e2f96620d5148828"><td class="memItemLeft" align="right" valign="top"><a id="a3a070fded3017061e2f96620d5148828"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a3a070fded3017061e2f96620d5148828">IsZero</a> (Type fEpsilon) const</td></tr>
<tr class="memdesc:a3a070fded3017061e2f96620d5148828"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns, whether this vector is (0, 0, 0) within a given epsilon. <br /></td></tr>
<tr class="separator:a3a070fded3017061e2f96620d5148828"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77807aabfdcd88cdba96f5b500fe9522"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a77807aabfdcd88cdba96f5b500fe9522">IsNormalized</a> (Type fEpsilon=ezMath::HugeEpsilon&lt; Type &gt;()) const</td></tr>
<tr class="memdesc:a77807aabfdcd88cdba96f5b500fe9522"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns, whether the squared length of this vector is between 0.999f and 1.001f.  <a href="../../da/df1/classez_vec3_template.htm#a77807aabfdcd88cdba96f5b500fe9522">More...</a><br /></td></tr>
<tr class="separator:a77807aabfdcd88cdba96f5b500fe9522"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a330f758d541d570f19443bbbc0969e5e"><td class="memItemLeft" align="right" valign="top"><a id="a330f758d541d570f19443bbbc0969e5e"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a330f758d541d570f19443bbbc0969e5e">IsNaN</a> () const</td></tr>
<tr class="memdesc:a330f758d541d570f19443bbbc0969e5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if any of x, y or z is NaN. <br /></td></tr>
<tr class="separator:a330f758d541d570f19443bbbc0969e5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a216fcb73cd48b1bd9062fdf9b8be0b88"><td class="memItemLeft" align="right" valign="top"><a id="a216fcb73cd48b1bd9062fdf9b8be0b88"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a216fcb73cd48b1bd9062fdf9b8be0b88">IsValid</a> () const</td></tr>
<tr class="memdesc:a216fcb73cd48b1bd9062fdf9b8be0b88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks that all components are finite numbers. <br /></td></tr>
<tr class="separator:a216fcb73cd48b1bd9062fdf9b8be0b88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9f531d0e615080d02ed4a42b6b184e5"><td class="memItemLeft" align="right" valign="top"><a id="ab9f531d0e615080d02ed4a42b6b184e5"></a>
const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#ab9f531d0e615080d02ed4a42b6b184e5">operator-</a> () const</td></tr>
<tr class="memdesc:ab9f531d0e615080d02ed4a42b6b184e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the negation of this vector. <br /></td></tr>
<tr class="separator:ab9f531d0e615080d02ed4a42b6b184e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a43db9c1ba66e580bf3eea85cc3f559"><td class="memItemLeft" align="right" valign="top"><a id="a8a43db9c1ba66e580bf3eea85cc3f559"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a8a43db9c1ba66e580bf3eea85cc3f559">operator+=</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a8a43db9c1ba66e580bf3eea85cc3f559"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds rhs component-wise to this vector. <br /></td></tr>
<tr class="separator:a8a43db9c1ba66e580bf3eea85cc3f559"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5349436a34546a479a64bbe2ffdbb969"><td class="memItemLeft" align="right" valign="top"><a id="a5349436a34546a479a64bbe2ffdbb969"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a5349436a34546a479a64bbe2ffdbb969">operator-=</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a5349436a34546a479a64bbe2ffdbb969"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts rhs component-wise from this vector. <br /></td></tr>
<tr class="separator:a5349436a34546a479a64bbe2ffdbb969"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8009bc202b1f20dc95d4296d063f3ff4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a8009bc202b1f20dc95d4296d063f3ff4">operator*=</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a8009bc202b1f20dc95d4296d063f3ff4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies rhs component-wise to this vector.  <a href="../../da/df1/classez_vec3_template.htm#a8009bc202b1f20dc95d4296d063f3ff4">More...</a><br /></td></tr>
<tr class="separator:a8009bc202b1f20dc95d4296d063f3ff4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf4fd0903b014af9fc671b4cc47f7853"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#acf4fd0903b014af9fc671b4cc47f7853">operator/=</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;rhs)</td></tr>
<tr class="memdesc:acf4fd0903b014af9fc671b4cc47f7853"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides this vector component-wise by rhs.  <a href="../../da/df1/classez_vec3_template.htm#acf4fd0903b014af9fc671b4cc47f7853">More...</a><br /></td></tr>
<tr class="separator:acf4fd0903b014af9fc671b4cc47f7853"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fcb807c8aa58a796520fd3ca2d1c4b2"><td class="memItemLeft" align="right" valign="top"><a id="a0fcb807c8aa58a796520fd3ca2d1c4b2"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a0fcb807c8aa58a796520fd3ca2d1c4b2">operator*=</a> (Type f)</td></tr>
<tr class="memdesc:a0fcb807c8aa58a796520fd3ca2d1c4b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies all components of this vector with f. <br /></td></tr>
<tr class="separator:a0fcb807c8aa58a796520fd3ca2d1c4b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad531e99b4fed299bf8826f89e035eb48"><td class="memItemLeft" align="right" valign="top"><a id="ad531e99b4fed299bf8826f89e035eb48"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#ad531e99b4fed299bf8826f89e035eb48">operator/=</a> (Type f)</td></tr>
<tr class="memdesc:ad531e99b4fed299bf8826f89e035eb48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides all components of this vector by f. <br /></td></tr>
<tr class="separator:ad531e99b4fed299bf8826f89e035eb48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ca79a707f6473af0e295909fb3f3cb1"><td class="memItemLeft" align="right" valign="top"><a id="a3ca79a707f6473af0e295909fb3f3cb1"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a3ca79a707f6473af0e295909fb3f3cb1">IsIdentical</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a3ca79a707f6473af0e295909fb3f3cb1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equality Check (bitwise) <br /></td></tr>
<tr class="separator:a3ca79a707f6473af0e295909fb3f3cb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7dd54170c3e008dc8f7065573947e4b"><td class="memItemLeft" align="right" valign="top"><a id="af7dd54170c3e008dc8f7065573947e4b"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#af7dd54170c3e008dc8f7065573947e4b">IsEqual</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;rhs, Type fEpsilon) const</td></tr>
<tr class="memdesc:af7dd54170c3e008dc8f7065573947e4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equality Check with epsilon. <br /></td></tr>
<tr class="separator:af7dd54170c3e008dc8f7065573947e4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a726ff5ddd3f38d4dfc4e99f541023674"><td class="memItemLeft" align="right" valign="top"><a id="a726ff5ddd3f38d4dfc4e99f541023674"></a>
<a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a726ff5ddd3f38d4dfc4e99f541023674">GetAngleBetween</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a726ff5ddd3f38d4dfc4e99f541023674"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the positive angle between *this and rhs. Both this and rhs must be normalized. <br /></td></tr>
<tr class="separator:a726ff5ddd3f38d4dfc4e99f541023674"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7672fa59655c642c16f8caf581e03f3"><td class="memItemLeft" align="right" valign="top"><a id="ab7672fa59655c642c16f8caf581e03f3"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#ab7672fa59655c642c16f8caf581e03f3">Dot</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:ab7672fa59655c642c16f8caf581e03f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the Dot-product of the two vectors (commutative, order does not matter) <br /></td></tr>
<tr class="separator:ab7672fa59655c642c16f8caf581e03f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac75d15f3524fbc880a4cb7ae1cb45094"><td class="memItemLeft" align="right" valign="top"><a id="ac75d15f3524fbc880a4cb7ae1cb45094"></a>
const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#ac75d15f3524fbc880a4cb7ae1cb45094">CrossRH</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:ac75d15f3524fbc880a4cb7ae1cb45094"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the Cross-product of the two vectors (NOT commutative, order DOES matter) <br /></td></tr>
<tr class="separator:ac75d15f3524fbc880a4cb7ae1cb45094"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa72f7d2a6d9b8d30f67c36eef15db7b7"><td class="memItemLeft" align="right" valign="top"><a id="aa72f7d2a6d9b8d30f67c36eef15db7b7"></a>
const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#aa72f7d2a6d9b8d30f67c36eef15db7b7">CompMin</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:aa72f7d2a6d9b8d30f67c36eef15db7b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise minimum of *this and rhs. <br /></td></tr>
<tr class="separator:aa72f7d2a6d9b8d30f67c36eef15db7b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fa99794e2995ef0c95114b3e6960ff7"><td class="memItemLeft" align="right" valign="top"><a id="a7fa99794e2995ef0c95114b3e6960ff7"></a>
const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a7fa99794e2995ef0c95114b3e6960ff7">CompMax</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a7fa99794e2995ef0c95114b3e6960ff7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise maximum of *this and rhs. <br /></td></tr>
<tr class="separator:a7fa99794e2995ef0c95114b3e6960ff7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5487dab455f50510bb285e90d42b73ef"><td class="memItemLeft" align="right" valign="top"><a id="a5487dab455f50510bb285e90d42b73ef"></a>
const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a5487dab455f50510bb285e90d42b73ef">CompClamp</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vLow, const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vHigh) const</td></tr>
<tr class="memdesc:a5487dab455f50510bb285e90d42b73ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise clamped value of *this between low and high. <br /></td></tr>
<tr class="separator:a5487dab455f50510bb285e90d42b73ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e0aabc06569839962d16a71def3ae6b"><td class="memItemLeft" align="right" valign="top"><a id="a1e0aabc06569839962d16a71def3ae6b"></a>
const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a1e0aabc06569839962d16a71def3ae6b">CompMul</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a1e0aabc06569839962d16a71def3ae6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise multiplication of *this and rhs. <br /></td></tr>
<tr class="separator:a1e0aabc06569839962d16a71def3ae6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97da3d92338ae762c2ddf6573cadd832"><td class="memItemLeft" align="right" valign="top"><a id="a97da3d92338ae762c2ddf6573cadd832"></a>
const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a97da3d92338ae762c2ddf6573cadd832">CompDiv</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a97da3d92338ae762c2ddf6573cadd832"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise division of *this and rhs. <br /></td></tr>
<tr class="separator:a97da3d92338ae762c2ddf6573cadd832"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6e2563b421a4d9e637eb7472fa6b327"><td class="memItemLeft" align="right" valign="top"><a id="ab6e2563b421a4d9e637eb7472fa6b327"></a>
const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#ab6e2563b421a4d9e637eb7472fa6b327">Abs</a> () const</td></tr>
<tr class="memdesc:ab6e2563b421a4d9e637eb7472fa6b327"><td class="mdescLeft">&#160;</td><td class="mdescRight">brief Returns the component-wise absolute of *this. <br /></td></tr>
<tr class="separator:ab6e2563b421a4d9e637eb7472fa6b327"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a3564acb96f281e3ad47187d98a9d01"><td class="memItemLeft" align="right" valign="top"><a id="a8a3564acb96f281e3ad47187d98a9d01"></a>
<a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a8a3564acb96f281e3ad47187d98a9d01">CalculateNormal</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;v1, const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;v2, const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;v3)</td></tr>
<tr class="memdesc:a8a3564acb96f281e3ad47187d98a9d01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the normal of the triangle defined by the three vertices. Vertices are assumed to be ordered counter-clockwise. <br /></td></tr>
<tr class="separator:a8a3564acb96f281e3ad47187d98a9d01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4283a7b22b195027731f0a02bbc58611"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a4283a7b22b195027731f0a02bbc58611">MakeOrthogonalTo</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vNormal)</td></tr>
<tr class="memdesc:a4283a7b22b195027731f0a02bbc58611"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modifies this direction vector to be orthogonal to the given (normalized) direction vector. The result is NOT normalized.  <a href="../../da/df1/classez_vec3_template.htm#a4283a7b22b195027731f0a02bbc58611">More...</a><br /></td></tr>
<tr class="separator:a4283a7b22b195027731f0a02bbc58611"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99a8f512e13672cde4e60a453a922e50"><td class="memItemLeft" align="right" valign="top"><a id="a99a8f512e13672cde4e60a453a922e50"></a>
const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a99a8f512e13672cde4e60a453a922e50">GetOrthogonalVector</a> () const</td></tr>
<tr class="memdesc:a99a8f512e13672cde4e60a453a922e50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns some arbitrary vector orthogonal to this one. The vector is NOT normalized. <br /></td></tr>
<tr class="separator:a99a8f512e13672cde4e60a453a922e50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08f4508a3c6894a4bd1ca9c0f57bd466"><td class="memItemLeft" align="right" valign="top"><a id="a08f4508a3c6894a4bd1ca9c0f57bd466"></a>
const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a08f4508a3c6894a4bd1ca9c0f57bd466">GetReflectedVector</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vNormal) const</td></tr>
<tr class="memdesc:a08f4508a3c6894a4bd1ca9c0f57bd466"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns this vector reflected at vNormal. <br /></td></tr>
<tr class="separator:a08f4508a3c6894a4bd1ca9c0f57bd466"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad22967387501e0bf86c461264c58a194"><td class="memItemLeft" align="right" valign="top"><a id="ad22967387501e0bf86c461264c58a194"></a>
const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#ad22967387501e0bf86c461264c58a194">GetRefractedVector</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vNormal, Type fRefIndex1, Type fRefIndex2) const</td></tr>
<tr class="memdesc:ad22967387501e0bf86c461264c58a194"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns this vector, refracted at vNormal, using the refraction index of the current medium and the medium it enters. <br /></td></tr>
<tr class="separator:ad22967387501e0bf86c461264c58a194"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a06a35a3406d723701a452b48a1128a8c"><td class="memItemLeft" align="right" valign="top"><a id="a06a35a3406d723701a452b48a1128a8c"></a>
static <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a06a35a3406d723701a452b48a1128a8c">MakeNaN</a> ()</td></tr>
<tr class="memdesc:a06a35a3406d723701a452b48a1128a8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a vector with all components set to Not-a-Number (NaN). <br /></td></tr>
<tr class="separator:a06a35a3406d723701a452b48a1128a8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9bf0c48a691584e39d7aede05a5b904"><td class="memItemLeft" align="right" valign="top"><a id="ad9bf0c48a691584e39d7aede05a5b904"></a>
static <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#ad9bf0c48a691584e39d7aede05a5b904">MakeZero</a> ()</td></tr>
<tr class="memdesc:ad9bf0c48a691584e39d7aede05a5b904"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a vector with all components set to zero. <br /></td></tr>
<tr class="separator:ad9bf0c48a691584e39d7aede05a5b904"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d868bcc6379519e4502516883a02131"><td class="memItemLeft" align="right" valign="top"><a id="a5d868bcc6379519e4502516883a02131"></a>
static <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a5d868bcc6379519e4502516883a02131">MakeAxisX</a> ()</td></tr>
<tr class="memdesc:a5d868bcc6379519e4502516883a02131"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a vector initialized to the X unit vector (1, 0, 0). <br /></td></tr>
<tr class="separator:a5d868bcc6379519e4502516883a02131"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e2d6259e862cac3001862909e09e665"><td class="memItemLeft" align="right" valign="top"><a id="a9e2d6259e862cac3001862909e09e665"></a>
static <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a9e2d6259e862cac3001862909e09e665">MakeAxisY</a> ()</td></tr>
<tr class="memdesc:a9e2d6259e862cac3001862909e09e665"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a vector initialized to the Y unit vector (0, 1, 0). <br /></td></tr>
<tr class="separator:a9e2d6259e862cac3001862909e09e665"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecc216ed63b990b4720a1f6fdf45a8f0"><td class="memItemLeft" align="right" valign="top"><a id="aecc216ed63b990b4720a1f6fdf45a8f0"></a>
static <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#aecc216ed63b990b4720a1f6fdf45a8f0">MakeAxisZ</a> ()</td></tr>
<tr class="memdesc:aecc216ed63b990b4720a1f6fdf45a8f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a vector initialized to the Z unit vector (0, 0, 1). <br /></td></tr>
<tr class="separator:aecc216ed63b990b4720a1f6fdf45a8f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c7d030dc8acd9f919f6a4ea3222c4b8"><td class="memItemLeft" align="right" valign="top"><a id="a6c7d030dc8acd9f919f6a4ea3222c4b8"></a>
static <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a6c7d030dc8acd9f919f6a4ea3222c4b8">MakeRandomPointInSphere</a> (<a class="el" href="../../de/d9e/classez_random.htm">ezRandom</a> &amp;inout_rng)</td></tr>
<tr class="memdesc:a6c7d030dc8acd9f919f6a4ea3222c4b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a random point inside a unit sphere (radius 1). <br /></td></tr>
<tr class="separator:a6c7d030dc8acd9f919f6a4ea3222c4b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7437d88f2e0d4c2a3ef19d1811dd5104"><td class="memItemLeft" align="right" valign="top"><a id="a7437d88f2e0d4c2a3ef19d1811dd5104"></a>
static <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a7437d88f2e0d4c2a3ef19d1811dd5104">MakeRandomDirection</a> (<a class="el" href="../../de/d9e/classez_random.htm">ezRandom</a> &amp;inout_rng)</td></tr>
<tr class="memdesc:a7437d88f2e0d4c2a3ef19d1811dd5104"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a random direction vector. The vector is normalized. <br /></td></tr>
<tr class="separator:a7437d88f2e0d4c2a3ef19d1811dd5104"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a880212a68c42178fbb732ef5135452f5"><td class="memItemLeft" align="right" valign="top"><a id="a880212a68c42178fbb732ef5135452f5"></a>
static <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a880212a68c42178fbb732ef5135452f5">MakeRandomDeviationX</a> (<a class="el" href="../../de/d9e/classez_random.htm">ezRandom</a> &amp;inout_rng, const <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;maxDeviation)</td></tr>
<tr class="memdesc:a880212a68c42178fbb732ef5135452f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a random vector around the x axis with a maximum deviation angle of <em>maxDeviation</em>. The vector is normalized. The deviation angle must be larger than zero. <br /></td></tr>
<tr class="separator:a880212a68c42178fbb732ef5135452f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9308e1049c03406eeba89d65590516a7"><td class="memItemLeft" align="right" valign="top"><a id="a9308e1049c03406eeba89d65590516a7"></a>
static <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a9308e1049c03406eeba89d65590516a7">MakeRandomDeviationY</a> (<a class="el" href="../../de/d9e/classez_random.htm">ezRandom</a> &amp;inout_rng, const <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;maxDeviation)</td></tr>
<tr class="memdesc:a9308e1049c03406eeba89d65590516a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a random vector around the y axis with a maximum deviation angle of <em>maxDeviation</em>. The vector is normalized. The deviation angle must be larger than zero. <br /></td></tr>
<tr class="separator:a9308e1049c03406eeba89d65590516a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0d345dcbe0d6b45b2628208bfaac3b3"><td class="memItemLeft" align="right" valign="top"><a id="ae0d345dcbe0d6b45b2628208bfaac3b3"></a>
static <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#ae0d345dcbe0d6b45b2628208bfaac3b3">MakeRandomDeviationZ</a> (<a class="el" href="../../de/d9e/classez_random.htm">ezRandom</a> &amp;inout_rng, const <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;maxDeviation)</td></tr>
<tr class="memdesc:ae0d345dcbe0d6b45b2628208bfaac3b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a random vector around the z axis with a maximum deviation angle of <em>maxDeviation</em>. The vector is normalized. The deviation angle must be larger than zero. <br /></td></tr>
<tr class="separator:ae0d345dcbe0d6b45b2628208bfaac3b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06f4bf47d915a265e017071206df68eb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/df1/classez_vec3_template.htm#a06f4bf47d915a265e017071206df68eb">MakeRandomDeviation</a> (<a class="el" href="../../de/d9e/classez_random.htm">ezRandom</a> &amp;inout_rng, const <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;maxDeviation, const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vNormal)</td></tr>
<tr class="memdesc:a06f4bf47d915a265e017071206df68eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a random vector around the given normal with a maximum deviation.  <a href="../../da/df1/classez_vec3_template.htm#a06f4bf47d915a265e017071206df68eb">More...</a><br /></td></tr>
<tr class="separator:a06f4bf47d915a265e017071206df68eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a25edfeb670ac49f82af578df7848906c"><td class="memItemLeft" align="right" valign="top"><a id="a25edfeb670ac49f82af578df7848906c"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>x</b></td></tr>
<tr class="separator:a25edfeb670ac49f82af578df7848906c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ff21da83ff35514f4243cbc54d0f64d"><td class="memItemLeft" align="right" valign="top"><a id="a7ff21da83ff35514f4243cbc54d0f64d"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>y</b></td></tr>
<tr class="separator:a7ff21da83ff35514f4243cbc54d0f64d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab325b7879df857877bd217f0bc4c5a4"><td class="memItemLeft" align="right" valign="top"><a id="aab325b7879df857877bd217f0bc4c5a4"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>z</b></td></tr>
<tr class="separator:aab325b7879df857877bd217f0bc4c5a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename Type&gt;<br />
class ezVec3Template&lt; Type &gt;</h3>

<p>A 3-component vector class. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a77807aabfdcd88cdba96f5b500fe9522"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77807aabfdcd88cdba96f5b500fe9522">&#9670;&nbsp;</a></span>IsNormalized()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">EZ_FORCE_INLINE bool <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;::IsNormalized </td>
          <td>(</td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>fEpsilon</em> = <code>ezMath::HugeEpsilon&lt;Type&gt;()</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns, whether the squared length of this vector is between 0.999f and 1.001f. </p>
<dl class="section note"><dt>Note</dt><dd>Normalization, especially with SSE is not very precise. So this function checks whether the (squared) length is between a lower and upper limit. </dd></dl>

</div>
</div>
<a id="a4283a7b22b195027731f0a02bbc58611"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4283a7b22b195027731f0a02bbc58611">&#9670;&nbsp;</a></span>MakeOrthogonalTo()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;::MakeOrthogonalTo </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;&#160;</td>
          <td class="paramname"><em>vNormal</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Modifies this direction vector to be orthogonal to the given (normalized) direction vector. The result is NOT normalized. </p>
<dl class="section note"><dt>Note</dt><dd>This function may fail, e.g. create a vector that is zero, if the given normal is parallel to the vector itself. If you need to handle such cases, you should manually check afterwards, whether the result is zero, or cannot be normalized. </dd></dl>

</div>
</div>
<a id="a06f4bf47d915a265e017071206df68eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06f4bf47d915a265e017071206df68eb">&#9670;&nbsp;</a></span>MakeRandomDeviation()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;::MakeRandomDeviation </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../de/d9e/classez_random.htm">ezRandom</a> &amp;&#160;</td>
          <td class="paramname"><em>inout_rng</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../db/d6f/classez_angle.htm">ezAngle</a> &amp;&#160;</td>
          <td class="paramname"><em>maxDeviation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;&#160;</td>
          <td class="paramname"><em>vNormal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a random vector around the given normal with a maximum deviation. </p>
<dl class="section note"><dt>Note</dt><dd>If you are going to do this many times with the same axis, rather than calling this function, instead manually do what this function does (see inline code) and only compute the quaternion once. </dd></dl>

</div>
</div>
<a id="a8009bc202b1f20dc95d4296d063f3ff4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8009bc202b1f20dc95d4296d063f3ff4">&#9670;&nbsp;</a></span>operator*=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">EZ_FORCE_INLINE void <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;::operator*= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplies rhs component-wise to this vector. </p>
<dl class="test"><dt><b><a class="el" href="../../d4/df6/test.htm#_test000028">Test:</a></b></dt><dd>this is new </dd></dl>

</div>
</div>
<a id="acf4fd0903b014af9fc671b4cc47f7853"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf4fd0903b014af9fc671b4cc47f7853">&#9670;&nbsp;</a></span>operator/=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">EZ_FORCE_INLINE void <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;::operator/= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Divides this vector component-wise by rhs. </p>
<dl class="test"><dt><b><a class="el" href="../../d4/df6/test.htm#_test000029">Test:</a></b></dt><dd>this is new </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/<a class="el" href="../../d4/dbc/_engine_2_foundation_2_math_2_declarations_8h_source.htm">Declarations.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/<a class="el" href="../../d3/d42/_vec3_8h_source.htm">Vec3.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/Implementation/<a class="el" href="../../d0/d03/_all_classes_random__inl_8h_source.htm">AllClassesRandom_inl.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/Implementation/<a class="el" href="../../d5/d68/_vec3__inl_8h_source.htm">Vec3_inl.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/Implementation/<a class="el" href="../../db/dba/_vec4__inl_8h_source.htm">Vec4_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a></li>
    <li class="footer">Generated on Tue Nov 7 2023 21:39:29 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
