<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezDynamicOctree Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 23.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('da/d7a/classez_dynamic_octree.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../d5/dcc/classez_dynamic_octree-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezDynamicOctree Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A loose Octree implementation that is very lightweight on RAM.  
 <a href="../../da/d7a/classez_dynamic_octree.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../da/d51/_dynamic_octree_8h_source.htm">DynamicOctree.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a716b1060b425d4a96ede65642b059932"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d7a/classez_dynamic_octree.htm#a716b1060b425d4a96ede65642b059932">CreateTree</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> &amp;vCenter, const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> &amp;vHalfExtents, float fMinNodeSize)</td></tr>
<tr class="memdesc:a716b1060b425d4a96ede65642b059932"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the tree with a fixed size and minimum node dimensions.  <a href="../../da/d7a/classez_dynamic_octree.htm#a716b1060b425d4a96ede65642b059932">More...</a><br /></td></tr>
<tr class="separator:a716b1060b425d4a96ede65642b059932"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a229b4601a526dd21a1c3b13ce8e4086e"><td class="memItemLeft" align="right" valign="top"><a id="a229b4601a526dd21a1c3b13ce8e4086e"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d7a/classez_dynamic_octree.htm#a229b4601a526dd21a1c3b13ce8e4086e">IsEmpty</a> () const</td></tr>
<tr class="memdesc:a229b4601a526dd21a1c3b13ce8e4086e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true when there are no objects stored inside the tree. <br /></td></tr>
<tr class="separator:a229b4601a526dd21a1c3b13ce8e4086e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbcc46d9b3ee6cf78c1d965751cce983"><td class="memItemLeft" align="right" valign="top"><a id="abbcc46d9b3ee6cf78c1d965751cce983"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d7a/classez_dynamic_octree.htm#abbcc46d9b3ee6cf78c1d965751cce983">GetCount</a> () const</td></tr>
<tr class="memdesc:abbcc46d9b3ee6cf78c1d965751cce983"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of objects that have been inserted into the tree. <br /></td></tr>
<tr class="separator:abbcc46d9b3ee6cf78c1d965751cce983"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b7feba3f5f7a07eb41a4df680791da0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d7a/classez_dynamic_octree.htm#a3b7feba3f5f7a07eb41a4df680791da0">InsertObject</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> &amp;vCenter, const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> &amp;vHalfExtents, ezInt32 iObjectType, ezInt32 iObjectInstance, ezDynamicTreeObject *out_pObject=nullptr, bool bOnlyIfInside=false)</td></tr>
<tr class="memdesc:a3b7feba3f5f7a07eb41a4df680791da0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an object at position vCenter with bounding-box dimensions vHalfExtents to the tree. If the object is outside the tree and bOnlyIfInside is true, nothing will be inserted.  <a href="../../da/d7a/classez_dynamic_octree.htm#a3b7feba3f5f7a07eb41a4df680791da0">More...</a><br /></td></tr>
<tr class="separator:a3b7feba3f5f7a07eb41a4df680791da0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e40b19f5fd9bf2f23f724eba6c88783"><td class="memItemLeft" align="right" valign="top"><a id="a6e40b19f5fd9bf2f23f724eba6c88783"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d7a/classez_dynamic_octree.htm#a6e40b19f5fd9bf2f23f724eba6c88783">FindVisibleObjects</a> (const <a class="el" href="../../d0/db8/classez_frustum.htm">ezFrustum</a> &amp;viewfrustum, EZ_VISIBLE_OBJ_CALLBACK callback, void *pPassThrough) const</td></tr>
<tr class="memdesc:a6e40b19f5fd9bf2f23f724eba6c88783"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls the Callback for every object that is inside the View-frustum. pPassThrough is passed to the Callback for custom purposes. <br /></td></tr>
<tr class="separator:a6e40b19f5fd9bf2f23f724eba6c88783"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31c336e486d1c4ac763d47530c886fc3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d7a/classez_dynamic_octree.htm#a31c336e486d1c4ac763d47530c886fc3">FindObjectsInRange</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> &amp;vPoint, EZ_VISIBLE_OBJ_CALLBACK callback, void *pPassThrough=nullptr) const</td></tr>
<tr class="memdesc:a31c336e486d1c4ac763d47530c886fc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns all objects that are located in a node that overlaps with the given point.  <a href="../../da/d7a/classez_dynamic_octree.htm#a31c336e486d1c4ac763d47530c886fc3">More...</a><br /></td></tr>
<tr class="separator:a31c336e486d1c4ac763d47530c886fc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae86d5832d63e3d4fcc249597a9cbaefd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d7a/classez_dynamic_octree.htm#ae86d5832d63e3d4fcc249597a9cbaefd">FindObjectsInRange</a> (const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> &amp;vPoint, float fRadius, EZ_VISIBLE_OBJ_CALLBACK callback, void *pPassThrough=nullptr) const</td></tr>
<tr class="memdesc:ae86d5832d63e3d4fcc249597a9cbaefd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns all objects that are located in a node that overlaps with the rectangle with center vPoint and half edge length fRadius.  <a href="../../da/d7a/classez_dynamic_octree.htm#ae86d5832d63e3d4fcc249597a9cbaefd">More...</a><br /></td></tr>
<tr class="separator:ae86d5832d63e3d4fcc249597a9cbaefd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d4d407e86fe77835c93706da30654b0"><td class="memItemLeft" align="right" valign="top"><a id="a9d4d407e86fe77835c93706da30654b0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d7a/classez_dynamic_octree.htm#a9d4d407e86fe77835c93706da30654b0">RemoveObject</a> (ezInt32 iObjectType, ezInt32 iObjectInstance)</td></tr>
<tr class="memdesc:a9d4d407e86fe77835c93706da30654b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the given Object. Attention: This is an O(n) operation. <br /></td></tr>
<tr class="separator:a9d4d407e86fe77835c93706da30654b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d18bbf1a743ea73ce8a1d7df918dd29"><td class="memItemLeft" align="right" valign="top"><a id="a7d18bbf1a743ea73ce8a1d7df918dd29"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d7a/classez_dynamic_octree.htm#a7d18bbf1a743ea73ce8a1d7df918dd29">RemoveObject</a> (ezDynamicTreeObject obj)</td></tr>
<tr class="memdesc:a7d18bbf1a743ea73ce8a1d7df918dd29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the given Object. This is an O(1) operation. <br /></td></tr>
<tr class="separator:a7d18bbf1a743ea73ce8a1d7df918dd29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87e5fbcb8a1f05697a911a69262a1e61"><td class="memItemLeft" align="right" valign="top"><a id="a87e5fbcb8a1f05697a911a69262a1e61"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d7a/classez_dynamic_octree.htm#a87e5fbcb8a1f05697a911a69262a1e61">RemoveObjectsOfType</a> (ezInt32 iObjectType)</td></tr>
<tr class="memdesc:a87e5fbcb8a1f05697a911a69262a1e61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all Objects of the given Type. This is an O(n) operation. <br /></td></tr>
<tr class="separator:a87e5fbcb8a1f05697a911a69262a1e61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a379da16ceed604925b886e2266cd2560"><td class="memItemLeft" align="right" valign="top"><a id="a379da16ceed604925b886e2266cd2560"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d7a/classez_dynamic_octree.htm#a379da16ceed604925b886e2266cd2560">RemoveAllObjects</a> ()</td></tr>
<tr class="memdesc:a379da16ceed604925b886e2266cd2560"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all Objects, but the tree stays intact. <br /></td></tr>
<tr class="separator:a379da16ceed604925b886e2266cd2560"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab75b2b3178119d9ff226e5db56643e89"><td class="memItemLeft" align="right" valign="top"><a id="ab75b2b3178119d9ff226e5db56643e89"></a>
const <a class="el" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBox</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d7a/classez_dynamic_octree.htm#ab75b2b3178119d9ff226e5db56643e89">GetBoundingBox</a> () const</td></tr>
<tr class="memdesc:ab75b2b3178119d9ff226e5db56643e89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the tree's adjusted (square) AABB. <br /></td></tr>
<tr class="separator:ab75b2b3178119d9ff226e5db56643e89"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A loose Octree implementation that is very lightweight on RAM. </p>
<p>This Octree does not store any bookkeeping information per node.<br  />
Memory usage is linear in the number of objects inserted.<br  />
An empty tree only needs few bytes. This is accomplished by making the tree static in it's dimensions and maximum subdivisions, such that each node can be assigned a unique index. A map is then used to store objects through the node-index in which they are located.<br  />
At traversals each node's bounding-box needs to be computed on-the-fly thus adding some CPU overhead (though, fewer memory use usually also means fewer cache-misses). <br  />
Inserting an object is O(log d), with d being the tree-depth.<br  />
Removing an object is either O(1) or O(n), with n being the number of objects inserted, depending on whether an iterator to the object is available.<br  />
<br  />
The nodes get indices in such a way that when it is detected, that a whole subtree is visible, all objects can be returned quickly, without further traversal.<br  />
If a subtree does not contain any data, traversal is not continued further, either.<br  />
<br  />
In general this octree implementation is made to be very flexible and easily usable for many kinds of problems. All it stores are two integers for an object (GroupID, InstanceID). The object data itself must be stored somewhere else. You can easily store very different types of objects in the same tree.<br  />
Once objects are inserted, you can do range queries to find all objects in some location. Since removal is usually O(1) and insertion is O(d) the tree can be used for very dynamic data that changes frequently at run-time. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a716b1060b425d4a96ede65642b059932"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a716b1060b425d4a96ede65642b059932">&#9670;&nbsp;</a></span>CreateTree()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezDynamicOctree::CreateTree </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> &amp;&#160;</td>
          <td class="paramname"><em>vCenter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> &amp;&#160;</td>
          <td class="paramname"><em>vHalfExtents</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fMinNodeSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the tree with a fixed size and minimum node dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vCenter</td><td>The center position of the tree. </td></tr>
    <tr><td class="paramname">vHalfExtents</td><td>The dimensions along each axis. The tree is always axis aligned. The tree will enclose all space from (vCenter - vHalfExtents) to (vCenter + vHalfExtents). Note that the tree will always use the maximum extent for all three extents, making the tree square, which affects the total number of nodes.<br  />
 However, the original (non-square) bounding box is used to determine whether some objects is inside the tree, at all, which might affect whether they are rejected during tree insertion. </td></tr>
    <tr><td class="paramname">fMinNodeSize</td><td>The length of the cell's edges at the finest level. For a typical game world, where your level might have extents of 100 to 1000 meters, the min node size should not be smaller than 1 meter. The smaller the node size, the more cells the tree has. The limit of nodes in the tree is 2^32. A tree with 100 meters extents in X, Y and Z direction and a min node size of 1 meter, will have 1000000 nodes on the finest level (and roughly 1500000 nodes in total). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a31c336e486d1c4ac763d47530c886fc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31c336e486d1c4ac763d47530c886fc3">&#9670;&nbsp;</a></span>FindObjectsInRange() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezDynamicOctree::FindObjectsInRange </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> &amp;&#160;</td>
          <td class="paramname"><em>vPoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">EZ_VISIBLE_OBJ_CALLBACK&#160;</td>
          <td class="paramname"><em>callback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>pPassThrough</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns all objects that are located in a node that overlaps with the given point. </p>
<dl class="section note"><dt>Note</dt><dd>This function will most likely also return objects that do not overlap with the point itself, because they are located in a node that overlaps with the point. You might need to do more thorough overlap checks to filter those out. </dd></dl>

</div>
</div>
<a id="ae86d5832d63e3d4fcc249597a9cbaefd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae86d5832d63e3d4fcc249597a9cbaefd">&#9670;&nbsp;</a></span>FindObjectsInRange() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezDynamicOctree::FindObjectsInRange </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> &amp;&#160;</td>
          <td class="paramname"><em>vPoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fRadius</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">EZ_VISIBLE_OBJ_CALLBACK&#160;</td>
          <td class="paramname"><em>callback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>pPassThrough</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns all objects that are located in a node that overlaps with the rectangle with center vPoint and half edge length fRadius. </p>
<dl class="section note"><dt>Note</dt><dd>This function will most likely also return objects that do not overlap with the rectangle itself, because they are located in a node that overlaps with the rectangle. You might need to do more thorough overlap checks to filter those out. </dd></dl>

</div>
</div>
<a id="a3b7feba3f5f7a07eb41a4df680791da0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b7feba3f5f7a07eb41a4df680791da0">&#9670;&nbsp;</a></span>InsertObject()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> ezDynamicOctree::InsertObject </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> &amp;&#160;</td>
          <td class="paramname"><em>vCenter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> &amp;&#160;</td>
          <td class="paramname"><em>vHalfExtents</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezInt32&#160;</td>
          <td class="paramname"><em>iObjectType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezInt32&#160;</td>
          <td class="paramname"><em>iObjectInstance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezDynamicTreeObject *&#160;</td>
          <td class="paramname"><em>out_pObject</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bOnlyIfInside</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds an object at position vCenter with bounding-box dimensions vHalfExtents to the tree. If the object is outside the tree and bOnlyIfInside is true, nothing will be inserted. </p>
<p>Returns EZ_SUCCESS when an object is inserted, EZ_FAILURE when the object was rejected. The latter can only happen when bOnlyIfInside is set to true. Through out_Object the exact identifier for the object in the tree is returned, which allows for removing the object with O(1) complexity later. iObjectType and iObjectInstance are the two user values that will be stored for the object. With <a class="el" href="../../da/d7a/classez_dynamic_octree.htm#a87e5fbcb8a1f05697a911a69262a1e61" title="Removes all Objects of the given Type. This is an O(n) operation.">RemoveObjectsOfType()</a> one can also remove all objects with the same iObjectType value, if needed.</p>
<p>The object lies at vCenter and has vHalfExtents as its bounding box. If bOnlyIfInside is false, the object is ALWAYS inserted, even if it is outside the tree. </p><dl class="section note"><dt>Note</dt><dd>In such a case it is inserted at the root-node and thus ALWAYS returned in range/view-frustum queries.</dd></dl>
<p>If bOnlyIfInside is true, the object is discarded, if it is not inside the actual bounding box of the tree. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Utilities/DataStructures/<a class="el" href="../../da/d51/_dynamic_octree_8h_source.htm">DynamicOctree.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Utilities/DataStructures/Implementation/DynamicOctree.cpp</li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../da/d7a/classez_dynamic_octree.htm">ezDynamicOctree</a></li>
    <li class="footer">Generated on Sat Mar 25 2023 19:22:02 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
