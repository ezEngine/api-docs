<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Utilities/PathFinding/Implementation/GraphSearch_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function() { init_codefold(1); });
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('da/d1b/_graph_search__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">GraphSearch_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> PathStateType&gt;</div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../dd/d7b/classez_path_search.htm">ezPathSearch&lt;PathStateType&gt;::ClearPathStates</a>()</div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span>{</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span>  m_PathStates.Clear();</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>  m_StateQueue.Clear();</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span>}</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span> </div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> PathStateType&gt;</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>ezInt64 <a class="code hl_class" href="../../dd/d7b/classez_path_search.htm">ezPathSearch&lt;PathStateType&gt;::FindBestNodeToExpand</a>(PathStateType*&amp; out_pPathState)</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>{</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>  <span class="keywordtype">float</span> fLowestEstimation = ezMath::Infinity&lt;float&gt;();</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>  out_pPathState = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>  ezUInt32 iBestInQueue = 0;</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span> </div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>  <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; m_StateQueue.GetCount(); ++i)</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>  {</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>    <span class="keyword">const</span> ezInt64 iNodeIndex = m_StateQueue[i];</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>    PathStateType* pState = &amp;m_PathStates[iNodeIndex];</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span> </div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>    <span class="keywordflow">if</span> (pState-&gt;m_fEstimatedCostToTarget &lt; fLowestEstimation)</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>    {</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>      fLowestEstimation = pState-&gt;m_fEstimatedCostToTarget;</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>      out_pPathState = pState;</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>      iBestInQueue = i;</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>    }</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>  }</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span> </div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  EZ_ASSERT_DEV(out_pPathState != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Implementation Error&quot;</span>);</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>  <span class="keyword">const</span> ezInt64 iBestNodeIndex = m_StateQueue[iBestInQueue];</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>  m_StateQueue.RemoveAtAndSwap(iBestInQueue);</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>  <span class="keywordflow">return</span> iBestNodeIndex;</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>}</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> PathStateType&gt;</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../dd/d7b/classez_path_search.htm">ezPathSearch&lt;PathStateType&gt;::FillOutPathResult</a>(ezInt64 iEndNodeIndex, <a class="code hl_class" href="../../d9/dfe/classez_deque.htm">ezDeque&lt;PathResultData&gt;</a>&amp; out_Path)</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>{</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  out_Path.<a class="code hl_function" href="../../d7/d68/classez_deque_base.htm#a14e58bf8adcfe4d7c03abd6148a527d4">Clear</a>();</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>  <span class="keywordflow">while</span> (<span class="keyword">true</span>)</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>  {</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>    <span class="keyword">const</span> PathStateType* pCurState = &amp;m_PathStates[iEndNodeIndex];</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>    PathResultData r;</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>    r.m_iNodeIndex = iEndNodeIndex;</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>    r.m_pPathState = pCurState;</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>    out_Path.<a class="code hl_function" href="../../d7/d68/classez_deque_base.htm#a2a7ea83f4ec7e8960ef24ae545e7b904">PushFront</a>(r);</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>    <span class="keywordflow">if</span> (iEndNodeIndex == pCurState-&gt;m_iReachedThroughNode)</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>      <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span> </div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>    iEndNodeIndex = pCurState-&gt;m_iReachedThroughNode;</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  }</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>}</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span> </div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> PathStateType&gt;</div>
<div class="foldopen" id="foldopen00062" data-start="{" data-end="}">
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno"><a class="line" href="../../dd/d7b/classez_path_search.htm#ad8965ae10c4817da08471d0bc7553060">   62</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../dd/d7b/classez_path_search.htm#ad8965ae10c4817da08471d0bc7553060">ezPathSearch&lt;PathStateType&gt;::AddPathNode</a>(ezInt64 iNodeIndex, <span class="keyword">const</span> PathStateType&amp; NewState)</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>{</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  EZ_ASSERT_DEV(NewState.m_fCostToNode &gt; m_CurState.m_fCostToNode,</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>    <span class="stringliteral">&quot;The costs must grow from one node to the next.\nStart Node Costs: {0}\nAdjacent Node Costs: {1}&quot;</span>, <a class="code hl_struct" href="../../d7/dfa/structez_arg_f.htm">ezArgF</a>(m_CurState.m_fCostToNode, 2),</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>    <a class="code hl_struct" href="../../d7/dfa/structez_arg_f.htm">ezArgF</a>(NewState.m_fCostToNode, 2));</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>  <span class="comment">// EZ_ASSERT_DEV(NewState.m_fEstimatedCostToTarget &gt;=  m_CurState.m_fEstimatedCostToTarget, &quot;The estimated path costs cannot go down, the</span></div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  <span class="comment">// heuristic must be &#39;optimistic&#39; regarding to the real costs.\nEstimated Costs from Current: {0}\nEstimated Costs from Adjacent: {1}&quot;,</span></div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>  <span class="comment">// ezArgF(m_pCurPathState-&gt;m_fEstimatedCostToTarget, 2), ezArgF(NewState.m_fEstimatedCostToTarget, 2));</span></div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>  EZ_ASSERT_DEV(NewState.m_fEstimatedCostToTarget &gt;= NewState.m_fCostToNode, <span class="stringliteral">&quot;Unrealistic expectations will get you nowhere.&quot;</span>);</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span> </div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  PathStateType* pExistingState;</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span> </div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>  <span class="keywordflow">if</span> (m_PathStates.TryGetValue(iNodeIndex, pExistingState))</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  {</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>    <span class="comment">// state already exists in the hash table, and has a lower cost -&gt; ignore the new state</span></div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>    <span class="keywordflow">if</span> (pExistingState-&gt;m_fCostToNode &lt;= NewState.m_fCostToNode)</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>      <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span> </div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>    <span class="comment">// incoming state is better than the existing state -&gt; update existing state</span></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>    *pExistingState = NewState;</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>    pExistingState-&gt;m_iReachedThroughNode = m_iCurNodeIndex;</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>  }</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span> </div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  <span class="comment">// the state has not been reached before -&gt; insert it</span></div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  pExistingState = &amp;m_PathStates[iNodeIndex];</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span> </div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>  *pExistingState = NewState;</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  pExistingState-&gt;m_iReachedThroughNode = m_iCurNodeIndex;</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span> </div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>  <span class="comment">// put it into the queue of states that still need to be expanded</span></div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  m_StateQueue.PushBack(iNodeIndex);</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>}</div>
</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span> </div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> PathStateType&gt;</div>
<div class="foldopen" id="foldopen00097" data-start="{" data-end="}">
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno"><a class="line" href="../../dd/d7b/classez_path_search.htm#a5c2d8e4e8512b6b5ce52bb63969a9482">   97</a></span><a class="code hl_struct" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="code hl_function" href="../../dd/d7b/classez_path_search.htm#a5c2d8e4e8512b6b5ce52bb63969a9482">ezPathSearch&lt;PathStateType&gt;::FindPath</a>(ezInt64 iStartNodeIndex, <span class="keyword">const</span> PathStateType&amp; StartState, ezInt64 iTargetNodeIndex,</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>  <a class="code hl_class" href="../../d9/dfe/classez_deque.htm">ezDeque&lt;PathResultData&gt;</a>&amp; out_Path, <span class="keywordtype">float</span> fMaxPathCost <span class="comment">/* = Infinity */</span>)</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>{</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>  EZ_ASSERT_DEV(m_pStateGenerator != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;No Path State Generator is set.&quot;</span>);</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span> </div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  ClearPathStates();</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span> </div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  <span class="keywordflow">if</span> (iStartNodeIndex == iTargetNodeIndex)</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  {</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>    m_PathStates.Reserve(1);</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span> </div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>    m_PathStates[iTargetNodeIndex] = StartState;</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span> </div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>    <a class="code hl_struct" href="../../dd/d48/structez_path_search_1_1_path_result_data.htm">PathResultData</a> r;</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>    r.<a class="code hl_variable" href="../../dd/d48/structez_path_search_1_1_path_result_data.htm#a99edd6521fa1d4e04a3b06702124148b">m_iNodeIndex</a> = iTargetNodeIndex;</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>    r.<a class="code hl_variable" href="../../dd/d48/structez_path_search_1_1_path_result_data.htm#a9d3ab5f77ee3b8da2ff078202a5e2bc2">m_pPathState</a> = &amp;m_PathStates[iTargetNodeIndex];</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span> </div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>    out_Path.<a class="code hl_function" href="../../d7/d68/classez_deque_base.htm#a14e58bf8adcfe4d7c03abd6148a527d4">Clear</a>();</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>    out_Path.<a class="code hl_function" href="../../d7/d68/classez_deque_base.htm#a4b6e09e691f83d699b01e61a927e52d2">PushBack</a>(r);</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span> </div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>    <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>  }</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span> </div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>  m_PathStates.Reserve(10000);</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span> </div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>  PathStateType&amp; FirstState = m_PathStates[iStartNodeIndex];</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span> </div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>  m_pStateGenerator-&gt;StartSearch(iStartNodeIndex, &amp;FirstState, iTargetNodeIndex);</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span> </div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>  <span class="comment">// make sure the first state references itself, as that is a termination criterion</span></div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>  FirstState = StartState;</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>  FirstState.m_iReachedThroughNode = iStartNodeIndex;</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span> </div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  <span class="comment">// put the start state into the to-be-expanded queue</span></div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  m_StateQueue.PushBack(iStartNodeIndex);</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span> </div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>  <span class="comment">// while the queue is not empty, expand the next node and see where that gets us</span></div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>  <span class="keywordflow">while</span> (!m_StateQueue.IsEmpty())</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>  {</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>    PathStateType* pCurState;</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>    m_iCurNodeIndex = FindBestNodeToExpand(pCurState);</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>    <span class="comment">// we have reached the target node, generate the final path result</span></div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>    <span class="keywordflow">if</span> (m_iCurNodeIndex == iTargetNodeIndex)</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>    {</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>      FillOutPathResult(m_iCurNodeIndex, out_Path);</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>      m_pStateGenerator-&gt;SearchFinished(EZ_SUCCESS);</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>      <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>    }</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span> </div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>    <span class="comment">// The heuristic may overestimate how much it takes to reach the destination</span></div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>    <span class="comment">// thus even though the heuristic tells us we may not be able to make it, we cannot rely on that, but need to look at</span></div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>    <span class="comment">// the actual costs</span></div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>    <span class="keywordflow">if</span> (pCurState-&gt;m_fCostToNode &gt;= fMaxPathCost)</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>    {</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>      m_pStateGenerator-&gt;SearchFinished(EZ_FAILURE);</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>      <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>    }</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>    m_CurState = *pCurState;</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span> </div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    <span class="comment">// let the generate append all the nodes that we can reach from here</span></div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>    m_pStateGenerator-&gt;GenerateAdjacentStates(m_iCurNodeIndex, m_CurState, <span class="keyword">this</span>);</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>  }</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span> </div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  m_pStateGenerator-&gt;SearchFinished(EZ_FAILURE);</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>}</div>
</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> PathStateType&gt;</div>
<div class="foldopen" id="foldopen00168" data-start="{" data-end="}">
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno"><a class="line" href="../../dd/d7b/classez_path_search.htm#a9dd131f0eeee5872a41e952c664722e4">  168</a></span><a class="code hl_struct" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="code hl_function" href="../../dd/d7b/classez_path_search.htm#a9dd131f0eeee5872a41e952c664722e4">ezPathSearch&lt;PathStateType&gt;::FindClosest</a>(</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>  ezInt64 iStartNodeIndex, <span class="keyword">const</span> PathStateType&amp; StartState, <a class="code hl_typedef" href="../../dd/d7b/classez_path_search.htm#a2a557772e61174db725bce444032b64d">IsSearchedObjectCallback</a> Callback, <a class="code hl_class" href="../../d9/dfe/classez_deque.htm">ezDeque&lt;PathResultData&gt;</a>&amp; out_Path, <span class="keywordtype">float</span> fMaxPathCost)</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>{</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>  EZ_ASSERT_DEV(m_pStateGenerator != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;No Path State Generator is set.&quot;</span>);</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span> </div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  ClearPathStates();</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span> </div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  m_PathStates.Reserve(10000);</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  PathStateType&amp; FirstState = m_PathStates[iStartNodeIndex];</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span> </div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>  m_pStateGenerator-&gt;StartSearchForClosest(iStartNodeIndex, &amp;FirstState);</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>  <span class="comment">// make sure the first state references itself, as that is a termination criterion</span></div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  FirstState = StartState;</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  FirstState.m_iReachedThroughNode = iStartNodeIndex;</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span> </div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  <span class="comment">// put the start state into the to-be-expanded queue</span></div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  m_StateQueue.PushBack(iStartNodeIndex);</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>  <span class="comment">// while the queue is not empty, expand the next node and see where that gets us</span></div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>  <span class="keywordflow">while</span> (!m_StateQueue.IsEmpty())</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>  {</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>    PathStateType* pCurState;</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>    m_iCurNodeIndex = FindBestNodeToExpand(pCurState);</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>    <span class="comment">// we have reached the target node, generate the final path result</span></div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>    <span class="keywordflow">if</span> (Callback(m_iCurNodeIndex, *pCurState))</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>    {</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>      FillOutPathResult(m_iCurNodeIndex, out_Path);</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>      m_pStateGenerator-&gt;SearchFinished(EZ_SUCCESS);</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>      <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>    }</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span> </div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>    <span class="comment">// The heuristic may overestimate how much it takes to reach the destination</span></div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>    <span class="comment">// thus even though the heuristic tells us we may not be able to make it, we cannot rely on that, but need to look at</span></div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>    <span class="comment">// the actual costs</span></div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>    <span class="keywordflow">if</span> (pCurState-&gt;m_fCostToNode &gt;= fMaxPathCost)</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>    {</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>      m_pStateGenerator-&gt;SearchFinished(EZ_FAILURE);</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>      <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>    }</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span> </div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>    m_CurState = *pCurState;</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span> </div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>    <span class="comment">// let the generate append all the nodes that we can reach from here</span></div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>    m_pStateGenerator-&gt;GenerateAdjacentStates(m_iCurNodeIndex, m_CurState, <span class="keyword">this</span>);</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  }</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span> </div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>  m_pStateGenerator-&gt;SearchFinished(EZ_FAILURE);</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>  <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>}</div>
</div>
<div class="ttc" id="aclassez_deque_base_htm_a14e58bf8adcfe4d7c03abd6148a527d4"><div class="ttname"><a href="../../d7/d68/classez_deque_base.htm#a14e58bf8adcfe4d7c03abd6148a527d4">ezDequeBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Destructs all elements and sets the count to zero. Does not deallocate any data.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:130</div></div>
<div class="ttc" id="aclassez_deque_base_htm_a2a7ea83f4ec7e8960ef24ae545e7b904"><div class="ttname"><a href="../../d7/d68/classez_deque_base.htm#a2a7ea83f4ec7e8960ef24ae545e7b904">ezDequeBase::PushFront</a></div><div class="ttdeci">void PushFront(const T &amp;element)</div><div class="ttdoc">Adds one element to the front of the deque.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:542</div></div>
<div class="ttc" id="aclassez_deque_base_htm_a4b6e09e691f83d699b01e61a927e52d2"><div class="ttname"><a href="../../d7/d68/classez_deque_base.htm#a4b6e09e691f83d699b01e61a927e52d2">ezDequeBase::PushBack</a></div><div class="ttdeci">void PushBack()</div><div class="ttdoc">Adds one default constructed element to the back of the deque.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:489</div></div>
<div class="ttc" id="aclassez_deque_htm"><div class="ttname"><a href="../../d9/dfe/classez_deque.htm">ezDeque</a></div><div class="ttdef"><b>Definition</b> Deque.h:270</div></div>
<div class="ttc" id="aclassez_path_search_htm"><div class="ttname"><a href="../../dd/d7b/classez_path_search.htm">ezPathSearch</a></div><div class="ttdoc">Implements a directed breadth-first search through a graph (A*).</div><div class="ttdef"><b>Definition</b> GraphSearch.h:16</div></div>
<div class="ttc" id="aclassez_path_search_htm_a2a557772e61174db725bce444032b64d"><div class="ttname"><a href="../../dd/d7b/classez_path_search.htm#a2a557772e61174db725bce444032b64d">ezPathSearch::IsSearchedObjectCallback</a></div><div class="ttdeci">bool(*)(ezInt64 iStartNodeIndex, const PathStateType &amp;StartState) IsSearchedObjectCallback</div><div class="ttdoc">Used by FindClosest() to query whether the currently visited node fulfills the termination criteria.</div><div class="ttdef"><b>Definition</b> GraphSearch.h:19</div></div>
<div class="ttc" id="aclassez_path_search_htm_a5c2d8e4e8512b6b5ce52bb63969a9482"><div class="ttname"><a href="../../dd/d7b/classez_path_search.htm#a5c2d8e4e8512b6b5ce52bb63969a9482">ezPathSearch::FindPath</a></div><div class="ttdeci">ezResult FindPath(ezInt64 iStartNodeIndex, const PathStateType &amp;StartState, ezInt64 iTargetNodeIndex, ezDeque&lt; PathResultData &gt; &amp;out_Path, float fMaxPathCost=ezMath::Infinity&lt; float &gt;())</div><div class="ttdoc">Searches for a path that starts at the graph node iStartNodeIndex with the start state StartState and...</div><div class="ttdef"><b>Definition</b> GraphSearch_inl.h:97</div></div>
<div class="ttc" id="aclassez_path_search_htm_a9dd131f0eeee5872a41e952c664722e4"><div class="ttname"><a href="../../dd/d7b/classez_path_search.htm#a9dd131f0eeee5872a41e952c664722e4">ezPathSearch::FindClosest</a></div><div class="ttdeci">ezResult FindClosest(ezInt64 iStartNodeIndex, const PathStateType &amp;StartState, IsSearchedObjectCallback Callback, ezDeque&lt; PathResultData &gt; &amp;out_Path, float fMaxPathCost=ezMath::Infinity&lt; float &gt;())</div><div class="ttdoc">Searches for a path that starts at the graph node iStartNodeIndex with the start state StartState and...</div><div class="ttdef"><b>Definition</b> GraphSearch_inl.h:168</div></div>
<div class="ttc" id="aclassez_path_search_htm_ad8965ae10c4817da08471d0bc7553060"><div class="ttname"><a href="../../dd/d7b/classez_path_search.htm#ad8965ae10c4817da08471d0bc7553060">ezPathSearch::AddPathNode</a></div><div class="ttdeci">void AddPathNode(ezInt64 iNodeIndex, const PathStateType &amp;NewState)</div><div class="ttdoc">Needs to be called by the used ezPathStateGenerator to add nodes to evaluate.</div><div class="ttdef"><b>Definition</b> GraphSearch_inl.h:62</div></div>
<div class="ttc" id="astructez_arg_f_htm"><div class="ttname"><a href="../../d7/dfa/structez_arg_f.htm">ezArgF</a></div><div class="ttdef"><b>Definition</b> FormatStringArgs.h:48</div></div>
<div class="ttc" id="astructez_path_search_1_1_path_result_data_htm"><div class="ttname"><a href="../../dd/d48/structez_path_search_1_1_path_result_data.htm">ezPathSearch::PathResultData</a></div><div class="ttdoc">FindPath() and FindClosest() return an array of these objects as the path result.</div><div class="ttdef"><b>Definition</b> GraphSearch.h:23</div></div>
<div class="ttc" id="astructez_path_search_1_1_path_result_data_htm_a99edd6521fa1d4e04a3b06702124148b"><div class="ttname"><a href="../../dd/d48/structez_path_search_1_1_path_result_data.htm#a99edd6521fa1d4e04a3b06702124148b">ezPathSearch::PathResultData::m_iNodeIndex</a></div><div class="ttdeci">ezInt64 m_iNodeIndex</div><div class="ttdoc">The index of the node that was visited.</div><div class="ttdef"><b>Definition</b> GraphSearch.h:27</div></div>
<div class="ttc" id="astructez_path_search_1_1_path_result_data_htm_a9d3ab5f77ee3b8da2ff078202a5e2bc2"><div class="ttname"><a href="../../dd/d48/structez_path_search_1_1_path_result_data.htm#a9d3ab5f77ee3b8da2ff078202a5e2bc2">ezPathSearch::PathResultData::m_pPathState</a></div><div class="ttdeci">const PathStateType * m_pPathState</div><div class="ttdoc">Pointer to the path state that was active at that step along the path.</div><div class="ttdef"><b>Definition</b> GraphSearch.h:30</div></div>
<div class="ttc" id="astructez_result_htm"><div class="ttname"><a href="../../d4/da9/structez_result.htm">ezResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition</b> Types.h:54</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_313417988e5cb64d4fc37d0cee521906.htm">Utilities</a></li><li class="navelem"><a class="el" href="../../dir_c5862f5eeec03dc993a3fc477e73a5ac.htm">PathFinding</a></li><li class="navelem"><a class="el" href="../../dir_51e9585c898d16558142d6631f89e51f.htm">Implementation</a></li><li class="navelem"><b>GraphSearch_inl.h</b></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:17:56 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
