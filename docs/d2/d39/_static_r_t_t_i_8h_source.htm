<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Reflection/Implementation/StaticRTTI.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function() { init_codefold(1); });
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('d2/d39/_static_r_t_t_i_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">StaticRTTI.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;Foundation/Basics.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;Foundation/Types/Bitflags.h&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;Foundation/Types/VariantType.h&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span> </div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="keyword">class </span><a class="code hl_class" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>;</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="keyword">class </span><a class="code hl_class" href="../../db/d45/classez_reflected_class.htm">ezReflectedClass</a>;</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="keyword">class </span><a class="code hl_class" href="../../de/de6/classez_variant.htm">ezVariant</a>;</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span> </div>
<div class="foldopen" id="foldopen00015" data-start="{" data-end="};">
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno"><a class="line" href="../../da/dee/structez_type_flags.htm">   15</a></span><span class="keyword">struct </span><a class="code hl_struct" href="../../da/dee/structez_type_flags.htm">ezTypeFlags</a></div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>{</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>  <span class="keyword">using </span>StorageType = ezUInt8;</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span> </div>
<div class="foldopen" id="foldopen00019" data-start="{" data-end="};">
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno"><a class="line" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33">   19</a></span>  <span class="keyword">enum</span> <a class="code hl_enumeration" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33">Enum</a></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  {</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno"><a class="line" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33aa2f08a03f98726e7e5ee38a5894437ac">   21</a></span>    <a class="code hl_enumvalue" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33aa2f08a03f98726e7e5ee38a5894437ac">StandardType</a> = EZ_BIT(0), </div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno"><a class="line" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a394ee3cc03fa255f3146e8c82e5292f8">   22</a></span>    <a class="code hl_enumvalue" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a394ee3cc03fa255f3146e8c82e5292f8">IsEnum</a> = EZ_BIT(1),       </div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno"><a class="line" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a749a129f62fd40f63ce89de274b589e0">   23</a></span>    <a class="code hl_enumvalue" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a749a129f62fd40f63ce89de274b589e0">Bitflags</a> = EZ_BIT(2),     </div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno"><a class="line" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a96e67884c92eff2cca3c0052b757de54">   24</a></span>    <a class="code hl_enumvalue" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a96e67884c92eff2cca3c0052b757de54">Class</a> = EZ_BIT(3),        </div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span> </div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno"><a class="line" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33afe9e6cec5d903390db7569484ba0ea2d">   26</a></span>    <a class="code hl_enumvalue" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33afe9e6cec5d903390db7569484ba0ea2d">Abstract</a> = EZ_BIT(4),     </div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno"><a class="line" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a6e0b295a3f5cb8feb4e45979f968c3f4">   27</a></span>    <a class="code hl_enumvalue" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a6e0b295a3f5cb8feb4e45979f968c3f4">Phantom</a> = EZ_BIT(5),      </div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno"><a class="line" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a5917c92d3826452312dcab658f4d768f">   28</a></span>    <a class="code hl_enumvalue" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a5917c92d3826452312dcab658f4d768f">Minimal</a> = EZ_BIT(6),      </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>    Default = 0</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  };</div>
</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span> </div>
<div class="foldopen" id="foldopen00032" data-start="{" data-end="};">
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno"><a class="line" href="../../df/d19/structez_type_flags_1_1_bits.htm">   32</a></span>  <span class="keyword">struct </span><a class="code hl_struct" href="../../df/d19/structez_type_flags_1_1_bits.htm">Bits</a></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>  {</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>    StorageType StandardType : 1;</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>    StorageType IsEnum : 1;</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>    StorageType Bitflags : 1;</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>    StorageType Class : 1;</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>    StorageType Abstract : 1;</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>    StorageType Phantom : 1;</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>  };</div>
</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>};</div>
</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span> </div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>EZ_DECLARE_FLAGS_OPERATORS(<a class="code hl_struct" href="../../da/dee/structez_type_flags.htm">ezTypeFlags</a>)</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span> </div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><span class="comment">// ****************************************************</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span><span class="comment">// ***** Templates for accessing static RTTI data *****</span></div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span> </div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span><span class="keyword">namespace </span>ezInternal</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>{</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00053" data-start="{" data-end="};">
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno"><a class="line" href="../../d4/d93/structez_internal_1_1ez_static_r_t_t_i.htm">   53</a></span>  <span class="keyword">struct </span><a class="code hl_struct" href="../../d4/d93/structez_internal_1_1ez_static_r_t_t_i.htm">ezStaticRTTI</a></div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  {</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>  };</div>
</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span> </div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>  <span class="comment">// Special implementation for types that have no base</span></div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  <span class="keyword">template</span> &lt;&gt;</div>
<div class="foldopen" id="foldopen00059" data-start="{" data-end="};">
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno"><a class="line" href="../../da/dca/structez_internal_1_1ez_static_r_t_t_i_3_01ez_no_base_01_4.htm">   59</a></span>  <span class="keyword">struct </span><a class="code hl_struct" href="../../d4/d93/structez_internal_1_1ez_static_r_t_t_i.htm">ezStaticRTTI</a>&lt;<a class="code hl_class" href="../../d4/d02/classez_no_base.htm">ezNoBase</a>&gt;</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>  {</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>    <span class="keyword">static</span> <span class="keyword">const</span> <a class="code hl_class" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* GetRTTI() { <span class="keywordflow">return</span> <span class="keyword">nullptr</span>; }</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>  };</div>
</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span> </div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  <span class="comment">// Special implementation for void to make function reflection compile void return values without further specialization.</span></div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  <span class="keyword">template</span> &lt;&gt;</div>
<div class="foldopen" id="foldopen00066" data-start="{" data-end="};">
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno"><a class="line" href="../../db/d0c/structez_internal_1_1ez_static_r_t_t_i_3_01void_01_4.htm">   66</a></span>  <span class="keyword">struct </span><a class="code hl_struct" href="../../d4/d93/structez_internal_1_1ez_static_r_t_t_i.htm">ezStaticRTTI</a>&lt;void&gt;</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>  {</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>    <span class="keyword">static</span> <span class="keyword">const</span> <a class="code hl_class" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* GetRTTI() { <span class="keywordflow">return</span> <span class="keyword">nullptr</span>; }</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>  };</div>
</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span> </div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  EZ_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* GetStaticRTTI(<a class="code hl_struct" href="../../d6/d09/structez_trait_int.htm">ezTraitInt&lt;1&gt;</a>) <span class="comment">// class derived from ezReflectedClass</span></div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  {</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>    <span class="keywordflow">return</span> T::GetStaticRTTI();</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  }</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span> </div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  EZ_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* GetStaticRTTI(<a class="code hl_struct" href="../../d6/d09/structez_trait_int.htm">ezTraitInt&lt;0&gt;</a>) <span class="comment">// static rtti</span></div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>  {</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>    <span class="comment">// Since this is pure C++ and no preprocessor macro, calling it with types such as &#39;int&#39; and &#39;ezInt32&#39; will</span></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>    <span class="comment">// actually return the same RTTI object, which would not be possible with a purely macro based solution</span></div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span> </div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>    <span class="keywordflow">return</span> ezStaticRTTI&lt;T&gt;::GetRTTI();</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>  }</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span> </div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  <a class="code hl_struct" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ezTypeFlags&gt;</a> DetermineTypeFlags()</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>  {</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>    <a class="code hl_struct" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ezTypeFlags&gt;</a> flags;</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>    <a class="code hl_enumeration" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">ezVariantType::Enum</a> type =</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>      <span class="keyword">static_cast&lt;</span><a class="code hl_enumeration" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">ezVariantType::Enum</a><span class="keyword">&gt;</span>(<a class="code hl_struct" href="../../df/da8/structez_variant_type_deduction.htm">ezVariantTypeDeduction&lt;typename ezTypeTraits&lt;Type&gt;::NonConstReferenceType</a>&gt;::value);</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>    <span class="keywordflow">if</span> ((type &gt;= <a class="code hl_enumvalue" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299ac4af591f48624b00a42223fa8ecb2c97">ezVariantType::FirstStandardType</a> &amp;&amp; type &lt;= ezVariantType::LastStandardType) || EZ_IS_SAME_TYPE(<a class="code hl_class" href="../../de/de6/classez_variant.htm">ezVariant</a>, Type))</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>      flags.<a class="code hl_function" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<a class="code hl_enumvalue" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33aa2f08a03f98726e7e5ee38a5894437ac">ezTypeFlags::StandardType</a>);</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>      flags.<a class="code hl_function" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<a class="code hl_enumvalue" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a96e67884c92eff2cca3c0052b757de54">ezTypeFlags::Class</a>);</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span> </div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>    <span class="keywordflow">if</span> (std::is_abstract&lt;Type&gt;::value)</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>      flags.<a class="code hl_function" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<a class="code hl_enumvalue" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33afe9e6cec5d903390db7569484ba0ea2d">ezTypeFlags::Abstract</a>);</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    <span class="keywordflow">return</span> flags;</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>  }</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span> </div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>  <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  EZ_ALWAYS_INLINE <a class="code hl_struct" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ezTypeFlags&gt;</a> DetermineTypeFlags&lt;ezVariant&gt;()</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  {</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>    <span class="keywordflow">return</span> <a class="code hl_enumvalue" href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33aa2f08a03f98726e7e5ee38a5894437ac">ezTypeFlags::StandardType</a>;</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>  }</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span> </div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00110" data-start="{" data-end="};">
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno"><a class="line" href="../../d1/d87/structez_internal_1_1ez_static_r_t_t_i_wrapper.htm">  110</a></span>  <span class="keyword">struct </span><a class="code hl_struct" href="../../d1/d87/structez_internal_1_1ez_static_r_t_t_i_wrapper.htm">ezStaticRTTIWrapper</a></div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>  {</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>    <span class="keyword">static_assert</span>(<span class="keyword">sizeof</span>(T) == 0, <span class="stringliteral">&quot;Type has not been declared as reflectable (use EZ_DECLARE_REFLECTABLE_TYPE macro)&quot;</span>);</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>  };</div>
</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>} <span class="comment">// namespace ezInternal</span></div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span> </div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>EZ_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* ezGetStaticRTTI()</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>{</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>  <span class="keywordflow">return</span> ezInternal::GetStaticRTTI&lt;T&gt;(<a class="code hl_struct" href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a>&lt;EZ_IS_DERIVED_FROM_STATIC(<a class="code hl_class" href="../../db/d45/classez_reflected_class.htm">ezReflectedClass</a>, T)&gt;());</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>}</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span> </div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span><span class="comment">// **************************************************</span></div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span><span class="comment">// ***** Macros for declaring types reflectable *****</span></div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span> </div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span><span class="preprocessor">#define EZ_NO_LINKAGE</span></div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span> </div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span><span class="preprocessor">#define EZ_DECLARE_REFLECTABLE_TYPE(Linkage, TYPE)                    \</span></div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span><span class="preprocessor">  namespace ezInternal                                                \</span></div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span><span class="preprocessor">  {                                                                   \</span></div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span><span class="preprocessor">    template &lt;&gt;                                                       \</span></div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span><span class="preprocessor">    struct Linkage ezStaticRTTIWrapper&lt;TYPE&gt;                          \</span></div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span><span class="preprocessor">    {                                                                 \</span></div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span><span class="preprocessor">      static ezRTTI s_RTTI;                                           \</span></div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span><span class="preprocessor">    };                                                                \</span></div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span><span class="preprocessor">                                                                      \</span></div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span><span class="preprocessor">    </span><span class="comment">/* This specialization calls the function to get the RTTI data */</span><span class="preprocessor"> \</span></div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span><span class="preprocessor">    </span><span class="comment">/* This code might get duplicated in different DLLs, but all   */</span><span class="preprocessor"> \</span></div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span><span class="preprocessor">    </span><span class="comment">/* will call the same function, so the RTTI object is unique   */</span><span class="preprocessor"> \</span></div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span><span class="preprocessor">    template &lt;&gt;                                                       \</span></div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span><span class="preprocessor">    struct ezStaticRTTI&lt;TYPE&gt;                                         \</span></div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span><span class="preprocessor">    {                                                                 \</span></div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span><span class="preprocessor">      EZ_ALWAYS_INLINE static const ezRTTI* GetRTTI()                 \</span></div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span><span class="preprocessor">      {                                                               \</span></div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span><span class="preprocessor">        return &amp;ezStaticRTTIWrapper&lt;TYPE&gt;::s_RTTI;                    \</span></div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span><span class="preprocessor">      }                                                               \</span></div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span><span class="preprocessor">    };                                                                \</span></div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span><span class="preprocessor">  }</span></div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span> </div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span><span class="preprocessor">#define EZ_ALLOW_PRIVATE_PROPERTIES(SELF) friend ezRTTI GetRTTI(SELF*)</span></div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span> </div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span><span class="comment">// internal helper macro</span></div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span><span class="preprocessor">#define EZ_RTTIINFO_DECL(Type, BaseType, Version) \</span></div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span><span class="preprocessor">                                                  \</span></div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span><span class="preprocessor">  ezStringView GetTypeName(Type*)                 \</span></div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span><span class="preprocessor">  {                                               \</span></div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span><span class="preprocessor">    return #Type;                                 \</span></div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span><span class="preprocessor">  }                                               \</span></div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span><span class="preprocessor">  ezUInt32 GetTypeVersion(Type*)                  \</span></div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span><span class="preprocessor">  {                                               \</span></div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span><span class="preprocessor">    return Version;                               \</span></div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span><span class="preprocessor">  }                                               \</span></div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span><span class="preprocessor">                                                  \</span></div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span><span class="preprocessor">  ezRTTI GetRTTI(Type*);</span></div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span> </div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span><span class="comment">// internal helper macro</span></div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span><span class="preprocessor">#define EZ_RTTIINFO_GETRTTI_IMPL_BEGIN(Type, BaseType, AllocatorType)              \</span></div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span><span class="preprocessor">  ezRTTI GetRTTI(Type*)                                                            \</span></div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span><span class="preprocessor">  {                                                                                \</span></div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span><span class="preprocessor">    using OwnType = Type;                                                          \</span></div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span><span class="preprocessor">    using OwnBaseType = BaseType;                                                  \</span></div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span><span class="preprocessor">    static AllocatorType Allocator;                                                \</span></div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span><span class="preprocessor">    static ezBitflags&lt;ezTypeFlags&gt; flags = ezInternal::DetermineTypeFlags&lt;Type&gt;(); \</span></div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span><span class="preprocessor">    static ezArrayPtr&lt;const ezAbstractProperty*&gt; Properties;                       \</span></div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span><span class="preprocessor">    static ezArrayPtr&lt;const ezAbstractFunctionProperty*&gt; Functions;                \</span></div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span><span class="preprocessor">    static ezArrayPtr&lt;const ezPropertyAttribute*&gt; Attributes;                      \</span></div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span><span class="preprocessor">    static ezArrayPtr&lt;ezAbstractMessageHandler*&gt; MessageHandlers;                  \</span></div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span><span class="preprocessor">    static ezArrayPtr&lt;ezMessageSenderInfo&gt; MessageSenders;</span></div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span> </div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span><span class="preprocessor">#define EZ_BEGIN_STATIC_REFLECTED_TYPE(Type, BaseType, Version, AllocatorType) \</span></div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span><span class="preprocessor">  EZ_RTTIINFO_DECL(Type, BaseType, Version)                                    \</span></div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span><span class="preprocessor">  ezRTTI ezInternal::ezStaticRTTIWrapper&lt;Type&gt;::s_RTTI = GetRTTI((Type*)0);    \</span></div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span><span class="preprocessor">  EZ_RTTIINFO_GETRTTI_IMPL_BEGIN(Type, BaseType, AllocatorType)</span></div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span> </div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span> </div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span><span class="preprocessor">#define EZ_END_STATIC_REFLECTED_TYPE                                                                                                         \</span></div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span><span class="preprocessor">  ;                                                                                                                                          \</span></div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span><span class="preprocessor">  return ezRTTI(GetTypeName((OwnType*)0), ezGetStaticRTTI&lt;OwnBaseType&gt;(), sizeof(OwnType), GetTypeVersion((OwnType*)0),                      \</span></div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span><span class="preprocessor">    ezVariantTypeDeduction&lt;OwnType&gt;::value, flags, &amp;Allocator, Properties, Functions, Attributes, MessageHandlers, MessageSenders, nullptr); \</span></div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span><span class="preprocessor">  }</span></div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span> </div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span> </div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span><span class="preprocessor">#define EZ_BEGIN_PROPERTIES static const ezAbstractProperty* PropertyList[] =</span></div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span> </div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span> </div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span> </div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span><span class="preprocessor">#define EZ_END_PROPERTIES \</span></div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span><span class="preprocessor">  ;                       \</span></div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span><span class="preprocessor">  Properties = PropertyList</span></div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span> </div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span><span class="preprocessor">#define EZ_BEGIN_FUNCTIONS static const ezAbstractFunctionProperty* FunctionList[] =</span></div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span> </div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span> </div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span> </div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span><span class="preprocessor">#define EZ_END_FUNCTIONS \</span></div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span><span class="preprocessor">  ;                      \</span></div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span><span class="preprocessor">  Functions = FunctionList</span></div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span> </div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span><span class="preprocessor">#define EZ_BEGIN_ATTRIBUTES static const ezPropertyAttribute* AttributeList[] =</span></div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span> </div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span> </div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span> </div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span><span class="preprocessor">#define EZ_END_ATTRIBUTES \</span></div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span><span class="preprocessor">  ;                       \</span></div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span><span class="preprocessor">  Attributes = AttributeList</span></div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span> </div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span><span class="preprocessor">#define EZ_FUNCTION_PROPERTY(Function) (new ezFunctionProperty&lt;decltype(&amp;OwnType::Function)&gt;(EZ_PP_STRINGIFY(Function), &amp;OwnType::Function))</span></div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span> </div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span><span class="preprocessor">#define EZ_FUNCTION_PROPERTY_EX(PropertyName, Function) (new ezFunctionProperty&lt;decltype(&amp;Function)&gt;(PropertyName, &amp;Function))</span></div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span> </div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span><span class="preprocessor">#define _EZ_SCRIPT_FUNCTION_PARAM(type, name) ezScriptableFunctionAttribute::ArgType::type, name</span></div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span> </div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span><span class="preprocessor">#define EZ_SCRIPT_FUNCTION_PROPERTY(Function, ...) \</span></div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span><span class="preprocessor">  EZ_FUNCTION_PROPERTY(Function)-&gt;AddAttributes(new ezScriptableFunctionAttribute(EZ_EXPAND_ARGS_PAIR_COMMA(_EZ_SCRIPT_FUNCTION_PARAM, ##__VA_ARGS__)))</span></div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span> </div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span><span class="preprocessor">#define EZ_CONSTRUCTOR_PROPERTY(...) (new ezConstructorFunctionProperty&lt;OwnType, ##__VA_ARGS__&gt;())</span></div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span> </div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span> </div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span><span class="comment">// [internal] Helper macro to get the return type of a getter function.</span></div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span><span class="preprocessor">#define EZ_GETTER_TYPE(Class, GetterFunc) decltype(std::declval&lt;Class&gt;().GetterFunc())</span></div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span> </div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span><span class="preprocessor">#define EZ_ACCESSOR_PROPERTY(PropertyName, Getter, Setter) \</span></div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span><span class="preprocessor">  (new ezAccessorProperty&lt;OwnType, EZ_GETTER_TYPE(OwnType, OwnType::Getter)&gt;(PropertyName, &amp;OwnType::Getter, &amp;OwnType::Setter))</span></div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span> </div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span><span class="preprocessor">#define EZ_ACCESSOR_PROPERTY_READ_ONLY(PropertyName, Getter) \</span></div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span><span class="preprocessor">  (new ezAccessorProperty&lt;OwnType, EZ_GETTER_TYPE(OwnType, OwnType::Getter)&gt;(PropertyName, &amp;OwnType::Getter, nullptr))</span></div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span> </div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span><span class="comment">// [internal] Helper macro to get the return type of a array getter function.</span></div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span><span class="preprocessor">#define EZ_ARRAY_GETTER_TYPE(Class, GetterFunc) decltype(std::declval&lt;Class&gt;().GetterFunc(0))</span></div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span> </div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span><span class="preprocessor">#define EZ_ARRAY_ACCESSOR_PROPERTY(PropertyName, GetCount, Getter, Setter, Insert, Remove) \</span></div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span><span class="preprocessor">  (new ezAccessorArrayProperty&lt;OwnType, EZ_ARRAY_GETTER_TYPE(OwnType, OwnType::Getter)&gt;(   \</span></div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span><span class="preprocessor">    PropertyName, &amp;OwnType::GetCount, &amp;OwnType::Getter, &amp;OwnType::Setter, &amp;OwnType::Insert, &amp;OwnType::Remove))</span></div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span> </div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span><span class="preprocessor">#define EZ_ARRAY_ACCESSOR_PROPERTY_READ_ONLY(PropertyName, GetCount, Getter)             \</span></div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span><span class="preprocessor">  (new ezAccessorArrayProperty&lt;OwnType, EZ_ARRAY_GETTER_TYPE(OwnType, OwnType::Getter)&gt;( \</span></div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span><span class="preprocessor">    PropertyName, &amp;OwnType::GetCount, &amp;OwnType::Getter, nullptr, nullptr, nullptr))</span></div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span> </div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span><span class="preprocessor">#define EZ_SET_CONTAINER_TYPE(Class, GetterFunc) decltype(std::declval&lt;Class&gt;().GetterFunc())</span></div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span> </div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span><span class="preprocessor">#define EZ_SET_CONTAINER_SUB_TYPE(Class, GetterFunc) \</span></div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span><span class="preprocessor">  ezContainerSubTypeResolver&lt;ezTypeTraits&lt;decltype(std::declval&lt;Class&gt;().GetterFunc())&gt;::NonConstReferenceType&gt;::Type</span></div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span> </div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span><span class="preprocessor">#define EZ_SET_ACCESSOR_PROPERTY(PropertyName, GetValues, Insert, Remove)                                            \</span></div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span><span class="preprocessor">  (new ezAccessorSetProperty&lt;OwnType, ezFunctionParameterTypeResolver&lt;0, decltype(&amp;OwnType::Insert)&gt;::ParameterType, \</span></div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span><span class="preprocessor">    EZ_SET_CONTAINER_TYPE(OwnType, GetValues)&gt;(PropertyName, &amp;OwnType::GetValues, &amp;OwnType::Insert, &amp;OwnType::Remove))</span></div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span> </div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span><span class="preprocessor">#define EZ_SET_ACCESSOR_PROPERTY_READ_ONLY(PropertyName, GetValues)                                                              \</span></div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span><span class="preprocessor">  (new ezAccessorSetProperty&lt;OwnType, EZ_SET_CONTAINER_SUB_TYPE(OwnType, GetValues), EZ_SET_CONTAINER_TYPE(OwnType, GetValues)&gt;( \</span></div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span><span class="preprocessor">    PropertyName, &amp;OwnType::GetValues, nullptr, nullptr))</span></div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span> </div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span><span class="preprocessor">#define EZ_MAP_WRITE_ACCESSOR_PROPERTY(PropertyName, GetContainer, Insert, Remove)                                        \</span></div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span><span class="preprocessor">  (new ezWriteAccessorMapProperty&lt;OwnType, ezFunctionParameterTypeResolver&lt;1, decltype(&amp;OwnType::Insert)&gt;::ParameterType, \</span></div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span><span class="preprocessor">    EZ_SET_CONTAINER_TYPE(OwnType, GetContainer)&gt;(PropertyName, &amp;OwnType::GetContainer, &amp;OwnType::Insert, &amp;OwnType::Remove))</span></div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span> </div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span><span class="preprocessor">#define EZ_MAP_ACCESSOR_PROPERTY(PropertyName, GetKeyRange, GetValue, Insert, Remove)                                \</span></div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span><span class="preprocessor">  (new ezAccessorMapProperty&lt;OwnType, ezFunctionParameterTypeResolver&lt;1, decltype(&amp;OwnType::Insert)&gt;::ParameterType, \</span></div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span><span class="preprocessor">    EZ_SET_CONTAINER_TYPE(OwnType, GetKeyRange)&gt;(PropertyName, &amp;OwnType::GetKeyRange, &amp;OwnType::GetValue, &amp;OwnType::Insert, &amp;OwnType::Remove))</span></div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno">  400</span> </div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span><span class="preprocessor">#define EZ_MAP_ACCESSOR_PROPERTY_READ_ONLY(PropertyName, GetKeyRange, GetValue)                                           \</span></div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span><span class="preprocessor">  (new ezAccessorMapProperty&lt;OwnType,                                                                                     \</span></div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span><span class="preprocessor">    ezTypeTraits&lt;ezFunctionParameterTypeResolver&lt;1, decltype(&amp;OwnType::GetValue)&gt;::ParameterType&gt;::NonConstReferenceType, \</span></div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span><span class="preprocessor">    EZ_SET_CONTAINER_TYPE(OwnType, GetKeyRange)&gt;(PropertyName, &amp;OwnType::GetKeyRange, &amp;OwnType::GetValue, nullptr, nullptr))</span></div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span> </div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span> </div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span> </div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span><span class="preprocessor">#define EZ_ENUM_ACCESSOR_PROPERTY(PropertyName, EnumType, Getter, Setter) \</span></div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span><span class="preprocessor">  (new ezEnumAccessorProperty&lt;OwnType, EnumType, EZ_GETTER_TYPE(OwnType, OwnType::Getter)&gt;(PropertyName, &amp;OwnType::Getter, &amp;OwnType::Setter))</span></div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span> </div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span><span class="preprocessor">#define EZ_ENUM_ACCESSOR_PROPERTY_READ_ONLY(PropertyName, EnumType, Getter) \</span></div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span><span class="preprocessor">  (new ezEnumAccessorProperty&lt;OwnType, EnumType, EZ_GETTER_TYPE(OwnType, OwnType::Getter)&gt;(PropertyName, &amp;OwnType::Getter, nullptr))</span></div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span> </div>
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno">  427</span><span class="preprocessor">#define EZ_BITFLAGS_ACCESSOR_PROPERTY(PropertyName, BitflagsType, Getter, Setter) \</span></div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span><span class="preprocessor">  (new ezBitflagsAccessorProperty&lt;OwnType, BitflagsType, EZ_GETTER_TYPE(OwnType, OwnType::Getter)&gt;(PropertyName, &amp;OwnType::Getter, &amp;OwnType::Setter))</span></div>
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno">  429</span> </div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span><span class="preprocessor">#define EZ_BITFLAGS_ACCESSOR_PROPERTY_READ_ONLY(PropertyName, BitflagsType, Getter) \</span></div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span><span class="preprocessor">  (new ezBitflagsAccessorProperty&lt;OwnType, BitflagsType, EZ_GETTER_TYPE(OwnType, OwnType::Getter)&gt;(PropertyName, &amp;OwnType::Getter, nullptr))</span></div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span> </div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span> </div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span><span class="comment">// [internal] Helper macro to get the type of a class member.</span></div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span><span class="preprocessor">#define EZ_MEMBER_TYPE(Class, Member) decltype(std::declval&lt;Class&gt;().Member)</span></div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span> </div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span><span class="preprocessor">#define EZ_MEMBER_CONTAINER_SUB_TYPE(Class, Member) \</span></div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span><span class="preprocessor">  ezContainerSubTypeResolver&lt;ezTypeTraits&lt;decltype(std::declval&lt;Class&gt;().Member)&gt;::NonConstReferenceType&gt;::Type</span></div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span> </div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span><span class="preprocessor">#define EZ_MEMBER_PROPERTY(PropertyName, MemberName)                                                   \</span></div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span><span class="preprocessor">  (new ezMemberProperty&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName)&gt;(PropertyName,                    \</span></div>
<div class="line"><a id="l00453" name="l00453"></a><span class="lineno">  453</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetValue, \</span></div>
<div class="line"><a id="l00454" name="l00454"></a><span class="lineno">  454</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::SetValue, \</span></div>
<div class="line"><a id="l00455" name="l00455"></a><span class="lineno">  455</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetPropertyPointer))</span></div>
<div class="line"><a id="l00456" name="l00456"></a><span class="lineno">  456</span> </div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span><span class="preprocessor">#define EZ_MEMBER_PROPERTY_READ_ONLY(PropertyName, MemberName)                                                  \</span></div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span><span class="preprocessor">  (new ezMemberProperty&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName)&gt;(PropertyName,                             \</span></div>
<div class="line"><a id="l00460" name="l00460"></a><span class="lineno">  460</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetValue, nullptr, \</span></div>
<div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetPropertyPointer))</span></div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span> </div>
<div class="line"><a id="l00464" name="l00464"></a><span class="lineno">  464</span><span class="preprocessor">#define EZ_ARRAY_MEMBER_PROPERTY(PropertyName, MemberName)                                                                                  \</span></div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno">  465</span><span class="preprocessor">  (new ezMemberArrayProperty&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), EZ_MEMBER_CONTAINER_SUB_TYPE(OwnType, MemberName)&gt;(PropertyName, \</span></div>
<div class="line"><a id="l00466" name="l00466"></a><span class="lineno">  466</span><span class="preprocessor">    &amp;ezArrayPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetConstContainer,                        \</span></div>
<div class="line"><a id="l00467" name="l00467"></a><span class="lineno">  467</span><span class="preprocessor">    &amp;ezArrayPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetContainer))</span></div>
<div class="line"><a id="l00468" name="l00468"></a><span class="lineno">  468</span> </div>
<div class="line"><a id="l00470" name="l00470"></a><span class="lineno">  470</span><span class="preprocessor">#define EZ_ARRAY_MEMBER_PROPERTY_READ_ONLY(PropertyName, MemberName)                                                                   \</span></div>
<div class="line"><a id="l00471" name="l00471"></a><span class="lineno">  471</span><span class="preprocessor">  (new ezMemberArrayReadOnlyProperty&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), EZ_MEMBER_CONTAINER_SUB_TYPE(OwnType, MemberName)&gt;( \</span></div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span><span class="preprocessor">    PropertyName, &amp;ezArrayPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetConstContainer))</span></div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span> </div>
<div class="line"><a id="l00475" name="l00475"></a><span class="lineno">  475</span><span class="preprocessor">#define EZ_SET_MEMBER_PROPERTY(PropertyName, MemberName)                                                                                  \</span></div>
<div class="line"><a id="l00476" name="l00476"></a><span class="lineno">  476</span><span class="preprocessor">  (new ezMemberSetProperty&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), EZ_MEMBER_CONTAINER_SUB_TYPE(OwnType, MemberName)&gt;(PropertyName, \</span></div>
<div class="line"><a id="l00477" name="l00477"></a><span class="lineno">  477</span><span class="preprocessor">    &amp;ezSetPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetConstContainer,                        \</span></div>
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno">  478</span><span class="preprocessor">    &amp;ezSetPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetContainer))</span></div>
<div class="line"><a id="l00479" name="l00479"></a><span class="lineno">  479</span> </div>
<div class="line"><a id="l00481" name="l00481"></a><span class="lineno">  481</span><span class="preprocessor">#define EZ_SET_MEMBER_PROPERTY_READ_ONLY(PropertyName, MemberName)                                                           \</span></div>
<div class="line"><a id="l00482" name="l00482"></a><span class="lineno">  482</span><span class="preprocessor">  (new ezMemberSetProperty&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), EZ_MEMBER_CONTAINER_SUB_TYPE(OwnType, MemberName)&gt;( \</span></div>
<div class="line"><a id="l00483" name="l00483"></a><span class="lineno">  483</span><span class="preprocessor">    PropertyName, &amp;ezSetPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetConstContainer, nullptr))</span></div>
<div class="line"><a id="l00484" name="l00484"></a><span class="lineno">  484</span> </div>
<div class="line"><a id="l00486" name="l00486"></a><span class="lineno">  486</span><span class="preprocessor">#define EZ_MAP_MEMBER_PROPERTY(PropertyName, MemberName)                                                                                  \</span></div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno">  487</span><span class="preprocessor">  (new ezMemberMapProperty&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), EZ_MEMBER_CONTAINER_SUB_TYPE(OwnType, MemberName)&gt;(PropertyName, \</span></div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span><span class="preprocessor">    &amp;ezMapPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetConstContainer,                        \</span></div>
<div class="line"><a id="l00489" name="l00489"></a><span class="lineno">  489</span><span class="preprocessor">    &amp;ezMapPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetContainer))</span></div>
<div class="line"><a id="l00490" name="l00490"></a><span class="lineno">  490</span> </div>
<div class="line"><a id="l00492" name="l00492"></a><span class="lineno">  492</span><span class="preprocessor">#define EZ_MAP_MEMBER_PROPERTY_READ_ONLY(PropertyName, MemberName)                                                           \</span></div>
<div class="line"><a id="l00493" name="l00493"></a><span class="lineno">  493</span><span class="preprocessor">  (new ezMemberMapProperty&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), EZ_MEMBER_CONTAINER_SUB_TYPE(OwnType, MemberName)&gt;( \</span></div>
<div class="line"><a id="l00494" name="l00494"></a><span class="lineno">  494</span><span class="preprocessor">    PropertyName, &amp;ezMapPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetConstContainer, nullptr))</span></div>
<div class="line"><a id="l00495" name="l00495"></a><span class="lineno">  495</span> </div>
<div class="line"><a id="l00508" name="l00508"></a><span class="lineno">  508</span><span class="preprocessor">#define EZ_ENUM_MEMBER_PROPERTY(PropertyName, EnumType, MemberName)                                    \</span></div>
<div class="line"><a id="l00509" name="l00509"></a><span class="lineno">  509</span><span class="preprocessor">  (new ezEnumMemberProperty&lt;OwnType, EnumType, EZ_MEMBER_TYPE(OwnType, MemberName)&gt;(PropertyName,      \</span></div>
<div class="line"><a id="l00510" name="l00510"></a><span class="lineno">  510</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetValue, \</span></div>
<div class="line"><a id="l00511" name="l00511"></a><span class="lineno">  511</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::SetValue, \</span></div>
<div class="line"><a id="l00512" name="l00512"></a><span class="lineno">  512</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetPropertyPointer))</span></div>
<div class="line"><a id="l00513" name="l00513"></a><span class="lineno">  513</span> </div>
<div class="line"><a id="l00515" name="l00515"></a><span class="lineno">  515</span><span class="preprocessor">#define EZ_ENUM_MEMBER_PROPERTY_READ_ONLY(PropertyName, EnumType, MemberName)                                   \</span></div>
<div class="line"><a id="l00516" name="l00516"></a><span class="lineno">  516</span><span class="preprocessor">  (new ezEnumMemberProperty&lt;OwnType, EnumType, EZ_MEMBER_TYPE(OwnType, MemberName)&gt;(PropertyName,               \</span></div>
<div class="line"><a id="l00517" name="l00517"></a><span class="lineno">  517</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetValue, nullptr, \</span></div>
<div class="line"><a id="l00518" name="l00518"></a><span class="lineno">  518</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetPropertyPointer))</span></div>
<div class="line"><a id="l00519" name="l00519"></a><span class="lineno">  519</span> </div>
<div class="line"><a id="l00521" name="l00521"></a><span class="lineno">  521</span><span class="preprocessor">#define EZ_BITFLAGS_MEMBER_PROPERTY(PropertyName, BitflagsType, MemberName)                               \</span></div>
<div class="line"><a id="l00522" name="l00522"></a><span class="lineno">  522</span><span class="preprocessor">  (new ezBitflagsMemberProperty&lt;OwnType, BitflagsType, EZ_MEMBER_TYPE(OwnType, MemberName)&gt;(PropertyName, \</span></div>
<div class="line"><a id="l00523" name="l00523"></a><span class="lineno">  523</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetValue,    \</span></div>
<div class="line"><a id="l00524" name="l00524"></a><span class="lineno">  524</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::SetValue,    \</span></div>
<div class="line"><a id="l00525" name="l00525"></a><span class="lineno">  525</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetPropertyPointer))</span></div>
<div class="line"><a id="l00526" name="l00526"></a><span class="lineno">  526</span> </div>
<div class="line"><a id="l00528" name="l00528"></a><span class="lineno">  528</span><span class="preprocessor">#define EZ_BITFLAGS_MEMBER_PROPERTY_READ_ONLY(PropertyName, BitflagsType, MemberName)                           \</span></div>
<div class="line"><a id="l00529" name="l00529"></a><span class="lineno">  529</span><span class="preprocessor">  (new ezBitflagsMemberProperty&lt;OwnType, BitflagsType, EZ_MEMBER_TYPE(OwnType, MemberName)&gt;(PropertyName,       \</span></div>
<div class="line"><a id="l00530" name="l00530"></a><span class="lineno">  530</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetValue, nullptr, \</span></div>
<div class="line"><a id="l00531" name="l00531"></a><span class="lineno">  531</span><span class="preprocessor">    &amp;ezPropertyAccessor&lt;OwnType, EZ_MEMBER_TYPE(OwnType, MemberName), &amp;OwnType::MemberName&gt;::GetPropertyPointer))</span></div>
<div class="line"><a id="l00532" name="l00532"></a><span class="lineno">  532</span> </div>
<div class="line"><a id="l00533" name="l00533"></a><span class="lineno">  533</span> </div>
<div class="line"><a id="l00534" name="l00534"></a><span class="lineno">  534</span> </div>
<div class="line"><a id="l00541" name="l00541"></a><span class="lineno">  541</span><span class="preprocessor">#define EZ_CONSTANT_PROPERTY(PropertyName, Value) (new ezConstantProperty&lt;decltype(Value)&gt;(PropertyName, Value))</span></div>
<div class="line"><a id="l00542" name="l00542"></a><span class="lineno">  542</span> </div>
<div class="line"><a id="l00543" name="l00543"></a><span class="lineno">  543</span> </div>
<div class="line"><a id="l00544" name="l00544"></a><span class="lineno">  544</span> </div>
<div class="line"><a id="l00545" name="l00545"></a><span class="lineno">  545</span><span class="comment">// [internal] Helper macro</span></div>
<div class="line"><a id="l00546" name="l00546"></a><span class="lineno">  546</span><span class="preprocessor">#define EZ_ENUM_VALUE_TO_CONSTANT_PROPERTY(name) EZ_CONSTANT_PROPERTY(EZ_PP_STRINGIFY(name), (Storage)name),</span></div>
<div class="line"><a id="l00547" name="l00547"></a><span class="lineno">  547</span> </div>
<div class="line"><a id="l00550" name="l00550"></a><span class="lineno">  550</span><span class="preprocessor">#define EZ_ENUM_CONSTANTS(...) EZ_EXPAND_ARGS(EZ_ENUM_VALUE_TO_CONSTANT_PROPERTY, ##__VA_ARGS__)</span></div>
<div class="line"><a id="l00551" name="l00551"></a><span class="lineno">  551</span> </div>
<div class="line"><a id="l00554" name="l00554"></a><span class="lineno">  554</span><span class="preprocessor">#define EZ_ENUM_CONSTANT(Value) EZ_CONSTANT_PROPERTY(EZ_PP_STRINGIFY(Value), (Storage)Value)</span></div>
<div class="line"><a id="l00555" name="l00555"></a><span class="lineno">  555</span> </div>
<div class="line"><a id="l00558" name="l00558"></a><span class="lineno">  558</span><span class="preprocessor">#define EZ_BITFLAGS_CONSTANTS(...) EZ_EXPAND_ARGS(EZ_ENUM_VALUE_TO_CONSTANT_PROPERTY, ##__VA_ARGS__)</span></div>
<div class="line"><a id="l00559" name="l00559"></a><span class="lineno">  559</span> </div>
<div class="line"><a id="l00562" name="l00562"></a><span class="lineno">  562</span><span class="preprocessor">#define EZ_BITFLAGS_CONSTANT(Value) EZ_CONSTANT_PROPERTY(EZ_PP_STRINGIFY(Value), (Storage)Value)</span></div>
<div class="line"><a id="l00563" name="l00563"></a><span class="lineno">  563</span> </div>
<div class="line"><a id="l00564" name="l00564"></a><span class="lineno">  564</span> </div>
<div class="line"><a id="l00565" name="l00565"></a><span class="lineno">  565</span> </div>
<div class="line"><a id="l00572" name="l00572"></a><span class="lineno">  572</span><span class="preprocessor">#define EZ_BEGIN_STATIC_REFLECTED_ENUM(Type, Version)                          \</span></div>
<div class="line"><a id="l00573" name="l00573"></a><span class="lineno">  573</span><span class="preprocessor">  EZ_BEGIN_STATIC_REFLECTED_TYPE(Type, ezEnumBase, Version, ezRTTINoAllocator) \</span></div>
<div class="line"><a id="l00574" name="l00574"></a><span class="lineno">  574</span><span class="preprocessor">    ;                                                                          \</span></div>
<div class="line"><a id="l00575" name="l00575"></a><span class="lineno">  575</span><span class="preprocessor">    using Storage = Type::StorageType;                                         \</span></div>
<div class="line"><a id="l00576" name="l00576"></a><span class="lineno">  576</span><span class="preprocessor">    EZ_BEGIN_PROPERTIES                                                        \</span></div>
<div class="line"><a id="l00577" name="l00577"></a><span class="lineno">  577</span><span class="preprocessor">      {                                                                        \</span></div>
<div class="line"><a id="l00578" name="l00578"></a><span class="lineno">  578</span><span class="preprocessor">        EZ_CONSTANT_PROPERTY(EZ_PP_STRINGIFY(Type::Default), (Storage)Type::Default),</span></div>
<div class="line"><a id="l00579" name="l00579"></a><span class="lineno">  579</span> </div>
<div class="line"><a id="l00580" name="l00580"></a><span class="lineno">  580</span><span class="preprocessor">#define EZ_END_STATIC_REFLECTED_ENUM \</span></div>
<div class="line"><a id="l00581" name="l00581"></a><span class="lineno">  581</span><span class="preprocessor">  }                                  \</span></div>
<div class="line"><a id="l00582" name="l00582"></a><span class="lineno">  582</span><span class="preprocessor">  EZ_END_PROPERTIES                  \</span></div>
<div class="line"><a id="l00583" name="l00583"></a><span class="lineno">  583</span><span class="preprocessor">  ;                                  \</span></div>
<div class="line"><a id="l00584" name="l00584"></a><span class="lineno">  584</span><span class="preprocessor">  flags |= ezTypeFlags::IsEnum;      \</span></div>
<div class="line"><a id="l00585" name="l00585"></a><span class="lineno">  585</span><span class="preprocessor">  flags.Remove(ezTypeFlags::Class);  \</span></div>
<div class="line"><a id="l00586" name="l00586"></a><span class="lineno">  586</span><span class="preprocessor">  EZ_END_STATIC_REFLECTED_TYPE</span></div>
<div class="line"><a id="l00587" name="l00587"></a><span class="lineno">  587</span> </div>
<div class="line"><a id="l00588" name="l00588"></a><span class="lineno">  588</span> </div>
<div class="line"><a id="l00595" name="l00595"></a><span class="lineno">  595</span><span class="preprocessor">#define EZ_BEGIN_STATIC_REFLECTED_BITFLAGS(Type, Version)                          \</span></div>
<div class="line"><a id="l00596" name="l00596"></a><span class="lineno">  596</span><span class="preprocessor">  EZ_BEGIN_STATIC_REFLECTED_TYPE(Type, ezBitflagsBase, Version, ezRTTINoAllocator) \</span></div>
<div class="line"><a id="l00597" name="l00597"></a><span class="lineno">  597</span><span class="preprocessor">    ;                                                                              \</span></div>
<div class="line"><a id="l00598" name="l00598"></a><span class="lineno">  598</span><span class="preprocessor">    using Storage = Type::StorageType;                                             \</span></div>
<div class="line"><a id="l00599" name="l00599"></a><span class="lineno">  599</span><span class="preprocessor">    EZ_BEGIN_PROPERTIES                                                            \</span></div>
<div class="line"><a id="l00600" name="l00600"></a><span class="lineno">  600</span><span class="preprocessor">      {                                                                            \</span></div>
<div class="line"><a id="l00601" name="l00601"></a><span class="lineno">  601</span><span class="preprocessor">        EZ_CONSTANT_PROPERTY(EZ_PP_STRINGIFY(Type::Default), (Storage)Type::Default),</span></div>
<div class="line"><a id="l00602" name="l00602"></a><span class="lineno">  602</span> </div>
<div class="line"><a id="l00603" name="l00603"></a><span class="lineno">  603</span><span class="preprocessor">#define EZ_END_STATIC_REFLECTED_BITFLAGS \</span></div>
<div class="line"><a id="l00604" name="l00604"></a><span class="lineno">  604</span><span class="preprocessor">  }                                      \</span></div>
<div class="line"><a id="l00605" name="l00605"></a><span class="lineno">  605</span><span class="preprocessor">  EZ_END_PROPERTIES                      \</span></div>
<div class="line"><a id="l00606" name="l00606"></a><span class="lineno">  606</span><span class="preprocessor">  ;                                      \</span></div>
<div class="line"><a id="l00607" name="l00607"></a><span class="lineno">  607</span><span class="preprocessor">  flags |= ezTypeFlags::Bitflags;        \</span></div>
<div class="line"><a id="l00608" name="l00608"></a><span class="lineno">  608</span><span class="preprocessor">  flags.Remove(ezTypeFlags::Class);      \</span></div>
<div class="line"><a id="l00609" name="l00609"></a><span class="lineno">  609</span><span class="preprocessor">  EZ_END_STATIC_REFLECTED_TYPE</span></div>
<div class="line"><a id="l00610" name="l00610"></a><span class="lineno">  610</span> </div>
<div class="line"><a id="l00611" name="l00611"></a><span class="lineno">  611</span> </div>
<div class="line"><a id="l00612" name="l00612"></a><span class="lineno">  612</span> </div>
<div class="line"><a id="l00615" name="l00615"></a><span class="lineno">  615</span><span class="preprocessor">#define EZ_BEGIN_MESSAGEHANDLERS static ezAbstractMessageHandler* HandlerList[] =</span></div>
<div class="line"><a id="l00616" name="l00616"></a><span class="lineno">  616</span> </div>
<div class="line"><a id="l00617" name="l00617"></a><span class="lineno">  617</span> </div>
<div class="line"><a id="l00619" name="l00619"></a><span class="lineno">  619</span><span class="preprocessor">#define EZ_END_MESSAGEHANDLERS \</span></div>
<div class="line"><a id="l00620" name="l00620"></a><span class="lineno">  620</span><span class="preprocessor">  ;                            \</span></div>
<div class="line"><a id="l00621" name="l00621"></a><span class="lineno">  621</span><span class="preprocessor">  MessageHandlers = HandlerList</span></div>
<div class="line"><a id="l00622" name="l00622"></a><span class="lineno">  622</span> </div>
<div class="line"><a id="l00623" name="l00623"></a><span class="lineno">  623</span> </div>
<div class="line"><a id="l00632" name="l00632"></a><span class="lineno">  632</span><span class="preprocessor">#define EZ_MESSAGE_HANDLER(MessageType, FunctionName)                                                                                   \</span></div>
<div class="line"><a id="l00633" name="l00633"></a><span class="lineno">  633</span><span class="preprocessor">  new ezInternal::MessageHandler&lt;EZ_IS_CONST_MESSAGE_HANDLER(OwnType, MessageType, &amp;OwnType::FunctionName)&gt;::Impl&lt;OwnType, MessageType, \</span></div>
<div class="line"><a id="l00634" name="l00634"></a><span class="lineno">  634</span><span class="preprocessor">    &amp;OwnType::FunctionName&gt;()</span></div>
<div class="line"><a id="l00635" name="l00635"></a><span class="lineno">  635</span> </div>
<div class="line"><a id="l00636" name="l00636"></a><span class="lineno">  636</span> </div>
<div class="line"><a id="l00639" name="l00639"></a><span class="lineno">  639</span><span class="preprocessor">#define EZ_BEGIN_MESSAGESENDERS static ezMessageSenderInfo SenderList[] =</span></div>
<div class="line"><a id="l00640" name="l00640"></a><span class="lineno">  640</span> </div>
<div class="line"><a id="l00641" name="l00641"></a><span class="lineno">  641</span> </div>
<div class="line"><a id="l00643" name="l00643"></a><span class="lineno">  643</span><span class="preprocessor">#define EZ_END_MESSAGESENDERS \</span></div>
<div class="line"><a id="l00644" name="l00644"></a><span class="lineno">  644</span><span class="preprocessor">  ;                           \</span></div>
<div class="line"><a id="l00645" name="l00645"></a><span class="lineno">  645</span><span class="preprocessor">  MessageSenders = SenderList;</span></div>
<div class="line"><a id="l00646" name="l00646"></a><span class="lineno">  646</span> </div>
<div class="line"><a id="l00653" name="l00653"></a><span class="lineno">  653</span><span class="preprocessor">#define EZ_MESSAGE_SENDER(MemberName)                                                \</span></div>
<div class="line"><a id="l00654" name="l00654"></a><span class="lineno">  654</span><span class="preprocessor">  {                                                                                  \</span></div>
<div class="line"><a id="l00655" name="l00655"></a><span class="lineno">  655</span><span class="preprocessor">    #MemberName, ezGetStaticRTTI&lt;EZ_MEMBER_TYPE(OwnType, MemberName)::MessageType&gt;() \</span></div>
<div class="line"><a id="l00656" name="l00656"></a><span class="lineno">  656</span><span class="preprocessor">  }</span></div>
<div class="ttc" id="aclassez_no_base_htm"><div class="ttname"><a href="../../d4/d02/classez_no_base.htm">ezNoBase</a></div><div class="ttdoc">Dummy type to pass to templates and macros that expect a base type for a class that has no base.</div><div class="ttdef"><b>Definition</b> Types.h:133</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a></div><div class="ttdoc">This class holds information about reflected types. Each instance represents one type that is known t...</div><div class="ttdef"><b>Definition</b> RTTI.h:30</div></div>
<div class="ttc" id="aclassez_reflected_class_htm"><div class="ttname"><a href="../../db/d45/classez_reflected_class.htm">ezReflectedClass</a></div><div class="ttdoc">All classes that should be dynamically reflectable, need to be derived from this base class.</div><div class="ttdef"><b>Definition</b> DynamicRTTI.h:86</div></div>
<div class="ttc" id="aclassez_variant_htm"><div class="ttname"><a href="../../de/de6/classez_variant.htm">ezVariant</a></div><div class="ttdoc">ezVariant is a class that can store different types of variables, which is useful in situations where...</div><div class="ttdef"><b>Definition</b> Variant.h:44</div></div>
<div class="ttc" id="astructez_bitflags_htm"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm">ezBitflags</a></div><div class="ttdoc">The ezBitflags class allows you to work with type-safe bitflags.</div><div class="ttdef"><b>Definition</b> Bitflags.h:82</div></div>
<div class="ttc" id="astructez_bitflags_htm_aaa83c1e77b70d0b549604a64c20f8a83"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">ezBitflags::Add</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void Add(const ezBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Sets the given flag.</div><div class="ttdef"><b>Definition</b> Bitflags.h:151</div></div>
<div class="ttc" id="astructez_internal_1_1ez_static_r_t_t_i_htm"><div class="ttname"><a href="../../d4/d93/structez_internal_1_1ez_static_r_t_t_i.htm">ezInternal::ezStaticRTTI</a></div><div class="ttdoc">[internal] Helper struct for accessing static RTTI data.</div><div class="ttdef"><b>Definition</b> StaticRTTI.h:54</div></div>
<div class="ttc" id="astructez_internal_1_1ez_static_r_t_t_i_wrapper_htm"><div class="ttname"><a href="../../d1/d87/structez_internal_1_1ez_static_r_t_t_i_wrapper.htm">ezInternal::ezStaticRTTIWrapper</a></div><div class="ttdef"><b>Definition</b> StaticRTTI.h:111</div></div>
<div class="ttc" id="astructez_trait_int_htm"><div class="ttname"><a href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a></div><div class="ttdoc">Type traits.</div><div class="ttdef"><b>Definition</b> TypeTraits.h:12</div></div>
<div class="ttc" id="astructez_type_flags_1_1_bits_htm"><div class="ttname"><a href="../../df/d19/structez_type_flags_1_1_bits.htm">ezTypeFlags::Bits</a></div><div class="ttdef"><b>Definition</b> StaticRTTI.h:33</div></div>
<div class="ttc" id="astructez_type_flags_htm"><div class="ttname"><a href="../../da/dee/structez_type_flags.htm">ezTypeFlags</a></div><div class="ttdoc">Flags that describe a reflected type.</div><div class="ttdef"><b>Definition</b> StaticRTTI.h:16</div></div>
<div class="ttc" id="astructez_type_flags_htm_a6fa1b2e10da3e7c3cc8eda5935e7cd33"><div class="ttname"><a href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33">ezTypeFlags::Enum</a></div><div class="ttdeci">Enum</div><div class="ttdef"><b>Definition</b> StaticRTTI.h:20</div></div>
<div class="ttc" id="astructez_type_flags_htm_a6fa1b2e10da3e7c3cc8eda5935e7cd33a394ee3cc03fa255f3146e8c82e5292f8"><div class="ttname"><a href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a394ee3cc03fa255f3146e8c82e5292f8">ezTypeFlags::IsEnum</a></div><div class="ttdeci">@ IsEnum</div><div class="ttdoc">enum struct used for ezEnum.</div><div class="ttdef"><b>Definition</b> StaticRTTI.h:22</div></div>
<div class="ttc" id="astructez_type_flags_htm_a6fa1b2e10da3e7c3cc8eda5935e7cd33a5917c92d3826452312dcab658f4d768f"><div class="ttname"><a href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a5917c92d3826452312dcab658f4d768f">ezTypeFlags::Minimal</a></div><div class="ttdeci">@ Minimal</div><div class="ttdoc">Does not contain any property, function or attribute information. Used only for versioning.</div><div class="ttdef"><b>Definition</b> StaticRTTI.h:28</div></div>
<div class="ttc" id="astructez_type_flags_htm_a6fa1b2e10da3e7c3cc8eda5935e7cd33a6e0b295a3f5cb8feb4e45979f968c3f4"><div class="ttname"><a href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a6e0b295a3f5cb8feb4e45979f968c3f4">ezTypeFlags::Phantom</a></div><div class="ttdeci">@ Phantom</div><div class="ttdoc">De-serialized type information that cannot be created on this process.</div><div class="ttdef"><b>Definition</b> StaticRTTI.h:27</div></div>
<div class="ttc" id="astructez_type_flags_htm_a6fa1b2e10da3e7c3cc8eda5935e7cd33a749a129f62fd40f63ce89de274b589e0"><div class="ttname"><a href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a749a129f62fd40f63ce89de274b589e0">ezTypeFlags::Bitflags</a></div><div class="ttdeci">@ Bitflags</div><div class="ttdoc">bitflags struct used for ezBitflags.</div><div class="ttdef"><b>Definition</b> StaticRTTI.h:23</div></div>
<div class="ttc" id="astructez_type_flags_htm_a6fa1b2e10da3e7c3cc8eda5935e7cd33a96e67884c92eff2cca3c0052b757de54"><div class="ttname"><a href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33a96e67884c92eff2cca3c0052b757de54">ezTypeFlags::Class</a></div><div class="ttdeci">@ Class</div><div class="ttdoc">A class or struct. The above flags are mutually exclusive.</div><div class="ttdef"><b>Definition</b> StaticRTTI.h:24</div></div>
<div class="ttc" id="astructez_type_flags_htm_a6fa1b2e10da3e7c3cc8eda5935e7cd33aa2f08a03f98726e7e5ee38a5894437ac"><div class="ttname"><a href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33aa2f08a03f98726e7e5ee38a5894437ac">ezTypeFlags::StandardType</a></div><div class="ttdeci">@ StandardType</div><div class="ttdoc">Anything that can be stored inside an ezVariant except for pointers and containers.</div><div class="ttdef"><b>Definition</b> StaticRTTI.h:21</div></div>
<div class="ttc" id="astructez_type_flags_htm_a6fa1b2e10da3e7c3cc8eda5935e7cd33afe9e6cec5d903390db7569484ba0ea2d"><div class="ttname"><a href="../../da/dee/structez_type_flags.htm#a6fa1b2e10da3e7c3cc8eda5935e7cd33afe9e6cec5d903390db7569484ba0ea2d">ezTypeFlags::Abstract</a></div><div class="ttdeci">@ Abstract</div><div class="ttdoc">Type is abstract.</div><div class="ttdef"><b>Definition</b> StaticRTTI.h:26</div></div>
<div class="ttc" id="astructez_variant_type_deduction_htm"><div class="ttname"><a href="../../df/da8/structez_variant_type_deduction.htm">ezVariantTypeDeduction</a></div><div class="ttdoc">A helper struct to convert the C++ type, which is passed as the template argument,...</div><div class="ttdef"><b>Definition</b> VariantType.h:97</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">ezVariantType::Enum</a></div><div class="ttdeci">Enum</div><div class="ttdoc">This enum describes the type of data that is currently stored inside the variant. Note that changes t...</div><div class="ttdef"><b>Definition</b> VariantType.h:26</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299ac4af591f48624b00a42223fa8ecb2c97"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299ac4af591f48624b00a42223fa8ecb2c97">ezVariantType::FirstStandardType</a></div><div class="ttdeci">@ FirstStandardType</div><div class="ttdoc">*** Types that are flagged as 'StandardTypes' (see DetermineTypeFlags) ***</div><div class="ttdef"><b>Definition</b> VariantType.h:30</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_217b90e143c3d27cf4319fb9e916f4ad.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_4d499b0494fc84c22e280b98d7f4832b.htm">Implementation</a></li><li class="navelem"><b>StaticRTTI.h</b></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:17:52 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
