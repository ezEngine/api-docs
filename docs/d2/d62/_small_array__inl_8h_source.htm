<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Containers/Implementation/SmallArray_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d2/d62/_small_array__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">SmallArray_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160; </div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;::ezSmallArrayBase</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;::ezSmallArrayBase</a>(<span class="keyword">const</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; other, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;{</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;  CopyFrom((<a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const T&gt;</a>)other, pAllocator);</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  m_uiUserData = other.m_uiUserData;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;}</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;::ezSmallArrayBase</a>(<span class="keyword">const</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const T&gt;</a>&amp; other, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  CopyFrom(other, pAllocator);</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;}</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;::ezSmallArrayBase</a>(<a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp;&amp; other, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  MoveFrom(std::move(other), pAllocator);</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;}</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;EZ_FORCE_INLINE <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;::~ezSmallArrayBase</a>()</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  EZ_ASSERT_DEBUG(m_uiCount == 0, <span class="stringliteral">&quot;The derived class did not destruct all objects. Count is {0}.&quot;</span>, m_uiCount);</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  EZ_ASSERT_DEBUG(m_pElements == <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The derived class did not free its memory.&quot;</span>);</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a97de18ad1c8ffa22da8c77907f10341b">   32</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a97de18ad1c8ffa22da8c77907f10341b">ezSmallArrayBase&lt;T, Size&gt;::CopyFrom</a>(<span class="keyword">const</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const T&gt;</a>&amp; other, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  EZ_ASSERT_DEV(other.<a class="code" href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">GetCount</a>() &lt;= ezSmallInvalidIndex, <span class="stringliteral">&quot;Can&#39;t copy {} elements to small array. Maximum count is {}&quot;</span>, other.<a class="code" href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">GetCount</a>(), ezSmallInvalidIndex);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keywordflow">if</span> (GetData() == other.<a class="code" href="../../dc/dae/classez_array_ptr.htm#aba4e7585190f337c6428f2fe25828b8a">GetPtr</a>())</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  {</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">if</span> (m_uiCount == other.<a class="code" href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">GetCount</a>())</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    EZ_ASSERT_DEV(m_uiCount &gt; other.<a class="code" href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">GetCount</a>(), <span class="stringliteral">&quot;Dangling array pointer. The given array pointer points to invalid memory.&quot;</span>);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    T* pElements = GetElementsPtr();</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#add65b87c39dade4ee7b0671c16b10a39">ezMemoryUtils::Destruct</a>(pElements + other.<a class="code" href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">GetCount</a>(), m_uiCount - other.<a class="code" href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">GetCount</a>());</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    m_uiCount = <span class="keyword">static_cast&lt;</span>ezUInt16<span class="keyword">&gt;</span>(other.<a class="code" href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">GetCount</a>());</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  }</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keyword">const</span> ezUInt32 uiOldCount = m_uiCount;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keyword">const</span> ezUInt32 uiNewCount = other.<a class="code" href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">GetCount</a>();</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keywordflow">if</span> (uiNewCount &gt; uiOldCount)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    Reserve(<span class="keyword">static_cast&lt;</span>ezUInt16<span class="keyword">&gt;</span>(uiNewCount), pAllocator);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    T* pElements = GetElementsPtr();</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a87c41811a95fa63da651f6779931d9cf">ezMemoryUtils::Copy</a>(pElements, other.<a class="code" href="../../dc/dae/classez_array_ptr.htm#aba4e7585190f337c6428f2fe25828b8a">GetPtr</a>(), uiOldCount);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a4c12c5af647ec366b7a99b15cca9386b">ezMemoryUtils::CopyConstructArray</a>(pElements + uiOldCount, other.<a class="code" href="../../dc/dae/classez_array_ptr.htm#aba4e7585190f337c6428f2fe25828b8a">GetPtr</a>() + uiOldCount, uiNewCount - uiOldCount);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  }</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    T* pElements = GetElementsPtr();</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a87c41811a95fa63da651f6779931d9cf">ezMemoryUtils::Copy</a>(pElements, other.<a class="code" href="../../dc/dae/classez_array_ptr.htm#aba4e7585190f337c6428f2fe25828b8a">GetPtr</a>(), uiNewCount);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#add65b87c39dade4ee7b0671c16b10a39">ezMemoryUtils::Destruct</a>(pElements + uiNewCount, uiOldCount - uiNewCount);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  m_uiCount = <span class="keyword">static_cast&lt;</span>ezUInt16<span class="keyword">&gt;</span>(uiNewCount);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a8fccbb4e33c365fc8bdab7d9490cd9df">   69</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a8fccbb4e33c365fc8bdab7d9490cd9df">ezSmallArrayBase&lt;T, Size&gt;::MoveFrom</a>(<a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp;&amp; other, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  Clear();</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keywordflow">if</span> (other.m_uiCapacity &gt; Size)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">if</span> (m_uiCapacity &gt; Size)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      <span class="comment">// only delete our own external storage</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      EZ_DELETE_RAW_BUFFER(pAllocator, m_pElements);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    m_uiCapacity = other.m_uiCapacity;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    m_pElements = other.m_pElements;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ae016ea37ee5fc0eb1d922d02f042746c">ezMemoryUtils::RelocateConstruct</a>(GetElementsPtr(), other.GetElementsPtr(), other.m_uiCount);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  m_uiCount = other.m_uiCount;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  m_uiUserData = other.m_uiUserData;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="comment">// reset the other array to not reference the data anymore</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  other.m_pElements = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  other.m_uiCount = 0;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  other.m_uiCapacity = 0;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;}</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a12865f08993693bf08cce4b0416cdbbd">   99</a></span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;::operator</a> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const T&gt;</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const T&gt;</a>(GetElementsPtr(), m_uiCount);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#ab7f6ca08967eb1145a8d5f19e2223270">  105</a></span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;::operator</a> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;T&gt;</a>()</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;T&gt;</a>(GetElementsPtr(), m_uiCount);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a0f88c6f77d9dfac59323e44c08eac677">  111</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a0f88c6f77d9dfac59323e44c08eac677">ezSmallArrayBase&lt;T, Size&gt;::operator==</a>(<span class="keyword">const</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  <span class="keywordflow">return</span> *<span class="keyword">this</span> == rhs.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#a258eaf177ae66072d013917c8f439b2d">GetArrayPtr</a>();</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a0f88c6f77d9dfac59323e44c08eac677">ezSmallArrayBase&lt;T, Size&gt;::operator==</a>(<span class="keyword">const</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const T&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="keywordflow">if</span> (m_uiCount != rhs.<a class="code" href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">GetCount</a>())</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a744d60b4b000c61f2dd3819a12410595">ezMemoryUtils::IsEqual</a>(GetElementsPtr(), rhs.<a class="code" href="../../dc/dae/classez_array_ptr.htm#aba4e7585190f337c6428f2fe25828b8a">GetPtr</a>(), m_uiCount);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#af6e2c133e77abd3aeb8ae5d9f9458356">  126</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#af6e2c133e77abd3aeb8ae5d9f9458356">ezSmallArrayBase&lt;T, Size&gt;::operator!=</a>(<span class="keyword">const</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == rhs);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#af6e2c133e77abd3aeb8ae5d9f9458356">ezSmallArrayBase&lt;T, Size&gt;::operator!=</a>(<span class="keyword">const</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const T&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == rhs);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a89b21be2199a007c03c93e590ac7b033">  138</a></span>&#160;EZ_ALWAYS_INLINE <span class="keyword">const</span> T&amp; <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a89b21be2199a007c03c93e590ac7b033">ezSmallArrayBase&lt;T, Size&gt;::operator[]</a>(<span class="keyword">const</span> ezUInt32 uiIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  EZ_ASSERT_DEBUG(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;Out of bounds access. Array has {0} elements, trying to access element at index {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="keywordflow">return</span> GetElementsPtr()[uiIndex];</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#af2d36c4e256ca155d9c5bc9c32d43405">  145</a></span>&#160;EZ_ALWAYS_INLINE T&amp; <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a89b21be2199a007c03c93e590ac7b033">ezSmallArrayBase&lt;T, Size&gt;::operator[]</a>(<span class="keyword">const</span> ezUInt32 uiIndex)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  EZ_ASSERT_DEBUG(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;Out of bounds access. Array has {0} elements, trying to access element at index {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  <span class="keywordflow">return</span> GetElementsPtr()[uiIndex];</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a4d71f8618557dcc52d63b7001f263966">  152</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a4d71f8618557dcc52d63b7001f263966">ezSmallArrayBase&lt;T, Size&gt;::SetCount</a>(ezUInt16 uiCount, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  <span class="keyword">const</span> ezUInt32 uiOldCount = m_uiCount;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keyword">const</span> ezUInt32 uiNewCount = uiCount;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <span class="keywordflow">if</span> (uiNewCount &gt; uiOldCount)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    Reserve(<span class="keyword">static_cast&lt;</span>ezUInt16<span class="keyword">&gt;</span>(uiNewCount), pAllocator);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a16800fa3189279c4ce38798052d913cd">ezMemoryUtils::DefaultConstruct</a>(GetElementsPtr() + uiOldCount, uiNewCount - uiOldCount);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (uiNewCount &lt; uiOldCount)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#add65b87c39dade4ee7b0671c16b10a39">ezMemoryUtils::Destruct</a>(GetElementsPtr() + uiNewCount, uiOldCount - uiNewCount);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  m_uiCount = uiCount;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#adbbefe255e1ff026e979718c4bba8f07">  171</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a4d71f8618557dcc52d63b7001f263966">ezSmallArrayBase&lt;T, Size&gt;::SetCount</a>(ezUInt16 uiCount, <span class="keyword">const</span> T&amp; fillValue, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;{</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  <span class="keyword">const</span> ezUInt32 uiOldCount = m_uiCount;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <span class="keyword">const</span> ezUInt32 uiNewCount = uiCount;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keywordflow">if</span> (uiNewCount &gt; uiOldCount)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    Reserve(uiCount, pAllocator);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9a615b84872b968b7f8523c6f7b0a25b">ezMemoryUtils::CopyConstruct</a>(GetElementsPtr() + uiOldCount, fillValue, uiNewCount - uiOldCount);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (uiNewCount &lt; uiOldCount)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#add65b87c39dade4ee7b0671c16b10a39">ezMemoryUtils::Destruct</a>(GetElementsPtr() + uiNewCount, uiOldCount - uiNewCount);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  m_uiCount = uiCount;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a90abaa8230bacd395e9927b685d385f5">  190</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a90abaa8230bacd395e9927b685d385f5">ezSmallArrayBase&lt;T, Size&gt;::EnsureCount</a>(ezUInt16 uiCount, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keywordflow">if</span> (uiCount &gt; m_uiCount)</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    SetCount(uiCount, pAllocator);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt; <span class="comment">// Second template needed so that the compiler does only instantiate it when called. Otherwise the static_assert would trigger early.</span></div>
<div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a286f03bad58c3ada8915769f43946307">  200</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a286f03bad58c3ada8915769f43946307">ezSmallArrayBase&lt;T, Size&gt;::SetCountUninitialized</a>(ezUInt16 uiCount, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;{</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  static_assert(<a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType&lt;T&gt;::value</a> == ezTypeIsPod::value, <span class="stringliteral">&quot;SetCountUninitialized is only supported for POD types.&quot;</span>);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  <span class="keyword">const</span> ezUInt32 uiOldCount = m_uiCount;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keyword">const</span> ezUInt32 uiNewCount = uiCount;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="keywordflow">if</span> (uiNewCount &gt; uiOldCount)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    Reserve(uiNewCount, pAllocator);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ab4c3930b2de5e40c33a2bfca4c5dda1f">ezMemoryUtils::Construct</a>(GetElementsPtr() + uiOldCount, uiNewCount - uiOldCount);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (uiNewCount &lt; uiOldCount)</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#add65b87c39dade4ee7b0671c16b10a39">ezMemoryUtils::Destruct</a>(GetElementsPtr() + uiNewCount, uiOldCount - uiNewCount);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  m_uiCount = uiCount;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;}</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#ac13be38fb1e58b0b94c405db9318792a">  220</a></span>&#160;EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d4/d0b/classez_small_array_base.htm#ac13be38fb1e58b0b94c405db9318792a">ezSmallArrayBase&lt;T, Size&gt;::GetCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  <span class="keywordflow">return</span> m_uiCount;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a0b66ce1a35b2f1659ba61c534969dae4">  226</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a0b66ce1a35b2f1659ba61c534969dae4">ezSmallArrayBase&lt;T, Size&gt;::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <span class="keywordflow">return</span> m_uiCount == 0;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a5787f727bd1a20181e3e2150c7d37fc2">  232</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a5787f727bd1a20181e3e2150c7d37fc2">ezSmallArrayBase&lt;T, Size&gt;::Clear</a>()</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#add65b87c39dade4ee7b0671c16b10a39">ezMemoryUtils::Destruct</a>(GetElementsPtr(), m_uiCount);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  m_uiCount = 0;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00239"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a18878b1e8e942abb9861435942918a83">  239</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a18878b1e8e942abb9861435942918a83">ezSmallArrayBase&lt;T, Size&gt;::Contains</a>(<span class="keyword">const</span> T&amp; value)<span class="keyword"> const</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  <span class="keywordflow">return</span> IndexOf(value) != ezInvalidIndex;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00245"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a2c80fa30a421aac1360f240c5068c3b4">  245</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a2c80fa30a421aac1360f240c5068c3b4">ezSmallArrayBase&lt;T, Size&gt;::Insert</a>(<span class="keyword">const</span> T&amp; value, ezUInt32 uiIndex, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;{</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  EZ_ASSERT_DEV(uiIndex &lt;= m_uiCount, <span class="stringliteral">&quot;Invalid index. Array has {0} elements, trying to insert element at index {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  Reserve(m_uiCount + 1, pAllocator);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">ezMemoryUtils::Prepend</a>(GetElementsPtr() + uiIndex, value, m_uiCount - uiIndex);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  m_uiCount++;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00256"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a7ff011a1ffa731c8e5e738763b802150">  256</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a2c80fa30a421aac1360f240c5068c3b4">ezSmallArrayBase&lt;T, Size&gt;::Insert</a>(T&amp;&amp; value, ezUInt32 uiIndex, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  EZ_ASSERT_DEV(uiIndex &lt;= m_uiCount, <span class="stringliteral">&quot;Invalid index. Array has {0} elements, trying to insert element at index {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  Reserve(m_uiCount + 1, pAllocator);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">ezMemoryUtils::Prepend</a>(GetElementsPtr() + uiIndex, std::move(value), m_uiCount - uiIndex);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  m_uiCount++;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;}</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a772bcf3f2189007961b0ba3b4ecf4213">  267</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a772bcf3f2189007961b0ba3b4ecf4213">ezSmallArrayBase&lt;T, Size&gt;::RemoveAndCopy</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;{</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  ezUInt32 uiIndex = IndexOf(value);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <span class="keywordflow">if</span> (uiIndex == ezInvalidIndex)</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  RemoveAtAndCopy(uiIndex);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;}</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a820dddee4c830c06fab015b887e474bd">  279</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a820dddee4c830c06fab015b887e474bd">ezSmallArrayBase&lt;T, Size&gt;::RemoveAndSwap</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;{</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  ezUInt32 uiIndex = IndexOf(value);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160; </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  <span class="keywordflow">if</span> (uiIndex == ezInvalidIndex)</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  RemoveAtAndSwap(uiIndex);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a1738f62dcb310db3108fa70cff237c4f">  291</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a1738f62dcb310db3108fa70cff237c4f">ezSmallArrayBase&lt;T, Size&gt;::RemoveAtAndCopy</a>(ezUInt32 uiIndex, ezUInt32 uiNumElements <span class="comment">/*= 1*/</span>)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;{</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  EZ_ASSERT_DEV(uiIndex + uiNumElements &lt;= m_uiCount, <span class="stringliteral">&quot;Out of bounds access. Array has {0} elements, trying to remove element at index {1}.&quot;</span>, m_uiCount, uiIndex + uiNumElements - 1);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  T* pElements = GetElementsPtr();</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  m_uiCount -= uiNumElements;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ab83313c90ad3022c34e7d71c5d1a3fbd">ezMemoryUtils::RelocateOverlapped</a>(pElements + uiIndex, pElements + uiIndex + uiNumElements, m_uiCount - uiIndex);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;}</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00302"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#abb3c873c53624b1888d3f7a84da00c89">  302</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#abb3c873c53624b1888d3f7a84da00c89">ezSmallArrayBase&lt;T, Size&gt;::RemoveAtAndSwap</a>(ezUInt32 uiIndex, ezUInt32 uiNumElements <span class="comment">/*= 1*/</span>)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;{</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  EZ_ASSERT_DEV(uiIndex + uiNumElements &lt;= m_uiCount, <span class="stringliteral">&quot;Out of bounds access. Array has {0} elements, trying to remove element at index {1}.&quot;</span>, m_uiCount, uiIndex + uiNumElements - 1);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  T* pElements = GetElementsPtr();</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; uiNumElements; ++i)</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  {</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    m_uiCount--;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordflow">if</span> (m_uiCount != uiIndex)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;      pElements[uiIndex] = std::move(pElements[m_uiCount]);</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#add65b87c39dade4ee7b0671c16b10a39">ezMemoryUtils::Destruct</a>(pElements + m_uiCount, 1);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    ++uiIndex;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  }</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;}</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160; </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00322"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a6e93f15bb764fa59a641b642df5cc551">  322</a></span>&#160;ezUInt32 <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a6e93f15bb764fa59a641b642df5cc551">ezSmallArrayBase&lt;T, Size&gt;::IndexOf</a>(<span class="keyword">const</span> T&amp; value, ezUInt32 uiStartIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keyword">const</span> T* pElements = GetElementsPtr();</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  <span class="keywordflow">for</span> (ezUInt32 i = uiStartIndex; i &lt; m_uiCount; i++)</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="../../dc/d4d/classez_memory_utils.htm#a744d60b4b000c61f2dd3819a12410595">ezMemoryUtils::IsEqual</a>(pElements + i, &amp;value))</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;      <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  }</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  <span class="keywordflow">return</span> ezInvalidIndex;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160; </div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00335"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a985ee77c3751c5a007143f128af1bbd5">  335</a></span>&#160;ezUInt32 <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a985ee77c3751c5a007143f128af1bbd5">ezSmallArrayBase&lt;T, Size&gt;::LastIndexOf</a>(<span class="keyword">const</span> T&amp; value, ezUInt32 uiStartIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <span class="keyword">const</span> T* pElements = GetElementsPtr();</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  <span class="keywordflow">for</span> (ezUInt32 i = ezMath::Min&lt;ezUInt32&gt;(uiStartIndex, m_uiCount); i-- &gt; 0;)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  {</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="../../dc/d4d/classez_memory_utils.htm#a744d60b4b000c61f2dd3819a12410595">ezMemoryUtils::IsEqual</a>(pElements + i, &amp;value))</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;      <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  }</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  <span class="keywordflow">return</span> ezInvalidIndex;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;}</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a803f880237ba7b654211a9595b6d6795">  348</a></span>&#160;T&amp; <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a803f880237ba7b654211a9595b6d6795">ezSmallArrayBase&lt;T, Size&gt;::ExpandAndGetRef</a>(<a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;{</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  Reserve(m_uiCount + 1, pAllocator);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  T* pElements = GetElementsPtr();</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ab4c3930b2de5e40c33a2bfca4c5dda1f">ezMemoryUtils::Construct</a>(pElements + m_uiCount, 1);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  T&amp; ReturnRef = *(pElements + m_uiCount);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  m_uiCount++;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  <span class="keywordflow">return</span> ReturnRef;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;}</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00364"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a753b3d6c3754f4ef45ccb5bb58542339">  364</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a753b3d6c3754f4ef45ccb5bb58542339">ezSmallArrayBase&lt;T, Size&gt;::PushBack</a>(<span class="keyword">const</span> T&amp; value, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;{</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  Reserve(m_uiCount + 1, pAllocator);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9a615b84872b968b7f8523c6f7b0a25b">ezMemoryUtils::CopyConstruct</a>(GetElementsPtr() + m_uiCount, value, 1);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  m_uiCount++;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;}</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160; </div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00373"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#aaf6da880c81ff9e64fe1355a11cd680d">  373</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a753b3d6c3754f4ef45ccb5bb58542339">ezSmallArrayBase&lt;T, Size&gt;::PushBack</a>(T&amp;&amp; value, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;{</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  Reserve(m_uiCount + 1, pAllocator);</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  ezMemoryUtils::MoveConstruct&lt;T&gt;(GetElementsPtr() + m_uiCount, std::move(value));</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  m_uiCount++;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;}</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00382"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a804a1289180252024587478ef0de74f2">  382</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a804a1289180252024587478ef0de74f2">ezSmallArrayBase&lt;T, Size&gt;::PushBackUnchecked</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;{</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  EZ_ASSERT_DEBUG(m_uiCount &lt; m_uiCapacity, <span class="stringliteral">&quot;Appending unchecked to array with insufficient capacity.&quot;</span>);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160; </div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9a615b84872b968b7f8523c6f7b0a25b">ezMemoryUtils::CopyConstruct</a>(GetElementsPtr() + m_uiCount, value, 1);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  m_uiCount++;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;}</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160; </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00391"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a946602a12b686a8a089e663d4a7599e2">  391</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a804a1289180252024587478ef0de74f2">ezSmallArrayBase&lt;T, Size&gt;::PushBackUnchecked</a>(T&amp;&amp; value)</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;{</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  EZ_ASSERT_DEBUG(m_uiCount &lt; m_uiCapacity, <span class="stringliteral">&quot;Appending unchecked to array with insufficient capacity.&quot;</span>);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160; </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  ezMemoryUtils::MoveConstruct&lt;T&gt;(GetElementsPtr() + m_uiCount, std::move(value));</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  m_uiCount++;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;}</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00400"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#aef512670ffc2e2aaca7fa4bc14e21bc3">  400</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#aef512670ffc2e2aaca7fa4bc14e21bc3">ezSmallArrayBase&lt;T, Size&gt;::PushBackRange</a>(<span class="keyword">const</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const T&gt;</a>&amp; range, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;{</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  <span class="keyword">const</span> ezUInt32 uiRangeCount = range.<a class="code" href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">GetCount</a>();</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;  Reserve(m_uiCount + uiRangeCount, pAllocator);</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a4c12c5af647ec366b7a99b15cca9386b">ezMemoryUtils::CopyConstructArray</a>(GetElementsPtr() + m_uiCount, range.<a class="code" href="../../dc/dae/classez_array_ptr.htm#aba4e7585190f337c6428f2fe25828b8a">GetPtr</a>(), uiRangeCount);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  m_uiCount += uiRangeCount;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;}</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#ad9f8a96a3f6070fb3f66a3a5a359016c">  410</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#ad9f8a96a3f6070fb3f66a3a5a359016c">ezSmallArrayBase&lt;T, Size&gt;::PopBack</a>(ezUInt32 uiCountToRemove <span class="comment">/* = 1 */</span>)</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;{</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  EZ_ASSERT_DEBUG(m_uiCount &gt;= uiCountToRemove, <span class="stringliteral">&quot;Out of bounds access. Array has {0} elements, trying to pop {1} elements.&quot;</span>, m_uiCount, uiCountToRemove);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160; </div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;  m_uiCount -= uiCountToRemove;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#add65b87c39dade4ee7b0671c16b10a39">ezMemoryUtils::Destruct</a>(GetElementsPtr() + m_uiCount, uiCountToRemove);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;}</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00419"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a9f0ef09d5e9ad5c283728bb56a42f48d">  419</a></span>&#160;EZ_FORCE_INLINE T&amp; <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a9f0ef09d5e9ad5c283728bb56a42f48d">ezSmallArrayBase&lt;T, Size&gt;::PeekBack</a>()</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;{</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;  EZ_ASSERT_DEBUG(m_uiCount &gt; 0, <span class="stringliteral">&quot;Out of bounds access. Trying to peek into an empty array.&quot;</span>);</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;  <span class="keywordflow">return</span> GetElementsPtr()[m_uiCount - 1];</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;}</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160; </div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> T&amp; <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a9f0ef09d5e9ad5c283728bb56a42f48d">ezSmallArrayBase&lt;T, Size&gt;::PeekBack</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;  EZ_ASSERT_DEBUG(m_uiCount &gt; 0, <span class="stringliteral">&quot;Out of bounds access. Trying to peek into an empty array.&quot;</span>);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;  <span class="keywordflow">return</span> GetElementsPtr()[m_uiCount - 1];</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;}</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160; </div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00434"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a646f005d267f39cde5cd3d10b9ce446c">  434</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a46465983c607874239317c3dcc8b12d4">ezSmallArrayBase&lt;T, Size&gt;::Sort</a>(<span class="keyword">const</span> Comparer&amp; comparer)</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;{</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  <span class="keywordflow">if</span> (m_uiCount &gt; 1)</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;  {</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;T&gt;</a> ar = GetArrayPtr();</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <a class="code" href="../../d5/d95/classez_sorting.htm#a3663e52430292736a1f756b9a56a460a">ezSorting::QuickSort</a>(ar, comparer);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  }</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;}</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160; </div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00444"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a46465983c607874239317c3dcc8b12d4">  444</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a46465983c607874239317c3dcc8b12d4">ezSmallArrayBase&lt;T, Size&gt;::Sort</a>()</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;{</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;  <span class="keywordflow">if</span> (m_uiCount &gt; 1)</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;  {</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;T&gt;</a> ar = GetArrayPtr();</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <a class="code" href="../../d5/d95/classez_sorting.htm#a3663e52430292736a1f756b9a56a460a">ezSorting::QuickSort</a>(ar, <a class="code" href="../../df/d11/structez_compare_helper.htm">ezCompareHelper&lt;T&gt;</a>());</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;  }</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;}</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160; </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00454"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">  454</a></span>&#160;EZ_ALWAYS_INLINE T* <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">ezSmallArrayBase&lt;T, Size&gt;::GetData</a>()</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;{</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;  <span class="keywordflow">if</span> (IsEmpty())</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160; </div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;  <span class="keywordflow">return</span> GetElementsPtr();</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160; </div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;EZ_ALWAYS_INLINE <span class="keyword">const</span> T* <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">ezSmallArrayBase&lt;T, Size&gt;::GetData</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;  <span class="keywordflow">if</span> (IsEmpty())</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160; </div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;  <span class="keywordflow">return</span> GetElementsPtr();</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;}</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160; </div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00472"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a258eaf177ae66072d013917c8f439b2d">  472</a></span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;T&gt;</a> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a258eaf177ae66072d013917c8f439b2d">ezSmallArrayBase&lt;T, Size&gt;::GetArrayPtr</a>()</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;{</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;T&gt;</a>(GetData(), GetCount());</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;}</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160; </div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const T&gt;</a> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a258eaf177ae66072d013917c8f439b2d">ezSmallArrayBase&lt;T, Size&gt;::GetArrayPtr</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const T&gt;</a>(GetData(), GetCount());</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;}</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160; </div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00484"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#aeb5683c87ebb948913b951385175a88a">  484</a></span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;typename ezArrayPtr&lt;T&gt;::ByteType</a>&gt; <a class="code" href="../../d4/d0b/classez_small_array_base.htm#aeb5683c87ebb948913b951385175a88a">ezSmallArrayBase&lt;T, Size&gt;::GetByteArrayPtr</a>()</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;{</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;  <span class="keywordflow">return</span> GetArrayPtr().ToByteArray();</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;}</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160; </div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;typename ezArrayPtr&lt;const T&gt;::ByteType</a>&gt; <a class="code" href="../../d4/d0b/classez_small_array_base.htm#aeb5683c87ebb948913b951385175a88a">ezSmallArrayBase&lt;T, Size&gt;::GetByteArrayPtr</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;  <span class="keywordflow">return</span> GetArrayPtr().ToByteArray();</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;}</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160; </div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00496"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#a2ec2671d06fe7466a6ede942ead4c39e">  496</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#a2ec2671d06fe7466a6ede942ead4c39e">ezSmallArrayBase&lt;T, Size&gt;::Reserve</a>(ezUInt16 uiCapacity, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;  <span class="keywordflow">if</span> (m_uiCapacity &gt;= uiCapacity)</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160; </div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;  <span class="keyword">const</span> ezUInt32 uiCurCap = <span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(m_uiCapacity);</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;  ezUInt32 uiNewCapacity = uiCurCap + (uiCurCap / 2);</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160; </div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;  uiNewCapacity = ezMath::Max&lt;ezUInt32&gt;(uiNewCapacity, uiCapacity);</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;  uiNewCapacity = ezMemoryUtils::AlignSize&lt;ezUInt32&gt;(uiNewCapacity, CAPACITY_ALIGNMENT);</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;  uiNewCapacity = ezMath::Min&lt;ezUInt32&gt;(uiNewCapacity, 0xFFFFu);</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160; </div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;  SetCapacity(<span class="keyword">static_cast&lt;</span>ezUInt16<span class="keyword">&gt;</span>(uiNewCapacity), pAllocator);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;}</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160; </div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00512"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#adcff1737aa5d9a233bd3231897aa290b">  512</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm#adcff1737aa5d9a233bd3231897aa290b">ezSmallArrayBase&lt;T, Size&gt;::Compact</a>(<a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;{</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;  <span class="keywordflow">if</span> (IsEmpty())</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;  {</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keywordflow">if</span> (m_uiCapacity &gt; Size)</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    {</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;      <span class="comment">// completely deallocate all data, if the array is empty.</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;      EZ_DELETE_RAW_BUFFER(pAllocator, m_pElements);</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    }</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160; </div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    m_uiCapacity = Size;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    m_pElements = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;  }</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_uiCapacity &gt; Size)</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;  {</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    ezUInt32 uiNewCapacity = ezMemoryUtils::AlignSize&lt;ezUInt32&gt;(m_uiCount, CAPACITY_ALIGNMENT);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    uiNewCapacity = ezMath::Min&lt;ezUInt32&gt;(uiNewCapacity, 0xFFFFu);</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160; </div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keywordflow">if</span> (m_uiCapacity != uiNewCapacity)</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;      SetCapacity(<span class="keyword">static_cast&lt;</span>ezUInt16<span class="keyword">&gt;</span>(uiNewCapacity), pAllocator);</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;  }</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;}</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160; </div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00536"></a><span class="lineno"><a class="line" href="../../d4/d0b/classez_small_array_base.htm#acfcee52c57545f1c462ef72c5271c416">  536</a></span>&#160;EZ_ALWAYS_INLINE ezUInt64 <a class="code" href="../../d4/d0b/classez_small_array_base.htm#acfcee52c57545f1c462ef72c5271c416">ezSmallArrayBase&lt;T, Size&gt;::GetHeapMemoryUsage</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;  <span class="keywordflow">return</span> m_uiCapacity &lt;= Size ? 0 : m_uiCapacity * <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;}</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160; </div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;EZ_ALWAYS_INLINE <span class="keyword">const</span> U&amp; <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;::GetUserData</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;  static_assert(<span class="keyword">sizeof</span>(U) &lt;= <span class="keyword">sizeof</span>(ezUInt32));</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>U&amp;<span class="keyword">&gt;</span>(m_uiUserData);</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;}</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160; </div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;EZ_ALWAYS_INLINE U&amp; <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;::GetUserData</a>()</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;{</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;  static_assert(<span class="keyword">sizeof</span>(U) &lt;= <span class="keyword">sizeof</span>(ezUInt32));</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span>U&amp;<span class="keyword">&gt;</span>(m_uiUserData);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;}</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160; </div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;::SetCapacity</a>(ezUInt16 uiCapacity, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;{</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;  <span class="keywordflow">if</span> (m_uiCapacity &gt; Size &amp;&amp; uiCapacity &gt; m_uiCapacity)</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;  {</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    m_pElements = EZ_EXTEND_RAW_BUFFER(pAllocator, m_pElements, m_uiCount, uiCapacity);</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    m_uiCapacity = uiCapacity;</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;  }</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;  {</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="comment">// special case when migrating from in-place to external storage or shrinking</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    T* pOldElements = GetElementsPtr();</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160; </div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keyword">const</span> ezUInt32 uiOldCapacity = m_uiCapacity;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="keyword">const</span> ezUInt32 uiNewCapacity = uiCapacity;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    m_uiCapacity = <a class="code" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a>(uiCapacity, Size);</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160; </div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keywordflow">if</span> (uiNewCapacity &gt; Size)</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    {</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;      <span class="comment">// new external storage</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;      T* pNewElements = EZ_NEW_RAW_BUFFER(pAllocator, T, uiCapacity);</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;      <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ae016ea37ee5fc0eb1d922d02f042746c">ezMemoryUtils::RelocateConstruct</a>(pNewElements, pOldElements, m_uiCount);</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;      m_pElements = pNewElements;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    }</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    {</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;      <span class="comment">// Re-use inplace storage</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;      <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ae016ea37ee5fc0eb1d922d02f042746c">ezMemoryUtils::RelocateConstruct</a>(GetElementsPtr(), pOldElements, m_uiCount);</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    }</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160; </div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="keywordflow">if</span> (uiOldCapacity &gt; Size)</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    {</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;      EZ_DELETE_RAW_BUFFER(pAllocator, pOldElements);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    }</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;  }</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;}</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160; </div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;EZ_ALWAYS_INLINE T* <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;::GetElementsPtr</a>()</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;{</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;  <span class="keywordflow">return</span> m_uiCapacity &lt;= Size ? reinterpret_cast&lt;T*&gt;(m_StaticData) : m_pElements;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;}</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160; </div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;EZ_ALWAYS_INLINE <span class="keyword">const</span> T* <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;::GetElementsPtr</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;  <span class="keywordflow">return</span> m_uiCapacity &lt;= Size ? reinterpret_cast&lt;const T*&gt;(m_StaticData) : m_pElements;</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;}</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160; </div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160; </div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::ezSmallArray</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160; </div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::ezSmallArray</a>(<span class="keyword">const</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp; other)</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;  : SUPER(other, AllocatorWrapper::GetAllocator())</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;{</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;}</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160; </div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::ezSmallArray</a>(<span class="keyword">const</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const T&gt;</a>&amp; other)</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;  : SUPER(other, AllocatorWrapper::GetAllocator())</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;{</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;}</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160; </div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::ezSmallArray</a>(<a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp;&amp; other)</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;  : SUPER(static_cast&lt;SUPER&amp;&amp;&gt;(other), AllocatorWrapper::GetAllocator())</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;{</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;}</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160; </div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::~ezSmallArray</a>()</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;{</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;  SUPER::Clear();</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;  SUPER::Compact(AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;}</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160; </div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;{</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;  *<span class="keyword">this</span> = ((<a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const T&gt;</a>)rhs); <span class="comment">// redirect this to the ezArrayPtr version</span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;  this-&gt;m_uiUserData = rhs.m_uiUserData;</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;}</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160; </div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const T&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;{</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;  SUPER::CopyFrom(rhs, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;}</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160; </div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::operator=</a>(<a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp;&amp; rhs) noexcept</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;{</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;  SUPER::MoveFrom(std::move(rhs), AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;}</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160; </div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::SetCount</a>(ezUInt16 uiCount)</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;{</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;  SUPER::SetCount(uiCount, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;}</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160; </div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::SetCount</a>(ezUInt16 uiCount, <span class="keyword">const</span> T&amp; fillValue)</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;{</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;  SUPER::SetCount(uiCount, fillValue, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;}</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160; </div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::EnsureCount</a>(ezUInt16 uiCount)</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;{</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;  SUPER::EnsureCount(uiCount, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;}</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160; </div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt; <span class="comment">// Second template needed so that the compiler does only instantiate it when called. Otherwise the static_assert would trigger early.</span></div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::SetCountUninitialized</a>(ezUInt16 uiCount)</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;{</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;  SUPER::SetCountUninitialized(uiCount, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;}</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160; </div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::Insert</a>(<span class="keyword">const</span> T&amp; value, ezUInt32 uiIndex)</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;{</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;  SUPER::Insert(value, uiIndex, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;}</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160; </div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::Insert</a>(T&amp;&amp; value, ezUInt32 uiIndex)</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;{</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;  SUPER::Insert(value, uiIndex, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;}</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160; </div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;EZ_ALWAYS_INLINE T&amp; <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::ExpandAndGetRef</a>()</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;{</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;  <span class="keywordflow">return</span> SUPER::ExpandAndGetRef(AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;}</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160; </div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::PushBack</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;{</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;  SUPER::PushBack(value, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;}</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160; </div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::PushBack</a>(T&amp;&amp; value)</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;{</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;  SUPER::PushBack(std::move(value), AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;}</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160; </div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::PushBackRange</a>(<span class="keyword">const</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;const T&gt;</a>&amp; range)</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;{</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;  SUPER::PushBackRange(range, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;}</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160; </div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::Reserve</a>(ezUInt16 uiCapacity)</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;{</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;  SUPER::Reserve(uiCapacity, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;}</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160; </div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= ezDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/d0c/classez_small_array.htm">ezSmallArray&lt;T, Size, AllocatorWrapper&gt;::Compact</a>()</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;{</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;  SUPER::Compact(AllocatorWrapper::GetAllocator());</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;}</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160; </div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160; </div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="keyword">typename</span> ezSmallArrayBase&lt;T, Size&gt;::iterator begin(<a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; ref_container)</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;{</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;  <span class="keywordflow">return</span> ref_container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">GetData</a>();</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;}</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160; </div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;<span class="keyword">typename</span> ezSmallArrayBase&lt;T, Size&gt;::const_iterator begin(<span class="keyword">const</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;{</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">GetData</a>();</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;}</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160; </div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="keyword">typename</span> ezSmallArrayBase&lt;T, Size&gt;::const_iterator cbegin(<span class="keyword">const</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;{</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">GetData</a>();</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;}</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160; </div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d3/df2/structreverse__pointer__iterator.htm">ezSmallArrayBase&lt;T, Size&gt;::reverse_iterator</a> rbegin(<a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; ref_container)</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;{</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../d3/df2/structreverse__pointer__iterator.htm">ezSmallArrayBase&lt;T, Size&gt;::reverse_iterator</a>(ref_container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">GetData</a>() + ref_container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#ac13be38fb1e58b0b94c405db9318792a">GetCount</a>() - 1);</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;}</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160; </div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">ezSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a> rbegin(<span class="keyword">const</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;{</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">ezSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a>(container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">GetData</a>() + container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#ac13be38fb1e58b0b94c405db9318792a">GetCount</a>() - 1);</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;}</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160; </div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">ezSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a> crbegin(<span class="keyword">const</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;{</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">ezSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a>(container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">GetData</a>() + container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#ac13be38fb1e58b0b94c405db9318792a">GetCount</a>() - 1);</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;}</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160; </div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="keyword">typename</span> ezSmallArrayBase&lt;T, Size&gt;::iterator end(<a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; ref_container)</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;{</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;  <span class="keywordflow">return</span> ref_container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">GetData</a>() + ref_container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#ac13be38fb1e58b0b94c405db9318792a">GetCount</a>();</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;}</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160; </div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="keyword">typename</span> ezSmallArrayBase&lt;T, Size&gt;::const_iterator end(<span class="keyword">const</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;{</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">GetData</a>() + container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#ac13be38fb1e58b0b94c405db9318792a">GetCount</a>();</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;}</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160; </div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="keyword">typename</span> ezSmallArrayBase&lt;T, Size&gt;::const_iterator cend(<span class="keyword">const</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;{</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">GetData</a>() + container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#ac13be38fb1e58b0b94c405db9318792a">GetCount</a>();</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;}</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160; </div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d3/df2/structreverse__pointer__iterator.htm">ezSmallArrayBase&lt;T, Size&gt;::reverse_iterator</a> rend(<a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; ref_container)</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;{</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../d3/df2/structreverse__pointer__iterator.htm">ezSmallArrayBase&lt;T, Size&gt;::reverse_iterator</a>(ref_container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">GetData</a>() - 1);</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;}</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160; </div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">ezSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a> rend(<span class="keyword">const</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;{</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">ezSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a>(container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">GetData</a>() - 1);</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;}</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160; </div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ezUInt16 Size&gt;</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">ezSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a> crend(<span class="keyword">const</span> <a class="code" href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;{</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">ezSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a>(container.<a class="code" href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">GetData</a>() - 1);</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassez_small_array_base_htm_a286f03bad58c3ada8915769f43946307"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a286f03bad58c3ada8915769f43946307">ezSmallArrayBase::SetCountUninitialized</a></div><div class="ttdeci">void SetCountUninitialized(ezUInt16 uiCount, ezAllocatorBase *pAllocator)</div><div class="ttdoc">Resizes the array to have exactly uiCount elements. Extra elements might be uninitialized.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:200</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a89b21be2199a007c03c93e590ac7b033"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a89b21be2199a007c03c93e590ac7b033">ezSmallArrayBase::operator[]</a></div><div class="ttdeci">const T &amp; operator[](ezUInt32 uiIndex) const</div><div class="ttdoc">Returns the element at the given index. Does bounds checks in debug builds.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:138</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_ac13be38fb1e58b0b94c405db9318792a"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#ac13be38fb1e58b0b94c405db9318792a">ezSmallArrayBase::GetCount</a></div><div class="ttdeci">ezUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active elements in the array.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:220</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a772bcf3f2189007961b0ba3b4ecf4213"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a772bcf3f2189007961b0ba3b4ecf4213">ezSmallArrayBase::RemoveAndCopy</a></div><div class="ttdeci">bool RemoveAndCopy(const T &amp;value)</div><div class="ttdoc">Removes the first occurrence of value and fills the gap by shifting all following elements.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:267</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a2ec2671d06fe7466a6ede942ead4c39e"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a2ec2671d06fe7466a6ede942ead4c39e">ezSmallArrayBase::Reserve</a></div><div class="ttdeci">void Reserve(ezUInt16 uiCapacity, ezAllocatorBase *pAllocator)</div><div class="ttdoc">Expands the array so it can at least store the given capacity.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:496</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a87c41811a95fa63da651f6779931d9cf"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a87c41811a95fa63da651f6779931d9cf">ezMemoryUtils::Copy</a></div><div class="ttdeci">static void Copy(T *pDestination, const T *pSource, size_t uiCount=1)</div><div class="ttdoc">Copies objects of type T from pSource to pDestination.</div></div>
<div class="ttc" id="aclassez_array_ptr_htm_aba4e7585190f337c6428f2fe25828b8a"><div class="ttname"><a href="../../dc/dae/classez_array_ptr.htm#aba4e7585190f337c6428f2fe25828b8a">ezArrayPtr::GetPtr</a></div><div class="ttdeci">EZ_ALWAYS_INLINE PointerType GetPtr() const</div><div class="ttdoc">Returns the pointer to the array.</div><div class="ttdef"><b>Definition:</b> ArrayPtr.h:118</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_ab83313c90ad3022c34e7d71c5d1a3fbd"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#ab83313c90ad3022c34e7d71c5d1a3fbd">ezMemoryUtils::RelocateOverlapped</a></div><div class="ttdeci">static void RelocateOverlapped(T *pDestination, T *pSource, size_t uiCount=1)</div><div class="ttdoc">Moves objects of type T from pSource to pDestination.</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_acfcee52c57545f1c462ef72c5271c416"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#acfcee52c57545f1c462ef72c5271c416">ezSmallArrayBase::GetHeapMemoryUsage</a></div><div class="ttdeci">ezUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:536</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_ad9f8a96a3f6070fb3f66a3a5a359016c"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#ad9f8a96a3f6070fb3f66a3a5a359016c">ezSmallArrayBase::PopBack</a></div><div class="ttdeci">void PopBack(ezUInt32 uiCountToRemove=1)</div><div class="ttdoc">Removes count elements from the end of the array.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:410</div></div>
<div class="ttc" id="astructez_compare_helper_htm"><div class="ttname"><a href="../../df/d11/structez_compare_helper.htm">ezCompareHelper</a></div><div class="ttdoc">A comparer object is used in sorting algorithms to compare to objects of the same type.</div><div class="ttdef"><b>Definition:</b> Comparer.h:6</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a4c12c5af647ec366b7a99b15cca9386b"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a4c12c5af647ec366b7a99b15cca9386b">ezMemoryUtils::CopyConstructArray</a></div><div class="ttdeci">static void CopyConstructArray(T *pDestination, const T *pSource, size_t uiCount)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination from an existing array of object...</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_ab4c3930b2de5e40c33a2bfca4c5dda1f"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#ab4c3930b2de5e40c33a2bfca4c5dda1f">ezMemoryUtils::Construct</a></div><div class="ttdeci">static void Construct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination.</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a4d71f8618557dcc52d63b7001f263966"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a4d71f8618557dcc52d63b7001f263966">ezSmallArrayBase::SetCount</a></div><div class="ttdeci">void SetCount(ezUInt16 uiCount, ezAllocatorBase *pAllocator)</div><div class="ttdoc">Resizes the array to have exactly uiCount elements. Default constructs extra elements if the array is...</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:152</div></div>
<div class="ttc" id="aclassez_array_ptr_htm"><div class="ttname"><a href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a></div><div class="ttdoc">This class encapsulates an array and it's size. It is recommended to use this class instead of plain ...</div><div class="ttdef"><b>Definition:</b> ArrayPtr.h:36</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a9a615b84872b968b7f8523c6f7b0a25b"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a9a615b84872b968b7f8523c6f7b0a25b">ezMemoryUtils::CopyConstruct</a></div><div class="ttdeci">static void CopyConstruct(Destination *pDestination, const Source &amp;copy, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination, by creating uiCount copies of c...</div></div>
<div class="ttc" id="anamespaceez_math_htm_a6f7ee19d0f8e81ff6ae5f394075e3a56"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:38</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_ae016ea37ee5fc0eb1d922d02f042746c"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#ae016ea37ee5fc0eb1d922d02f042746c">ezMemoryUtils::RelocateConstruct</a></div><div class="ttdeci">static void RelocateConstruct(T *pDestination, T *pSource, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination from an existing array of object...</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a753b3d6c3754f4ef45ccb5bb58542339"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a753b3d6c3754f4ef45ccb5bb58542339">ezSmallArrayBase::PushBack</a></div><div class="ttdeci">void PushBack(const T &amp;value, ezAllocatorBase *pAllocator)</div><div class="ttdoc">Pushes value at the end of the array.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:364</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a0f88c6f77d9dfac59323e44c08eac677"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a0f88c6f77d9dfac59323e44c08eac677">ezSmallArrayBase::operator==</a></div><div class="ttdeci">bool operator==(const ezSmallArrayBase&lt; T, Size &gt; &amp;rhs) const</div><div class="ttdoc">Compares this array to another contiguous array type.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:111</div></div>
<div class="ttc" id="astructconst__reverse__pointer__iterator_htm"><div class="ttname"><a href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">const_reverse_pointer_iterator</a></div><div class="ttdoc">Base class for Pointer like reverse iterators.</div><div class="ttdef"><b>Definition:</b> ArrayIterator.h:151</div></div>
<div class="ttc" id="aclassez_array_ptr_htm_a9f222695f57e4cf200e07135dbbd7edd"><div class="ttname"><a href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">ezArrayPtr::GetCount</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 GetCount() const</div><div class="ttdoc">Returns the number of elements in the array.</div><div class="ttdef"><b>Definition:</b> ArrayPtr.h:142</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_adcff1737aa5d9a233bd3231897aa290b"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#adcff1737aa5d9a233bd3231897aa290b">ezSmallArrayBase::Compact</a></div><div class="ttdeci">void Compact(ezAllocatorBase *pAllocator)</div><div class="ttdoc">Tries to compact the array to avoid wasting memory. The resulting capacity is at least 'GetCount' (no...</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:512</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_aeb5683c87ebb948913b951385175a88a"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#aeb5683c87ebb948913b951385175a88a">ezSmallArrayBase::GetByteArrayPtr</a></div><div class="ttdeci">ezArrayPtr&lt; typename ezArrayPtr&lt; T &gt;::ByteType &gt; GetByteArrayPtr()</div><div class="ttdoc">Returns a byte array pointer to the array data, or an empty array pointer if the array is empty.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:484</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_af6e2c133e77abd3aeb8ae5d9f9458356"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#af6e2c133e77abd3aeb8ae5d9f9458356">ezSmallArrayBase::operator!=</a></div><div class="ttdeci">bool operator!=(const ezSmallArrayBase&lt; T, Size &gt; &amp;rhs) const</div><div class="ttdoc">Compares this array to another contiguous array type.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:126</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a18878b1e8e942abb9861435942918a83"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a18878b1e8e942abb9861435942918a83">ezSmallArrayBase::Contains</a></div><div class="ttdeci">bool Contains(const T &amp;value) const</div><div class="ttdoc">Checks whether the given value can be found in the array. O(n) complexity.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:239</div></div>
<div class="ttc" id="aclassez_allocator_base_htm"><div class="ttname"><a href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> AllocatorBase.h:22</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a2c80fa30a421aac1360f240c5068c3b4"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a2c80fa30a421aac1360f240c5068c3b4">ezSmallArrayBase::Insert</a></div><div class="ttdeci">void Insert(const T &amp;value, ezUInt32 uiIndex, ezAllocatorBase *pAllocator)</div><div class="ttdoc">Inserts value at index by shifting all following elements.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:245</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a804a1289180252024587478ef0de74f2"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a804a1289180252024587478ef0de74f2">ezSmallArrayBase::PushBackUnchecked</a></div><div class="ttdeci">void PushBackUnchecked(const T &amp;value)</div><div class="ttdoc">Pushes value at the end of the array. Does NOT ensure capacity.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:382</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_aef512670ffc2e2aaca7fa4bc14e21bc3"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#aef512670ffc2e2aaca7fa4bc14e21bc3">ezSmallArrayBase::PushBackRange</a></div><div class="ttdeci">void PushBackRange(const ezArrayPtr&lt; const T &gt; &amp;range, ezAllocatorBase *pAllocator)</div><div class="ttdoc">Pushes all elements in range at the end of the array. Increases the capacity if necessary.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:400</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a6e93f15bb764fa59a641b642df5cc551"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a6e93f15bb764fa59a641b642df5cc551">ezSmallArrayBase::IndexOf</a></div><div class="ttdeci">ezUInt32 IndexOf(const T &amp;value, ezUInt32 uiStartIndex=0) const</div><div class="ttdoc">Searches for the first occurrence of the given value and returns its index or ezInvalidIndex if not f...</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:322</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a46465983c607874239317c3dcc8b12d4"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a46465983c607874239317c3dcc8b12d4">ezSmallArrayBase::Sort</a></div><div class="ttdeci">void Sort()</div><div class="ttdoc">Sort with default comparer.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:444</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_abb3c873c53624b1888d3f7a84da00c89"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#abb3c873c53624b1888d3f7a84da00c89">ezSmallArrayBase::RemoveAtAndSwap</a></div><div class="ttdeci">void RemoveAtAndSwap(ezUInt32 uiIndex, ezUInt32 uiNumElements=1)</div><div class="ttdoc">Removes the element at index and fills the gap by swapping in the last element.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:302</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a820dddee4c830c06fab015b887e474bd"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a820dddee4c830c06fab015b887e474bd">ezSmallArrayBase::RemoveAndSwap</a></div><div class="ttdeci">bool RemoveAndSwap(const T &amp;value)</div><div class="ttdoc">Removes the first occurrence of value and fills the gap by swapping in the last element.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:279</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a8fccbb4e33c365fc8bdab7d9490cd9df"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a8fccbb4e33c365fc8bdab7d9490cd9df">ezSmallArrayBase::MoveFrom</a></div><div class="ttdeci">void MoveFrom(ezSmallArrayBase&lt; T, Size &gt; &amp;&amp;other, ezAllocatorBase *pAllocator)</div><div class="ttdoc">Moves the data from some other array into this one.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:69</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a97de18ad1c8ffa22da8c77907f10341b"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a97de18ad1c8ffa22da8c77907f10341b">ezSmallArrayBase::CopyFrom</a></div><div class="ttdeci">void CopyFrom(const ezArrayPtr&lt; const T &gt; &amp;other, ezAllocatorBase *pAllocator)</div><div class="ttdoc">Copies the data from some other array into this one.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:32</div></div>
<div class="ttc" id="aclassez_small_array_base_htm"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm">ezSmallArrayBase</a></div><div class="ttdoc">Implementation of a dynamically growing array with in-place storage and small memory overhead.</div><div class="ttdef"><b>Definition:</b> SmallArray.h:16</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a258eaf177ae66072d013917c8f439b2d"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a258eaf177ae66072d013917c8f439b2d">ezSmallArrayBase::GetArrayPtr</a></div><div class="ttdeci">ezArrayPtr&lt; T &gt; GetArrayPtr()</div><div class="ttdoc">Returns an array pointer to the array data, or an empty array pointer if the array is empty.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:472</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a035aabb33113bf853276208dcb524f04"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a035aabb33113bf853276208dcb524f04">ezSmallArrayBase::GetData</a></div><div class="ttdeci">T * GetData()</div><div class="ttdoc">Returns a pointer to the array data, or nullptr if the array is empty.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:454</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a5787f727bd1a20181e3e2150c7d37fc2"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a5787f727bd1a20181e3e2150c7d37fc2">ezSmallArrayBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:232</div></div>
<div class="ttc" id="aclassez_small_array_htm"><div class="ttname"><a href="../../d0/d0c/classez_small_array.htm">ezSmallArray</a></div><div class="ttdef"><b>Definition:</b> SmallArray.h:216</div></div>
<div class="ttc" id="astructreverse__pointer__iterator_htm"><div class="ttname"><a href="../../d3/df2/structreverse__pointer__iterator.htm">reverse_pointer_iterator</a></div><div class="ttdoc">Non-Const class for Pointer like reverse iterators.</div><div class="ttdef"><b>Definition:</b> ArrayIterator.h:215</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a9fd0a49960e146262101081c5ae0feeb"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">ezMemoryUtils::Prepend</a></div><div class="ttdeci">static void Prepend(T *pDestination, const T &amp;source, size_t uiCount)</div><div class="ttdoc">Moves uiCount objects in pDestination by one object and copies source to the free space.</div></div>
<div class="ttc" id="astructez_is_pod_type_htm"><div class="ttname"><a href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType</a></div><div class="ttdoc">If there is an % operator which takes a TypeIsPod and returns a CompileTimeTrueType T is Pod....</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:43</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_add65b87c39dade4ee7b0671c16b10a39"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#add65b87c39dade4ee7b0671c16b10a39">ezMemoryUtils::Destruct</a></div><div class="ttdeci">static void Destruct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Destructs uiCount objects of type T at pDestination.</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a90abaa8230bacd395e9927b685d385f5"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a90abaa8230bacd395e9927b685d385f5">ezSmallArrayBase::EnsureCount</a></div><div class="ttdeci">void EnsureCount(ezUInt16 uiCount, ezAllocatorBase *pAllocator)</div><div class="ttdoc">Ensures the container has at least uiCount elements. Ie. calls SetCount() if the container has fewer ...</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:190</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a803f880237ba7b654211a9595b6d6795"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a803f880237ba7b654211a9595b6d6795">ezSmallArrayBase::ExpandAndGetRef</a></div><div class="ttdeci">T &amp; ExpandAndGetRef(ezAllocatorBase *pAllocator)</div><div class="ttdoc">Grows the array by one element and returns a reference to the newly created element.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:348</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a1738f62dcb310db3108fa70cff237c4f"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a1738f62dcb310db3108fa70cff237c4f">ezSmallArrayBase::RemoveAtAndCopy</a></div><div class="ttdeci">void RemoveAtAndCopy(ezUInt32 uiIndex, ezUInt32 uiNumElements=1)</div><div class="ttdoc">Removes the element at index and fills the gap by shifting all following elements.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:291</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a744d60b4b000c61f2dd3819a12410595"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a744d60b4b000c61f2dd3819a12410595">ezMemoryUtils::IsEqual</a></div><div class="ttdeci">static bool IsEqual(const T *a, const T *b, size_t uiCount=1)</div><div class="ttdoc">Tests if objects of type T from pSource and pDestination are equal.</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a9f0ef09d5e9ad5c283728bb56a42f48d"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a9f0ef09d5e9ad5c283728bb56a42f48d">ezSmallArrayBase::PeekBack</a></div><div class="ttdeci">T &amp; PeekBack()</div><div class="ttdoc">Returns the last element of the array.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:419</div></div>
<div class="ttc" id="aclassez_sorting_htm_a3663e52430292736a1f756b9a56a460a"><div class="ttname"><a href="../../d5/d95/classez_sorting.htm#a3663e52430292736a1f756b9a56a460a">ezSorting::QuickSort</a></div><div class="ttdeci">static void QuickSort(Container &amp;inout_container, const Comparer &amp;comparer=Comparer())</div><div class="ttdoc">Sorts the elements in container using a in-place quick sort implementation (not stable).</div><div class="ttdef"><b>Definition:</b> Sorting_inl.h:3</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a0b66ce1a35b2f1659ba61c534969dae4"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a0b66ce1a35b2f1659ba61c534969dae4">ezSmallArrayBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns true, if the array does not contain any elements.</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:226</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a16800fa3189279c4ce38798052d913cd"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a16800fa3189279c4ce38798052d913cd">ezMemoryUtils::DefaultConstruct</a></div><div class="ttdeci">static void DefaultConstruct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Default constructs uiCount objects of type T in a raw buffer at pDestination regardless of T being a ...</div></div>
<div class="ttc" id="aclassez_small_array_base_htm_a985ee77c3751c5a007143f128af1bbd5"><div class="ttname"><a href="../../d4/d0b/classez_small_array_base.htm#a985ee77c3751c5a007143f128af1bbd5">ezSmallArrayBase::LastIndexOf</a></div><div class="ttdeci">ezUInt32 LastIndexOf(const T &amp;value, ezUInt32 uiStartIndex=ezSmallInvalidIndex) const</div><div class="ttdoc">Searches for the last occurrence of the given value and returns its index or ezInvalidIndex if not fo...</div><div class="ttdef"><b>Definition:</b> SmallArray_inl.h:335</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_6b567e6755824bd0b8ffd754b9d67ac0.htm">Containers</a></li><li class="navelem"><a class="el" href="../../dir_ab7c7fd106dde24a64865a60f78fe0d2.htm">Implementation</a></li><li class="navelem"><b>SmallArray_inl.h</b></li>
    <li class="footer">Generated on Sat Nov 11 2023 19:40:52 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
