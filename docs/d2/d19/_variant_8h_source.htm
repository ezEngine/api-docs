<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Types/Variant.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d2/d19/_variant_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Variant.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;Foundation/Algorithm/HashingUtils.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;Foundation/Containers/DynamicArray.h&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Containers/HashTable.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;Foundation/Math/Declarations.h&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;Foundation/Strings/HashedString.h&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;Foundation/Threading/AtomicInteger.h&gt;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;Foundation/Types/TypedPointer.h&gt;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;Foundation/Types/Types.h&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;Foundation/Types/VariantType.h&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/DynamicRTTI.h&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;Foundation/Utilities/ConversionUtils.h&gt;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">class </span><a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../d2/d31/structez_typed_object.htm">   23</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d2/d31/structez_typed_object.htm">ezTypedObject</a></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  EZ_DECLARE_POD_TYPE();</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">void</span>* m_pObject = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* m_pType = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="../../d2/d31/structez_typed_object.htm">ezTypedObject</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> m_pObject == rhs.m_pObject;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  }</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code" href="../../d2/d31/structez_typed_object.htm">ezTypedObject</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> m_pObject != rhs.m_pObject;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  }</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;};</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm">   46</a></span>&#160;<span class="keyword">class </span>EZ_FOUNDATION_DLL <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../da/d6c/structez_variant_type.htm">Type</a> = <a class="code" href="../../da/d6c/structez_variant_type.htm">ezVariantType</a>;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../df/da8/structez_variant_type_deduction.htm">TypeDeduction</a> = <a class="code" href="../../df/da8/structez_variant_type_deduction.htm">ezVariantTypeDeduction&lt;T&gt;</a>;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="../../d0/dfa/structez_variant_1_1_string_wrapper.htm">   54</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../d0/dfa/structez_variant_1_1_string_wrapper.htm">StringWrapper</a></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    EZ_ALWAYS_INLINE <a class="code" href="../../d0/dfa/structez_variant_1_1_string_wrapper.htm">StringWrapper</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szStr)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      : m_str(szStr)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* m_str;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  };</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; other); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp;&amp; other) noexcept; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; value);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> ezInt8&amp; value);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> ezUInt8&amp; value);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> ezInt16&amp; value);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> ezUInt16&amp; value);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> ezInt32&amp; value);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> ezUInt32&amp; value);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> ezInt64&amp; value);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> ezUInt64&amp; value);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <span class="keywordtype">float</span>&amp; value);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <span class="keywordtype">double</span>&amp; value);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d01/classez_color.htm">ezColor</a>&amp; value);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d1/df8/classez_vec2_template.htm">ezVec2</a>&amp; value);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>&amp; value);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/dd2/classez_vec4_template.htm">ezVec4</a>&amp; value);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d1/df8/classez_vec2_template.htm">ezVec2I32</a>&amp; value);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3I32</a>&amp; value);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/dd2/classez_vec4_template.htm">ezVec4I32</a>&amp; value);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d1/df8/classez_vec2_template.htm">ezVec2U32</a>&amp; value);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3U32</a>&amp; value);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/dd2/classez_vec4_template.htm">ezVec4U32</a>&amp; value);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../de/d15/classez_quat_template.htm">ezQuat</a>&amp; value);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../db/daf/classez_mat3_template.htm">ezMat3</a>&amp; value);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d9b/classez_mat4_template.htm">ezMat4</a>&amp; value);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d3/db1/classez_transform_template.htm">ezTransform</a>&amp; value);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* value);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezString</a>&amp; value);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezUntrackedString</a>&amp; value);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a>&amp; value, <span class="keywordtype">bool</span> bCopyString = <span class="keyword">true</span>);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d2/d4f/classez_dynamic_array.htm">ezDataBuffer</a>&amp; value);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d3/d90/structez_time.htm">ezTime</a>&amp; value);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/d89/classez_uuid.htm">ezUuid</a>&amp; value);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../db/d6f/classez_angle.htm">ezAngle</a>&amp; value);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/d51/classez_color_gamma_u_b.htm">ezColorGammaUB</a>&amp; value);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../de/dce/classez_hashed_string.htm">ezHashedString</a>&amp; value);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../db/dcf/classez_temp_hashed_string.htm">ezTempHashedString</a>&amp; value);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d2/d4f/classez_dynamic_array.htm">ezVariantArray</a>&amp; value);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d8/d86/classez_hash_table.htm">ezVariantDictionary</a>&amp; value);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d3/d1f/structez_typed_pointer.htm">ezTypedPointer</a>&amp; value);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d2/d31/structez_typed_object.htm">ezTypedObject</a>&amp; value);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a30fc1012cda837e3ebb8fcce36a51576">ezVariantClass::CustomTypeCast</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> T&amp; value);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keyword">const</span> T* value);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(<span class="keywordtype">void</span>* value, <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keywordtype">void</span> CopyTypedObject(<span class="keyword">const</span> <span class="keywordtype">void</span>* value, <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keywordtype">void</span> MoveTypedObject(<span class="keywordtype">void</span>* value, <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  ~<a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>();</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; other); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="keywordtype">void</span> operator=(<a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp;&amp; other) noexcept; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> T&amp; value); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; other) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; other) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> T&amp; other) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> T&amp; other) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <span class="keywordtype">bool</span> IsValid() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <span class="keywordtype">bool</span> IsNumber() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <span class="keywordtype">bool</span> IsFloatingPoint() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <span class="keywordtype">bool</span> IsString() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keywordtype">bool</span> IsHashedString() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a544fe59452cc4a860699b3c45d99b37c">ezVariantClass::DirectCast</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  <span class="keywordtype">bool</span> IsA() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab5146ef580ac0d56e43e0b29edcdab18">ezVariantClass::PointerCast</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keywordtype">bool</span> IsA() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab10e0ffd04891df70e6a65c01c3c4f94">ezVariantClass::TypedObject</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keywordtype">bool</span> IsA() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a30fc1012cda837e3ebb8fcce36a51576">ezVariantClass::CustomTypeCast</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <span class="keywordtype">bool</span> IsA() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">Type::Enum</a> GetType() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a544fe59452cc4a860699b3c45d99b37c">ezVariantClass::DirectCast</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  <span class="keyword">const</span> T&amp; Get() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab5146ef580ac0d56e43e0b29edcdab18">ezVariantClass::PointerCast</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  T Get() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab10e0ffd04891df70e6a65c01c3c4f94">ezVariantClass::TypedObject</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <span class="keyword">const</span> T Get() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a30fc1012cda837e3ebb8fcce36a51576">ezVariantClass::CustomTypeCast</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <span class="keyword">const</span> T&amp; Get() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  <a class="code" href="../../d3/d1f/structez_typed_pointer.htm">ezTypedPointer</a> GetWriteAccess(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a544fe59452cc4a860699b3c45d99b37c">ezVariantClass::DirectCast</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  T&amp; GetWritable(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab5146ef580ac0d56e43e0b29edcdab18">ezVariantClass::PointerCast</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  T GetWritable(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a30fc1012cda837e3ebb8fcce36a51576">ezVariantClass::CustomTypeCast</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  T&amp; GetWritable(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">void</span>* GetData() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* GetReflectedType() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a> operator[](ezUInt32 uiIndex) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a> operator[](<a class="code" href="../../d0/dfa/structez_variant_1_1_string_wrapper.htm">StringWrapper</a> key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="keywordtype">bool</span> CanConvertTo() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <span class="keywordtype">bool</span> CanConvertTo(<a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">Type::Enum</a> type) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  T ConvertTo(<a class="code" href="../../d4/da9/structez_result.htm">ezResult</a>* out_pConversionStatus = <span class="keyword">nullptr</span>) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a> ConvertTo(<a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">Type::Enum</a> type, <a class="code" href="../../d4/da9/structez_result.htm">ezResult</a>* out_pConversionStatus = <span class="keyword">nullptr</span>) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Functor, <span class="keyword">class</span>... Args&gt;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="keyword">static</span> <span class="keyword">auto</span> DispatchTo(Functor&amp; ref_functor, <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">Type::Enum</a> type, Args&amp;&amp;... args); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  ezUInt64 ComputeHash(ezUInt64 uiSeed = 0) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="../../da/d8a/classez_variant_helper.htm">ezVariantHelper</a>;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  <span class="keyword">friend</span> <span class="keyword">struct </span>CompareFunc;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  <span class="keyword">friend</span> <span class="keyword">struct </span>GetTypeFromVariantFunc;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="keyword">struct </span>SharedData</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordtype">void</span>* m_Ptr;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* m_pType;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <a class="code" href="../../da/d01/classez_atomic_integer.htm">ezAtomicInteger32</a> m_uiRef = 1;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    EZ_ALWAYS_INLINE SharedData(<span class="keywordtype">void</span>* pPtr, <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType)</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;      : m_Ptr(pPtr)</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;      , m_pType(pType)</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    }</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keyword">virtual</span> ~SharedData() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keyword">virtual</span> SharedData* Clone() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;  };</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  <span class="keyword">class </span>TypedSharedData : <span class="keyword">public</span> SharedData</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  <span class="keyword">private</span>:</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    T m_t;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    EZ_ALWAYS_INLINE TypedSharedData(<span class="keyword">const</span> T&amp; value, <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType = <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;      : SharedData(&amp;m_t, pType)</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;      , m_t(value)</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    }</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keyword">virtual</span> SharedData* Clone()<span class="keyword"> const override</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;      <span class="keywordflow">return</span> EZ_DEFAULT_NEW(TypedSharedData&lt;T&gt;, m_t, m_pType);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  };</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160; </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  <span class="keyword">class </span>RTTISharedData : <span class="keyword">public</span> SharedData</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  {</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    RTTISharedData(<span class="keywordtype">void</span>* pData, <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    ~RTTISharedData();</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160; </div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keyword">virtual</span> SharedData* Clone() <span class="keyword">const override</span>;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  };</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160; </div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  <span class="keyword">struct </span>InlinedStruct</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  {</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">int</span> DataSize = 4 * <span class="keyword">sizeof</span>(float) - <span class="keyword">sizeof</span>(<span class="keywordtype">void</span>*);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    ezUInt8 m_Data[DataSize];</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* m_pType;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  };</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  <span class="keyword">union </span>Data</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  {</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordtype">float</span> f[4];</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    SharedData* shared;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    InlinedStruct inlined;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  } m_Data;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  ezUInt32 m_uiType : 31;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  ezUInt32 m_bIsShared : 1; <span class="comment">// NOLINT(ez*)</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  <span class="keywordtype">void</span> InitInplace(<span class="keyword">const</span> T&amp; value);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  <span class="keywordtype">void</span> InitShared(<span class="keyword">const</span> T&amp; value);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160; </div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  <span class="keywordtype">void</span> InitTypedObject(<span class="keyword">const</span> T&amp; value, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt&lt;0&gt;</a>);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  <span class="keywordtype">void</span> InitTypedObject(<span class="keyword">const</span> T&amp; value, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt&lt;1&gt;</a>);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160; </div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  <span class="keywordtype">void</span> InitTypedPointer(<span class="keywordtype">void</span>* value, <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;  <span class="keywordtype">void</span> Release();</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  <span class="keywordtype">void</span> CopyFrom(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; other);</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  <span class="keywordtype">void</span> MoveFrom(<a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp;&amp; other);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a544fe59452cc4a860699b3c45d99b37c">ezVariantClass::DirectCast</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  <span class="keyword">const</span> T&amp; Cast() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab5146ef580ac0d56e43e0b29edcdab18">ezVariantClass::PointerCast</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  T Cast() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab10e0ffd04891df70e6a65c01c3c4f94">ezVariantClass::TypedObject</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;  <span class="keyword">const</span> T Cast() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a30fc1012cda837e3ebb8fcce36a51576">ezVariantClass::CustomTypeCast</a>, <span class="keywordtype">int</span>&gt; = 0&gt;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  <span class="keyword">const</span> T&amp; Cast() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160; </div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsNumberStatic(ezUInt32 type);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsFloatingPointStatic(ezUInt32 type);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsStringStatic(ezUInt32 type);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsHashedStringStatic(ezUInt32 type);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsVector2Static(ezUInt32 type);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsVector3Static(ezUInt32 type);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsVector4Static(ezUInt32 type);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160; </div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;  <span class="comment">// Needed to prevent including ezRTTI in ezVariant.h</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsDerivedFrom(<span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType1, <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType2);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;  <span class="keyword">static</span> <a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a> GetTypeName(<span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160; </div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  T ConvertNumber() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;};</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;EZ_ALWAYS_INLINE T ezDynamicCast(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; variant)</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;{</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  <span class="keywordflow">if</span> (variant.<a class="code" href="../../de/de6/classez_variant.htm#a694f12156828e7de34c4d592ef554aef">IsA</a>&lt;T&gt;())</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keywordflow">return</span> variant.<a class="code" href="../../de/de6/classez_variant.htm#a053a9279ed97d59955850d0e0760327c">Get</a>&lt;T&gt;();</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;  }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160; </div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;}</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160; </div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">// Simple math operator overloads. An invalid variant is returned if the given variants have incompatible types.</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;EZ_FOUNDATION_DLL <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a> operator+(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; a, <span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; b);</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;EZ_FOUNDATION_DLL <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a> operator-(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; a, <span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; b);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;EZ_FOUNDATION_DLL <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a> operator*(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; a, <span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; b);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;EZ_FOUNDATION_DLL <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a> operator/(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; a, <span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; b);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160; </div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../db/d78/namespaceez_math.htm">ezMath</a></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;{</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;  EZ_FOUNDATION_DLL <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a> <a class="code" href="../../db/d78/namespaceez_math.htm#a70aea4554d1be096b314db9f10c9f1fc">Lerp</a>(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; a, <span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; b, <span class="keywordtype">double</span> fFactor);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;} <span class="comment">// namespace ezMath</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160; </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="preprocessor">#include &lt;Foundation/Types/Implementation/VariantHelper_inl.h&gt;</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160; </div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="preprocessor">#include &lt;Foundation/Types/Implementation/Variant_inl.h&gt;</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructez_variant_class_htm_ae69956de86b79976526628f7847c6e29ab10e0ffd04891df70e6a65c01c3c4f94"><div class="ttname"><a href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab10e0ffd04891df70e6a65c01c3c4f94">ezVariantClass::TypedObject</a></div><div class="ttdeci">@ TypedObject</div><div class="ttdoc">ezTypedObject cast. Needed because at no point does and ezVariant ever store a ezTypedObject so it ca...</div><div class="ttdef"><b>Definition:</b> VariantType.h:89</div></div>
<div class="ttc" id="astructez_result_htm"><div class="ttname"><a href="../../d4/da9/structez_result.htm">ezResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition:</b> Types.h:50</div></div>
<div class="ttc" id="aclassez_color_htm"><div class="ttname"><a href="../../dd/d01/classez_color.htm">ezColor</a></div><div class="ttdoc">ezColor represents and RGBA color in linear color space. Values are stored as float,...</div><div class="ttdef"><b>Definition:</b> Color.h:43</div></div>
<div class="ttc" id="astructez_typed_object_htm"><div class="ttname"><a href="../../d2/d31/structez_typed_object.htm">ezTypedObject</a></div><div class="ttdoc">Defines a reference to an immutable object owned by an ezVariant.</div><div class="ttdef"><b>Definition:</b> Variant.h:23</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a></div><div class="ttdoc">This class holds information about reflected types. Each instance represents one type that is known t...</div><div class="ttdef"><b>Definition:</b> RTTI.h:28</div></div>
<div class="ttc" id="astructez_time_htm"><div class="ttname"><a href="../../d3/d90/structez_time.htm">ezTime</a></div><div class="ttdoc">The time class encapsulates a double value storing the time in seconds.</div><div class="ttdef"><b>Definition:</b> Time.h:11</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">ezVariantType::Enum</a></div><div class="ttdeci">Enum</div><div class="ttdoc">This enum describes the type of data that is currently stored inside the variant. Note that changes t...</div><div class="ttdef"><b>Definition:</b> VariantType.h:25</div></div>
<div class="ttc" id="aclassez_color_gamma_u_b_htm"><div class="ttname"><a href="../../da/d51/classez_color_gamma_u_b.htm">ezColorGammaUB</a></div><div class="ttdoc">A 8bit per channel unsigned normalized (values interpreted as 0-1) color storage format that represen...</div><div class="ttdef"><b>Definition:</b> Color8UNorm.h:69</div></div>
<div class="ttc" id="astructez_variant_class_htm_ae69956de86b79976526628f7847c6e29a30fc1012cda837e3ebb8fcce36a51576"><div class="ttname"><a href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a30fc1012cda837e3ebb8fcce36a51576">ezVariantClass::CustomTypeCast</a></div><div class="ttdeci">@ CustomTypeCast</div><div class="ttdoc">Custom object types.</div><div class="ttdef"><b>Definition:</b> VariantType.h:90</div></div>
<div class="ttc" id="astructez_variant_type_deduction_htm"><div class="ttname"><a href="../../df/da8/structez_variant_type_deduction.htm">ezVariantTypeDeduction</a></div><div class="ttdoc">A helper struct to convert the C++ type, which is passed as the template argument,...</div><div class="ttdef"><b>Definition:</b> VariantType.h:96</div></div>
<div class="ttc" id="anamespaceez_math_htm_a70aea4554d1be096b314db9f10c9f1fc"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a70aea4554d1be096b314db9f10c9f1fc">ezMath::Lerp</a></div><div class="ttdeci">EZ_FORCE_INLINE T Lerp(T f1, T f2, float fFactor)</div><div class="ttdoc">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:227</div></div>
<div class="ttc" id="aclassez_variant_htm_a053a9279ed97d59955850d0e0760327c"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a053a9279ed97d59955850d0e0760327c">ezVariant::Get</a></div><div class="ttdeci">const T &amp; Get() const</div><div class="ttdoc">Returns the variants value as the provided type.</div></div>
<div class="ttc" id="aclassez_temp_hashed_string_htm"><div class="ttname"><a href="../../db/dcf/classez_temp_hashed_string.htm">ezTempHashedString</a></div><div class="ttdoc">A class to use together with ezHashedString for quick comparisons with temporary strings that need no...</div><div class="ttdef"><b>Definition:</b> HashedString.h:154</div></div>
<div class="ttc" id="aclassez_variant_htm_a694f12156828e7de34c4d592ef554aef"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a694f12156828e7de34c4d592ef554aef">ezVariant::IsA</a></div><div class="ttdeci">bool IsA() const</div><div class="ttdoc">Returns whether the stored type is exactly the given type.</div></div>
<div class="ttc" id="astructez_hybrid_string_htm"><div class="ttname"><a href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt; 32, ezDefaultAllocatorWrapper &gt;</a></div></div>
<div class="ttc" id="astructez_variant_class_htm_ae69956de86b79976526628f7847c6e29ab5146ef580ac0d56e43e0b29edcdab18"><div class="ttname"><a href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab5146ef580ac0d56e43e0b29edcdab18">ezVariantClass::PointerCast</a></div><div class="ttdeci">@ PointerCast</div><div class="ttdoc">Any cast to T*.</div><div class="ttdef"><b>Definition:</b> VariantType.h:88</div></div>
<div class="ttc" id="aclassez_mat4_template_htm"><div class="ttname"><a href="../../d7/d9b/classez_mat4_template.htm">ezMat4Template&lt; float &gt;</a></div></div>
<div class="ttc" id="aclassez_mat3_template_htm"><div class="ttname"><a href="../../db/daf/classez_mat3_template.htm">ezMat3Template&lt; float &gt;</a></div></div>
<div class="ttc" id="aclassez_variant_helper_htm"><div class="ttname"><a href="../../da/d8a/classez_variant_helper.htm">ezVariantHelper</a></div><div class="ttdef"><b>Definition:</b> VariantHelper_inl.h:174</div></div>
<div class="ttc" id="astructez_typed_pointer_htm"><div class="ttname"><a href="../../d3/d1f/structez_typed_pointer.htm">ezTypedPointer</a></div><div class="ttdoc">A typed raw pointer.</div><div class="ttdef"><b>Definition:</b> TypedPointer.h:12</div></div>
<div class="ttc" id="aclassez_angle_htm"><div class="ttname"><a href="../../db/d6f/classez_angle.htm">ezAngle</a></div><div class="ttdoc">Float wrapper struct for a safe usage and conversions of angles.</div><div class="ttdef"><b>Definition:</b> Angle.h:9</div></div>
<div class="ttc" id="aclassez_dynamic_array_htm"><div class="ttname"><a href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray&lt; ezUInt8 &gt;</a></div></div>
<div class="ttc" id="aclassez_variant_htm"><div class="ttname"><a href="../../de/de6/classez_variant.htm">ezVariant</a></div><div class="ttdoc">ezVariant is a class that can store different types of variables, which is useful in situations where...</div><div class="ttdef"><b>Definition:</b> Variant.h:46</div></div>
<div class="ttc" id="anamespaceez_math_htm"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm">ezMath</a></div><div class="ttdoc">This namespace provides common math-functionality as functions.</div><div class="ttdef"><b>Definition:</b> Constants.h:5</div></div>
<div class="ttc" id="astructez_variant_1_1_string_wrapper_htm"><div class="ttname"><a href="../../d0/dfa/structez_variant_1_1_string_wrapper.htm">ezVariant::StringWrapper</a></div><div class="ttdoc">helper struct to wrap a string pointer</div><div class="ttdef"><b>Definition:</b> Variant.h:54</div></div>
<div class="ttc" id="aclassez_quat_template_htm"><div class="ttname"><a href="../../de/d15/classez_quat_template.htm">ezQuatTemplate&lt; float &gt;</a></div></div>
<div class="ttc" id="aclassez_uuid_htm"><div class="ttname"><a href="../../da/d89/classez_uuid.htm">ezUuid</a></div><div class="ttdoc">This data type is the abstraction for 128-bit Uuid (also known as GUID) instances.</div><div class="ttdef"><b>Definition:</b> Uuid.h:10</div></div>
<div class="ttc" id="astructez_string_view_htm"><div class="ttname"><a href="../../de/db8/structez_string_view.htm">ezStringView</a></div><div class="ttdoc">ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition:</b> StringView.h:23</div></div>
<div class="ttc" id="aclassez_hashed_string_htm"><div class="ttname"><a href="../../de/dce/classez_hashed_string.htm">ezHashedString</a></div><div class="ttdoc">This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...</div><div class="ttdef"><b>Definition:</b> HashedString.h:24</div></div>
<div class="ttc" id="astructez_variant_class_htm_ae69956de86b79976526628f7847c6e29a544fe59452cc4a860699b3c45d99b37c"><div class="ttname"><a href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a544fe59452cc4a860699b3c45d99b37c">ezVariantClass::DirectCast</a></div><div class="ttdeci">@ DirectCast</div><div class="ttdoc">A standard type.</div><div class="ttdef"><b>Definition:</b> VariantType.h:87</div></div>
<div class="ttc" id="astructez_variant_type_htm"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm">ezVariantType</a></div><div class="ttdoc">This enum describes the type of data that is currently stored inside the variant.</div><div class="ttdef"><b>Definition:</b> VariantType.h:19</div></div>
<div class="ttc" id="astructez_trait_int_htm"><div class="ttname"><a href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a></div><div class="ttdoc">Type traits.</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:9</div></div>
<div class="ttc" id="aclassez_transform_template_htm"><div class="ttname"><a href="../../d3/db1/classez_transform_template.htm">ezTransformTemplate&lt; float &gt;</a></div></div>
<div class="ttc" id="aclassez_vec2_template_htm"><div class="ttname"><a href="../../d1/df8/classez_vec2_template.htm">ezVec2Template&lt; float &gt;</a></div></div>
<div class="ttc" id="aclassez_hash_table_htm"><div class="ttname"><a href="../../d8/d86/classez_hash_table.htm">ezHashTable&lt; ezString, ezVariant &gt;</a></div></div>
<div class="ttc" id="aclassez_vec4_template_htm"><div class="ttname"><a href="../../da/dd2/classez_vec4_template.htm">ezVec4Template&lt; float &gt;</a></div></div>
<div class="ttc" id="aclassez_vec3_template_htm"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt; float &gt;</a></div></div>
<div class="ttc" id="aclassez_atomic_integer_htm"><div class="ttname"><a href="../../da/d01/classez_atomic_integer.htm">ezAtomicInteger&lt; ezInt32 &gt;</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_f95f7c440efc771b227d40e9293549bd.htm">Types</a></li><li class="navelem"><b>Variant.h</b></li>
    <li class="footer">Generated on Sat Nov 11 2023 17:04:22 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
