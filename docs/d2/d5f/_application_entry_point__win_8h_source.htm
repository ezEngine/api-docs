<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: Code/Engine/Foundation/Application/Implementation/Win/ApplicationEntryPoint_win.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search','.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d2/d5f/_application_entry_point__win_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ApplicationEntryPoint_win.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160; </div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160; </div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;Foundation/Basics/Platform/Win/MinWindows.h&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;Foundation/Logging/Log.h&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;Foundation/Memory/MemoryTracker.h&gt;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;Foundation/Threading/Lock.h&gt;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;Foundation/Threading/Mutex.h&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">namespace </span>ezApplicationDetails</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;{</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  EZ_FOUNDATION_DLL <span class="keywordtype">void</span> SetConsoleCtrlHandler(ezMinWindows::BOOL(EZ_WINDOWS_WINAPI* consoleHandler)(ezMinWindows::DWORD dwCtrlType));</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  EZ_FOUNDATION_DLL <a class="code" href="../../dd/dbe/classez_mutex.htm">ezMutex</a>&amp; GetShutdownMutex();</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> AppClass, <span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  <span class="keywordtype">int</span> ConsoleEntry(<span class="keywordtype">int</span> argc, <span class="keyword">const</span> <span class="keywordtype">char</span>** argv, Args&amp;&amp;... arguments)</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  {</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_COMPILER_MSVC) </span><span class="comment">// Internal compiler error in MSVC. Can not align buffer otherwise the compiler will crash.</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">char</span> appBuffer[<span class="keyword">sizeof</span>(AppClass)]; <span class="comment">// Not on the stack to cope with smaller stacks.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    EZ_ALIGN_VARIABLE(<span class="keyword">static</span> <span class="keywordtype">char</span> appBuffer[<span class="keyword">sizeof</span>(AppClass)], EZ_ALIGNMENT_OF(AppClass)); <span class="comment">// Not on the stack to cope with smaller stacks.</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="comment">// This mutex will prevent the console shutdown handler to return</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="comment">// as long as this entry point is not finished executing</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="comment">// (see consoleHandler below).</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    EZ_LOCK(GetShutdownMutex());</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keyword">static</span> AppClass* pApp = <span class="keyword">new</span> (appBuffer) AppClass(std::forward&lt;Args&gt;(arguments)...);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    pApp-&gt;SetCommandLineArguments((ezUInt32)argc, argv);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="comment">// This handler overrides the default handler (which would</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="comment">// call ExitProcess which leads to unorderly engine shutdowns)</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> consoleHandler = [](ezMinWindows::DWORD dwCtrlType) -&gt; ezMinWindows::BOOL {</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;      <span class="comment">// We have to wait until the application has shut down orderly</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;      <span class="comment">// since Windows will kill everything after this handler returns</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      pApp-&gt;SetReturnCode(dwCtrlType);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;      pApp-&gt;RequestQuit();</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      EZ_LOCK(GetShutdownMutex());</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;      <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    };</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    SetConsoleCtrlHandler(consoleHandler);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    ezRun(pApp); <span class="comment">// Life cycle &amp; run method calling</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> iReturnCode = pApp-&gt;GetReturnCode();</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span> (iReturnCode != 0)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      std::string text = pApp-&gt;TranslateReturnCode();</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      <span class="keywordflow">if</span> (!text.empty())</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <a class="code" href="../../dc/d9e/classez_log.htm#a151496b9618cf53b4389d8f125ee9e2c">ezLog::Printf</a>(<span class="stringliteral">&quot;Return Code: &#39;%s&#39;\n&quot;</span>, text.c_str());</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> memLeaks = pApp-&gt;IsMemoryLeakReportingEnabled();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    pApp-&gt;~AppClass();</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    memset((<span class="keywordtype">void</span>*)pApp, 0, <span class="keyword">sizeof</span>(AppClass));</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">if</span> (memLeaks)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      ezMemoryTracker::DumpMemoryLeaks();</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">return</span> iReturnCode;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> AppClass, <span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="keywordtype">int</span> ApplicationEntry(Args&amp;&amp;... arguments)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_COMPILER_MSVC) </span><span class="comment">// Internal compiler error in MSVC. Can not align buffer otherwise the compiler will crash.</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">char</span> appBuffer[<span class="keyword">sizeof</span>(AppClass)]; <span class="comment">// Not on the stack to cope with smaller stacks.</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    EZ_ALIGN_VARIABLE(<span class="keyword">static</span> <span class="keywordtype">char</span> appBuffer[<span class="keyword">sizeof</span>(AppClass)], EZ_ALIGNMENT_OF(AppClass)); <span class="comment">// Not on the stack to cope with smaller stacks.</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    AppClass* pApp = <span class="keyword">new</span> (appBuffer) AppClass(std::forward&lt;Args&gt;(arguments)...);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    pApp-&gt;SetCommandLineArguments((ezUInt32)__argc, <span class="keyword">const_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>**<span class="keyword">&gt;</span>(__argv));</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    ezRun(pApp); <span class="comment">// Life cycle &amp; run method calling</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> iReturnCode = pApp-&gt;GetReturnCode();</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">if</span> (iReturnCode != 0)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      std::string text = pApp-&gt;TranslateReturnCode();</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      <span class="keywordflow">if</span> (!text.empty())</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <a class="code" href="../../dc/d9e/classez_log.htm#a151496b9618cf53b4389d8f125ee9e2c">ezLog::Printf</a>(<span class="stringliteral">&quot;Return Code: &#39;%s&#39;\n&quot;</span>, text.c_str());</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> memLeaks = pApp-&gt;IsMemoryLeakReportingEnabled();</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    pApp-&gt;~AppClass();</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    memset((<span class="keywordtype">void</span>*)pApp, 0, <span class="keyword">sizeof</span>(AppClass));</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">if</span> (memLeaks)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      ezMemoryTracker::DumpMemoryLeaks();</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">return</span> iReturnCode;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;} <span class="comment">// namespace ezApplicationDetails</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">#define EZ_CONSOLEAPP_ENTRY_POINT(AppClass, ...)                                \</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">  </span><span class="comment">/* Enables that on machines with multiple GPUs the NVIDIA GPU is preferred */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor">  extern &quot;C&quot;</span>                                                                    \</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  {                                                                             \</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    _declspec(dllexport) ezMinWindows::DWORD NvOptimusEnablement = 0x00000001;  \</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  }                                                                             \</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  int main(int argc, const char** argv) { return ezApplicationDetails::ConsoleEntry&lt;AppClass&gt;(argc, argv, __VA_ARGS__); }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">// If windows.h is already included use the native types, otherwise use types from ezMinWindows</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">// In EZ_APPLICATION_ENTRY_POINT we use macro magic to concatenate strings in such a way that depending on whether windows.h has</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">// been included in the mean time, either the macro is chosen which expands to the proper Windows.h type</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">// or the macro that expands to our ezMinWindows type.</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">// Unfortunately we cannot do the decision right here, as Windows.h may not yet be included, but may get included later.</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#define _EZ_APPLICATION_ENTRY_POINT_HINSTANCE HINSTANCE</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">#define _EZ_APPLICATION_ENTRY_POINT_LPSTR LPSTR</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">#define _EZ_APPLICATION_ENTRY_POINT_HINSTANCE_WINDOWS_ ezMinWindows::HINSTANCE</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">#define _EZ_APPLICATION_ENTRY_POINT_LPSTR_WINDOWS_ ezMinWindows::LPSTR</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor">#define EZ_APPLICATION_ENTRY_POINT(AppClass, ...)                                                                     \</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">  </span><span class="comment">/* Enables that on machines with multiple GPUs the NVIDIA GPU is preferred */</span><span class="preprocessor">                                       \</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">  extern &quot;C&quot;</span>                                                                                                          \</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  {                                                                                                                   \</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    _declspec(dllexport) ezMinWindows::DWORD NvOptimusEnablement = 0x00000001;                                        \</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  }                                                                                                                   \</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  int EZ_WINDOWS_CALLBACK WinMain(EZ_CONCAT(_EZ_, EZ_CONCAT(APPLICATION_ENTRY_POINT_HINSTANCE, _WINDOWS_)) hInstance, \</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    EZ_CONCAT(_EZ_, EZ_CONCAT(APPLICATION_ENTRY_POINT_HINSTANCE, _WINDOWS_)) hPrevInstance,                           \</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    EZ_CONCAT(_EZ_, EZ_CONCAT(APPLICATION_ENTRY_POINT_LPSTR, _WINDOWS_)) lpCmdLine, int nCmdShow)                     \</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  {                                                                                                                   \</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    return ezApplicationDetails::ApplicationEntry&lt;AppClass&gt;(__VA_ARGS__);                                             \</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  }</div>
<div class="ttc" id="aclassez_log_htm_a151496b9618cf53b4389d8f125ee9e2c"><div class="ttname"><a href="../../dc/d9e/classez_log.htm#a151496b9618cf53b4389d8f125ee9e2c">ezLog::Printf</a></div><div class="ttdeci">static void Printf(const char *szFormat,...)</div><div class="ttdoc">Calls low-level OS functionality to print a string to the typical outputs. Forwards to Print.</div><div class="ttdef"><b>Definition:</b> Log.cpp:238</div></div>
<div class="ttc" id="aclassez_mutex_htm"><div class="ttname"><a href="../../dd/dbe/classez_mutex.htm">ezMutex</a></div><div class="ttdoc">Provides a simple mechanism for mutual exclusion to prevent multiple threads from accessing a shared ...</div><div class="ttdef"><b>Definition:</b> Mutex.h:11</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_640add6f22af8b89d1469eb665eb8118.htm">Application</a></li><li class="navelem"><a class="el" href="../../dir_06656e6c934007ef3b2ab11ff68e20c5.htm">Implementation</a></li><li class="navelem"><a class="el" href="../../dir_24441b779c19ad2327f6f9a217bea079.htm">Win</a></li><li class="navelem"><b>ApplicationEntryPoint_win.h</b></li>
    <li class="footer">Generated on Tue Jun 8 2021 14:33:50 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
