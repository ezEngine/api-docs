<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/RendererCore/Lights/Implementation/ClusteredDataUtils.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function() { init_codefold(1); });
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('d7/d52/_clustered_data_utils_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">ClusteredDataUtils.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;RendererCore/Decals/DecalComponent.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;RendererCore/Lights/DirectionalLightComponent.h&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;RendererCore/Lights/FillLightComponent.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;RendererCore/Lights/Implementation/ReflectionProbeData.h&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;RendererCore/Lights/PointLightComponent.h&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="preprocessor">#include &lt;RendererCore/Lights/SpotLightComponent.h&gt;</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="preprocessor">#include &lt;RendererFoundation/Shader/ShaderUtils.h&gt;</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span> </div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="preprocessor">#include &lt;RendererCore/../../../Data/Base/Shaders/Common/LightData.h&gt;</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>EZ_DEFINE_AS_POD_TYPE(ezPerLightData);</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>EZ_DEFINE_AS_POD_TYPE(ezPerDecalData);</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>EZ_DEFINE_AS_POD_TYPE(ezPerReflectionProbeData);</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>EZ_DEFINE_AS_POD_TYPE(ezPerClusterData);</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span> </div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="preprocessor">#include &lt;Core/Graphics/Camera.h&gt;</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="preprocessor">#include &lt;Foundation/Math/Float16.h&gt;</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="preprocessor">#include &lt;Foundation/SimdMath/SimdConversion.h&gt;</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="preprocessor">#include &lt;Foundation/SimdMath/SimdVec4i.h&gt;</span></div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="preprocessor">#include &lt;Foundation/Utilities/GraphicsUtils.h&gt;</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span> </div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="keyword">namespace</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>{</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>  <span class="keyword">static</span> <span class="keywordtype">float</span> s_fMinLightDistance = 5.0f;</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>  <span class="keyword">static</span> <span class="keywordtype">float</span> s_fMaxLightDistance = 500.0f;</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>  <span class="keyword">static</span> <span class="keywordtype">float</span> s_fDepthSliceScale = (NUM_CLUSTERS_Z - 1) / (ezMath::Log2(s_fMaxLightDistance) - ezMath::Log2(s_fMinLightDistance));</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  <span class="keyword">static</span> <span class="keywordtype">float</span> s_fDepthSliceBias = -s_fDepthSliceScale * ezMath::Log2(s_fMinLightDistance) + 1.0f;</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span> </div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>  EZ_ALWAYS_INLINE <span class="keywordtype">float</span> GetDepthFromSliceIndex(ezUInt32 uiSliceIndex)</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>  {</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>    <span class="keywordflow">return</span> ezMath::Pow(2.0f, (uiSliceIndex - s_fDepthSliceBias + 1.0f) / s_fDepthSliceScale);</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>  }</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>  EZ_ALWAYS_INLINE ezUInt32 GetSliceIndexFromDepth(<span class="keywordtype">float</span> fLinearDepth)</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>  {</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#aaaedc100ad5d35ae5362021b9d1b0e7c">ezMath::Clamp</a>((ezInt32)(ezMath::Log2(fLinearDepth) * s_fDepthSliceScale + s_fDepthSliceBias), 0, NUM_CLUSTERS_Z - 1);</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>  }</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  EZ_ALWAYS_INLINE ezUInt32 GetClusterIndexFromCoord(ezUInt32 x, ezUInt32 y, ezUInt32 z)</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>  {</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>    <span class="keywordflow">return</span> z * NUM_CLUSTERS_XY + y * NUM_CLUSTERS_X + x;</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>  }</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span> </div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>  <span class="comment">// in order: tlf, trf, blf, brf, tln, trn, bln, brn</span></div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  EZ_FORCE_INLINE <span class="keywordtype">void</span> GetClusterCornerPoints(</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../d8/d90/classez_camera.htm">ezCamera</a>&amp; camera, <span class="keywordtype">float</span> fZf, <span class="keywordtype">float</span> fZn, <span class="keywordtype">float</span> fTanLeft, <span class="keywordtype">float</span> fTanRight, <span class="keywordtype">float</span> fTanBottom, <span class="keywordtype">float</span> fTanTop, ezInt32 x, ezInt32 y, ezInt32 z, <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>* out_pCorners)</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>  {</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>&amp; pos = camera.<a class="code hl_function" href="../../d8/d90/classez_camera.htm#a45d7f8210004c17f10100aca93b8e9ea">GetPosition</a>();</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>&amp; dirForward = camera.<a class="code hl_function" href="../../d8/d90/classez_camera.htm#aa35e8753fa325541b1ea5925d976217a">GetDirForwards</a>();</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>&amp; dirRight = camera.<a class="code hl_function" href="../../d8/d90/classez_camera.htm#a8fef98eebe1b79dd094c308341bcd74f">GetDirRight</a>();</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>&amp; dirUp = camera.<a class="code hl_function" href="../../d8/d90/classez_camera.htm#a4c00db1d0c90a393d5f7add4096c371e">GetDirUp</a>();</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fStartXf = fZf * fTanLeft;</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fStartYf = fZf * fTanBottom;</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fEndXf = fZf * fTanRight;</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fEndYf = fZf * fTanTop;</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span> </div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>    <span class="keywordtype">float</span> fStepXf = (fEndXf - fStartXf) / NUM_CLUSTERS_X;</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>    <span class="keywordtype">float</span> fStepYf = (fEndYf - fStartYf) / NUM_CLUSTERS_Y;</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span> </div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>    <span class="keywordtype">float</span> fXf = fStartXf + x * fStepXf;</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>    <span class="keywordtype">float</span> fYf = fStartYf + y * fStepYf;</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span> </div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>    out_pCorners[0] = pos + dirForward * fZf + dirRight * fXf - dirUp * fYf;</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>    out_pCorners[1] = out_pCorners[0] + dirRight * fStepXf;</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>    out_pCorners[2] = out_pCorners[0] - dirUp * fStepYf;</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>    out_pCorners[3] = out_pCorners[2] + dirRight * fStepXf;</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span> </div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fStartXn = fZn * fTanLeft;</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fStartYn = fZn * fTanBottom;</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fEndXn = fZn * fTanRight;</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fEndYn = fZn * fTanTop;</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span> </div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>    <span class="keywordtype">float</span> fStepXn = (fEndXn - fStartXn) / NUM_CLUSTERS_X;</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>    <span class="keywordtype">float</span> fStepYn = (fEndYn - fStartYn) / NUM_CLUSTERS_Y;</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>    <span class="keywordtype">float</span> fXn = fStartXn + x * fStepXn;</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>    <span class="keywordtype">float</span> fYn = fStartYn + y * fStepYn;</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span> </div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>    out_pCorners[4] = pos + dirForward * fZn + dirRight * fXn - dirUp * fYn;</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>    out_pCorners[5] = out_pCorners[4] + dirRight * fStepXn;</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>    out_pCorners[6] = out_pCorners[4] - dirUp * fStepYn;</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>    out_pCorners[7] = out_pCorners[6] + dirRight * fStepXn;</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  }</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span> </div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>  <span class="keywordtype">void</span> FillClusterBoundingSpheres(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/d90/classez_camera.htm">ezCamera</a>&amp; camera, <span class="keyword">const</span> <a class="code hl_class" href="../../d7/d9b/classez_mat4_template.htm">ezMat4</a>&amp; mProj, <a class="code hl_class" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezSimdBSphere&gt;</a> clusterBoundingSpheres)</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>  {</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>    EZ_PROFILE_SCOPE(<span class="stringliteral">&quot;FillClusterBoundingSpheres&quot;</span>);</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span> </div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>    <span class="keywordflow">if</span> (camera.IsOrthographic())</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>      <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span> </div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> stepScale;</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> tanLBLB;</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>    {</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>      <a class="code hl_class" href="../../db/d6f/classez_angle.htm">ezAngle</a> fFovLeft;</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>      <a class="code hl_class" href="../../db/d6f/classez_angle.htm">ezAngle</a> fFovRight;</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>      <a class="code hl_class" href="../../db/d6f/classez_angle.htm">ezAngle</a> fFovBottom;</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>      <a class="code hl_class" href="../../db/d6f/classez_angle.htm">ezAngle</a> fFovTop;</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>      ezGraphicsUtils::ExtractPerspectiveMatrixFieldOfView(mProj, fFovLeft, fFovRight, fFovBottom, fFovTop);</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span> </div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>      <span class="keyword">const</span> <span class="keywordtype">float</span> fTanLeft = <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#ade2e0a31251abf869a932b0d038a410b">ezMath::Tan</a>(fFovLeft);</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>      <span class="keyword">const</span> <span class="keywordtype">float</span> fTanRight = <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#ade2e0a31251abf869a932b0d038a410b">ezMath::Tan</a>(fFovRight);</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>      <span class="keyword">const</span> <span class="keywordtype">float</span> fTanBottom = <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#ade2e0a31251abf869a932b0d038a410b">ezMath::Tan</a>(fFovBottom);</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>      <span class="keyword">const</span> <span class="keywordtype">float</span> fTanTop = <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#ade2e0a31251abf869a932b0d038a410b">ezMath::Tan</a>(fFovTop);</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span> </div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>      <span class="keywordtype">float</span> fStepXf = (fTanRight - fTanLeft) / NUM_CLUSTERS_X;</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>      <span class="keywordtype">float</span> fStepYf = (fTanTop - fTanBottom) / NUM_CLUSTERS_Y;</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span> </div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>      stepScale = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(fStepXf, fStepYf, fStepXf, fStepYf);</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>      tanLBLB = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(fTanLeft, fTanBottom, fTanLeft, fTanBottom);</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>    }</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span> </div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> dirForward = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(0, 0, 1, 0);</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> dirRight = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(1, 0, 0, 0);</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> dirUp = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(0, 1, 0, 0);</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span> </div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span> </div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> fZn = <a class="code hl_function" href="../../db/d0d/classez_simd_vec4f.htm#a1bbdedd947e594b431539062a2b50b95">ezSimdVec4f::MakeZero</a>();</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> cc[8];</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span> </div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>    <span class="keywordflow">for</span> (ezInt32 z = 0; z &lt; NUM_CLUSTERS_Z; z++)</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>    {</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> fZf = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(GetDepthFromSliceIndex(z));</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> zff_znn = fZf.<a class="code hl_function" href="../../db/d0d/classez_simd_vec4f.htm#a44d5936d6191c43ffd45c7d9c214638c">GetCombined</a>&lt;ezSwizzle::XXXX&gt;(fZn);</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> steps = zff_znn.CompMul(stepScale);</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span> </div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> depthF = dirForward * fZf.x();</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> depthN = dirForward * fZn.x();</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> startLBLB = zff_znn.CompMul(tanLBLB);</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span> </div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>      <span class="keywordflow">for</span> (ezInt32 y = 0; y &lt; NUM_CLUSTERS_Y; y++)</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>      {</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>        <span class="keywordflow">for</span> (ezInt32 x = 0; x &lt; NUM_CLUSTERS_X; x++)</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>        {</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>          <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> xyxy = <a class="code hl_class" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>(x, y, x, y).ToFloat();</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>          <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> xfyf = startLBLB + (xyxy).CompMul(steps);</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span> </div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>          cc[0] = depthF + dirRight * xfyf.x() - dirUp * xfyf.y();</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>          cc[1] = cc[0] + dirRight * steps.x();</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>          cc[2] = cc[0] - dirUp * steps.y();</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>          cc[3] = cc[2] + dirRight * steps.x();</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span> </div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>          cc[4] = depthN + dirRight * xfyf.z() - dirUp * xfyf.w();</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>          cc[5] = cc[4] + dirRight * steps.z();</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>          cc[6] = cc[4] - dirUp * steps.w();</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>          cc[7] = cc[6] + dirRight * steps.z();</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span> </div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>          clusterBoundingSpheres[GetClusterIndexFromCoord(x, y, z)] = <a class="code hl_function" href="../../d4/db3/classez_simd_b_sphere.htm#a0c0cf78fef995a9b31da75b83c70e6c0">ezSimdBSphere::MakeFromPoints</a>(cc, 8);</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>        }</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>      }</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span> </div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>      fZn = fZf;</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    }</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>  }</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>  EZ_ALWAYS_INLINE <span class="keywordtype">void</span> FillLightData(ezPerLightData&amp; out_perLightData, <span class="keyword">const</span> <a class="code hl_class" href="../../d3/d27/classez_light_render_data.htm">ezLightRenderData</a>* pLightRenderData, ezUInt8 uiType)</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  {</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>    <a class="code hl_function" href="../../dc/d4d/classez_memory_utils.htm#a0df3a6403e0c7ab2a65997e1e6f6bc14">ezMemoryUtils::ZeroFill</a>(&amp;out_perLightData, 1);</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span> </div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>    <a class="code hl_class" href="../../de/d68/classez_color_linear_u_b.htm">ezColorLinearUB</a> lightColor = pLightRenderData-&gt;m_LightColor;</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>    lightColor.a = uiType;</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span> </div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>    out_perLightData.colorAndType = *<span class="keyword">reinterpret_cast&lt;</span>ezUInt32*<span class="keyword">&gt;</span>(&amp;lightColor.r);</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>    out_perLightData.intensity = pLightRenderData-&gt;m_fIntensity;</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>    out_perLightData.specularMultiplier = pLightRenderData-&gt;m_fSpecularMultiplier;</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>    out_perLightData.shadowDataOffsetAndFadeOut = pLightRenderData-&gt;m_uiShadowDataOffsetAndFadeOut;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  }</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span> </div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  <span class="keywordtype">void</span> FillPointLightData(ezPerLightData&amp; out_perLightData, <span class="keyword">const</span> <a class="code hl_class" href="../../dc/d2d/classez_point_light_render_data.htm">ezPointLightRenderData</a>* pPointLightRenderData)</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  {</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>    FillLightData(out_perLightData, pPointLightRenderData, LIGHT_TYPE_POINT);</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span> </div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>    out_perLightData.position = pPointLightRenderData-&gt;m_GlobalTransform.m_vPosition;</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>    out_perLightData.invSqrAttRadius = 1.0f / (pPointLightRenderData-&gt;m_fRange * pPointLightRenderData-&gt;m_fRange);</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>  }</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span> </div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  <span class="keywordtype">void</span> FillSpotLightData(ezPerLightData&amp; out_perLightData, <span class="keyword">const</span> <a class="code hl_class" href="../../d4/d72/classez_spot_light_render_data.htm">ezSpotLightRenderData</a>* pSpotLightRenderData)</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  {</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>    FillLightData(out_perLightData, pSpotLightRenderData, LIGHT_TYPE_SPOT);</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>    out_perLightData.direction = ezShaderUtils::Float3ToRGB10(pSpotLightRenderData-&gt;m_GlobalTransform.m_qRotation * <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>(-1, 0, 0));</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>    out_perLightData.position = pSpotLightRenderData-&gt;m_GlobalTransform.m_vPosition;</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>    out_perLightData.invSqrAttRadius = 1.0f / (pSpotLightRenderData-&gt;m_fRange * pSpotLightRenderData-&gt;m_fRange);</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span> </div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fCosInner = <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a40cf3173aac40e0e462c57728e9410ab">ezMath::Cos</a>(pSpotLightRenderData-&gt;m_InnerSpotAngle * 0.5f);</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fCosOuter = <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a40cf3173aac40e0e462c57728e9410ab">ezMath::Cos</a>(pSpotLightRenderData-&gt;m_OuterSpotAngle * 0.5f);</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fSpotParamScale = 1.0f / <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a>(0.001f, (fCosInner - fCosOuter));</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fSpotParamOffset = -fCosOuter * fSpotParamScale;</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>    out_perLightData.spotOrFillParams = ezShaderUtils::Float2ToRG16F(<a class="code hl_class" href="../../d1/df8/classez_vec2_template.htm">ezVec2</a>(fSpotParamScale, fSpotParamOffset));</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span> </div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>    <span class="keywordflow">if</span> (!pSpotLightRenderData-&gt;m_CookieId.IsInvalidated())</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>    {</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>      <span class="keyword">const</span> <span class="keywordtype">float</span> fScale = 1.0f / <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a>(0.001f, <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#ade2e0a31251abf869a932b0d038a410b">ezMath::Tan</a>(pSpotLightRenderData-&gt;m_OuterSpotAngle * 0.5f));</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>      <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> cookieRightDir = pSpotLightRenderData-&gt;m_GlobalTransform.m_qRotation * <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>(0, fScale, 0);</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span> </div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>      <span class="comment">// Set bit 15 as marker bit to indicate that we have a cookie.</span></div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>      <span class="comment">// The shader checks for cookieParams0 != 0 which would not work in case the cookie id is 0 and rightDir.z is 0 as well.</span></div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>      out_perLightData.cookieParams0 = (pSpotLightRenderData-&gt;m_CookieId.m_InstanceIndex &amp; 0x7FFF) | (1 &lt;&lt; 15) | (<a class="code hl_class" href="../../d7/dca/classez_float16.htm">ezFloat16</a>(cookieRightDir.z).<a class="code hl_function" href="../../d7/dca/classez_float16.htm#a20d94b79d49e2aa1e148f6e761bc727c">GetRawData</a>() &lt;&lt; 16);</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>      out_perLightData.cookieParams1 = ezShaderUtils::Float2ToRG16F(cookieRightDir.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a02e907f33ad36aa19998b9bcf7788693">GetAsVec2</a>());</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>    }</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  }</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span> </div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>  <span class="keywordtype">void</span> FillDirLightData(ezPerLightData&amp; out_perLightData, <span class="keyword">const</span> <a class="code hl_class" href="../../d8/db1/classez_directional_light_render_data.htm">ezDirectionalLightRenderData</a>* pDirLightRenderData)</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>  {</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>    FillLightData(out_perLightData, pDirLightRenderData, LIGHT_TYPE_DIR);</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>    out_perLightData.direction = ezShaderUtils::Float3ToRGB10(pDirLightRenderData-&gt;m_GlobalTransform.m_qRotation * <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>(-1, 0, 0));</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>  }</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span> </div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  <span class="keywordtype">void</span> FillFillLightData(ezPerLightData&amp; out_perLightData, <span class="keyword">const</span> <a class="code hl_class" href="../../d5/d27/classez_fill_light_render_data.htm">ezFillLightRenderData</a>* pFillLightRenderData)</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>  {</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>    <a class="code hl_function" href="../../dc/d4d/classez_memory_utils.htm#a0df3a6403e0c7ab2a65997e1e6f6bc14">ezMemoryUtils::ZeroFill</a>(&amp;out_perLightData, 1);</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span> </div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>    <a class="code hl_class" href="../../de/d68/classez_color_linear_u_b.htm">ezColorLinearUB</a> lightColor = pFillLightRenderData-&gt;m_LightColor;</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>    out_perLightData.intensity = pFillLightRenderData-&gt;m_fIntensity;</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span> </div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>    <span class="keywordflow">switch</span> (pFillLightRenderData-&gt;m_LightMode)</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>    {</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>      <span class="keywordflow">case</span> ezFillLightMode::Additive:</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>        lightColor.a = LIGHT_TYPE_FILL_ADDITIVE;</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>        <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>      <span class="keywordflow">case</span> ezFillLightMode::Subtractive:</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>        lightColor.a = LIGHT_TYPE_FILL_ADDITIVE;</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>        out_perLightData.intensity = -out_perLightData.intensity;</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>        <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>      <span class="keywordflow">case</span> ezFillLightMode::ModulateIndirect:</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>        lightColor.a = LIGHT_TYPE_FILL_MODULATE_INDIRECT;</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>        out_perLightData.intensity = <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#ade0bbc96e88750c5d07fed586baa0bd6">ezMath::Saturate</a>(out_perLightData.intensity);</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>        <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>    }</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span> </div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>    out_perLightData.colorAndType = *<span class="keyword">reinterpret_cast&lt;</span>ezUInt32*<span class="keyword">&gt;</span>(&amp;lightColor.r);</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>    out_perLightData.specularMultiplier = 0.0f; <span class="comment">// no specular for fill lights</span></div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span> </div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>    out_perLightData.position = pFillLightRenderData-&gt;m_GlobalTransform.m_vPosition;</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>    out_perLightData.invSqrAttRadius = 1.0f / pFillLightRenderData-&gt;m_fRange;</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span> </div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fFalloffExponent = <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a>(pFillLightRenderData-&gt;m_fFalloffExponent, 0.001f);</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>    out_perLightData.spotOrFillParams = ezShaderUtils::Float2ToRG16F(<a class="code hl_class" href="../../d1/df8/classez_vec2_template.htm">ezVec2</a>(fFalloffExponent, pFillLightRenderData-&gt;m_fDirectionality));</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>  }</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span> </div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  <span class="keywordtype">void</span> FillDecalData(ezPerDecalData&amp; out_perDecalData, <span class="keyword">const</span> <a class="code hl_class" href="../../d8/da5/classez_decal_render_data.htm">ezDecalRenderData</a>* pDecalRenderData)</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  {</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>    <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> position = pDecalRenderData-&gt;m_GlobalTransform.m_vPosition;</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>    <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> dirForwards = pDecalRenderData-&gt;m_GlobalTransform.m_qRotation * <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>(1.0f, 0.0, 0.0f);</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>    <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> dirUp = pDecalRenderData-&gt;m_GlobalTransform.m_qRotation * <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>(0.0f, 0.0, 1.0f);</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>    <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> scale = pDecalRenderData-&gt;m_GlobalTransform.m_vScale;</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span> </div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>    <span class="comment">// the CompMax prevents division by zero (thus inf, thus NaN later, then crash)</span></div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>    <span class="comment">// if negative scaling should be allowed, this would need to be changed</span></div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>    scale = <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>(1.0f).<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a601124a09ff3cec911805a8c25b4ba04">CompDiv</a>(scale.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#ab6d1eb1df0d8a172507f322249582485">CompMax</a>(<a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>(0.00001f)));</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span> </div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../d7/d9b/classez_mat4_template.htm">ezMat4</a> lookAt = ezGraphicsUtils::CreateLookAtViewMatrix(position, position + dirForwards, dirUp);</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>    <a class="code hl_class" href="../../d7/d9b/classez_mat4_template.htm">ezMat4</a> scaleMat = <a class="code hl_function" href="../../d7/d9b/classez_mat4_template.htm#af23c92ba91bc18628dd732a7d5213f2d">ezMat4::MakeScaling</a>(<a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>(scale.y, -scale.z, scale.x));</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span> </div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>    out_perDecalData.worldToDecalMatrix = scaleMat * lookAt;</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>    out_perDecalData.applyOnlyToId = pDecalRenderData-&gt;m_uiApplyOnlyToId;</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>    out_perDecalData.decalFlags = pDecalRenderData-&gt;m_uiFlags;</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>    out_perDecalData.angleFadeParams = pDecalRenderData-&gt;m_uiAngleFadeParams;</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>    out_perDecalData.baseColor = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ezUInt32*<span class="keyword">&gt;</span>(&amp;pDecalRenderData-&gt;m_BaseColor.r);</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>    out_perDecalData.emissiveColorRG = ezShaderUtils::PackFloat16intoUint(pDecalRenderData-&gt;m_EmissiveColor.r, pDecalRenderData-&gt;m_EmissiveColor.g);</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>    out_perDecalData.emissiveColorBA = ezShaderUtils::PackFloat16intoUint(pDecalRenderData-&gt;m_EmissiveColor.b, pDecalRenderData-&gt;m_EmissiveColor.a);</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>    out_perDecalData.baseColorAtlasScale = pDecalRenderData-&gt;m_uiBaseColorAtlasScale;</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>    out_perDecalData.baseColorAtlasOffset = pDecalRenderData-&gt;m_uiBaseColorAtlasOffset;</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>    out_perDecalData.normalAtlasScale = pDecalRenderData-&gt;m_uiNormalAtlasScale;</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>    out_perDecalData.normalAtlasOffset = pDecalRenderData-&gt;m_uiNormalAtlasOffset;</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>    out_perDecalData.ormAtlasScale = pDecalRenderData-&gt;m_uiORMAtlasScale;</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>    out_perDecalData.ormAtlasOffset = pDecalRenderData-&gt;m_uiORMAtlasOffset;</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>  }</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span> </div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>  <span class="keywordtype">void</span> FillReflectionProbeData(ezPerReflectionProbeData&amp; out_perReflectionProbeData, <span class="keyword">const</span> <a class="code hl_class" href="../../d5/dd5/classez_reflection_probe_render_data.htm">ezReflectionProbeRenderData</a>* pReflectionProbeRenderData)</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>  {</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>    <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> position = pReflectionProbeRenderData-&gt;m_GlobalTransform.m_vPosition;</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>    <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> scale = pReflectionProbeRenderData-&gt;m_GlobalTransform.m_vScale.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a9b0266c9e67ecf838d3507bd67625941">CompMul</a>(pReflectionProbeRenderData-&gt;m_vHalfExtents);</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span> </div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>    <span class="comment">// We store scale separately so we easily transform into probe projection space (with scale), influence space (scale + offset) and cube map space (no scale).</span></div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>    <span class="keyword">auto</span> trans = pReflectionProbeRenderData-&gt;m_GlobalTransform;</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span>    trans.m_vScale = <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>(1.0f, 1.0f, 1.0f);</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>    <span class="keyword">auto</span> inverse = trans.GetAsMat4().GetInverse();</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span> </div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>    <span class="comment">// the CompMax prevents division by zero (thus inf, thus NaN later, then crash)</span></div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>    <span class="comment">// if negative scaling should be allowed, this would need to be changed</span></div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>    scale = <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>(1.0f).<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a601124a09ff3cec911805a8c25b4ba04">CompDiv</a>(scale.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#ab6d1eb1df0d8a172507f322249582485">CompMax</a>(<a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>(0.00001f)));</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>    out_perReflectionProbeData.WorldToProbeProjectionMatrix = inverse;</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span> </div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>    out_perReflectionProbeData.ProbePosition = pReflectionProbeRenderData-&gt;<a class="code hl_variable" href="../../d5/dd5/classez_reflection_probe_render_data.htm#a0f080760cab72bbe9da8a49b48cd5708">m_vProbePosition</a>.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a6c891d9c1b9ef68d922c15ff790c1381">GetAsVec4</a>(1.0f); <span class="comment">// W isn&#39;t used.</span></div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span>    out_perReflectionProbeData.Scale = scale.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a6c891d9c1b9ef68d922c15ff790c1381">GetAsVec4</a>(0.0f);                                                <span class="comment">// W isn&#39;t used.</span></div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span> </div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>    out_perReflectionProbeData.InfluenceScale = pReflectionProbeRenderData-&gt;m_vInfluenceScale.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a6c891d9c1b9ef68d922c15ff790c1381">GetAsVec4</a>(0.0f);</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>    out_perReflectionProbeData.InfluenceShift = pReflectionProbeRenderData-&gt;m_vInfluenceShift.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a9b0266c9e67ecf838d3507bd67625941">CompMul</a>(<a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>(1.0f) - pReflectionProbeRenderData-&gt;m_vInfluenceScale).<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a6c891d9c1b9ef68d922c15ff790c1381">GetAsVec4</a>(0.0f);</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span> </div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>    out_perReflectionProbeData.PositiveFalloff = pReflectionProbeRenderData-&gt;m_vPositiveFalloff.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a6c891d9c1b9ef68d922c15ff790c1381">GetAsVec4</a>(0.0f);</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>    out_perReflectionProbeData.NegativeFalloff = pReflectionProbeRenderData-&gt;m_vNegativeFalloff.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a6c891d9c1b9ef68d922c15ff790c1381">GetAsVec4</a>(0.0f);</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>    out_perReflectionProbeData.Index = pReflectionProbeRenderData-&gt;m_uiIndex;</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>  }</div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span> </div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span> </div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>  EZ_FORCE_INLINE <a class="code hl_class" href="../../db/dc7/classez_simd_b_box.htm">ezSimdBBox</a> GetScreenSpaceBounds(<span class="keyword">const</span> <a class="code hl_class" href="../../d4/db3/classez_simd_b_sphere.htm">ezSimdBSphere</a>&amp; viewSpaceSphere, <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d62/classez_simd_mat4f.htm">ezSimdMat4f</a>&amp; mProjectionMatrix)</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>  {</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> viewSpaceCenter = viewSpaceSphere.<a class="code hl_function" href="../../d4/db3/classez_simd_b_sphere.htm#ae7530c7a3db5058b7aa735d7075062f8">GetCenter</a>();</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>    <a class="code hl_class" href="../../d2/d0c/classez_simd_float.htm">ezSimdFloat</a> depth = viewSpaceCenter.z();</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>    <a class="code hl_class" href="../../d2/d0c/classez_simd_float.htm">ezSimdFloat</a> radius = viewSpaceSphere.<a class="code hl_function" href="../../d4/db3/classez_simd_b_sphere.htm#a5d56a3cee32af2928dabaa3b3ebcd028">GetRadius</a>();</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span> </div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> mi;</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> ma;</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span> </div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>    <span class="keywordflow">if</span> (viewSpaceCenter.GetLength&lt;3&gt;() &gt; radius &amp;&amp; depth &gt; radius)</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>    {</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> one = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(1.0f);</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> oneNegOne = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(1.0f, -1.0f, 1.0f, -1.0f);</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span> </div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> pRadius = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(radius / depth);</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> pRadius2 = pRadius.CompMul(pRadius);</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span> </div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> xy = viewSpaceCenter / depth;</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> xxyy = xy.Get&lt;ezSwizzle::XXYY&gt;();</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> nom = (pRadius2.CompMul(xxyy.CompMul(xxyy) - pRadius2 + one)).GetSqrt() - xxyy.CompMul(oneNegOne);</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> denom = pRadius2 - one;</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span> </div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> projection = mProjectionMatrix.m_col0.<a class="code hl_function" href="../../db/d0d/classez_simd_vec4f.htm#a44d5936d6191c43ffd45c7d9c214638c">GetCombined</a>&lt;ezSwizzle::XXYY&gt;(mProjectionMatrix.m_col1);</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> minXmaxX_minYmaxY = nom.CompDiv(denom).CompMul(oneNegOne).CompMul(projection);</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span> </div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>      mi = minXmaxX_minYmaxY.Get&lt;ezSwizzle::XZXX&gt;();</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>      ma = minXmaxX_minYmaxY.Get&lt;ezSwizzle::YWYY&gt;();</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>    }</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>    {</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>      mi = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(-1.0f);</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span>      ma = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(1.0f);</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>    }</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span> </div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>    mi.SetZ(depth - radius);</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span>    ma.SetZ(depth + radius);</div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span> </div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span>    <span class="keywordflow">return</span> <a class="code hl_class" href="../../db/dc7/classez_simd_b_box.htm">ezSimdBBox</a>(mi, ma);</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span>  }</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span> </div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Cluster, <span class="keyword">typename</span> IntersectionFunc&gt;</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>  EZ_FORCE_INLINE <span class="keywordtype">void</span> FillCluster(<span class="keyword">const</span> <a class="code hl_class" href="../../db/dc7/classez_simd_b_box.htm">ezSimdBBox</a>&amp; screenSpaceBounds, ezUInt32 uiBlockIndex, ezUInt32 uiMask, Cluster* pClusters, IntersectionFunc func)</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span>  {</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> scale = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(0.5f * NUM_CLUSTERS_X, -0.5f * NUM_CLUSTERS_Y, 1.0f, 1.0f);</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> bias = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(0.5f * NUM_CLUSTERS_X, 0.5f * NUM_CLUSTERS_Y, 0.0f, 0.0f);</div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span> </div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> mi = ezSimdVec4f::MulAdd(screenSpaceBounds.m_Min, scale, bias);</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> ma = ezSimdVec4f::MulAdd(screenSpaceBounds.m_Max, scale, bias);</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span> </div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>    <a class="code hl_class" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a> minXY_maxXY = ezSimdVec4i::Truncate(mi.<a class="code hl_function" href="../../db/d0d/classez_simd_vec4f.htm#a44d5936d6191c43ffd45c7d9c214638c">GetCombined</a>&lt;ezSwizzle::XYXY&gt;(ma));</div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span> </div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span>    <a class="code hl_class" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a> maxClusterIndex = <a class="code hl_class" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>(NUM_CLUSTERS_X, NUM_CLUSTERS_Y, NUM_CLUSTERS_X, NUM_CLUSTERS_Y);</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>    minXY_maxXY = minXY_maxXY.CompMin(maxClusterIndex - <a class="code hl_class" href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a>(1));</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>    minXY_maxXY = minXY_maxXY.CompMax(<a class="code hl_function" href="../../d6/d8e/classez_simd_vec4i.htm#af23f80ef1a02a7427c06adfaa24d0849">ezSimdVec4i::MakeZero</a>());</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span> </div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span>    ezUInt32 xMin = minXY_maxXY.x();</div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>    ezUInt32 yMin = minXY_maxXY.w();</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span> </div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>    ezUInt32 xMax = minXY_maxXY.z();</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>    ezUInt32 yMax = minXY_maxXY.y();</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span> </div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>    ezUInt32 zMin = GetSliceIndexFromDepth(screenSpaceBounds.m_Min.z());</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>    ezUInt32 zMax = GetSliceIndexFromDepth(screenSpaceBounds.m_Max.z());</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span> </div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span>    <span class="keywordflow">for</span> (ezUInt32 z = zMin; z &lt;= zMax; ++z)</div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>    {</div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>      <span class="keywordflow">for</span> (ezUInt32 y = yMin; y &lt;= yMax; ++y)</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>      {</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span>        <span class="keywordflow">for</span> (ezUInt32 x = xMin; x &lt;= xMax; ++x)</div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span>        {</div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>          ezUInt32 uiClusterIndex = GetClusterIndexFromCoord(x, y, z);</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>          <span class="keywordflow">if</span> (func(uiClusterIndex))</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span>          {</div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span>            pClusters[uiClusterIndex].m_BitMask[uiBlockIndex] |= uiMask;</div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>          }</div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span>        }</div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>      }</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>    }</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>  }</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span> </div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Cluster&gt;</div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span>  <span class="keywordtype">void</span> RasterizeSphere(<span class="keyword">const</span> <a class="code hl_class" href="../../d4/db3/classez_simd_b_sphere.htm">ezSimdBSphere</a>&amp; pointLightSphere, ezUInt32 uiLightIndex, <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d62/classez_simd_mat4f.htm">ezSimdMat4f</a>&amp; mViewMatrix,</div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d62/classez_simd_mat4f.htm">ezSimdMat4f</a>&amp; mProjectionMatrix, Cluster* pClusters, <a class="code hl_class" href="../../d4/db3/classez_simd_b_sphere.htm">ezSimdBSphere</a>* pClusterBoundingSpheres)</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>  {</div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span>    <a class="code hl_class" href="../../d4/db3/classez_simd_b_sphere.htm">ezSimdBSphere</a> viewSpaceSphere(mViewMatrix.<a class="code hl_function" href="../../d2/d62/classez_simd_mat4f.htm#a849d351580f175be2956da10ac443d02">TransformPosition</a>(pointLightSphere.<a class="code hl_function" href="../../d4/db3/classez_simd_b_sphere.htm#ae7530c7a3db5058b7aa735d7075062f8">GetCenter</a>()), pointLightSphere.<a class="code hl_function" href="../../d4/db3/classez_simd_b_sphere.htm#a5d56a3cee32af2928dabaa3b3ebcd028">GetRadius</a>());</div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span> </div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span>    <a class="code hl_class" href="../../db/dc7/classez_simd_b_box.htm">ezSimdBBox</a> screenSpaceBounds = GetScreenSpaceBounds(viewSpaceSphere, mProjectionMatrix);</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span> </div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span>    <span class="keyword">const</span> ezUInt32 uiBlockIndex = uiLightIndex / 32;</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>    <span class="keyword">const</span> ezUInt32 uiMask = 1 &lt;&lt; (uiLightIndex - uiBlockIndex * 32);</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span> </div>
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno">  394</span>    FillCluster(screenSpaceBounds, uiBlockIndex, uiMask, pClusters,</div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span>      [&amp;](ezUInt32 uiClusterIndex)</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span>      { <span class="keywordflow">return</span> viewSpaceSphere.<a class="code hl_function" href="../../d4/db3/classez_simd_b_sphere.htm#ad71ae5395e3a7642bf2444f571c45600">Overlaps</a>(pClusterBoundingSpheres[uiClusterIndex]); });</div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span>  }</div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span> </div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span>  <span class="keyword">struct </span>BoundingCone</div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno">  400</span>  {</div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>    <a class="code hl_class" href="../../d4/db3/classez_simd_b_sphere.htm">ezSimdBSphere</a> m_BoundingSphere;</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> m_PositionAndRange;</div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> m_ForwardDir;</div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> m_SinCosAngle;</div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span>  };</div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span> </div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Cluster&gt;</div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span>  <span class="keywordtype">void</span> RasterizeSpotLight(<span class="keyword">const</span> BoundingCone&amp; spotLightCone, ezUInt32 uiLightIndex, <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d62/classez_simd_mat4f.htm">ezSimdMat4f</a>&amp; mViewMatrix, <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d62/classez_simd_mat4f.htm">ezSimdMat4f</a>&amp; mProjectionMatrix, Cluster* pClusters, <span class="keyword">const</span> <a class="code hl_class" href="../../d4/db3/classez_simd_b_sphere.htm">ezSimdBSphere</a>* pClusterBoundingSpheres)</div>
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno">  409</span>  {</div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> position = mViewMatrix.<a class="code hl_function" href="../../d2/d62/classez_simd_mat4f.htm#a849d351580f175be2956da10ac443d02">TransformPosition</a>(spotLightCone.m_PositionAndRange);</div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>    <a class="code hl_class" href="../../d2/d0c/classez_simd_float.htm">ezSimdFloat</a> range = spotLightCone.m_PositionAndRange.w();</div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> forwardDir = mViewMatrix.<a class="code hl_function" href="../../d2/d62/classez_simd_mat4f.htm#a0c3f77da1feab8ca158346d72050e6b7">TransformDirection</a>(spotLightCone.m_ForwardDir);</div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span>    <a class="code hl_class" href="../../d2/d0c/classez_simd_float.htm">ezSimdFloat</a> sinAngle = spotLightCone.m_SinCosAngle.x();</div>
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno">  414</span>    <a class="code hl_class" href="../../d2/d0c/classez_simd_float.htm">ezSimdFloat</a> cosAngle = spotLightCone.m_SinCosAngle.y();</div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span> </div>
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno">  416</span>    <span class="comment">// First calculate a bounding sphere around the cone to get min and max bounds</span></div>
<div class="line"><a id="l00417" name="l00417"></a><span class="lineno">  417</span>    <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> bSphereCenter;</div>
<div class="line"><a id="l00418" name="l00418"></a><span class="lineno">  418</span>    <a class="code hl_class" href="../../d2/d0c/classez_simd_float.htm">ezSimdFloat</a> bSphereRadius;</div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span>    <span class="keywordflow">if</span> (sinAngle &gt; 0.707107f) <span class="comment">// sin(45)</span></div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span>    {</div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span>      bSphereCenter = position + forwardDir * cosAngle * range;</div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span>      bSphereRadius = sinAngle * range;</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span>    }</div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span>    {</div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span>      bSphereRadius = range / (cosAngle + cosAngle);</div>
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno">  427</span>      bSphereCenter = position + forwardDir * bSphereRadius;</div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span>    }</div>
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno">  429</span> </div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span>    <a class="code hl_class" href="../../d4/db3/classez_simd_b_sphere.htm">ezSimdBSphere</a> spotLightSphere(bSphereCenter, bSphereRadius);</div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span>    <a class="code hl_class" href="../../db/dc7/classez_simd_b_box.htm">ezSimdBBox</a> screenSpaceBounds = GetScreenSpaceBounds(spotLightSphere, mProjectionMatrix);</div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span> </div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span>    <span class="keyword">const</span> ezUInt32 uiBlockIndex = uiLightIndex / 32;</div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span>    <span class="keyword">const</span> ezUInt32 uiMask = 1 &lt;&lt; (uiLightIndex - uiBlockIndex * 32);</div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span> </div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span>    FillCluster(screenSpaceBounds, uiBlockIndex, uiMask, pClusters,</div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span>      [&amp;](ezUInt32 uiClusterIndex)</div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span>      {</div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span>        <a class="code hl_class" href="../../d4/db3/classez_simd_b_sphere.htm">ezSimdBSphere</a> clusterSphere = pClusterBoundingSpheres[uiClusterIndex];</div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span>        <a class="code hl_class" href="../../d2/d0c/classez_simd_float.htm">ezSimdFloat</a> clusterRadius = clusterSphere.<a class="code hl_function" href="../../d4/db3/classez_simd_b_sphere.htm#a5d56a3cee32af2928dabaa3b3ebcd028">GetRadius</a>();</div>
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno">  441</span> </div>
<div class="line"><a id="l00442" name="l00442"></a><span class="lineno">  442</span>        <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> toConePos = clusterSphere.m_CenterAndRadius - position;</div>
<div class="line"><a id="l00443" name="l00443"></a><span class="lineno">  443</span>        <a class="code hl_class" href="../../d2/d0c/classez_simd_float.htm">ezSimdFloat</a> projected = forwardDir.Dot&lt;3&gt;(toConePos);</div>
<div class="line"><a id="l00444" name="l00444"></a><span class="lineno">  444</span>        <a class="code hl_class" href="../../d2/d0c/classez_simd_float.htm">ezSimdFloat</a> distToConeSq = toConePos.Dot&lt;3&gt;(toConePos);</div>
<div class="line"><a id="l00445" name="l00445"></a><span class="lineno">  445</span>        <a class="code hl_class" href="../../d2/d0c/classez_simd_float.htm">ezSimdFloat</a> distClosestP = cosAngle * (distToConeSq - projected * projected).GetSqrt() - projected * sinAngle;</div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span> </div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span>        <span class="keywordtype">bool</span> angleCull = distClosestP &gt; clusterRadius;</div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span>        <span class="keywordtype">bool</span> frontCull = projected &gt; clusterRadius + range;</div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span>        <span class="keywordtype">bool</span> backCull = projected &lt; -clusterRadius;</div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span> </div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span>        <span class="keywordflow">return</span> !(angleCull || frontCull || backCull);</div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span>      });</div>
<div class="line"><a id="l00453" name="l00453"></a><span class="lineno">  453</span>  }</div>
<div class="line"><a id="l00454" name="l00454"></a><span class="lineno">  454</span> </div>
<div class="line"><a id="l00455" name="l00455"></a><span class="lineno">  455</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Cluster&gt;</div>
<div class="line"><a id="l00456" name="l00456"></a><span class="lineno">  456</span>  <span class="keywordtype">void</span> RasterizeDirLight(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/db1/classez_directional_light_render_data.htm">ezDirectionalLightRenderData</a>* pDirLightRenderData, ezUInt32 uiLightIndex, <a class="code hl_class" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;Cluster&gt;</a> clusters)</div>
<div class="line"><a id="l00457" name="l00457"></a><span class="lineno">  457</span>  {</div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span>    <span class="keyword">const</span> ezUInt32 uiBlockIndex = uiLightIndex / 32;</div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span>    <span class="keyword">const</span> ezUInt32 uiMask = 1 &lt;&lt; (uiLightIndex - uiBlockIndex * 32);</div>
<div class="line"><a id="l00460" name="l00460"></a><span class="lineno">  460</span> </div>
<div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span>    <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; clusters.<a class="code hl_function" href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">GetCount</a>(); ++i)</div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span>    {</div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span>      clusters[i].m_BitMask[uiBlockIndex] |= uiMask;</div>
<div class="line"><a id="l00464" name="l00464"></a><span class="lineno">  464</span>    }</div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno">  465</span>  }</div>
<div class="line"><a id="l00466" name="l00466"></a><span class="lineno">  466</span> </div>
<div class="line"><a id="l00467" name="l00467"></a><span class="lineno">  467</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Cluster&gt;</div>
<div class="line"><a id="l00468" name="l00468"></a><span class="lineno">  468</span>  <span class="keywordtype">void</span> RasterizeBox(<span class="keyword">const</span> <a class="code hl_class" href="../../d3/db1/classez_transform_template.htm">ezTransform</a>&amp; transform, ezUInt32 uiDecalIndex, <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d62/classez_simd_mat4f.htm">ezSimdMat4f</a>&amp; mView, <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d62/classez_simd_mat4f.htm">ezSimdMat4f</a>&amp; mViewProjection, Cluster* pClusters, <span class="keyword">const</span> <a class="code hl_class" href="../../d4/db3/classez_simd_b_sphere.htm">ezSimdBSphere</a>* pClusterBoundingSpheres)</div>
<div class="line"><a id="l00469" name="l00469"></a><span class="lineno">  469</span>  {</div>
<div class="line"><a id="l00470" name="l00470"></a><span class="lineno">  470</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> decalHalfExtents = ezSimdConversion::ToVec3(transform.m_vScale);</div>
<div class="line"><a id="l00471" name="l00471"></a><span class="lineno">  471</span>    <a class="code hl_class" href="../../db/dc7/classez_simd_b_box.htm">ezSimdBBox</a> localDecalBounds = <a class="code hl_class" href="../../db/dc7/classez_simd_b_box.htm">ezSimdBBox</a>(-decalHalfExtents, decalHalfExtents);</div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span> </div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span>    <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3</a> corners[8];</div>
<div class="line"><a id="l00474" name="l00474"></a><span class="lineno">  474</span>    ezSimdConversion::ToBBox(localDecalBounds).GetCorners(corners);</div>
<div class="line"><a id="l00475" name="l00475"></a><span class="lineno">  475</span> </div>
<div class="line"><a id="l00476" name="l00476"></a><span class="lineno">  476</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../da/d8b/classez_simd_transform.htm">ezSimdTransform</a> boxTransform = <a class="code hl_function" href="../../da/d8b/classez_simd_transform.htm#a89862fcaf0ae81b302d279100a5a44d9">ezSimdTransform::Make</a>(ezSimdConversion::ToVec3(transform.m_vPosition), ezSimdConversion::ToQuat(transform.m_qRotation));</div>
<div class="line"><a id="l00477" name="l00477"></a><span class="lineno">  477</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d62/classez_simd_mat4f.htm">ezSimdMat4f</a> boxToWorld = boxTransform.<a class="code hl_function" href="../../da/d8b/classez_simd_transform.htm#a0dcd0925688984021e1d9b0f1e4d9f25">GetAsMat4</a>();</div>
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno">  478</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d62/classez_simd_mat4f.htm">ezSimdMat4f</a> decalToScreen = mViewProjection * boxToWorld;</div>
<div class="line"><a id="l00479" name="l00479"></a><span class="lineno">  479</span> </div>
<div class="line"><a id="l00480" name="l00480"></a><span class="lineno">  480</span>    <a class="code hl_class" href="../../db/dc7/classez_simd_b_box.htm">ezSimdBBox</a> screenSpaceBounds = <a class="code hl_function" href="../../db/dc7/classez_simd_b_box.htm#a7d1f845a523ee00a40b3021fed4b3913">ezSimdBBox::MakeInvalid</a>();</div>
<div class="line"><a id="l00481" name="l00481"></a><span class="lineno">  481</span>    <span class="keywordtype">bool</span> bInsideBox = <span class="keyword">false</span>;</div>
<div class="line"><a id="l00482" name="l00482"></a><span class="lineno">  482</span>    <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; 8; ++i)</div>
<div class="line"><a id="l00483" name="l00483"></a><span class="lineno">  483</span>    {</div>
<div class="line"><a id="l00484" name="l00484"></a><span class="lineno">  484</span>      <span class="keyword">const</span> <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> corner = ezSimdConversion::ToVec3(corners[i]);</div>
<div class="line"><a id="l00485" name="l00485"></a><span class="lineno">  485</span>      <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a> screenSpaceCorner = decalToScreen.<a class="code hl_function" href="../../d2/d62/classez_simd_mat4f.htm#a849d351580f175be2956da10ac443d02">TransformPosition</a>(corner);</div>
<div class="line"><a id="l00486" name="l00486"></a><span class="lineno">  486</span>      <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d0c/classez_simd_float.htm">ezSimdFloat</a> depth = screenSpaceCorner.w();</div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno">  487</span>      bInsideBox |= depth &lt; <a class="code hl_function" href="../../d2/d0c/classez_simd_float.htm#a65f4e4eb30afc0f63ca9fbd2dae15bbc">ezSimdFloat::MakeZero</a>();</div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span> </div>
<div class="line"><a id="l00489" name="l00489"></a><span class="lineno">  489</span>      screenSpaceCorner /= depth;</div>
<div class="line"><a id="l00490" name="l00490"></a><span class="lineno">  490</span>      screenSpaceCorner = screenSpaceCorner.<a class="code hl_function" href="../../db/d0d/classez_simd_vec4f.htm#a44d5936d6191c43ffd45c7d9c214638c">GetCombined</a>&lt;ezSwizzle::XYZW&gt;(<a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(depth));</div>
<div class="line"><a id="l00491" name="l00491"></a><span class="lineno">  491</span> </div>
<div class="line"><a id="l00492" name="l00492"></a><span class="lineno">  492</span>      screenSpaceBounds.m_Min = screenSpaceBounds.m_Min.CompMin(screenSpaceCorner);</div>
<div class="line"><a id="l00493" name="l00493"></a><span class="lineno">  493</span>      screenSpaceBounds.m_Max = screenSpaceBounds.m_Max.CompMax(screenSpaceCorner);</div>
<div class="line"><a id="l00494" name="l00494"></a><span class="lineno">  494</span>    }</div>
<div class="line"><a id="l00495" name="l00495"></a><span class="lineno">  495</span> </div>
<div class="line"><a id="l00496" name="l00496"></a><span class="lineno">  496</span>    <span class="keywordflow">if</span> (bInsideBox)</div>
<div class="line"><a id="l00497" name="l00497"></a><span class="lineno">  497</span>    {</div>
<div class="line"><a id="l00498" name="l00498"></a><span class="lineno">  498</span>      screenSpaceBounds.m_Min = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(-1.0f).<a class="code hl_function" href="../../db/d0d/classez_simd_vec4f.htm#a44d5936d6191c43ffd45c7d9c214638c">GetCombined</a>&lt;ezSwizzle::XYZW&gt;(screenSpaceBounds.m_Min);</div>
<div class="line"><a id="l00499" name="l00499"></a><span class="lineno">  499</span>      screenSpaceBounds.m_Max = <a class="code hl_class" href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a>(1.0f).<a class="code hl_function" href="../../db/d0d/classez_simd_vec4f.htm#a44d5936d6191c43ffd45c7d9c214638c">GetCombined</a>&lt;ezSwizzle::XYZW&gt;(screenSpaceBounds.m_Max);</div>
<div class="line"><a id="l00500" name="l00500"></a><span class="lineno">  500</span>    }</div>
<div class="line"><a id="l00501" name="l00501"></a><span class="lineno">  501</span> </div>
<div class="line"><a id="l00502" name="l00502"></a><span class="lineno">  502</span>    <span class="keyword">const</span> ezUInt32 uiBlockIndex = uiDecalIndex / 32;</div>
<div class="line"><a id="l00503" name="l00503"></a><span class="lineno">  503</span>    <span class="keyword">const</span> ezUInt32 uiMask = 1 &lt;&lt; (uiDecalIndex - uiBlockIndex * 32);</div>
<div class="line"><a id="l00504" name="l00504"></a><span class="lineno">  504</span> </div>
<div class="line"><a id="l00505" name="l00505"></a><span class="lineno">  505</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d62/classez_simd_mat4f.htm">ezSimdMat4f</a> viewToBox = (mView * boxToWorld).GetInverse();</div>
<div class="line"><a id="l00506" name="l00506"></a><span class="lineno">  506</span> </div>
<div class="line"><a id="l00507" name="l00507"></a><span class="lineno">  507</span>    FillCluster(screenSpaceBounds, uiBlockIndex, uiMask, pClusters,</div>
<div class="line"><a id="l00508" name="l00508"></a><span class="lineno">  508</span>      [&amp;](ezUInt32 uiClusterIndex)</div>
<div class="line"><a id="l00509" name="l00509"></a><span class="lineno">  509</span>      {</div>
<div class="line"><a id="l00510" name="l00510"></a><span class="lineno">  510</span>        <a class="code hl_class" href="../../d4/db3/classez_simd_b_sphere.htm">ezSimdBSphere</a> clusterSphere = pClusterBoundingSpheres[uiClusterIndex];</div>
<div class="line"><a id="l00511" name="l00511"></a><span class="lineno">  511</span>        clusterSphere.<a class="code hl_function" href="../../d4/db3/classez_simd_b_sphere.htm#a63a881e4abae7f7a84cd8959bc1736d6">Transform</a>(viewToBox);</div>
<div class="line"><a id="l00512" name="l00512"></a><span class="lineno">  512</span> </div>
<div class="line"><a id="l00513" name="l00513"></a><span class="lineno">  513</span>        <span class="keywordflow">return</span> localDecalBounds.<a class="code hl_function" href="../../db/dc7/classez_simd_b_box.htm#a1f99d5c54171f307cf3f8bdd41753535">Overlaps</a>(clusterSphere);</div>
<div class="line"><a id="l00514" name="l00514"></a><span class="lineno">  514</span>      });</div>
<div class="line"><a id="l00515" name="l00515"></a><span class="lineno">  515</span>  }</div>
<div class="line"><a id="l00516" name="l00516"></a><span class="lineno">  516</span>} <span class="comment">// namespace</span></div>
<div class="ttc" id="aclassez_angle_htm"><div class="ttname"><a href="../../db/d6f/classez_angle.htm">ezAngle</a></div><div class="ttdoc">Float wrapper struct for a safe usage and conversions of angles.</div><div class="ttdef"><b>Definition</b> Angle.h:10</div></div>
<div class="ttc" id="aclassez_array_ptr_htm"><div class="ttname"><a href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a></div><div class="ttdoc">This class encapsulates an array and it's size. It is recommended to use this class instead of plain ...</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:41</div></div>
<div class="ttc" id="aclassez_array_ptr_htm_a9f222695f57e4cf200e07135dbbd7edd"><div class="ttname"><a href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">ezArrayPtr::GetCount</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 GetCount() const</div><div class="ttdoc">Returns the number of elements in the array.</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:175</div></div>
<div class="ttc" id="aclassez_camera_htm"><div class="ttname"><a href="../../d8/d90/classez_camera.htm">ezCamera</a></div><div class="ttdoc">A camera class that stores the orientation and some basic camera settings.</div><div class="ttdef"><b>Definition</b> Camera.h:41</div></div>
<div class="ttc" id="aclassez_camera_htm_a45d7f8210004c17f10100aca93b8e9ea"><div class="ttname"><a href="../../d8/d90/classez_camera.htm#a45d7f8210004c17f10100aca93b8e9ea">ezCamera::GetPosition</a></div><div class="ttdeci">ezVec3 GetPosition(ezCameraEye eye=ezCameraEye::Left) const</div><div class="ttdoc">Returns the position of the camera that should be used for rendering etc.</div><div class="ttdef"><b>Definition</b> Camera.cpp:65</div></div>
<div class="ttc" id="aclassez_camera_htm_a4c00db1d0c90a393d5f7add4096c371e"><div class="ttname"><a href="../../d8/d90/classez_camera.htm#a4c00db1d0c90a393d5f7add4096c371e">ezCamera::GetDirUp</a></div><div class="ttdeci">ezVec3 GetDirUp(ezCameraEye eye=ezCameraEye::Left) const</div><div class="ttdoc">Returns the up vector that should be used for rendering etc.</div><div class="ttdef"><b>Definition</b> Camera.cpp:78</div></div>
<div class="ttc" id="aclassez_camera_htm_a8fef98eebe1b79dd094c308341bcd74f"><div class="ttname"><a href="../../d8/d90/classez_camera.htm#a8fef98eebe1b79dd094c308341bcd74f">ezCamera::GetDirRight</a></div><div class="ttdeci">ezVec3 GetDirRight(ezCameraEye eye=ezCameraEye::Left) const</div><div class="ttdoc">Returns the right vector that should be used for rendering etc.</div><div class="ttdef"><b>Definition</b> Camera.cpp:86</div></div>
<div class="ttc" id="aclassez_camera_htm_aa35e8753fa325541b1ea5925d976217a"><div class="ttname"><a href="../../d8/d90/classez_camera.htm#aa35e8753fa325541b1ea5925d976217a">ezCamera::GetDirForwards</a></div><div class="ttdeci">ezVec3 GetDirForwards(ezCameraEye eye=ezCameraEye::Left) const</div><div class="ttdoc">Returns the forwards vector that should be used for rendering etc.</div><div class="ttdef"><b>Definition</b> Camera.cpp:70</div></div>
<div class="ttc" id="aclassez_color_linear_u_b_htm"><div class="ttname"><a href="../../de/d68/classez_color_linear_u_b.htm">ezColorLinearUB</a></div><div class="ttdoc">A 8bit per channel unsigned normalized (values interpreted as 0-1) color storage format that represen...</div><div class="ttdef"><b>Definition</b> Color8UNorm.h:61</div></div>
<div class="ttc" id="aclassez_decal_render_data_htm"><div class="ttname"><a href="../../d8/da5/classez_decal_render_data.htm">ezDecalRenderData</a></div><div class="ttdef"><b>Definition</b> DecalComponent.h:17</div></div>
<div class="ttc" id="aclassez_directional_light_render_data_htm"><div class="ttname"><a href="../../d8/db1/classez_directional_light_render_data.htm">ezDirectionalLightRenderData</a></div><div class="ttdoc">The render data object for directional lights.</div><div class="ttdef"><b>Definition</b> DirectionalLightComponent.h:10</div></div>
<div class="ttc" id="aclassez_fill_light_render_data_htm"><div class="ttname"><a href="../../d5/d27/classez_fill_light_render_data.htm">ezFillLightRenderData</a></div><div class="ttdoc">The render data object for fill lights.</div><div class="ttdef"><b>Definition</b> FillLightComponent.h:26</div></div>
<div class="ttc" id="aclassez_float16_htm"><div class="ttname"><a href="../../d7/dca/classez_float16.htm">ezFloat16</a></div><div class="ttdoc">A 16 bit IEEE float class. Often called &quot;half&quot;.</div><div class="ttdef"><b>Definition</b> Float16.h:11</div></div>
<div class="ttc" id="aclassez_float16_htm_a20d94b79d49e2aa1e148f6e761bc727c"><div class="ttname"><a href="../../d7/dca/classez_float16.htm#a20d94b79d49e2aa1e148f6e761bc727c">ezFloat16::GetRawData</a></div><div class="ttdeci">ezUInt16 GetRawData() const</div><div class="ttdoc">Returns the raw 16 Bit data.</div><div class="ttdef"><b>Definition</b> Float16.h:29</div></div>
<div class="ttc" id="aclassez_light_render_data_htm"><div class="ttname"><a href="../../d3/d27/classez_light_render_data.htm">ezLightRenderData</a></div><div class="ttdoc">Base class for light render data objects.</div><div class="ttdef"><b>Definition</b> LightComponent.h:10</div></div>
<div class="ttc" id="aclassez_mat4_template_htm"><div class="ttname"><a href="../../d7/d9b/classez_mat4_template.htm">ezMat4Template&lt; float &gt;</a></div></div>
<div class="ttc" id="aclassez_mat4_template_htm_af23c92ba91bc18628dd732a7d5213f2d"><div class="ttname"><a href="../../d7/d9b/classez_mat4_template.htm#af23c92ba91bc18628dd732a7d5213f2d">ezMat4Template&lt; float &gt;::MakeScaling</a></div><div class="ttdeci">static ezMat4Template&lt; float &gt; MakeScaling(const ezVec3Template&lt; float &gt; &amp;vScale)</div><div class="ttdoc">Creates a matrix with all zero values, except along the diagonal, which is set to x,...</div><div class="ttdef"><b>Definition</b> Mat4_inl.h:158</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a0df3a6403e0c7ab2a65997e1e6f6bc14"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a0df3a6403e0c7ab2a65997e1e6f6bc14">ezMemoryUtils::ZeroFill</a></div><div class="ttdeci">static void ZeroFill(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Zeros every byte in the provided memory buffer.</div></div>
<div class="ttc" id="aclassez_point_light_render_data_htm"><div class="ttname"><a href="../../dc/d2d/classez_point_light_render_data.htm">ezPointLightRenderData</a></div><div class="ttdoc">The render data object for point lights.</div><div class="ttdef"><b>Definition</b> PointLightComponent.h:11</div></div>
<div class="ttc" id="aclassez_reflection_probe_render_data_htm"><div class="ttname"><a href="../../d5/dd5/classez_reflection_probe_render_data.htm">ezReflectionProbeRenderData</a></div><div class="ttdoc">Render data for a reflection probe.</div><div class="ttdef"><b>Definition</b> ReflectionProbeData.h:54</div></div>
<div class="ttc" id="aclassez_reflection_probe_render_data_htm_a0f080760cab72bbe9da8a49b48cd5708"><div class="ttname"><a href="../../d5/dd5/classez_reflection_probe_render_data.htm#a0f080760cab72bbe9da8a49b48cd5708">ezReflectionProbeRenderData::m_vProbePosition</a></div><div class="ttdeci">ezVec3 m_vProbePosition</div><div class="ttdoc">Probe position in world space.</div><div class="ttdef"><b>Definition</b> ReflectionProbeData.h:66</div></div>
<div class="ttc" id="aclassez_simd_b_box_htm"><div class="ttname"><a href="../../db/dc7/classez_simd_b_box.htm">ezSimdBBox</a></div><div class="ttdef"><b>Definition</b> SimdBBox.h:6</div></div>
<div class="ttc" id="aclassez_simd_b_box_htm_a1f99d5c54171f307cf3f8bdd41753535"><div class="ttname"><a href="../../db/dc7/classez_simd_b_box.htm#a1f99d5c54171f307cf3f8bdd41753535">ezSimdBBox::Overlaps</a></div><div class="ttdeci">bool Overlaps(const ezSimdBBox &amp;rhs) const</div><div class="ttdoc">Checks whether this box overlaps with the given box.</div><div class="ttdef"><b>Definition</b> SimdBBox_inl.h:133</div></div>
<div class="ttc" id="aclassez_simd_b_box_htm_a7d1f845a523ee00a40b3021fed4b3913"><div class="ttname"><a href="../../db/dc7/classez_simd_b_box.htm#a7d1f845a523ee00a40b3021fed4b3913">ezSimdBBox::MakeInvalid</a></div><div class="ttdeci">static ezSimdBBox MakeInvalid()</div><div class="ttdoc">Creates a box that is in an invalid state. ExpandToInclude can then be used to make it into a boundin...</div><div class="ttdef"><b>Definition</b> SimdBBox_inl.h:16</div></div>
<div class="ttc" id="aclassez_simd_b_sphere_htm"><div class="ttname"><a href="../../d4/db3/classez_simd_b_sphere.htm">ezSimdBSphere</a></div><div class="ttdef"><b>Definition</b> SimdBSphere.h:6</div></div>
<div class="ttc" id="aclassez_simd_b_sphere_htm_a0c0cf78fef995a9b31da75b83c70e6c0"><div class="ttname"><a href="../../d4/db3/classez_simd_b_sphere.htm#a0c0cf78fef995a9b31da75b83c70e6c0">ezSimdBSphere::MakeFromPoints</a></div><div class="ttdeci">static ezSimdBSphere MakeFromPoints(const ezSimdVec4f *pPoints, ezUInt32 uiNumPoints, ezUInt32 uiStride=sizeof(ezSimdVec4f))</div><div class="ttdoc">Creates a bounding sphere around the provided points.</div><div class="ttdef"><b>Definition</b> SimdBSphere_inl.h:31</div></div>
<div class="ttc" id="aclassez_simd_b_sphere_htm_a5d56a3cee32af2928dabaa3b3ebcd028"><div class="ttname"><a href="../../d4/db3/classez_simd_b_sphere.htm#a5d56a3cee32af2928dabaa3b3ebcd028">ezSimdBSphere::GetRadius</a></div><div class="ttdeci">ezSimdFloat GetRadius() const</div><div class="ttdoc">Returns the radius.</div><div class="ttdef"><b>Definition</b> SimdBSphere_inl.h:86</div></div>
<div class="ttc" id="aclassez_simd_b_sphere_htm_a63a881e4abae7f7a84cd8959bc1736d6"><div class="ttname"><a href="../../d4/db3/classez_simd_b_sphere.htm#a63a881e4abae7f7a84cd8959bc1736d6">ezSimdBSphere::Transform</a></div><div class="ttdeci">void Transform(const ezSimdTransform &amp;t)</div><div class="ttdoc">Transforms the sphere in its local space.</div><div class="ttdef"><b>Definition</b> SimdBSphere_inl.h:130</div></div>
<div class="ttc" id="aclassez_simd_b_sphere_htm_ad71ae5395e3a7642bf2444f571c45600"><div class="ttname"><a href="../../d4/db3/classez_simd_b_sphere.htm#ad71ae5395e3a7642bf2444f571c45600">ezSimdBSphere::Overlaps</a></div><div class="ttdeci">bool Overlaps(const ezSimdBSphere &amp;rhs) const</div><div class="ttdoc">Checks whether the two objects overlap.</div><div class="ttdef"><b>Definition</b> SimdBSphere_inl.h:172</div></div>
<div class="ttc" id="aclassez_simd_b_sphere_htm_ae7530c7a3db5058b7aa735d7075062f8"><div class="ttname"><a href="../../d4/db3/classez_simd_b_sphere.htm#ae7530c7a3db5058b7aa735d7075062f8">ezSimdBSphere::GetCenter</a></div><div class="ttdeci">ezSimdVec4f GetCenter() const</div><div class="ttdoc">Returns the center.</div><div class="ttdef"><b>Definition</b> SimdBSphere_inl.h:81</div></div>
<div class="ttc" id="aclassez_simd_float_htm"><div class="ttname"><a href="../../d2/d0c/classez_simd_float.htm">ezSimdFloat</a></div><div class="ttdef"><b>Definition</b> SimdFloat.h:7</div></div>
<div class="ttc" id="aclassez_simd_float_htm_a65f4e4eb30afc0f63ca9fbd2dae15bbc"><div class="ttname"><a href="../../d2/d0c/classez_simd_float.htm#a65f4e4eb30afc0f63ca9fbd2dae15bbc">ezSimdFloat::MakeZero</a></div><div class="ttdeci">static ezSimdFloat MakeZero()</div><div class="ttdoc">Creates an ezSimdFloat that is initialized to zero.</div><div class="ttdef"><b>Definition</b> FPUFloat_inl.h:36</div></div>
<div class="ttc" id="aclassez_simd_mat4f_htm"><div class="ttname"><a href="../../d2/d62/classez_simd_mat4f.htm">ezSimdMat4f</a></div><div class="ttdoc">A 4x4 matrix class.</div><div class="ttdef"><b>Definition</b> SimdMat4f.h:7</div></div>
<div class="ttc" id="aclassez_simd_mat4f_htm_a0c3f77da1feab8ca158346d72050e6b7"><div class="ttname"><a href="../../d2/d62/classez_simd_mat4f.htm#a0c3f77da1feab8ca158346d72050e6b7">ezSimdMat4f::TransformDirection</a></div><div class="ttdeci">ezSimdVec4f TransformDirection(const ezSimdVec4f &amp;v) const</div><div class="ttdoc">Matrix-vector multiplication, assuming the 4th component of the vector is zero. So,...</div><div class="ttdef"><b>Definition</b> SimdMat4f_inl.h:152</div></div>
<div class="ttc" id="aclassez_simd_mat4f_htm_a849d351580f175be2956da10ac443d02"><div class="ttname"><a href="../../d2/d62/classez_simd_mat4f.htm#a849d351580f175be2956da10ac443d02">ezSimdMat4f::TransformPosition</a></div><div class="ttdeci">ezSimdVec4f TransformPosition(const ezSimdVec4f &amp;v) const</div><div class="ttdoc">Matrix-vector multiplication, assuming the 4th component of the vector is one (default behavior).</div><div class="ttdef"><b>Definition</b> SimdMat4f_inl.h:141</div></div>
<div class="ttc" id="aclassez_simd_transform_htm"><div class="ttname"><a href="../../da/d8b/classez_simd_transform.htm">ezSimdTransform</a></div><div class="ttdef"><b>Definition</b> SimdTransform.h:6</div></div>
<div class="ttc" id="aclassez_simd_transform_htm_a0dcd0925688984021e1d9b0f1e4d9f25"><div class="ttname"><a href="../../da/d8b/classez_simd_transform.htm#a0dcd0925688984021e1d9b0f1e4d9f25">ezSimdTransform::GetAsMat4</a></div><div class="ttdeci">ezSimdMat4f GetAsMat4() const</div><div class="ttdoc">Returns the transformation as a matrix.</div><div class="ttdef"><b>Definition</b> SimdTransform_inl.h:90</div></div>
<div class="ttc" id="aclassez_simd_transform_htm_a89862fcaf0ae81b302d279100a5a44d9"><div class="ttname"><a href="../../da/d8b/classez_simd_transform.htm#a89862fcaf0ae81b302d279100a5a44d9">ezSimdTransform::Make</a></div><div class="ttdeci">static ezSimdTransform Make(const ezSimdVec4f &amp;vPosition, const ezSimdQuat &amp;qRotation=ezSimdQuat::MakeIdentity(), const ezSimdVec4f &amp;vScale=ezSimdVec4f(1.0f))</div><div class="ttdoc">Creates a transform from the given position, rotation and scale.</div><div class="ttdef"><b>Definition</b> SimdTransform_inl.h:19</div></div>
<div class="ttc" id="aclassez_simd_vec4f_htm"><div class="ttname"><a href="../../db/d0d/classez_simd_vec4f.htm">ezSimdVec4f</a></div><div class="ttdoc">A 4-component SIMD vector class.</div><div class="ttdef"><b>Definition</b> SimdVec4f.h:8</div></div>
<div class="ttc" id="aclassez_simd_vec4f_htm_a1bbdedd947e594b431539062a2b50b95"><div class="ttname"><a href="../../db/d0d/classez_simd_vec4f.htm#a1bbdedd947e594b431539062a2b50b95">ezSimdVec4f::MakeZero</a></div><div class="ttdeci">static ezSimdVec4f MakeZero()</div><div class="ttdoc">Creates an ezSimdVec4f that is initialized to zero.</div><div class="ttdef"><b>Definition</b> SimdVec4f_inl.h:8</div></div>
<div class="ttc" id="aclassez_simd_vec4f_htm_a44d5936d6191c43ffd45c7d9c214638c"><div class="ttname"><a href="../../db/d0d/classez_simd_vec4f.htm#a44d5936d6191c43ffd45c7d9c214638c">ezSimdVec4f::GetCombined</a></div><div class="ttdeci">ezSimdVec4f GetCombined(const ezSimdVec4f &amp;other) const</div><div class="ttdoc">x = this[s0], y = this[s1], z = other[s2], w = other[s3]</div></div>
<div class="ttc" id="aclassez_simd_vec4i_htm"><div class="ttname"><a href="../../d6/d8e/classez_simd_vec4i.htm">ezSimdVec4i</a></div><div class="ttdoc">A SIMD 4-component vector class of signed 32b integers.</div><div class="ttdef"><b>Definition</b> SimdVec4i.h:9</div></div>
<div class="ttc" id="aclassez_simd_vec4i_htm_af23f80ef1a02a7427c06adfaa24d0849"><div class="ttname"><a href="../../d6/d8e/classez_simd_vec4i.htm#af23f80ef1a02a7427c06adfaa24d0849">ezSimdVec4i::MakeZero</a></div><div class="ttdeci">static ezSimdVec4i MakeZero()</div><div class="ttdoc">Creates an ezSimdVec4i that is initialized to zero.</div><div class="ttdef"><b>Definition</b> FPUVec4i_inl.h:25</div></div>
<div class="ttc" id="aclassez_spot_light_render_data_htm"><div class="ttname"><a href="../../d4/d72/classez_spot_light_render_data.htm">ezSpotLightRenderData</a></div><div class="ttdoc">The render data object for spot lights.</div><div class="ttdef"><b>Definition</b> SpotLightComponent.h:12</div></div>
<div class="ttc" id="aclassez_transform_template_htm"><div class="ttname"><a href="../../d3/db1/classez_transform_template.htm">ezTransformTemplate&lt; float &gt;</a></div></div>
<div class="ttc" id="aclassez_vec2_template_htm"><div class="ttname"><a href="../../d1/df8/classez_vec2_template.htm">ezVec2Template&lt; float &gt;</a></div></div>
<div class="ttc" id="aclassez_vec3_template_htm"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt; float &gt;</a></div></div>
<div class="ttc" id="aclassez_vec3_template_htm_a02e907f33ad36aa19998b9bcf7788693"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#a02e907f33ad36aa19998b9bcf7788693">ezVec3Template::GetAsVec2</a></div><div class="ttdeci">const ezVec2Template&lt; Type &gt; GetAsVec2() const</div><div class="ttdoc">Returns an ezVec2Template with x and y from this vector.</div><div class="ttdef"><b>Definition</b> Vec4_inl.h:26</div></div>
<div class="ttc" id="aclassez_vec3_template_htm_a601124a09ff3cec911805a8c25b4ba04"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#a601124a09ff3cec911805a8c25b4ba04">ezVec3Template::CompDiv</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; CompDiv(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise division of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:400</div></div>
<div class="ttc" id="aclassez_vec3_template_htm_a6c891d9c1b9ef68d922c15ff790c1381"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#a6c891d9c1b9ef68d922c15ff790c1381">ezVec3Template::GetAsVec4</a></div><div class="ttdeci">const ezVec4Template&lt; Type &gt; GetAsVec4(Type w) const</div><div class="ttdoc">Returns an ezVec4Template with x,y,z from this vector and w set to the parameter.</div><div class="ttdef"><b>Definition</b> Vec4_inl.h:35</div></div>
<div class="ttc" id="aclassez_vec3_template_htm_a9b0266c9e67ecf838d3507bd67625941"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#a9b0266c9e67ecf838d3507bd67625941">ezVec3Template::CompMul</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; CompMul(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise multiplication of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:391</div></div>
<div class="ttc" id="aclassez_vec3_template_htm_ab6d1eb1df0d8a172507f322249582485"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#ab6d1eb1df0d8a172507f322249582485">ezVec3Template::CompMax</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; CompMax(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise maximum of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:372</div></div>
<div class="ttc" id="anamespaceez_math_htm_a40cf3173aac40e0e462c57728e9410ab"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a40cf3173aac40e0e462c57728e9410ab">ezMath::Cos</a></div><div class="ttdeci">EZ_ALWAYS_INLINE float Cos(ezAngle a)</div><div class="ttdoc">Takes an angle, returns its cosine.</div><div class="ttdef"><b>Definition</b> MathFloat_inl.h:82</div></div>
<div class="ttc" id="anamespaceez_math_htm_a6f7ee19d0f8e81ff6ae5f394075e3a56"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:39</div></div>
<div class="ttc" id="anamespaceez_math_htm_aaaedc100ad5d35ae5362021b9d1b0e7c"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#aaaedc100ad5d35ae5362021b9d1b0e7c">ezMath::Clamp</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Clamp(T value, T min_val, T max_val)</div><div class="ttdoc">Clamps &quot;value&quot; to the range [min; max]. Returns &quot;value&quot;, if it is inside the range already.</div><div class="ttdef"><b>Definition</b> Math_inl.h:51</div></div>
<div class="ttc" id="anamespaceez_math_htm_ade0bbc96e88750c5d07fed586baa0bd6"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ade0bbc96e88750c5d07fed586baa0bd6">ezMath::Saturate</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Saturate(T value)</div><div class="ttdoc">Clamps &quot;value&quot; to the range [0; 1]. Returns &quot;value&quot;, if it is inside the range already.</div><div class="ttdef"><b>Definition</b> Math_inl.h:57</div></div>
<div class="ttc" id="anamespaceez_math_htm_ade2e0a31251abf869a932b0d038a410b"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ade2e0a31251abf869a932b0d038a410b">ezMath::Tan</a></div><div class="ttdeci">EZ_ALWAYS_INLINE float Tan(ezAngle a)</div><div class="ttdoc">Takes an angle, returns its tangent.</div><div class="ttdef"><b>Definition</b> MathFloat_inl.h:87</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_9b39d7517b28e8ee3dee1b9d862ddabb.htm">RendererCore</a></li><li class="navelem"><a class="el" href="../../dir_3ddc4ab7cafd4a333e7e5e4d9a9b70fe.htm">Lights</a></li><li class="navelem"><a class="el" href="../../dir_de94fe0a76851da5083c231a3e3c5259.htm">Implementation</a></li><li class="navelem"><b>ClusteredDataUtils.h</b></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:17:55 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
