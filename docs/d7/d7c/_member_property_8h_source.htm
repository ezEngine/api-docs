<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: Code/Engine/Foundation/Reflection/Implementation/MemberProperty.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search','.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d7/d7c/_member_property_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">MemberProperty.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/AbstractProperty.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/StaticRTTI.h&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;Foundation/Types/Variant.h&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// ***********************************************</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">// ***** Base class for accessing properties *****</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="../../d7/deb/classez_typed_member_property.htm">   19</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a> : <span class="keyword">public</span> <a class="code" href="../../da/d67/classez_abstract_member_property.htm">ezAbstractMemberProperty</a></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../d7/deb/classez_typed_member_property.htm#a1a0cf13aafbc8cf79571914697b035e7">   23</a></span>&#160;  <a class="code" href="../../d7/deb/classez_typed_member_property.htm#a1a0cf13aafbc8cf79571914697b035e7">ezTypedMemberProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName)</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    : <a class="code" href="../../da/d67/classez_abstract_member_property.htm">ezAbstractMemberProperty</a>(szPropertyName)</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  {</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    m_Flags = ezPropertyFlags::GetParameterFlags&lt;Type&gt;();</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    EZ_CHECK_AT_COMPILETIME_MSG(</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;      !std::is_pointer&lt;Type&gt;::value ||</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <a class="code" href="../../df/da8/structez_variant_type_deduction.htm">ezVariant::TypeDeduction</a>&lt;<span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#a9dcee6bb8dad253cbdc804cd45ce22f1">ezTypeTraits&lt;Type&gt;::NonConstReferencePointerType</a>&gt;::value == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612">ezVariantType::Invalid</a>,</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;      <span class="stringliteral">&quot;Pointer to standard types are not supported.&quot;</span>);</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  }</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="../../d7/deb/classez_typed_member_property.htm#a051d3cbbe4be5cd1943fe9429f9d7a55">   35</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* <a class="code" href="../../d7/deb/classez_typed_member_property.htm#a051d3cbbe4be5cd1943fe9429f9d7a55">GetSpecificType</a>() const override <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  {</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> ezGetStaticRTTI&lt;typename ezTypeTraits&lt;Type&gt;::NonConstReferencePointerType&gt;();</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  }</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="../../d7/deb/classez_typed_member_property.htm#af0f1c42b9313c34917eb828ffbd2f811">   41</a></span>&#160;  <span class="keyword">virtual</span> Type <a class="code" href="../../d7/deb/classez_typed_member_property.htm#af0f1c42b9313c34917eb828ffbd2f811">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance) <span class="keyword">const</span> = 0; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="../../d7/deb/classez_typed_member_property.htm#a4b3863076feb7d2279686e4f9400158a">   46</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d7/deb/classez_typed_member_property.htm#a4b3863076feb7d2279686e4f9400158a">SetValue</a>(<span class="keywordtype">void</span>* pInstance, Type value) = 0; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="../../d7/deb/classez_typed_member_property.htm#a25f90a405eb63da850b8e5d5e6ac21f5">   48</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d7/deb/classez_typed_member_property.htm#a25f90a405eb63da850b8e5d5e6ac21f5">GetValuePtr</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{ *<span class="keyword">static_cast&lt;</span>Type*<span class="keyword">&gt;</span>(pObject) = <a class="code" href="../../d7/deb/classez_typed_member_property.htm#af0f1c42b9313c34917eb828ffbd2f811">GetValue</a>(pInstance); };</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="../../d7/deb/classez_typed_member_property.htm#a0f6f5d994784ac359e91666fcdba3c88">   49</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d7/deb/classez_typed_member_property.htm#a0f6f5d994784ac359e91666fcdba3c88">SetValuePtr</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override </span>{ <a class="code" href="../../d7/deb/classez_typed_member_property.htm#a4b3863076feb7d2279686e4f9400158a">SetValue</a>(pInstance, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Type*<span class="keyword">&gt;</span>(pObject)); };</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;};</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm">   57</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a>&lt;const char*&gt; : <span class="keyword">public</span> <a class="code" href="../../da/d67/classez_abstract_member_property.htm">ezAbstractMemberProperty</a></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <a class="code" href="../../d7/deb/classez_typed_member_property.htm#a1a0cf13aafbc8cf79571914697b035e7">ezTypedMemberProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    : <a class="code" href="../../da/d67/classez_abstract_member_property.htm#a61bc7051bc6b7b65192f513b7e820036">ezAbstractMemberProperty</a>(szPropertyName)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="comment">// We treat const char* as a basic type and not a pointer.</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    m_Flags = ezPropertyFlags::GetParameterFlags&lt;const char*&gt;();</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a30462d9549279d9062abcd249c4a37cd">   67</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* <a class="code" href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a30462d9549279d9062abcd249c4a37cd">GetSpecificType</a>() const override <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> ezGetStaticRTTI&lt;const char*&gt;();</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d7/deb/classez_typed_member_property.htm#af0f1c42b9313c34917eb828ffbd2f811">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance) <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d7/deb/classez_typed_member_property.htm#a4b3863076feb7d2279686e4f9400158a">SetValue</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* value) = 0;</div>
<div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a247cf48483d7550e422270422dca1830">   74</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a247cf48483d7550e422270422dca1830">GetValuePtr</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{ *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>**<span class="keyword">&gt;</span>(pObject) = <a class="code" href="../../d7/deb/classez_typed_member_property.htm#af0f1c42b9313c34917eb828ffbd2f811">GetValue</a>(pInstance); };</div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a61f23671d67409615fdce775a626ac83">   75</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a61f23671d67409615fdce775a626ac83">SetValuePtr</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override </span>{ <a class="code" href="../../d7/deb/classez_typed_member_property.htm#a4b3863076feb7d2279686e4f9400158a">SetValue</a>(pInstance, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>* const*<span class="keyword">&gt;</span>(pObject)); };</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;};</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">// *******************************************************************</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">// ***** Class for properties that use custom accessor functions *****</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="../../df/d65/classez_accessor_property.htm">   84</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../df/d65/classez_accessor_property.htm">ezAccessorProperty</a> : <span class="keyword">public</span> <a class="code" href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a>&lt;typename ezTypeTraits&lt;Type&gt;::NonConstReferenceType&gt;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keyword">using</span> RealType = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keyword">using</span> GetterFunc = Type (Class::*)() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <span class="keyword">using</span> SetterFunc = void (Class::*)(Type value);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="../../df/d65/classez_accessor_property.htm#a32bcd7281a7f6002ddd0a8abcb8d0a85">   92</a></span>&#160;  <a class="code" href="../../df/d65/classez_accessor_property.htm#a32bcd7281a7f6002ddd0a8abcb8d0a85">ezAccessorProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetterFunc getter, SetterFunc setter)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    : <a class="code" href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a>&lt;RealType&gt;(szPropertyName)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    EZ_ASSERT_DEBUG(getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The getter of a property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    m_Getter = getter;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    m_Setter = setter;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">if</span> (m_Setter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      ezAbstractMemberProperty::m_Flags.<a class="code" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<a class="code" href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="../../df/d65/classez_accessor_property.htm#ae26d9bc73be2c640308935641c5ee4c8">  106</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span>* <a class="code" href="../../df/d65/classez_accessor_property.htm#ae26d9bc73be2c640308935641c5ee4c8">GetPropertyPointer</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// No access to sub-properties, if we have accessors for this property</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="../../df/d65/classez_accessor_property.htm#a8bddbc3d5625f471b4c259c823ba54a4">  113</a></span>&#160;  <span class="keyword">virtual</span> RealType <a class="code" href="../../df/d65/classez_accessor_property.htm#a8bddbc3d5625f471b4c259c823ba54a4">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance) <span class="keyword">const</span> <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Getter)();</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="../../df/d65/classez_accessor_property.htm#a0ad42ab06cb6016083ac523b0b88e0cf">  121</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d65/classez_accessor_property.htm#a0ad42ab06cb6016083ac523b0b88e0cf">SetValue</a>(<span class="keywordtype">void</span>* pInstance, RealType value) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    EZ_ASSERT_DEV(m_Setter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no setter function, thus it is read-only.&quot;</span>, <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">if</span> (m_Setter)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Setter)(value);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  GetterFunc m_Getter;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  SetterFunc m_Setter;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;};</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">// *************************************************************</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">// ***** Classes for properties that are accessed directly *****</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type, Type Class::*Member&gt;</div>
<div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="../../db/d06/structez_property_accessor.htm">  140</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../db/d06/structez_property_accessor.htm">ezPropertyAccessor</a></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;{</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keyword">static</span> Type GetValue(<span class="keyword">const</span> Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> SetValue(Class* pInstance, Type value) { (*pInstance).*Member = value; }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span>* GetPropertyPointer(<span class="keyword">const</span> Class* pInstance) { <span class="keywordflow">return</span> (<span class="keywordtype">void</span>*)&amp;((*pInstance).*Member); }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;};</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="../../d2/d85/classez_member_property.htm">  152</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d2/d85/classez_member_property.htm">ezMemberProperty</a> : <span class="keyword">public</span> <a class="code" href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a>&lt;Type&gt;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keyword">using</span> GetterFunc = Type (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="keyword">using</span> SetterFunc = void (*)(Class* pInstance, Type value);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <span class="keyword">using</span> PointerFunc = <span class="keywordtype">void</span>* (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="../../d2/d85/classez_member_property.htm#aba89efe814694fac215598bbf8f1cf0e">  160</a></span>&#160;  <a class="code" href="../../d2/d85/classez_member_property.htm#aba89efe814694fac215598bbf8f1cf0e">ezMemberProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetterFunc getter, SetterFunc setter, PointerFunc pointer)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    : <a class="code" href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a>&lt;Type&gt;(szPropertyName)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    EZ_ASSERT_DEBUG(getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The getter of a property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    m_Getter = getter;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    m_Setter = setter;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    m_Pointer = pointer;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">if</span> (m_Setter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;      ezAbstractMemberProperty::m_Flags.<a class="code" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<a class="code" href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="../../d2/d85/classez_member_property.htm#a5562ee3597b158539f899440c451a24b">  174</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span>* <a class="code" href="../../d2/d85/classez_member_property.htm#a5562ee3597b158539f899440c451a24b">GetPropertyPointer</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_Pointer(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)); }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="../../d2/d85/classez_member_property.htm#a65147fc1ee37b0dcc456d69679f606f5">  177</a></span>&#160;  <span class="keyword">virtual</span> Type <a class="code" href="../../d2/d85/classez_member_property.htm#a65147fc1ee37b0dcc456d69679f606f5">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_Getter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)); }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="../../d2/d85/classez_member_property.htm#a2b6495f561ed67de542f9a3d49a7a4c3">  182</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/d85/classez_member_property.htm#a2b6495f561ed67de542f9a3d49a7a4c3">SetValue</a>(<span class="keywordtype">void</span>* pInstance, Type value)<span class="keyword"> override</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    EZ_ASSERT_DEV(m_Setter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no setter function, thus it is read-only.&quot;</span>, <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">if</span> (m_Setter)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      m_Setter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance), value);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  GetterFunc m_Getter;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  SetterFunc m_Setter;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  PointerFunc m_Pointer;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;};</div>
<div class="ttc" id="aclassez_abstract_member_property_htm"><div class="ttname"><a href="../../da/d67/classez_abstract_member_property.htm">ezAbstractMemberProperty</a></div><div class="ttdoc">This is the base class for all properties that are members of a class. It provides more information a...</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:239</div></div>
<div class="ttc" id="aclassez_abstract_member_property_htm_a61bc7051bc6b7b65192f513b7e820036"><div class="ttname"><a href="../../da/d67/classez_abstract_member_property.htm#a61bc7051bc6b7b65192f513b7e820036">ezAbstractMemberProperty::ezAbstractMemberProperty</a></div><div class="ttdeci">ezAbstractMemberProperty(const char *szPropertyName)</div><div class="ttdoc">Passes the property name through to ezAbstractProperty.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:242</div></div>
<div class="ttc" id="aclassez_abstract_property_htm_a978bb805adf38827ef6485801fb25341"><div class="ttname"><a href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a></div><div class="ttdeci">const char * GetPropertyName() const</div><div class="ttdoc">Returns the name of the property.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:160</div></div>
<div class="ttc" id="aclassez_accessor_property_htm"><div class="ttname"><a href="../../df/d65/classez_accessor_property.htm">ezAccessorProperty</a></div><div class="ttdoc">[internal] An implementation of ezTypedMemberProperty that uses custom getter / setter functions to a...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:85</div></div>
<div class="ttc" id="aclassez_accessor_property_htm_a0ad42ab06cb6016083ac523b0b88e0cf"><div class="ttname"><a href="../../df/d65/classez_accessor_property.htm#a0ad42ab06cb6016083ac523b0b88e0cf">ezAccessorProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, RealType value) override</div><div class="ttdoc">Modifies the value of the property. Pass the instance pointer to the surrounding class along.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:121</div></div>
<div class="ttc" id="aclassez_accessor_property_htm_a32bcd7281a7f6002ddd0a8abcb8d0a85"><div class="ttname"><a href="../../df/d65/classez_accessor_property.htm#a32bcd7281a7f6002ddd0a8abcb8d0a85">ezAccessorProperty::ezAccessorProperty</a></div><div class="ttdeci">ezAccessorProperty(const char *szPropertyName, GetterFunc getter, SetterFunc setter)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:92</div></div>
<div class="ttc" id="aclassez_accessor_property_htm_a8bddbc3d5625f471b4c259c823ba54a4"><div class="ttname"><a href="../../df/d65/classez_accessor_property.htm#a8bddbc3d5625f471b4c259c823ba54a4">ezAccessorProperty::GetValue</a></div><div class="ttdeci">virtual RealType GetValue(const void *pInstance) const override</div><div class="ttdoc">Returns the value of the property. Pass the instance pointer to the surrounding class along.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:113</div></div>
<div class="ttc" id="aclassez_accessor_property_htm_ae26d9bc73be2c640308935641c5ee4c8"><div class="ttname"><a href="../../df/d65/classez_accessor_property.htm#ae26d9bc73be2c640308935641c5ee4c8">ezAccessorProperty::GetPropertyPointer</a></div><div class="ttdeci">virtual void * GetPropertyPointer(const void *pInstance) const override</div><div class="ttdoc">Always returns nullptr; once a property is modified through accessors, there is no point in giving mo...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:106</div></div>
<div class="ttc" id="aclassez_member_property_htm"><div class="ttname"><a href="../../d2/d85/classez_member_property.htm">ezMemberProperty</a></div><div class="ttdoc">[internal] An implementation of ezTypedMemberProperty that accesses the property data directly.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:153</div></div>
<div class="ttc" id="aclassez_member_property_htm_a2b6495f561ed67de542f9a3d49a7a4c3"><div class="ttname"><a href="../../d2/d85/classez_member_property.htm#a2b6495f561ed67de542f9a3d49a7a4c3">ezMemberProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, Type value) override</div><div class="ttdoc">Modifies the value of the property. Pass the instance pointer to the surrounding class along.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:182</div></div>
<div class="ttc" id="aclassez_member_property_htm_a5562ee3597b158539f899440c451a24b"><div class="ttname"><a href="../../d2/d85/classez_member_property.htm#a5562ee3597b158539f899440c451a24b">ezMemberProperty::GetPropertyPointer</a></div><div class="ttdeci">virtual void * GetPropertyPointer(const void *pInstance) const override</div><div class="ttdoc">Returns a pointer to the member property.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:174</div></div>
<div class="ttc" id="aclassez_member_property_htm_a65147fc1ee37b0dcc456d69679f606f5"><div class="ttname"><a href="../../d2/d85/classez_member_property.htm#a65147fc1ee37b0dcc456d69679f606f5">ezMemberProperty::GetValue</a></div><div class="ttdeci">virtual Type GetValue(const void *pInstance) const override</div><div class="ttdoc">Returns the value of the property. Pass the instance pointer to the surrounding class along.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:177</div></div>
<div class="ttc" id="aclassez_member_property_htm_aba89efe814694fac215598bbf8f1cf0e"><div class="ttname"><a href="../../d2/d85/classez_member_property.htm#aba89efe814694fac215598bbf8f1cf0e">ezMemberProperty::ezMemberProperty</a></div><div class="ttdeci">ezMemberProperty(const char *szPropertyName, GetterFunc getter, SetterFunc setter, PointerFunc pointer)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:160</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a></div><div class="ttdoc">This enumerable class holds information about reflected types. Each instance represents one type that...</div><div class="ttdef"><b>Definition:</b> RTTI.h:31</div></div>
<div class="ttc" id="aclassez_typed_member_property_3_01const_01char_01_5_01_4_htm_a247cf48483d7550e422270422dca1830"><div class="ttname"><a href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a247cf48483d7550e422270422dca1830">ezTypedMemberProperty&lt; const char * &gt;::GetValuePtr</a></div><div class="ttdeci">virtual void GetValuePtr(const void *pInstance, void *pObject) const override</div><div class="ttdoc">Writes the value of this property in pInstance to pObject. pObject needs to point to an instance of t...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:74</div></div>
<div class="ttc" id="aclassez_typed_member_property_3_01const_01char_01_5_01_4_htm_a30462d9549279d9062abcd249c4a37cd"><div class="ttname"><a href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a30462d9549279d9062abcd249c4a37cd">ezTypedMemberProperty&lt; const char * &gt;::GetSpecificType</a></div><div class="ttdeci">virtual const ezRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:67</div></div>
<div class="ttc" id="aclassez_typed_member_property_3_01const_01char_01_5_01_4_htm_a61f23671d67409615fdce775a626ac83"><div class="ttname"><a href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a61f23671d67409615fdce775a626ac83">ezTypedMemberProperty&lt; const char * &gt;::SetValuePtr</a></div><div class="ttdeci">virtual void SetValuePtr(void *pInstance, const void *pObject) override</div><div class="ttdoc">Sets the value of pObject to the property in pInstance. pObject needs to point to an instance of this...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:75</div></div>
<div class="ttc" id="aclassez_typed_member_property_htm"><div class="ttname"><a href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a></div><div class="ttdoc">The base class for all typed member properties. I.e. once the type of a property is determined,...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:20</div></div>
<div class="ttc" id="aclassez_typed_member_property_htm_a051d3cbbe4be5cd1943fe9429f9d7a55"><div class="ttname"><a href="../../d7/deb/classez_typed_member_property.htm#a051d3cbbe4be5cd1943fe9429f9d7a55">ezTypedMemberProperty::GetSpecificType</a></div><div class="ttdeci">virtual const ezRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the actual type of the property. You can then compare that with known types,...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:35</div></div>
<div class="ttc" id="aclassez_typed_member_property_htm_a0f6f5d994784ac359e91666fcdba3c88"><div class="ttname"><a href="../../d7/deb/classez_typed_member_property.htm#a0f6f5d994784ac359e91666fcdba3c88">ezTypedMemberProperty::SetValuePtr</a></div><div class="ttdeci">virtual void SetValuePtr(void *pInstance, const void *pObject) override</div><div class="ttdoc">Sets the value of pObject to the property in pInstance. pObject needs to point to an instance of this...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:49</div></div>
<div class="ttc" id="aclassez_typed_member_property_htm_a1a0cf13aafbc8cf79571914697b035e7"><div class="ttname"><a href="../../d7/deb/classez_typed_member_property.htm#a1a0cf13aafbc8cf79571914697b035e7">ezTypedMemberProperty::ezTypedMemberProperty</a></div><div class="ttdeci">ezTypedMemberProperty(const char *szPropertyName)</div><div class="ttdoc">Passes the property name through to ezAbstractMemberProperty.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:23</div></div>
<div class="ttc" id="aclassez_typed_member_property_htm_a25f90a405eb63da850b8e5d5e6ac21f5"><div class="ttname"><a href="../../d7/deb/classez_typed_member_property.htm#a25f90a405eb63da850b8e5d5e6ac21f5">ezTypedMemberProperty::GetValuePtr</a></div><div class="ttdeci">virtual void GetValuePtr(const void *pInstance, void *pObject) const override</div><div class="ttdoc">Writes the value of this property in pInstance to pObject. pObject needs to point to an instance of t...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:48</div></div>
<div class="ttc" id="aclassez_typed_member_property_htm_a4b3863076feb7d2279686e4f9400158a"><div class="ttname"><a href="../../d7/deb/classez_typed_member_property.htm#a4b3863076feb7d2279686e4f9400158a">ezTypedMemberProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, Type value)=0</div><div class="ttdoc">Modifies the value of the property. Pass the instance pointer to the surrounding class along.</div></div>
<div class="ttc" id="aclassez_typed_member_property_htm_af0f1c42b9313c34917eb828ffbd2f811"><div class="ttname"><a href="../../d7/deb/classez_typed_member_property.htm#af0f1c42b9313c34917eb828ffbd2f811">ezTypedMemberProperty::GetValue</a></div><div class="ttdeci">virtual Type GetValue(const void *pInstance) const =0</div><div class="ttdoc">Returns the value of the property. Pass the instance pointer to the surrounding class along.</div></div>
<div class="ttc" id="astructez_bitflags_htm_aaa83c1e77b70d0b549604a64c20f8a83"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">ezBitflags::Add</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void Add(const ezBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Sets the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:148</div></div>
<div class="ttc" id="astructez_property_accessor_htm"><div class="ttname"><a href="../../db/d06/structez_property_accessor.htm">ezPropertyAccessor</a></div><div class="ttdoc">[internal] Helper class to generate accessor functions for (private) members of another class</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:141</div></div>
<div class="ttc" id="astructez_property_flags_htm_a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a"><div class="ttname"><a href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a></div><div class="ttdeci">@ ReadOnly</div><div class="ttdoc">Can only be read but not modified.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:62</div></div>
<div class="ttc" id="astructez_type_traits_htm_a9dcee6bb8dad253cbdc804cd45ce22f1"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#a9dcee6bb8dad253cbdc804cd45ce22f1">ezTypeTraits::NonConstReferencePointerType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; typename std::remove_pointer&lt; T &gt;::type &gt;::type &gt;::type NonConstReferencePointerType</div><div class="ttdoc">removes reference, const and pointer qualifier Note that this removes the const and reference of the ...</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:223</div></div>
<div class="ttc" id="astructez_type_traits_htm_af2051eb05a731b9618b107540f8f46f8"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits::NonConstReferenceType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type NonConstReferenceType</div><div class="ttdoc">removes reference and const qualifier</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:216</div></div>
<div class="ttc" id="astructez_variant_type_deduction_htm"><div class="ttname"><a href="../../df/da8/structez_variant_type_deduction.htm">ezVariantTypeDeduction</a></div><div class="ttdoc">A helper struct to convert the C++ type, which is passed as the template argument,...</div><div class="ttdef"><b>Definition:</b> VariantType.h:95</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612">ezVariantType::Invalid</a></div><div class="ttdeci">@ Invalid</div><div class="ttdoc">The variant stores no (valid) data at the moment.</div><div class="ttdef"><b>Definition:</b> VariantType.h:27</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_03dd0ffe19aabd3d1cd0d82a91256ab1.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_e37e67d8810cb9249b77d55deb37c5cb.htm">Implementation</a></li><li class="navelem"><b>MemberProperty.h</b></li>
    <li class="footer">Generated on Tue Jun 8 2021 14:33:53 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
