<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Reflection/Implementation/MemberProperty.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function() { init_codefold(1); });
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('d7/d7c/_member_property_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">MemberProperty.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/AbstractProperty.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/StaticRTTI.h&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;Foundation/Types/Variant.h&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span> </div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">// ***********************************************</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">// ***** Base class for accessing properties *****</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span> </div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00019" data-start="{" data-end="};">
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno"><a class="line" href="../../d7/deb/classez_typed_member_property.htm">   19</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../da/d67/classez_abstract_member_property.htm">ezAbstractMemberProperty</a></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>{</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="keyword">public</span>:</div>
<div class="foldopen" id="foldopen00023" data-start="{" data-end="}">
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno"><a class="line" href="../../d7/deb/classez_typed_member_property.htm#a1a0cf13aafbc8cf79571914697b035e7">   23</a></span>  <a class="code hl_function" href="../../d7/deb/classez_typed_member_property.htm#a1a0cf13aafbc8cf79571914697b035e7">ezTypedMemberProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName)</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>    : <a class="code hl_class" href="../../da/d67/classez_abstract_member_property.htm">ezAbstractMemberProperty</a>(szPropertyName)</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>  {</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>    m_Flags = ezPropertyFlags::GetParameterFlags&lt;Type&gt;();</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>    <span class="keyword">static_assert</span>(</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>      !std::is_pointer&lt;Type&gt;::value ||</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>        <a class="code hl_struct" href="../../df/da8/structez_variant_type_deduction.htm">ezVariant::TypeDeduction&lt;typename ezTypeTraits&lt;Type&gt;::NonConstReferencePointerType</a>&gt;::value == <a class="code hl_enumvalue" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612">ezVariantType::Invalid</a>,</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>      <span class="stringliteral">&quot;Pointer to standard types are not supported.&quot;</span>);</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  }</div>
</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="foldopen" id="foldopen00035" data-start="{" data-end="}">
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno"><a class="line" href="../../d7/deb/classez_typed_member_property.htm#a31bf1f39eae2e1f443fda14beee97b19">   35</a></span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* <a class="code hl_function" href="../../d7/deb/classez_typed_member_property.htm#a31bf1f39eae2e1f443fda14beee97b19">GetSpecificType</a>() const override <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>  {</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>    <span class="keywordflow">return</span> ezGetStaticRTTI&lt;typename ezTypeTraits&lt;Type&gt;::NonConstReferencePointerType&gt;();</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>  }</div>
</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span> </div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno"><a class="line" href="../../d7/deb/classez_typed_member_property.htm#af0f1c42b9313c34917eb828ffbd2f811">   41</a></span>  <span class="keyword">virtual</span> Type <a class="code hl_function" href="../../d7/deb/classez_typed_member_property.htm#af0f1c42b9313c34917eb828ffbd2f811">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance) <span class="keyword">const</span> = 0; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span> </div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno"><a class="line" href="../../d7/deb/classez_typed_member_property.htm#a0952bedd5a9fa262e5ffb903fdeadec8">   46</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/deb/classez_typed_member_property.htm#a0952bedd5a9fa262e5ffb903fdeadec8">SetValue</a>(<span class="keywordtype">void</span>* pInstance, Type value) <span class="keyword">const</span> = 0; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno"><a class="line" href="../../d7/deb/classez_typed_member_property.htm#a25f90a405eb63da850b8e5d5e6ac21f5">   48</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/deb/classez_typed_member_property.htm#a25f90a405eb63da850b8e5d5e6ac21f5">GetValuePtr</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{ *<span class="keyword">static_cast&lt;</span>Type*<span class="keyword">&gt;</span>(pObject) = <a class="code hl_function" href="../../d7/deb/classez_typed_member_property.htm#af0f1c42b9313c34917eb828ffbd2f811">GetValue</a>(pInstance); };</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno"><a class="line" href="../../d7/deb/classez_typed_member_property.htm#a884987fc8ccd6b0c89e4318a9c6b1ea8">   49</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/deb/classez_typed_member_property.htm#a884987fc8ccd6b0c89e4318a9c6b1ea8">SetValuePtr</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{ <a class="code hl_function" href="../../d7/deb/classez_typed_member_property.htm#a0952bedd5a9fa262e5ffb903fdeadec8">SetValue</a>(pInstance, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Type*<span class="keyword">&gt;</span>(pObject)); };</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>};</div>
</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="foldopen" id="foldopen00057" data-start="{" data-end="};">
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno"><a class="line" href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm">   57</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a>&lt;const char*&gt; : <span class="keyword">public</span> <a class="code hl_class" href="../../da/d67/classez_abstract_member_property.htm">ezAbstractMemberProperty</a></div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>{</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>  <a class="code hl_class" href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName)</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>    : <a class="code hl_class" href="../../da/d67/classez_abstract_member_property.htm">ezAbstractMemberProperty</a>(szPropertyName)</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>  {</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>    <span class="comment">// We treat const char* as a basic type and not a pointer.</span></div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>    m_Flags = ezPropertyFlags::GetParameterFlags&lt;const char*&gt;();</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  }</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span> </div>
<div class="foldopen" id="foldopen00067" data-start="{" data-end="}">
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno"><a class="line" href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a68c5e3222f8f31e2654d09de789c9019">   67</a></span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* <a class="code hl_function" href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a68c5e3222f8f31e2654d09de789c9019">GetSpecificType</a>() const override <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  {</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>    <span class="keywordflow">return</span> ezGetStaticRTTI&lt;const char*&gt;();</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>  }</div>
</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span> </div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../d7/deb/classez_typed_member_property.htm#af0f1c42b9313c34917eb828ffbd2f811">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance) <span class="keyword">const</span> = 0;</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/deb/classez_typed_member_property.htm#a0952bedd5a9fa262e5ffb903fdeadec8">SetValue</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* value) <span class="keyword">const</span> = 0;</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno"><a class="line" href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a247cf48483d7550e422270422dca1830">   74</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a247cf48483d7550e422270422dca1830">GetValuePtr</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{ *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>**<span class="keyword">&gt;</span>(pObject) = <a class="code hl_function" href="../../d7/deb/classez_typed_member_property.htm#af0f1c42b9313c34917eb828ffbd2f811">GetValue</a>(pInstance); };</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno"><a class="line" href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a74eaef012ada0a0875cb4145c46ed823">   75</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a74eaef012ada0a0875cb4145c46ed823">SetValuePtr</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{ <a class="code hl_function" href="../../d7/deb/classez_typed_member_property.htm#a0952bedd5a9fa262e5ffb903fdeadec8">SetValue</a>(pInstance, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>* const*<span class="keyword">&gt;</span>(pObject)); };</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>};</div>
</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span> </div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span> </div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span><span class="comment">// *******************************************************************</span></div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span><span class="comment">// ***** Class for properties that use custom accessor functions *****</span></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span> </div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00084" data-start="{" data-end="};">
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno"><a class="line" href="../../df/d65/classez_accessor_property.htm">   84</a></span><span class="keyword">class </span><a class="code hl_class" href="../../df/d65/classez_accessor_property.htm">ezAccessorProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a>&lt;typename ezTypeTraits&lt;Type&gt;::NonConstReferenceType&gt;</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>{</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  <span class="keyword">using </span>RealType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>  <span class="keyword">using </span>GetterFunc = Type (Class::*)() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>  <span class="keyword">using </span>SetterFunc = void (Class::*)(Type value);</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="foldopen" id="foldopen00092" data-start="{" data-end="}">
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno"><a class="line" href="../../df/d65/classez_accessor_property.htm#a32bcd7281a7f6002ddd0a8abcb8d0a85">   92</a></span>  <a class="code hl_function" href="../../df/d65/classez_accessor_property.htm#a32bcd7281a7f6002ddd0a8abcb8d0a85">ezAccessorProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetterFunc getter, SetterFunc setter)</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>    : <a class="code hl_class" href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a>&lt;RealType&gt;(szPropertyName)</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>  {</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>    EZ_ASSERT_DEBUG(getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The getter of a property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span> </div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>    m_Getter = getter;</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>    m_Setter = setter;</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    <span class="keywordflow">if</span> (m_Setter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>      ezAbstractMemberProperty::m_Flags.<a class="code hl_function" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<a class="code hl_enumvalue" href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  }</div>
</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span> </div>
<div class="foldopen" id="foldopen00106" data-start="{" data-end="}">
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno"><a class="line" href="../../df/d65/classez_accessor_property.htm#ae441002527c5fd916e4c12378516fd37">  106</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span>* <a class="code hl_function" href="../../df/d65/classez_accessor_property.htm#ae441002527c5fd916e4c12378516fd37">GetPropertyPointer</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>    EZ_IGNORE_UNUSED(pInstance);</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span> </div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>    <span class="comment">// No access to sub-properties, if we have accessors for this property</span></div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  }</div>
</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span> </div>
<div class="foldopen" id="foldopen00115" data-start="{" data-end="}">
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno"><a class="line" href="../../df/d65/classez_accessor_property.htm#a8bddbc3d5625f471b4c259c823ba54a4">  115</a></span>  <span class="keyword">virtual</span> RealType <a class="code hl_function" href="../../df/d65/classez_accessor_property.htm#a8bddbc3d5625f471b4c259c823ba54a4">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance) <span class="keyword">const</span> <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  {</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Getter)();</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>  }</div>
</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span> </div>
<div class="foldopen" id="foldopen00123" data-start="{" data-end="}">
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno"><a class="line" href="../../df/d65/classez_accessor_property.htm#a25f2653778da0200207307fbb72fd46e">  123</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/d65/classez_accessor_property.htm#a25f2653778da0200207307fbb72fd46e">SetValue</a>(<span class="keywordtype">void</span>* pInstance, RealType value) <span class="keyword">const</span> <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>  {</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>    EZ_ASSERT_DEV(m_Setter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no setter function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d6/d81/classez_abstract_property.htm#aa9de7a38815952c004c7d2cca9360133">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>    <span class="keywordflow">if</span> (m_Setter)</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>      (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Setter)(value);</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>  }</div>
</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span> </div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>  GetterFunc m_Getter;</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>  SetterFunc m_Setter;</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>};</div>
</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span> </div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span> </div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span><span class="comment">// *************************************************************</span></div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span><span class="comment">// ***** Classes for properties that are accessed directly *****</span></div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span> </div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type, Type Class::*Member&gt;</div>
<div class="foldopen" id="foldopen00142" data-start="{" data-end="};">
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno"><a class="line" href="../../db/d06/structez_property_accessor.htm">  142</a></span><span class="keyword">struct </span><a class="code hl_struct" href="../../db/d06/structez_property_accessor.htm">ezPropertyAccessor</a></div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>{</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  <span class="keyword">static</span> Type GetValue(<span class="keyword">const</span> Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span> </div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>  <span class="keyword">static</span> <span class="keywordtype">void</span> SetValue(Class* pInstance, Type value) { (*pInstance).*Member = value; }</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span> </div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>  <span class="keyword">static</span> <span class="keywordtype">void</span>* GetPropertyPointer(<span class="keyword">const</span> Class* pInstance) { <span class="keywordflow">return</span> (<span class="keywordtype">void</span>*)&amp;((*pInstance).*Member); }</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>};</div>
</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span> </div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span> </div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00154" data-start="{" data-end="};">
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno"><a class="line" href="../../d2/d85/classez_member_property.htm">  154</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d2/d85/classez_member_property.htm">ezMemberProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a>&lt;Type&gt;</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>{</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>  <span class="keyword">using </span>GetterFunc = Type (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>  <span class="keyword">using </span>SetterFunc = void (*)(Class* pInstance, Type value);</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>  <span class="keyword">using </span>PointerFunc = <span class="keywordtype">void</span>* (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="foldopen" id="foldopen00162" data-start="{" data-end="}">
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno"><a class="line" href="../../d2/d85/classez_member_property.htm#aba89efe814694fac215598bbf8f1cf0e">  162</a></span>  <a class="code hl_function" href="../../d2/d85/classez_member_property.htm#aba89efe814694fac215598bbf8f1cf0e">ezMemberProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetterFunc getter, SetterFunc setter, PointerFunc pointer)</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>    : <a class="code hl_class" href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a>&lt;Type&gt;(szPropertyName)</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>  {</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>    EZ_ASSERT_DEBUG(getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The getter of a property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>    m_Getter = getter;</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>    m_Setter = setter;</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>    m_Pointer = pointer;</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span> </div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>    <span class="keywordflow">if</span> (m_Setter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>      ezAbstractMemberProperty::m_Flags.<a class="code hl_function" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<a class="code hl_enumvalue" href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  }</div>
</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span> </div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno"><a class="line" href="../../d2/d85/classez_member_property.htm#a295f7da26745dba01d203b1ec02905a1">  176</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span>* <a class="code hl_function" href="../../d2/d85/classez_member_property.htm#a295f7da26745dba01d203b1ec02905a1">GetPropertyPointer</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_Pointer(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)); }</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span> </div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno"><a class="line" href="../../d2/d85/classez_member_property.htm#a65147fc1ee37b0dcc456d69679f606f5">  179</a></span>  <span class="keyword">virtual</span> Type <a class="code hl_function" href="../../d2/d85/classez_member_property.htm#a65147fc1ee37b0dcc456d69679f606f5">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_Getter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)); }</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span> </div>
<div class="foldopen" id="foldopen00184" data-start="{" data-end="}">
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno"><a class="line" href="../../d2/d85/classez_member_property.htm#aa76929b005fa086417b22caf396c0b87">  184</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d85/classez_member_property.htm#aa76929b005fa086417b22caf396c0b87">SetValue</a>(<span class="keywordtype">void</span>* pInstance, Type value)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>    EZ_ASSERT_DEV(m_Setter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no setter function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d6/d81/classez_abstract_property.htm#aa9de7a38815952c004c7d2cca9360133">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>    <span class="keywordflow">if</span> (m_Setter)</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>      m_Setter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance), value);</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>  }</div>
</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span> </div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>  GetterFunc m_Getter;</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>  SetterFunc m_Setter;</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  PointerFunc m_Pointer;</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>};</div>
</div>
<div class="ttc" id="aclassez_abstract_member_property_htm"><div class="ttname"><a href="../../da/d67/classez_abstract_member_property.htm">ezAbstractMemberProperty</a></div><div class="ttdoc">This is the base class for all properties that are members of a class. It provides more information a...</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:239</div></div>
<div class="ttc" id="aclassez_abstract_property_htm_aa9de7a38815952c004c7d2cca9360133"><div class="ttname"><a href="../../d6/d81/classez_abstract_property.htm#aa9de7a38815952c004c7d2cca9360133">ezAbstractProperty::GetPropertyName</a></div><div class="ttdeci">const char * GetPropertyName() const</div><div class="ttdoc">Returns the name of the property.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:160</div></div>
<div class="ttc" id="aclassez_accessor_property_htm"><div class="ttname"><a href="../../df/d65/classez_accessor_property.htm">ezAccessorProperty</a></div><div class="ttdoc">[internal] An implementation of ezTypedMemberProperty that uses custom getter / setter functions to a...</div><div class="ttdef"><b>Definition</b> MemberProperty.h:85</div></div>
<div class="ttc" id="aclassez_accessor_property_htm_a25f2653778da0200207307fbb72fd46e"><div class="ttname"><a href="../../df/d65/classez_accessor_property.htm#a25f2653778da0200207307fbb72fd46e">ezAccessorProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, RealType value) const override</div><div class="ttdoc">Modifies the value of the property. Pass the instance pointer to the surrounding class along.</div><div class="ttdef"><b>Definition</b> MemberProperty.h:123</div></div>
<div class="ttc" id="aclassez_accessor_property_htm_a32bcd7281a7f6002ddd0a8abcb8d0a85"><div class="ttname"><a href="../../df/d65/classez_accessor_property.htm#a32bcd7281a7f6002ddd0a8abcb8d0a85">ezAccessorProperty::ezAccessorProperty</a></div><div class="ttdeci">ezAccessorProperty(const char *szPropertyName, GetterFunc getter, SetterFunc setter)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition</b> MemberProperty.h:92</div></div>
<div class="ttc" id="aclassez_accessor_property_htm_a8bddbc3d5625f471b4c259c823ba54a4"><div class="ttname"><a href="../../df/d65/classez_accessor_property.htm#a8bddbc3d5625f471b4c259c823ba54a4">ezAccessorProperty::GetValue</a></div><div class="ttdeci">virtual RealType GetValue(const void *pInstance) const override</div><div class="ttdoc">Returns the value of the property. Pass the instance pointer to the surrounding class along.</div><div class="ttdef"><b>Definition</b> MemberProperty.h:115</div></div>
<div class="ttc" id="aclassez_accessor_property_htm_ae441002527c5fd916e4c12378516fd37"><div class="ttname"><a href="../../df/d65/classez_accessor_property.htm#ae441002527c5fd916e4c12378516fd37">ezAccessorProperty::GetPropertyPointer</a></div><div class="ttdeci">virtual void * GetPropertyPointer(const void *pInstance) const override</div><div class="ttdoc">Always returns nullptr; once a property is modified through accessors, there is no point in giving mo...</div><div class="ttdef"><b>Definition</b> MemberProperty.h:106</div></div>
<div class="ttc" id="aclassez_member_property_htm"><div class="ttname"><a href="../../d2/d85/classez_member_property.htm">ezMemberProperty</a></div><div class="ttdoc">[internal] An implementation of ezTypedMemberProperty that accesses the property data directly.</div><div class="ttdef"><b>Definition</b> MemberProperty.h:155</div></div>
<div class="ttc" id="aclassez_member_property_htm_a295f7da26745dba01d203b1ec02905a1"><div class="ttname"><a href="../../d2/d85/classez_member_property.htm#a295f7da26745dba01d203b1ec02905a1">ezMemberProperty::GetPropertyPointer</a></div><div class="ttdeci">virtual void * GetPropertyPointer(const void *pInstance) const override</div><div class="ttdoc">Returns a pointer to the member property.</div><div class="ttdef"><b>Definition</b> MemberProperty.h:176</div></div>
<div class="ttc" id="aclassez_member_property_htm_a65147fc1ee37b0dcc456d69679f606f5"><div class="ttname"><a href="../../d2/d85/classez_member_property.htm#a65147fc1ee37b0dcc456d69679f606f5">ezMemberProperty::GetValue</a></div><div class="ttdeci">virtual Type GetValue(const void *pInstance) const override</div><div class="ttdoc">Returns the value of the property. Pass the instance pointer to the surrounding class along.</div><div class="ttdef"><b>Definition</b> MemberProperty.h:179</div></div>
<div class="ttc" id="aclassez_member_property_htm_aa76929b005fa086417b22caf396c0b87"><div class="ttname"><a href="../../d2/d85/classez_member_property.htm#aa76929b005fa086417b22caf396c0b87">ezMemberProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, Type value) const override</div><div class="ttdoc">Modifies the value of the property. Pass the instance pointer to the surrounding class along.</div><div class="ttdef"><b>Definition</b> MemberProperty.h:184</div></div>
<div class="ttc" id="aclassez_member_property_htm_aba89efe814694fac215598bbf8f1cf0e"><div class="ttname"><a href="../../d2/d85/classez_member_property.htm#aba89efe814694fac215598bbf8f1cf0e">ezMemberProperty::ezMemberProperty</a></div><div class="ttdeci">ezMemberProperty(const char *szPropertyName, GetterFunc getter, SetterFunc setter, PointerFunc pointer)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition</b> MemberProperty.h:162</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a></div><div class="ttdoc">This class holds information about reflected types. Each instance represents one type that is known t...</div><div class="ttdef"><b>Definition</b> RTTI.h:30</div></div>
<div class="ttc" id="aclassez_typed_member_property_3_01const_01char_01_5_01_4_htm_a247cf48483d7550e422270422dca1830"><div class="ttname"><a href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a247cf48483d7550e422270422dca1830">ezTypedMemberProperty&lt; const char * &gt;::GetValuePtr</a></div><div class="ttdeci">virtual void GetValuePtr(const void *pInstance, void *pObject) const override</div><div class="ttdoc">Writes the value of this property in pInstance to pObject. pObject needs to point to an instance of t...</div><div class="ttdef"><b>Definition</b> MemberProperty.h:74</div></div>
<div class="ttc" id="aclassez_typed_member_property_3_01const_01char_01_5_01_4_htm_a68c5e3222f8f31e2654d09de789c9019"><div class="ttname"><a href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a68c5e3222f8f31e2654d09de789c9019">ezTypedMemberProperty&lt; const char * &gt;::GetSpecificType</a></div><div class="ttdeci">virtual const ezRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition</b> MemberProperty.h:67</div></div>
<div class="ttc" id="aclassez_typed_member_property_3_01const_01char_01_5_01_4_htm_a74eaef012ada0a0875cb4145c46ed823"><div class="ttname"><a href="../../de/dcc/classez_typed_member_property_3_01const_01char_01_5_01_4.htm#a74eaef012ada0a0875cb4145c46ed823">ezTypedMemberProperty&lt; const char * &gt;::SetValuePtr</a></div><div class="ttdeci">virtual void SetValuePtr(void *pInstance, const void *pObject) const override</div><div class="ttdoc">Sets the value of pObject to the property in pInstance. pObject needs to point to an instance of this...</div><div class="ttdef"><b>Definition</b> MemberProperty.h:75</div></div>
<div class="ttc" id="aclassez_typed_member_property_htm"><div class="ttname"><a href="../../d7/deb/classez_typed_member_property.htm">ezTypedMemberProperty</a></div><div class="ttdoc">The base class for all typed member properties. I.e. once the type of a property is determined,...</div><div class="ttdef"><b>Definition</b> MemberProperty.h:20</div></div>
<div class="ttc" id="aclassez_typed_member_property_htm_a0952bedd5a9fa262e5ffb903fdeadec8"><div class="ttname"><a href="../../d7/deb/classez_typed_member_property.htm#a0952bedd5a9fa262e5ffb903fdeadec8">ezTypedMemberProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, Type value) const =0</div><div class="ttdoc">Modifies the value of the property. Pass the instance pointer to the surrounding class along.</div></div>
<div class="ttc" id="aclassez_typed_member_property_htm_a1a0cf13aafbc8cf79571914697b035e7"><div class="ttname"><a href="../../d7/deb/classez_typed_member_property.htm#a1a0cf13aafbc8cf79571914697b035e7">ezTypedMemberProperty::ezTypedMemberProperty</a></div><div class="ttdeci">ezTypedMemberProperty(const char *szPropertyName)</div><div class="ttdoc">Passes the property name through to ezAbstractMemberProperty.</div><div class="ttdef"><b>Definition</b> MemberProperty.h:23</div></div>
<div class="ttc" id="aclassez_typed_member_property_htm_a25f90a405eb63da850b8e5d5e6ac21f5"><div class="ttname"><a href="../../d7/deb/classez_typed_member_property.htm#a25f90a405eb63da850b8e5d5e6ac21f5">ezTypedMemberProperty::GetValuePtr</a></div><div class="ttdeci">virtual void GetValuePtr(const void *pInstance, void *pObject) const override</div><div class="ttdoc">Writes the value of this property in pInstance to pObject. pObject needs to point to an instance of t...</div><div class="ttdef"><b>Definition</b> MemberProperty.h:48</div></div>
<div class="ttc" id="aclassez_typed_member_property_htm_a31bf1f39eae2e1f443fda14beee97b19"><div class="ttname"><a href="../../d7/deb/classez_typed_member_property.htm#a31bf1f39eae2e1f443fda14beee97b19">ezTypedMemberProperty::GetSpecificType</a></div><div class="ttdeci">virtual const ezRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the actual type of the property. You can then compare that with known types,...</div><div class="ttdef"><b>Definition</b> MemberProperty.h:35</div></div>
<div class="ttc" id="aclassez_typed_member_property_htm_a884987fc8ccd6b0c89e4318a9c6b1ea8"><div class="ttname"><a href="../../d7/deb/classez_typed_member_property.htm#a884987fc8ccd6b0c89e4318a9c6b1ea8">ezTypedMemberProperty::SetValuePtr</a></div><div class="ttdeci">virtual void SetValuePtr(void *pInstance, const void *pObject) const override</div><div class="ttdoc">Sets the value of pObject to the property in pInstance. pObject needs to point to an instance of this...</div><div class="ttdef"><b>Definition</b> MemberProperty.h:49</div></div>
<div class="ttc" id="aclassez_typed_member_property_htm_af0f1c42b9313c34917eb828ffbd2f811"><div class="ttname"><a href="../../d7/deb/classez_typed_member_property.htm#af0f1c42b9313c34917eb828ffbd2f811">ezTypedMemberProperty::GetValue</a></div><div class="ttdeci">virtual Type GetValue(const void *pInstance) const =0</div><div class="ttdoc">Returns the value of the property. Pass the instance pointer to the surrounding class along.</div></div>
<div class="ttc" id="astructez_bitflags_htm_aaa83c1e77b70d0b549604a64c20f8a83"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">ezBitflags::Add</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void Add(const ezBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Sets the given flag.</div><div class="ttdef"><b>Definition</b> Bitflags.h:151</div></div>
<div class="ttc" id="astructez_property_accessor_htm"><div class="ttname"><a href="../../db/d06/structez_property_accessor.htm">ezPropertyAccessor</a></div><div class="ttdoc">[internal] Helper class to generate accessor functions for (private) members of another class</div><div class="ttdef"><b>Definition</b> MemberProperty.h:143</div></div>
<div class="ttc" id="astructez_property_flags_htm_a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a"><div class="ttname"><a href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a></div><div class="ttdeci">@ ReadOnly</div><div class="ttdoc">Can only be read but not modified.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:63</div></div>
<div class="ttc" id="astructez_type_traits_htm_af2051eb05a731b9618b107540f8f46f8"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits::NonConstReferenceType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type NonConstReferenceType</div><div class="ttdoc">removes reference and const qualifier</div><div class="ttdef"><b>Definition</b> TypeTraits.h:218</div></div>
<div class="ttc" id="astructez_variant_type_deduction_htm"><div class="ttname"><a href="../../df/da8/structez_variant_type_deduction.htm">ezVariantTypeDeduction</a></div><div class="ttdoc">A helper struct to convert the C++ type, which is passed as the template argument,...</div><div class="ttdef"><b>Definition</b> VariantType.h:97</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612">ezVariantType::Invalid</a></div><div class="ttdeci">@ Invalid</div><div class="ttdoc">The variant stores no (valid) data at the moment.</div><div class="ttdef"><b>Definition</b> VariantType.h:27</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_217b90e143c3d27cf4319fb9e916f4ad.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_4d499b0494fc84c22e280b98d7f4832b.htm">Implementation</a></li><li class="navelem"><b>MemberProperty.h</b></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:17:52 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
