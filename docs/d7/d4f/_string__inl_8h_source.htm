<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/String_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 24.09</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d7/d4f/_string__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">String_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00004"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#a38388b6f173efff8b339cf1d6209fe9d">    4</a></span>&#160;<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a38388b6f173efff8b339cf1d6209fe9d">ezHybridStringBase&lt;Size&gt;::ezHybridStringBase</a>(<a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator)</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;  : m_Data(pAllocator)</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;{</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#aaced07b48ca63da8bd4bacc7ebb1ad86">Clear</a>();</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;}</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00011"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#ac05ba000cfafad3b187a1373dfdcaaa4">   11</a></span>&#160;<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a38388b6f173efff8b339cf1d6209fe9d">ezHybridStringBase&lt;Size&gt;::ezHybridStringBase</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&amp; rhs, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator)</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  : m_Data(pAllocator)</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;{</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  *<span class="keyword">this</span> = rhs;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;}</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#ab571ddc904088ef1855837a559d5291a">   18</a></span>&#160;<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a38388b6f173efff8b339cf1d6209fe9d">ezHybridStringBase&lt;Size&gt;::ezHybridStringBase</a>(<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&amp;&amp; rhs, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator)</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  : m_Data(pAllocator)</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">operator=</a>(std::move(rhs));</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;}</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#a6b556525541f47589a9e7ef5cba2ff5d">   25</a></span>&#160;<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a38388b6f173efff8b339cf1d6209fe9d">ezHybridStringBase&lt;Size&gt;::ezHybridStringBase</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* rhs, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator)</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  : m_Data(pAllocator)</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  *<span class="keyword">this</span> = rhs;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#acb4af3ad3dd52439de3728062981a840">   32</a></span>&#160;<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a38388b6f173efff8b339cf1d6209fe9d">ezHybridStringBase&lt;Size&gt;::ezHybridStringBase</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* rhs, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator)</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  : m_Data(pAllocator)</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  *<span class="keyword">this</span> = rhs;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#ab40ea7b7665ecb669ecada8fd8f79a7e">   39</a></span>&#160;<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a38388b6f173efff8b339cf1d6209fe9d">ezHybridStringBase&lt;Size&gt;::ezHybridStringBase</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&amp; rhs, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator)</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  : m_Data(pAllocator)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  *<span class="keyword">this</span> = rhs;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#ae62faf872800bba225ee53e73dff7289">ezHybridStringBase&lt;Size&gt;::~ezHybridStringBase</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#aaced07b48ca63da8bd4bacc7ebb1ad86">   49</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#aaced07b48ca63da8bd4bacc7ebb1ad86">ezHybridStringBase&lt;Size&gt;::Clear</a>()</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  m_Data.SetCountUninitialized(1);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  m_Data[0] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#a7e11b053ec999656b2b39354bdacf99e">   56</a></span>&#160;EZ_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a7e11b053ec999656b2b39354bdacf99e">ezHybridStringBase&lt;Size&gt;::GetData</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  EZ_ASSERT_DEBUG(!m_Data.IsEmpty(), <span class="stringliteral">&quot;ezHybridString has been corrupted, the array can never be empty. This can happen when you access a &quot;</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                                     <span class="stringliteral">&quot;string that was previously std::move&#39;d into another string.&quot;</span>);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <span class="keywordflow">return</span> &amp;m_Data[0];</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#ab479457ea5ea6c0c5307003b65661042">   65</a></span>&#160;EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#ab479457ea5ea6c0c5307003b65661042">ezHybridStringBase&lt;Size&gt;::GetElementCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keywordflow">return</span> m_Data.GetCount() - 1;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#af20ba0a27cc7fd6c9c98f8bad4d4d18f">   71</a></span>&#160;EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#af20ba0a27cc7fd6c9c98f8bad4d4d18f">ezHybridStringBase&lt;Size&gt;::GetCharacterCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a1825871aad703fcbda09e6a5f96eb40b">ezStringUtils::GetCharacterCount</a>(GetData());</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#a8732f9ecbcab3c7af4de41a9bd89df03">   77</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szString)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  ezUInt32 uiElementCount = <a class="code" href="../../de/df8/classez_string_utils.htm#ac50e765fba05ee2f920e3334982eb352">ezStringUtils::GetStringElementCount</a>(szString);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordflow">if</span> (szString + uiElementCount &lt; m_Data.GetData() || szString &gt;= m_Data.GetData() + m_Data.GetCount())</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">// source string is outside our own memory, so no overlapped copy</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="comment">// source string overlaps with our own memory -&gt; we can&#39;t increase the size of our memory, as that might invalidate the source data</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    EZ_ASSERT_DEBUG(uiElementCount &lt; m_Data.GetCount(), <span class="stringliteral">&quot;Invalid copy of overlapping string data.&quot;</span>);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  m_Data.SetCountUninitialized(uiElementCount + 1);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <a class="code" href="../../de/df8/classez_string_utils.htm#a193ae00236c80eb4aa25942bcc2d71d2">ezStringUtils::Copy</a>(&amp;m_Data[0], uiElementCount + 1, szString);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">   96</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&amp; rhs)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">this</span> == &amp;rhs)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  m_Data = rhs.m_Data;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#a55dbfd982101ad25513f432b624ee7df">  105</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&amp;&amp; rhs)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">this</span> == &amp;rhs)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  m_Data = std::move(rhs.m_Data);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#ae68d1a260ef632266a596419853b12aa">  114</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* szString)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <a class="code" href="../../d9/d95/classez_string_utf8.htm">ezStringUtf8</a> sConversion(szString, m_Data.GetAllocator());</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  *<span class="keyword">this</span> = sConversion.GetData();</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#a144a0639f006201f931fd05200f260f5">  121</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&amp; rhs)</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  EZ_ASSERT_DEBUG(rhs.<a class="code" href="../../d9/d18/classez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">GetStartPointer</a>() &lt; m_Data.GetData() || rhs.<a class="code" href="../../d9/d18/classez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">GetStartPointer</a>() &gt;= m_Data.GetData() + m_Data.GetCount(),</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="stringliteral">&quot;Can&#39;t assign string a value that points to ourself!&quot;</span>);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  m_Data.SetCountUninitialized(rhs.<a class="code" href="../../d9/d18/classez_string_view.htm#a64dec920b26c9df50ea139826fcdd448">GetElementCount</a>() + 1);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <a class="code" href="../../de/df8/classez_string_utils.htm#a193ae00236c80eb4aa25942bcc2d71d2">ezStringUtils::Copy</a>(&amp;m_Data[0], m_Data.GetCount(), rhs.<a class="code" href="../../d9/d18/classez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">GetStartPointer</a>(), rhs.<a class="code" href="../../d9/d18/classez_string_view.htm#aeb4fee979aa7e71f8c3596fb342ad2bc">GetEndPointer</a>());</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#a67adf8196229df696cb7d877bcb474ee">  131</a></span>&#160;<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a67adf8196229df696cb7d877bcb474ee">ezHybridStringBase&lt;Size&gt;::GetSubString</a>(ezUInt32 uiFirstCharacter, ezUInt32 uiNumCharacters)<span class="keyword"> const</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* szStart = GetData();</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../d9/d32/classez_unicode_utils.htm#ac5acb55d1f2131f2e2578512c6f7c1ed">ezUnicodeUtils::MoveToNextUtf8</a>(szStart, uiFirstCharacter).Failed())</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span> {};                                                           <span class="comment">// szStart was moved too far, the result is just an empty string</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* szEnd = szStart;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <a class="code" href="../../d9/d32/classez_unicode_utils.htm#ac5acb55d1f2131f2e2578512c6f7c1ed">ezUnicodeUtils::MoveToNextUtf8</a>(szEnd, uiNumCharacters).<a class="code" href="../../d4/da9/structez_result.htm#acb0bb72646ee6d5966edd5b4108fb670">IgnoreResult</a>(); <span class="comment">// if it fails, szEnd just points to the end of this string</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a>(szStart, szEnd);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#a57069e63a857e02a96ce058b7e08b5a2">  144</a></span>&#160;<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a57069e63a857e02a96ce058b7e08b5a2">ezHybridStringBase&lt;Size&gt;::GetFirst</a>(ezUInt32 uiNumCharacters)<span class="keyword"> const</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keywordflow">return</span> GetSubString(0, uiNumCharacters);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="../../d6/d43/structez_hybrid_string_base.htm#a81959562e8f0dc60eb14d5a02b92a608">  150</a></span>&#160;<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a81959562e8f0dc60eb14d5a02b92a608">ezHybridStringBase&lt;Size&gt;::GetLast</a>(ezUInt32 uiNumCharacters)<span class="keyword"> const</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  <span class="keyword">const</span> ezUInt32 uiMaxCharacterCount = GetCharacterCount();</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  EZ_ASSERT_DEV(uiNumCharacters &lt; uiMaxCharacterCount, <span class="stringliteral">&quot;The string only contains {0} characters, cannot return the last {1} characters.&quot;</span>,</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    uiMaxCharacterCount, uiNumCharacters);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keywordflow">return</span> GetSubString(uiMaxCharacterCount - uiNumCharacters, uiNumCharacters);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::ezHybridString</a>()</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  : <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt;Size&gt;(A::GetAllocator())</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::ezHybridString</a>(<a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  : <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt;Size&gt;(pAllocator)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::ezHybridString</a>(<span class="keyword">const</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;</a>&amp; other)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  : <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt;Size&gt;(other, A::GetAllocator())</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;{</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::ezHybridString</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase&lt;Size&gt;</a>&amp; other)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  : <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt;Size&gt;(other, A::GetAllocator())</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;{</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::ezHybridString</a>(<a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;</a>&amp;&amp; other)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  : <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt;Size&gt;(std::move(other), A::GetAllocator())</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;{</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::ezHybridString</a>(<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase&lt;Size&gt;</a>&amp;&amp; other)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  : <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt;Size&gt;(std::move(other), A::GetAllocator())</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::ezHybridString</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* rhs)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  : <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt;Size&gt;(rhs, A::GetAllocator())</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;{</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::ezHybridString</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* rhs)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  : <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt;Size&gt;(rhs, A::GetAllocator())</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;{</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::ezHybridString</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&amp; rhs)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  : <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt;Size&gt;(rhs, A::GetAllocator())</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(rhs);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;}</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase&lt;Size&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;{</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(rhs);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::operator=</a>(<a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;</a>&amp;&amp; rhs)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;{</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(std::move(rhs));</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::operator=</a>(<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase&lt;Size&gt;</a>&amp;&amp; rhs)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(std::move(rhs));</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::operator=</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* rhs)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;{</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(rhs);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::operator=</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* rhs)</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;{</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(rhs);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;}</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&amp; rhs)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;{</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(rhs);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_INTEROP_STL_STRINGS)</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a38388b6f173efff8b339cf1d6209fe9d">ezHybridStringBase&lt;Size&gt;::ezHybridStringBase</a>(<span class="keyword">const</span> std::string_view&amp; rhs, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;{</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  *<span class="keyword">this</span> = rhs;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a38388b6f173efff8b339cf1d6209fe9d">ezHybridStringBase&lt;Size&gt;::ezHybridStringBase</a>(<span class="keyword">const</span> std::string&amp; rhs, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator)</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;{</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  *<span class="keyword">this</span> = rhs;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;}</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160; </div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(<span class="keyword">const</span> std::string_view&amp; rhs)</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;{</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <span class="keywordflow">if</span> (rhs.empty())</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    Clear();</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  }</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  {</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    m_Data.SetCountUninitialized(((ezUInt32)rhs.size() + 1));</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <a class="code" href="../../de/df8/classez_string_utils.htm#a193ae00236c80eb4aa25942bcc2d71d2">ezStringUtils::Copy</a>(&amp;m_Data[0], m_Data.GetCount(), rhs.data(), rhs.data() + rhs.size());</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160; </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size&gt;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(<span class="keyword">const</span> std::string&amp; rhs)</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;{</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  *<span class="keyword">this</span> = std::string_view(rhs);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;}</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::ezHybridString</a>(<span class="keyword">const</span> std::string_view&amp; rhs)</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  : <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt;Size&gt;(rhs, A::GetAllocator())</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;{</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;}</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::ezHybridString</a>(<span class="keyword">const</span> std::string&amp; rhs)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  : <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt;Size&gt;(rhs, A::GetAllocator())</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;{</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;}</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::operator=</a>(<span class="keyword">const</span> std::string_view&amp; rhs)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;{</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(rhs);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;}</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="keyword">template</span> &lt;ezUInt16 Size, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString&lt;Size, A&gt;::operator=</a>(<span class="keyword">const</span> std::string&amp; rhs)</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;{</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  <a class="code" href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase&lt;Size&gt;::operator=</a>(rhs);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160; </div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160; </div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="preprocessor">#include &lt;Foundation/Strings/Implementation/AllStrings_inl.h&gt;</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructez_hybrid_string_base_htm_a7e11b053ec999656b2b39354bdacf99e"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#a7e11b053ec999656b2b39354bdacf99e">ezHybridStringBase::GetData</a></div><div class="ttdeci">const char * GetData() const</div><div class="ttdoc">Returns a pointer to the internal Utf8 string.</div><div class="ttdef"><b>Definition:</b> String_inl.h:56</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_a38388b6f173efff8b339cf1d6209fe9d"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#a38388b6f173efff8b339cf1d6209fe9d">ezHybridStringBase::ezHybridStringBase</a></div><div class="ttdeci">ezHybridStringBase(ezAllocator *pAllocator)</div><div class="ttdoc">Creates an empty string.</div><div class="ttdef"><b>Definition:</b> String_inl.h:4</div></div>
<div class="ttc" id="aclassez_string_utils_htm_ac50e765fba05ee2f920e3334982eb352"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#ac50e765fba05ee2f920e3334982eb352">ezStringUtils::GetStringElementCount</a></div><div class="ttdeci">static constexpr ezUInt32 GetStringElementCount(const T *pString)</div><div class="ttdoc">Returns the number of elements of type T that the string contains, until it hits an element that is z...</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:45</div></div>
<div class="ttc" id="astructez_result_htm_acb0bb72646ee6d5966edd5b4108fb670"><div class="ttname"><a href="../../d4/da9/structez_result.htm#acb0bb72646ee6d5966edd5b4108fb670">ezResult::IgnoreResult</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void IgnoreResult()</div><div class="ttdoc">Used to silence compiler warnings, when success or failure doesn't matter.</div><div class="ttdef"><b>Definition:</b> Types.h:69</div></div>
<div class="ttc" id="aclassez_string_view_htm_aeb4fee979aa7e71f8c3596fb342ad2bc"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#aeb4fee979aa7e71f8c3596fb342ad2bc">ezStringView::GetEndPointer</a></div><div class="ttdeci">const char * GetEndPointer() const</div><div class="ttdoc">Returns the end of the view range. This will point to the byte AFTER the last character.</div><div class="ttdef"><b>Definition:</b> StringView.h:108</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_a18183bd86269e0bb7124f5dd4f27b2e5"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#a18183bd86269e0bb7124f5dd4f27b2e5">ezHybridStringBase::operator=</a></div><div class="ttdeci">void operator=(const ezHybridStringBase &amp;rhs)</div><div class="ttdoc">Copies the data from rhs.</div><div class="ttdef"><b>Definition:</b> String_inl.h:96</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_a67adf8196229df696cb7d877bcb474ee"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#a67adf8196229df696cb7d877bcb474ee">ezHybridStringBase::GetSubString</a></div><div class="ttdeci">ezStringView GetSubString(ezUInt32 uiFirstCharacter, ezUInt32 uiNumCharacters) const</div><div class="ttdoc">Returns a view to a sub-string of this string, starting at character uiFirstCharacter,...</div><div class="ttdef"><b>Definition:</b> String_inl.h:131</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_aaced07b48ca63da8bd4bacc7ebb1ad86"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#aaced07b48ca63da8bd4bacc7ebb1ad86">ezHybridStringBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Resets this string to an empty string.</div><div class="ttdef"><b>Definition:</b> String_inl.h:49</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_ab479457ea5ea6c0c5307003b65661042"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#ab479457ea5ea6c0c5307003b65661042">ezHybridStringBase::GetElementCount</a></div><div class="ttdeci">ezUInt32 GetElementCount() const</div><div class="ttdoc">Returns the amount of bytes that this string takes (excluding the '\0' terminator).</div><div class="ttdef"><b>Definition:</b> String_inl.h:65</div></div>
<div class="ttc" id="astructez_hybrid_string_htm"><div class="ttname"><a href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a></div><div class="ttdef"><b>Definition:</b> Stream.h:16</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a1825871aad703fcbda09e6a5f96eb40b"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a1825871aad703fcbda09e6a5f96eb40b">ezStringUtils::GetCharacterCount</a></div><div class="ttdeci">static ezUInt32 GetCharacterCount(const char *szUtf8, const char *pStringEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns the number of characters (not Bytes!) in a Utf8 string (excluding the zero terminator),...</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:81</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_ae62faf872800bba225ee53e73dff7289"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#ae62faf872800bba225ee53e73dff7289">ezHybridStringBase::~ezHybridStringBase</a></div><div class="ttdeci">~ezHybridStringBase()</div><div class="ttdoc">Destructor.</div></div>
<div class="ttc" id="aclassez_string_utf8_htm"><div class="ttname"><a href="../../d9/d95/classez_string_utf8.htm">ezStringUtf8</a></div><div class="ttdoc">A small string class that converts any other encoding to Utf8.</div><div class="ttdef"><b>Definition:</b> StringConversion.h:46</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_a57069e63a857e02a96ce058b7e08b5a2"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#a57069e63a857e02a96ce058b7e08b5a2">ezHybridStringBase::GetFirst</a></div><div class="ttdeci">ezStringView GetFirst(ezUInt32 uiNumCharacters) const</div><div class="ttdoc">Returns a view to the sub-string containing the first uiNumCharacters characters of this string.</div><div class="ttdef"><b>Definition:</b> String_inl.h:144</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a></div><div class="ttdoc">A string class for storing and passing around strings.</div><div class="ttdef"><b>Definition:</b> String.h:27</div></div>
<div class="ttc" id="aclassez_string_view_htm_a64dec920b26c9df50ea139826fcdd448"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#a64dec920b26c9df50ea139826fcdd448">ezStringView::GetElementCount</a></div><div class="ttdeci">ezUInt32 GetElementCount() const</div><div class="ttdoc">Returns the number of bytes from the start position up to its end.</div><div class="ttdef"><b>Definition:</b> StringView.h:93</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a193ae00236c80eb4aa25942bcc2d71d2"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a193ae00236c80eb4aa25942bcc2d71d2">ezStringUtils::Copy</a></div><div class="ttdeci">static ezUInt32 Copy(char *szDest, ezUInt32 uiDstSize, const char *szSource, const char *pSourceEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Copies the string from szSource into the given buffer, which can hold at least uiDstSize bytes.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:362</div></div>
<div class="ttc" id="aclassez_allocator_htm"><div class="ttname"><a href="../../d0/dbb/classez_allocator.htm">ezAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> Allocator.h:22</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_af20ba0a27cc7fd6c9c98f8bad4d4d18f"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#af20ba0a27cc7fd6c9c98f8bad4d4d18f">ezHybridStringBase::GetCharacterCount</a></div><div class="ttdeci">ezUInt32 GetCharacterCount() const</div><div class="ttdoc">Returns the number of characters in this string. Might be less than GetElementCount,...</div><div class="ttdef"><b>Definition:</b> String_inl.h:71</div></div>
<div class="ttc" id="aclassez_unicode_utils_htm_ac5acb55d1f2131f2e2578512c6f7c1ed"><div class="ttname"><a href="../../d9/d32/classez_unicode_utils.htm#ac5acb55d1f2131f2e2578512c6f7c1ed">ezUnicodeUtils::MoveToNextUtf8</a></div><div class="ttdeci">static ezResult MoveToNextUtf8(const char *&amp;ref_szUtf8, ezUInt32 uiNumCharacters=1)</div><div class="ttdoc">Moves the given string pointer ahead to the next Utf8 character sequence.</div><div class="ttdef"><b>Definition:</b> UnicodeUtils_inl.h:203</div></div>
<div class="ttc" id="aclassez_string_view_htm_a7e6ab4aebc721857871d822321935d5f"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">ezStringView::GetStartPointer</a></div><div class="ttdeci">const char * GetStartPointer() const</div><div class="ttdoc">Returns the start of the view range.</div><div class="ttdef"><b>Definition:</b> StringView.h:102</div></div>
<div class="ttc" id="astructez_hybrid_string_base_htm_a81959562e8f0dc60eb14d5a02b92a608"><div class="ttname"><a href="../../d6/d43/structez_hybrid_string_base.htm#a81959562e8f0dc60eb14d5a02b92a608">ezHybridStringBase::GetLast</a></div><div class="ttdeci">ezStringView GetLast(ezUInt32 uiNumCharacters) const</div><div class="ttdoc">Returns a view to the sub-string containing the last uiNumCharacters characters of this string.</div><div class="ttdef"><b>Definition:</b> String_inl.h:150</div></div>
<div class="ttc" id="aclassez_string_view_htm"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm">ezStringView</a></div><div class="ttdoc">ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition:</b> StringView.h:33</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_b52479c911fe9a42767226b3387b3a02.htm">Strings</a></li><li class="navelem"><a class="el" href="../../dir_067384bf2c73f8a8078edb859c0ba426.htm">Implementation</a></li><li class="navelem"><b>String_inl.h</b></li>
    <li class="footer">Generated on Sun Aug 25 2024 13:06:20 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
