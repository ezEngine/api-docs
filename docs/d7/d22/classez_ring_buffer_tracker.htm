<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezRingBufferTracker Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 25.03</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d7/d22/classez_ring_buffer_tracker.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="../../d1/db5/classez_ring_buffer_tracker-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezRingBufferTracker Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Tracks memory in a ring buffer on a frame by frame basis. The intended usage pattern is that for frame N, multiple allocations are called. This is followed by a call to SubmitFrame for frame N (optional) which allows the user to handle to memory ranges that were modified in this frame. Eventually at a later point in time Free is called for frame N to allow reuse of the memory. Note that the assumption is that N is always increasing and that free is called for each frame in order.  
 <a href="../../d7/d22/classez_ring_buffer_tracker.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../dc/d99/_ring_buffer_tracker_8h_source.htm">RingBufferTracker.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d58/structez_ring_buffer_tracker_1_1_frame_data.htm">FrameData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a2a9fce87ac91388389b63817889a8e0b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d22/classez_ring_buffer_tracker.htm#a2a9fce87ac91388389b63817889a8e0b">ezRingBufferTracker</a> (ezUInt32 uiAlignment, ezUInt32 uiTotalSize)</td></tr>
<tr class="separator:a2a9fce87ac91388389b63817889a8e0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b80499898bf02ce1a92b9aefac4c47f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d22/classez_ring_buffer_tracker.htm#a9b80499898bf02ce1a92b9aefac4c47f">Allocate</a> (ezUInt32 uiSize, ezUInt64 uiCurrentFrame, ezUInt32 &amp;out_uiAllocatedOffset)</td></tr>
<tr class="separator:a9b80499898bf02ce1a92b9aefac4c47f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e6dc3d2c44608485c94978bce616559"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d22/classez_ring_buffer_tracker.htm#a7e6dc3d2c44608485c94978bce616559">Free</a> (ezUInt64 uiUpToFrame)</td></tr>
<tr class="separator:a7e6dc3d2c44608485c94978bce616559"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5436d2886b9dea8fb6150f7439224df"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d22/classez_ring_buffer_tracker.htm#aa5436d2886b9dea8fb6150f7439224df">SubmitFrame</a> (ezUInt64 uiFrame, <a class="el" href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray</a>&lt; <a class="el" href="../../df/d58/structez_ring_buffer_tracker_1_1_frame_data.htm">FrameData</a> &gt; &amp;out_frameData)</td></tr>
<tr class="memdesc:aa5436d2886b9dea8fb6150f7439224df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the dirty memory ranges of this frame. Note that this can be anything between zero and two. In case that the end of the buffer is reached and wraps around within a frame, the end part and the part at the start are split into two <a class="el" href="../../df/d58/structez_ring_buffer_tracker_1_1_frame_data.htm">FrameData</a> objects. Can be called multiple times per frame. Each dirty range will only be given out once.  <a href="../../d7/d22/classez_ring_buffer_tracker.htm#aa5436d2886b9dea8fb6150f7439224df">More...</a><br /></td></tr>
<tr class="separator:aa5436d2886b9dea8fb6150f7439224df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f6c81dc9567dc86081a6311627da546"><td class="memItemLeft" align="right" valign="top"><a id="a7f6c81dc9567dc86081a6311627da546"></a>
EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetTotalMemory</b> () const</td></tr>
<tr class="separator:a7f6c81dc9567dc86081a6311627da546"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1e122dbbbbd82f9ca474a9f5bd7e2f7"><td class="memItemLeft" align="right" valign="top"><a id="ae1e122dbbbbd82f9ca474a9f5bd7e2f7"></a>
EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetUsedMemory</b> () const</td></tr>
<tr class="separator:ae1e122dbbbbd82f9ca474a9f5bd7e2f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00515dcb448fd204228c781761eb8482"><td class="memItemLeft" align="right" valign="top"><a id="a00515dcb448fd204228c781761eb8482"></a>
EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetFreeMemory</b> () const</td></tr>
<tr class="separator:a00515dcb448fd204228c781761eb8482"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a43d82c9a51685674f9c953e47fb24c12"><td class="memItemLeft" align="right" valign="top"><a id="a43d82c9a51685674f9c953e47fb24c12"></a>
constexpr static ezUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>s_FrameDataSubmitted</b> = EZ_BIT(63)</td></tr>
<tr class="separator:a43d82c9a51685674f9c953e47fb24c12"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Tracks memory in a ring buffer on a frame by frame basis. The intended usage pattern is that for frame N, multiple allocations are called. This is followed by a call to SubmitFrame for frame N (optional) which allows the user to handle to memory ranges that were modified in this frame. Eventually at a later point in time Free is called for frame N to allow reuse of the memory. Note that the assumption is that N is always increasing and that free is called for each frame in order. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a2a9fce87ac91388389b63817889a8e0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a9fce87ac91388389b63817889a8e0b">&#9670;&nbsp;</a></span>ezRingBufferTracker()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezRingBufferTracker::ezRingBufferTracker </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiAlignment</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiTotalSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Crates a new tracker. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">uiAlignment</td><td>All allocations will be aligned to this. Must be power of two. </td></tr>
    <tr><td class="paramname">uiTotalSize</td><td>The size of the memory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a9b80499898bf02ce1a92b9aefac4c47f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b80499898bf02ce1a92b9aefac4c47f">&#9670;&nbsp;</a></span>Allocate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> ezRingBufferTracker::Allocate </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt64&#160;</td>
          <td class="paramname"><em>uiCurrentFrame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32 &amp;&#160;</td>
          <td class="paramname"><em>out_uiAllocatedOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Allocates memory of the given size. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">uiSize</td><td>Size requested. </td></tr>
    <tr><td class="paramname">uiCurrentFrame</td><td>The current frame for which this allocation is tracked. </td></tr>
    <tr><td class="paramname">out_uiAllocatedOffset</td><td>Will be filled by the start offset of the allocation inside the memory if successful. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns EZ_FAILURE if not enough memory remains to fulfil the allocation. </dd></dl>

</div>
</div>
<a id="a7e6dc3d2c44608485c94978bce616559"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e6dc3d2c44608485c94978bce616559">&#9670;&nbsp;</a></span>Free()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezRingBufferTracker::Free </td>
          <td>(</td>
          <td class="paramtype">ezUInt64&#160;</td>
          <td class="paramname"><em>uiUpToFrame</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Makes all memory that was used up to uiUpToFrame available again for allocations. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">uiUpToFrame</td><td>All frames below this and this frame itself are safe to be reused. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa5436d2886b9dea8fb6150f7439224df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5436d2886b9dea8fb6150f7439224df">&#9670;&nbsp;</a></span>SubmitFrame()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> ezRingBufferTracker::SubmitFrame </td>
          <td>(</td>
          <td class="paramtype">ezUInt64&#160;</td>
          <td class="paramname"><em>uiFrame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray</a>&lt; <a class="el" href="../../df/d58/structez_ring_buffer_tracker_1_1_frame_data.htm">FrameData</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>out_frameData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieves the dirty memory ranges of this frame. Note that this can be anything between zero and two. In case that the end of the buffer is reached and wraps around within a frame, the end part and the part at the start are split into two <a class="el" href="../../df/d58/structez_ring_buffer_tracker_1_1_frame_data.htm">FrameData</a> objects. Can be called multiple times per frame. Each dirty range will only be given out once. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">uiFrame</td><td>Frame index to submit dirty ranges. </td></tr>
    <tr><td class="paramname">out_frameData</td><td>Will receive the <a class="el" href="../../df/d58/structez_ring_buffer_tracker_1_1_frame_data.htm">FrameData</a> objects containing the dirty ranges of the memory. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns EZ_FAILURE if no allocations were made in uiFrame. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/RendererFoundation/Utils/<a class="el" href="../../dc/d99/_ring_buffer_tracker_8h_source.htm">RingBufferTracker.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/RendererFoundation/Utils/Implementation/RingBufferTracker.cpp</li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d7/d22/classez_ring_buffer_tracker.htm">ezRingBufferTracker</a></li>
    <li class="footer">Generated on Mon Mar 3 2025 17:23:56 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
