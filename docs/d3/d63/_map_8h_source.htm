<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Containers/Map.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 24.09</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d3/d63/_map_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Map.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;Foundation/Containers/Deque.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00006"></a><span class="lineno"><a class="line" href="../../d1/d43/classez_map_base.htm">    6</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase</a>;</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer, <span class="keywordtype">bool</span> REVERSE&gt;</div>
<div class="line"><a name="l00010"></a><span class="lineno"><a class="line" href="../../dc/d19/structez_map_base_const_iterator_base.htm">   10</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase</a></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;{</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <span class="keyword">using</span> iterator_category = std::forward_iterator_tag;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">value_type</a> = <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  <span class="keyword">using</span> difference_type = std::ptrdiff_t;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">pointer</a> = <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>*;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">reference</a> = <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>&amp;;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  EZ_DECLARE_POD_TYPE();</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="../../dc/d19/structez_map_base_const_iterator_base.htm#a439a30f22593dd621c974513758fe3a7">   21</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#a439a30f22593dd621c974513758fe3a7">ezMapBaseConstIteratorBase</a>()</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    : m_pElement(nullptr)</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  {</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ae7c83670cacfa6e95267d61699635612">   27</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ae7c83670cacfa6e95267d61699635612">IsValid</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement != <span class="keyword">nullptr</span>); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="../../dc/d19/structez_map_base_const_iterator_base.htm#a82db7ffa8199fbd36e5705366f81e917">   30</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#a82db7ffa8199fbd36e5705366f81e917">operator==</a>(<span class="keyword">const</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase</a>&amp; it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement == it2.m_pElement); }</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  EZ_ADD_DEFAULT_OPERATOR_NOTEQUAL(<span class="keyword">const</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase</a>&amp;);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="../../dc/d19/structez_map_base_const_iterator_base.htm#abca52ccf5d7e43689ebc6c96411b7b31">   34</a></span>&#160;  EZ_FORCE_INLINE <span class="keyword">const</span> KeyType&amp; <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#abca52ccf5d7e43689ebc6c96411b7b31">Key</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    EZ_ASSERT_DEBUG(<a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ae7c83670cacfa6e95267d61699635612">IsValid</a>(), <span class="stringliteral">&quot;Cannot access the &#39;key&#39; of an invalid iterator.&quot;</span>);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> m_pElement-&gt;m_Key;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ac9afeecd4cad37891b734fc4c9fc3363">   41</a></span>&#160;  EZ_FORCE_INLINE <span class="keyword">const</span> ValueType&amp; <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ac9afeecd4cad37891b734fc4c9fc3363">Value</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    EZ_ASSERT_DEBUG(<a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ae7c83670cacfa6e95267d61699635612">IsValid</a>(), <span class="stringliteral">&quot;Cannot access the &#39;value&#39; of an invalid iterator.&quot;</span>);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> m_pElement-&gt;m_Value;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ae727d1e24dfb95096bd881beced5b4ce">   48</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase</a>&amp; <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ae727d1e24dfb95096bd881beced5b4ce">operator*</a>() { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#a3b908e94721a42fae75ceeb0aca622d2">Next</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#a41b57825e9045516293c7328dc596535">Prev</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ada824c2d47cc456eeff6e8cf594aa20f">   57</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ada824c2d47cc456eeff6e8cf594aa20f">operator++</a>() { <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#a3b908e94721a42fae75ceeb0aca622d2">Next</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="../../dc/d19/structez_map_base_const_iterator_base.htm#a3c110a56089955f8fb01442bf93d1c2f">   60</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#a3c110a56089955f8fb01442bf93d1c2f">operator--</a>() { <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#a41b57825e9045516293c7328dc596535">Prev</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="keywordtype">void</span> Advance(<span class="keyword">const</span> ezInt32 dir0, <span class="keyword">const</span> ezInt32 dir1);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase</a>&lt;KeyType, ValueType, Comparer&gt;;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">explicit</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#a439a30f22593dd621c974513758fe3a7">ezMapBaseConstIteratorBase</a>(<span class="keyword">typename</span> <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;::Node</a>* pInit)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    : m_pElement(pInit)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="keyword">typename</span> <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;::Node</a>* m_pElement;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_USE_CPP20_OPERATORS)</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keyword">struct </span>Pointer</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    std::pair&lt;const KeyType&amp;, const ValueType&amp;&gt; value;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> std::pair&lt;const KeyType&amp;, const ValueType&amp;&gt;* operator-&gt;()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> &amp;value; }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  };</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  EZ_ALWAYS_INLINE Pointer operator-&gt;()<span class="keyword"> const</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">return</span> Pointer{.value = {<a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#abca52ccf5d7e43689ebc6c96411b7b31">Key</a>(), <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ac9afeecd4cad37891b734fc4c9fc3363">Value</a>()}};</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="comment">// This function is used to return the values for structured bindings.</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="comment">// The number and type of each slot are defined in the inl file.</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Index&gt;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  std::tuple_element_t&lt;Index, ezMapBaseConstIteratorBase&gt;&amp; get()<span class="keyword"> const</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">if</span> constexpr (Index == 0)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      return <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#abca52ccf5d7e43689ebc6c96411b7b31">Key</a>();</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    if constexpr (Index == 1)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      return <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ac9afeecd4cad37891b734fc4c9fc3363">Value</a>();</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;};</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer, <span class="keywordtype">bool</span> REVERSE&gt;</div>
<div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="../../d1/ddf/structez_map_base_iterator_base.htm">  102</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm">ezMapBaseIteratorBase</a> : <span class="keyword">public</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, REVERSE&gt;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keyword">using</span> iterator_category = std::forward_iterator_tag;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">value_type</a> = <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm">ezMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, REVERSE&gt;</a>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  <span class="keyword">using</span> difference_type = std::ptrdiff_t;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">pointer</a> = <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm">ezMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, REVERSE&gt;</a>*;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">reference</a> = <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm">ezMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, REVERSE&gt;</a>&amp;;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  EZ_DECLARE_POD_TYPE();</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="../../d1/ddf/structez_map_base_iterator_base.htm#a487aa9ed9c7f4ac9e71b814c209717a2">  113</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm#a487aa9ed9c7f4ac9e71b814c209717a2">ezMapBaseIteratorBase</a>()</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    : <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, REVERSE&gt;()</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="../../d1/ddf/structez_map_base_iterator_base.htm#a0751b73f11f2afcbcba1b27c48076c14">  119</a></span>&#160;  EZ_FORCE_INLINE ValueType&amp; <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm#a0751b73f11f2afcbcba1b27c48076c14">Value</a>()</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    EZ_ASSERT_DEBUG(this-&gt;<a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ae7c83670cacfa6e95267d61699635612">IsValid</a>(), <span class="stringliteral">&quot;Cannot access the &#39;value&#39; of an invalid iterator.&quot;</span>);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">return</span> this-&gt;m_pElement-&gt;m_Value;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="../../d1/ddf/structez_map_base_iterator_base.htm#a02936dcbe8324c0138ef88ab30b96cc6">  126</a></span>&#160;  EZ_FORCE_INLINE ValueType&amp; <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm#a02936dcbe8324c0138ef88ab30b96cc6">Value</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    EZ_ASSERT_DEBUG(this-&gt;<a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ae7c83670cacfa6e95267d61699635612">IsValid</a>(), <span class="stringliteral">&quot;Cannot access the &#39;value&#39; of an invalid iterator.&quot;</span>);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">return</span> this-&gt;m_pElement-&gt;m_Value;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  }</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="../../d1/ddf/structez_map_base_iterator_base.htm#a3f70e6d97c0d3b8bebace469faf9e068">  133</a></span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm">ezMapBaseIteratorBase</a>&amp; <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm#a3f70e6d97c0d3b8bebace469faf9e068">operator*</a>() { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase</a>&lt;KeyType, ValueType, Comparer&gt;;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">explicit</span> <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm">ezMapBaseIteratorBase</a>(<span class="keyword">typename</span> <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;::Node</a>* pInit)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    : <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, REVERSE&gt;(pInit)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_USE_CPP20_OPERATORS)</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  <span class="keyword">struct </span>Pointer</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    std::pair&lt;const KeyType&amp;, ValueType&amp;&gt; value;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">const</span> std::pair&lt;const KeyType&amp;, ValueType&amp;&gt;* operator-&gt;()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> &amp;value; }</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  };</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  EZ_ALWAYS_INLINE Pointer operator-&gt;()<span class="keyword"> const</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">return</span> Pointer{.value = {<a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#abca52ccf5d7e43689ebc6c96411b7b31">ezMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, REVERSE&gt;::Key</a>(), <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ac9afeecd4cad37891b734fc4c9fc3363">Value</a>()}};</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <span class="comment">// These functions are used to return the values for structured bindings.</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  <span class="comment">// The number and type of type of each slot are defined in the inl file.</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Index&gt;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  std::tuple_element_t&lt;Index, ezMapBaseIteratorBase&gt;&amp; get()</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">if</span> constexpr (Index == 0)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      return <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, REVERSE&gt;::<a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#abca52ccf5d7e43689ebc6c96411b7b31">Key</a>();</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    if constexpr (Index == 1)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      return <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ac9afeecd4cad37891b734fc4c9fc3363">Value</a>();</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  template &lt;std::<span class="keywordtype">size_t</span> Index&gt;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  std::tuple_element_t&lt;Index, <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm">ezMapBaseIteratorBase</a>&gt;&amp; get()<span class="keyword"> const</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">if</span> constexpr (Index == 0)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      return <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, REVERSE&gt;::<a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#abca52ccf5d7e43689ebc6c96411b7b31">Key</a>();</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    if constexpr (Index == 1)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;      return <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#ac9afeecd4cad37891b734fc4c9fc3363">Value</a>();</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;};</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">class </span><a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase</a></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;{</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keyword">using</span> ConstIterator = <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  <span class="keyword">using</span> ConstReverseIterator = <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, true&gt;</a>;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <span class="keyword">using</span> Iterator = <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm">ezMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  <span class="keyword">using</span> ReverseIterator = <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm">ezMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, true&gt;</a>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  <span class="keyword">friend</span> ConstIterator;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keyword">friend</span> ConstReverseIterator;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keyword">friend</span> Iterator;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="keyword">friend</span> ReverseIterator;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keyword">struct </span>Node;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  <span class="keyword">struct </span>NilNode</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    Node* m_pParent = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    Node* m_pLink[2] = {<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    ezUInt8 m_uiLevel = 0;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  };</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <span class="keyword">struct </span>Node : <span class="keyword">public</span> NilNode</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    KeyType m_Key;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    ValueType m_Value;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  };</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase</a>(<span class="keyword">const</span> Comparer&amp; comparer, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; cc, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  ~<a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; rhs);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  <span class="keywordtype">bool</span> IsEmpty() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  ezUInt32 GetCount() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  <span class="keywordtype">void</span> Clear(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  Iterator GetIterator(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  ReverseIterator GetReverseIterator(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  ConstIterator GetIterator() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  ConstReverseIterator GetReverseIterator() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType, <span class="keyword">typename</span> CompatibleValueType&gt;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  Iterator Insert(CompatibleKeyType&amp;&amp; key, CompatibleValueType&amp;&amp; value); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <span class="keywordtype">bool</span> Remove(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  Iterator Remove(<span class="keyword">const</span> Iterator&amp; pos); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  Iterator FindOrAdd(CompatibleKeyType&amp;&amp; key, <span class="keywordtype">bool</span>* out_pExisted = <span class="keyword">nullptr</span>); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  ValueType&amp; operator[](<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  <span class="keywordtype">bool</span> TryGetValue(<span class="keyword">const</span> CompatibleKeyType&amp; key, ValueType&amp; out_value) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="keywordtype">bool</span> TryGetValue(<span class="keyword">const</span> CompatibleKeyType&amp; key, <span class="keyword">const</span> ValueType*&amp; out_pValue) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="keywordtype">bool</span> TryGetValue(<span class="keyword">const</span> CompatibleKeyType&amp; key, ValueType*&amp; out_pValue) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="keyword">const</span> ValueType* GetValue(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  ValueType* GetValue(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="keyword">const</span> ValueType&amp; GetValueOrDefault(<span class="keyword">const</span> CompatibleKeyType&amp; key, <span class="keyword">const</span> ValueType&amp; defaultValue) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  Iterator Find(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  Iterator LowerBound(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  Iterator UpperBound(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  ConstIterator Find(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  <span class="keywordtype">bool</span> Contains(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160; </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  ConstIterator LowerBound(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  ConstIterator UpperBound(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00338"></a><span class="lineno"><a class="line" href="../../d1/d43/classez_map_base.htm#a736484aa9c5f233c8fbe48ed2ed17492">  338</a></span>&#160;  <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* <a class="code" href="../../d1/d43/classez_map_base.htm#a736484aa9c5f233c8fbe48ed2ed17492">GetAllocator</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Elements.GetAllocator(); }</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm#a82db7ffa8199fbd36e5705366f81e917">operator==</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  EZ_ADD_DEFAULT_OPERATOR_NOTEQUAL(<span class="keyword">const</span> <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp;);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160; </div>
<div class="line"><a name="l00345"></a><span class="lineno"><a class="line" href="../../d1/d43/classez_map_base.htm#ada00facbaa02afc5a2629ba338a68691">  345</a></span>&#160;  ezUInt64 <a class="code" href="../../d1/d43/classez_map_base.htm#ada00facbaa02afc5a2629ba338a68691">GetHeapMemoryUsage</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Elements.GetHeapMemoryUsage(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  <span class="keywordtype">void</span> Swap(<a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; other); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  Node* Internal_Find(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  Node* Internal_LowerBound(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  Node* Internal_UpperBound(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  <span class="keywordtype">void</span> Constructor();</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  Node* AcquireNode(CompatibleKeyType&amp;&amp; key, ValueType&amp;&amp; value, ezUInt8 uiLevel, Node* pParent);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  <span class="keywordtype">void</span> ReleaseNode(Node* pNode);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  <span class="comment">// \brief Red-Black Tree stuff(Anderson Tree to be exact).</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  <span class="comment">// Code taken from here: http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_andersson.aspx</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  Node* SkewNode(Node* root);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  Node* SplitNode(Node* root);</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  <span class="keywordtype">void</span> Insert(<span class="keyword">const</span> KeyType&amp; key, <span class="keyword">const</span> ValueType&amp; value, Node*&amp; pInsertedNode);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  Node* Remove(Node* root, <span class="keyword">const</span> CompatibleKeyType&amp; key, <span class="keywordtype">bool</span>&amp; bRemoved);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  Node* GetLeftMost() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  Node* GetRightMost() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160; </div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  <span class="keywordtype">void</span> SwapNilNode(Node*&amp; pCurNode, NilNode* pOld, NilNode* pNew);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  Node* m_pRoot;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;  Node* m_pFreeElementStack;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  NilNode m_NilNode;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160; </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  <a class="code" href="../../d9/dfe/classez_deque.htm">ezDeque&lt;Node, ezNullAllocatorWrapper, false&gt;</a> m_Elements;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160; </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  ezUInt32 m_uiCount;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160; </div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;  Comparer m_Comparer;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;};</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer = ezCompareHelper&lt;KeyType&gt;, <span class="keyword">typename</span> AllocatorWrapper = ezDefaultAllocatorWrapper&gt;</div>
<div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="../../d1/d79/classez_map.htm">  407</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d1/d79/classez_map.htm">ezMap</a> : <span class="keyword">public</span> <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase</a>&lt;KeyType, ValueType, Comparer&gt;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;{</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  <a class="code" href="../../d1/d79/classez_map.htm">ezMap</a>();</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  <span class="keyword">explicit</span> <a class="code" href="../../d1/d79/classez_map.htm">ezMap</a>(<a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  <a class="code" href="../../d1/d79/classez_map.htm">ezMap</a>(<span class="keyword">const</span> Comparer&amp; comparer, <a class="code" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a>* pAllocator);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160; </div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;  <a class="code" href="../../d1/d79/classez_map.htm">ezMap</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d79/classez_map.htm">ezMap&lt;KeyType, ValueType, Comparer, AllocatorWrapper&gt;</a>&amp; other);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;  <a class="code" href="../../d1/d79/classez_map.htm">ezMap</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; other);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160; </div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../d1/d79/classez_map.htm">ezMap&lt;KeyType, ValueType, Comparer, AllocatorWrapper&gt;</a>&amp; rhs);</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; rhs);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;};</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160; </div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;::Iterator</a> begin(<a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; ref_container)</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;{</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;  <span class="keywordflow">return</span> ref_container.<a class="code" href="../../d1/d43/classez_map_base.htm#a999fb772f02ce74de03af456db13ef38">GetIterator</a>();</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;}</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160; </div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a> begin(<span class="keyword">const</span> <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;{</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d1/d43/classez_map_base.htm#a999fb772f02ce74de03af456db13ef38">GetIterator</a>();</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;}</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160; </div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a> cbegin(<span class="keyword">const</span> <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;{</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d1/d43/classez_map_base.htm#a999fb772f02ce74de03af456db13ef38">GetIterator</a>();</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;}</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160; </div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;::Iterator</a> end(<a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; ref_container)</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;{</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;  EZ_IGNORE_UNUSED(ref_container);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../d1/ddf/structez_map_base_iterator_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;::Iterator</a>();</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;}</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160; </div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a> end(<span class="keyword">const</span> <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;{</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;  EZ_IGNORE_UNUSED(container);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a>();</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;}</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160; </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a> cend(<span class="keyword">const</span> <a class="code" href="../../d1/d43/classez_map_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;{</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;  EZ_IGNORE_UNUSED(container);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a>();</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;}</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160; </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="preprocessor">#include &lt;Foundation/Containers/Implementation/Map_inl.h&gt;</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructez_map_base_iterator_base_htm_a487aa9ed9c7f4ac9e71b814c209717a2"><div class="ttname"><a href="../../d1/ddf/structez_map_base_iterator_base.htm#a487aa9ed9c7f4ac9e71b814c209717a2">ezMapBaseIteratorBase::ezMapBaseIteratorBase</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezMapBaseIteratorBase()</div><div class="ttdoc">Constructs an invalid iterator.</div><div class="ttdef"><b>Definition:</b> Map.h:113</div></div>
<div class="ttc" id="astructez_map_base_iterator_base_htm_a3f70e6d97c0d3b8bebace469faf9e068"><div class="ttname"><a href="../../d1/ddf/structez_map_base_iterator_base.htm#a3f70e6d97c0d3b8bebace469faf9e068">ezMapBaseIteratorBase::operator*</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezMapBaseIteratorBase &amp; operator*()</div><div class="ttdoc">Returns '*this' to enable foreach.</div><div class="ttdef"><b>Definition:</b> Map.h:133</div></div>
<div class="ttc" id="aclassez_deque_htm"><div class="ttname"><a href="../../d9/dfe/classez_deque.htm">ezDeque&lt; Node, ezNullAllocatorWrapper, false &gt;</a></div></div>
<div class="ttc" id="astructez_map_base_iterator_base_htm"><div class="ttname"><a href="../../d1/ddf/structez_map_base_iterator_base.htm">ezMapBaseIteratorBase</a></div><div class="ttdoc">Forward Iterator to iterate over all elements in sorted order.</div><div class="ttdef"><b>Definition:</b> Map.h:102</div></div>
<div class="ttc" id="aclassez_map_base_htm_a736484aa9c5f233c8fbe48ed2ed17492"><div class="ttname"><a href="../../d1/d43/classez_map_base.htm#a736484aa9c5f233c8fbe48ed2ed17492">ezMapBase::GetAllocator</a></div><div class="ttdeci">ezAllocator * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition:</b> Map.h:338</div></div>
<div class="ttc" id="astructez_map_base_const_iterator_base_htm_ae7c83670cacfa6e95267d61699635612"><div class="ttname"><a href="../../dc/d19/structez_map_base_const_iterator_base.htm#ae7c83670cacfa6e95267d61699635612">ezMapBaseConstIteratorBase::IsValid</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition:</b> Map.h:27</div></div>
<div class="ttc" id="astructez_map_base_const_iterator_base_htm_a82db7ffa8199fbd36e5705366f81e917"><div class="ttname"><a href="../../dc/d19/structez_map_base_const_iterator_base.htm#a82db7ffa8199fbd36e5705366f81e917">ezMapBaseConstIteratorBase::operator==</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator==(const ezMapBaseConstIteratorBase &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> Map.h:30</div></div>
<div class="ttc" id="astructez_map_base_const_iterator_base_htm_a41b57825e9045516293c7328dc596535"><div class="ttname"><a href="../../dc/d19/structez_map_base_const_iterator_base.htm#a41b57825e9045516293c7328dc596535">ezMapBaseConstIteratorBase::Prev</a></div><div class="ttdeci">void Prev()</div><div class="ttdoc">Advances the iterator to the previous element in the map. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition:</b> Map_inl.h:71</div></div>
<div class="ttc" id="astructez_map_base_const_iterator_base_htm_a439a30f22593dd621c974513758fe3a7"><div class="ttname"><a href="../../dc/d19/structez_map_base_const_iterator_base.htm#a439a30f22593dd621c974513758fe3a7">ezMapBaseConstIteratorBase::ezMapBaseConstIteratorBase</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezMapBaseConstIteratorBase()</div><div class="ttdoc">Constructs an invalid iterator.</div><div class="ttdef"><b>Definition:</b> Map.h:21</div></div>
<div class="ttc" id="aclassez_map_base_htm"><div class="ttname"><a href="../../d1/d43/classez_map_base.htm">ezMapBase</a></div><div class="ttdoc">An associative container. Similar to STL::map.</div><div class="ttdef"><b>Definition:</b> Map.h:6</div></div>
<div class="ttc" id="aclassez_map_base_htm_a999fb772f02ce74de03af456db13ef38"><div class="ttname"><a href="../../d1/d43/classez_map_base.htm#a999fb772f02ce74de03af456db13ef38">ezMapBase::GetIterator</a></div><div class="ttdeci">Iterator GetIterator()</div><div class="ttdoc">Returns an Iterator to the very first element.</div><div class="ttdef"><b>Definition:</b> Map_inl.h:207</div></div>
<div class="ttc" id="astructez_map_base_const_iterator_base_htm_ada824c2d47cc456eeff6e8cf594aa20f"><div class="ttname"><a href="../../dc/d19/structez_map_base_const_iterator_base.htm#ada824c2d47cc456eeff6e8cf594aa20f">ezMapBaseConstIteratorBase::operator++</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void operator++()</div><div class="ttdoc">Shorthand for 'Next'.</div><div class="ttdef"><b>Definition:</b> Map.h:57</div></div>
<div class="ttc" id="aclassez_map_base_htm_ada00facbaa02afc5a2629ba338a68691"><div class="ttname"><a href="../../d1/d43/classez_map_base.htm#ada00facbaa02afc5a2629ba338a68691">ezMapBase::GetHeapMemoryUsage</a></div><div class="ttdeci">ezUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition:</b> Map.h:345</div></div>
<div class="ttc" id="astructez_map_base_const_iterator_base_htm"><div class="ttname"><a href="../../dc/d19/structez_map_base_const_iterator_base.htm">ezMapBaseConstIteratorBase</a></div><div class="ttdoc">Base class for all iterators.</div><div class="ttdef"><b>Definition:</b> Map.h:10</div></div>
<div class="ttc" id="aclassez_map_htm"><div class="ttname"><a href="../../d1/d79/classez_map.htm">ezMap</a></div><div class="ttdef"><b>Definition:</b> Map.h:407</div></div>
<div class="ttc" id="astructez_map_base_const_iterator_base_htm_ae727d1e24dfb95096bd881beced5b4ce"><div class="ttname"><a href="../../dc/d19/structez_map_base_const_iterator_base.htm#ae727d1e24dfb95096bd881beced5b4ce">ezMapBaseConstIteratorBase::operator*</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezMapBaseConstIteratorBase &amp; operator*()</div><div class="ttdoc">Returns '*this' to enable foreach.</div><div class="ttdef"><b>Definition:</b> Map.h:48</div></div>
<div class="ttc" id="astructez_map_base_const_iterator_base_htm_a3b908e94721a42fae75ceeb0aca622d2"><div class="ttname"><a href="../../dc/d19/structez_map_base_const_iterator_base.htm#a3b908e94721a42fae75ceeb0aca622d2">ezMapBaseConstIteratorBase::Next</a></div><div class="ttdeci">void Next()</div><div class="ttdoc">Advances the iterator to the next element in the map. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition:</b> Map_inl.h:58</div></div>
<div class="ttc" id="astructez_map_base_const_iterator_base_htm_a3c110a56089955f8fb01442bf93d1c2f"><div class="ttname"><a href="../../dc/d19/structez_map_base_const_iterator_base.htm#a3c110a56089955f8fb01442bf93d1c2f">ezMapBaseConstIteratorBase::operator--</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void operator--()</div><div class="ttdoc">Shorthand for 'Prev'.</div><div class="ttdef"><b>Definition:</b> Map.h:60</div></div>
<div class="ttc" id="aclassez_allocator_htm"><div class="ttname"><a href="../../d0/dbb/classez_allocator.htm">ezAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> Allocator.h:22</div></div>
<div class="ttc" id="astructez_map_base_const_iterator_base_htm_abca52ccf5d7e43689ebc6c96411b7b31"><div class="ttname"><a href="../../dc/d19/structez_map_base_const_iterator_base.htm#abca52ccf5d7e43689ebc6c96411b7b31">ezMapBaseConstIteratorBase::Key</a></div><div class="ttdeci">const EZ_FORCE_INLINE KeyType &amp; Key() const</div><div class="ttdoc">Returns the 'key' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> Map.h:34</div></div>
<div class="ttc" id="astructez_map_base_iterator_base_htm_a02936dcbe8324c0138ef88ab30b96cc6"><div class="ttname"><a href="../../d1/ddf/structez_map_base_iterator_base.htm#a02936dcbe8324c0138ef88ab30b96cc6">ezMapBaseIteratorBase::Value</a></div><div class="ttdeci">EZ_FORCE_INLINE ValueType &amp; Value() const</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> Map.h:126</div></div>
<div class="ttc" id="astructez_map_base_const_iterator_base_htm_ac9afeecd4cad37891b734fc4c9fc3363"><div class="ttname"><a href="../../dc/d19/structez_map_base_const_iterator_base.htm#ac9afeecd4cad37891b734fc4c9fc3363">ezMapBaseConstIteratorBase::Value</a></div><div class="ttdeci">const EZ_FORCE_INLINE ValueType &amp; Value() const</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> Map.h:41</div></div>
<div class="ttc" id="astructez_map_base_iterator_base_htm_a0751b73f11f2afcbcba1b27c48076c14"><div class="ttname"><a href="../../d1/ddf/structez_map_base_iterator_base.htm#a0751b73f11f2afcbcba1b27c48076c14">ezMapBaseIteratorBase::Value</a></div><div class="ttdeci">EZ_FORCE_INLINE ValueType &amp; Value()</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> Map.h:119</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_6b567e6755824bd0b8ffd754b9d67ac0.htm">Containers</a></li><li class="navelem"><b>Map.h</b></li>
    <li class="footer">Generated on Sun Aug 25 2024 13:06:18 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
