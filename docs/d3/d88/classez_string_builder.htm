<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezStringBuilder Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search','.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d3/d88/classez_string_builder.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../d0/d90/classez_string_builder-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezStringBuilder Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="../../d3/d88/classez_string_builder.htm" title="ezStringBuilder is a class that is meant for creating and modifying strings.">ezStringBuilder</a> is a class that is meant for creating and modifying strings.  
 <a href="../../d3/d88/classez_string_builder.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d5/df1/_string_builder_8h_source.htm">StringBuilder.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ezStringBuilder:</div>
<div class="dyncontent">
<div class="center"><img src="../../d9/d3a/classez_string_builder__inherit__graph.png" border="0" usemap="#aez_string_builder_inherit__map" alt="Inheritance graph"/></div>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aae3cd3eb70eabea17763d6a7200fe311"><td class="memItemLeft" align="right" valign="top"><a id="aae3cd3eb70eabea17763d6a7200fe311"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aae3cd3eb70eabea17763d6a7200fe311">ezStringBuilder</a> (<a class="el" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a> *pAllocator=<a class="el" href="../../d0/d49/classez_foundation.htm#a54836d4a247f8ea89b716701f1f1a4a7">ezFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:aae3cd3eb70eabea17763d6a7200fe311"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the string to be empty. No data is allocated, but the <a class="el" href="../../d3/d88/classez_string_builder.htm" title="ezStringBuilder is a class that is meant for creating and modifying strings.">ezStringBuilder</a> ALWAYS creates an array on the stack. <br /></td></tr>
<tr class="separator:aae3cd3eb70eabea17763d6a7200fe311"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0eff19ce3b5583ef753b658e019518e7"><td class="memItemLeft" align="right" valign="top"><a id="a0eff19ce3b5583ef753b658e019518e7"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a0eff19ce3b5583ef753b658e019518e7">ezStringBuilder</a> (const <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;rhs)</td></tr>
<tr class="memdesc:a0eff19ce3b5583ef753b658e019518e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a0eff19ce3b5583ef753b658e019518e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04e87df39f893e06bdb918c8cfd954db"><td class="memItemLeft" align="right" valign="top"><a id="a04e87df39f893e06bdb918c8cfd954db"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a04e87df39f893e06bdb918c8cfd954db">ezStringBuilder</a> (<a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;&amp;rhs) noexcept</td></tr>
<tr class="memdesc:a04e87df39f893e06bdb918c8cfd954db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a04e87df39f893e06bdb918c8cfd954db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac726d09612fe6a06cfad3d144cda7ab"><td class="memTemplParams" colspan="2"><a id="aac726d09612fe6a06cfad3d144cda7ab"></a>
template&lt;ezUInt16 Size&gt; </td></tr>
<tr class="memitem:aac726d09612fe6a06cfad3d144cda7ab"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aac726d09612fe6a06cfad3d144cda7ab">ezStringBuilder</a> (const <a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt; &amp;rhs)</td></tr>
<tr class="memdesc:aac726d09612fe6a06cfad3d144cda7ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:aac726d09612fe6a06cfad3d144cda7ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38ab7f804a615884732786ffd71381cc"><td class="memTemplParams" colspan="2"><a id="a38ab7f804a615884732786ffd71381cc"></a>
template&lt;ezUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:a38ab7f804a615884732786ffd71381cc"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a38ab7f804a615884732786ffd71381cc">ezStringBuilder</a> (const <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>&lt; Size, A &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a38ab7f804a615884732786ffd71381cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a38ab7f804a615884732786ffd71381cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e16d660aed7c664987c73b0f44828ba"><td class="memTemplParams" colspan="2"><a id="a6e16d660aed7c664987c73b0f44828ba"></a>
template&lt;ezUInt16 Size&gt; </td></tr>
<tr class="memitem:a6e16d660aed7c664987c73b0f44828ba"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a6e16d660aed7c664987c73b0f44828ba">ezStringBuilder</a> (<a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a6e16d660aed7c664987c73b0f44828ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a6e16d660aed7c664987c73b0f44828ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a266bc4e41bc7247f3094ab0b2555cdcf"><td class="memTemplParams" colspan="2"><a id="a266bc4e41bc7247f3094ab0b2555cdcf"></a>
template&lt;ezUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:a266bc4e41bc7247f3094ab0b2555cdcf"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a266bc4e41bc7247f3094ab0b2555cdcf">ezStringBuilder</a> (<a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>&lt; Size, A &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a266bc4e41bc7247f3094ab0b2555cdcf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a266bc4e41bc7247f3094ab0b2555cdcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a2caab08e8a9a776da5bcad863d3d15"><td class="memItemLeft" align="right" valign="top"><a id="a2a2caab08e8a9a776da5bcad863d3d15"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a2a2caab08e8a9a776da5bcad863d3d15">ezStringBuilder</a> (const char *pData1, const char *pData2, const char *pData3=nullptr, const char *pData4=nullptr, const char *pData5=nullptr, const char *pData6=nullptr)</td></tr>
<tr class="memdesc:a2a2caab08e8a9a776da5bcad863d3d15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor that appends all the given strings. <br /></td></tr>
<tr class="separator:a2a2caab08e8a9a776da5bcad863d3d15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55946185f5a252a8ecde7048e2646e18"><td class="memItemLeft" align="right" valign="top"><a id="a55946185f5a252a8ecde7048e2646e18"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a55946185f5a252a8ecde7048e2646e18">ezStringBuilder</a> (const char *szUTF8, <a class="el" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a> *pAllocator=<a class="el" href="../../d0/d49/classez_foundation.htm#a54836d4a247f8ea89b716701f1f1a4a7">ezFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:a55946185f5a252a8ecde7048e2646e18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given Utf8 string into this one. <br /></td></tr>
<tr class="separator:a55946185f5a252a8ecde7048e2646e18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45dfa156bdea76762a890bcf8df27fd8"><td class="memItemLeft" align="right" valign="top"><a id="a45dfa156bdea76762a890bcf8df27fd8"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a45dfa156bdea76762a890bcf8df27fd8">ezStringBuilder</a> (const wchar_t *szWChar, <a class="el" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a> *pAllocator=<a class="el" href="../../d0/d49/classez_foundation.htm#a54836d4a247f8ea89b716701f1f1a4a7">ezFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:a45dfa156bdea76762a890bcf8df27fd8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given wchar_t string into this one. <br /></td></tr>
<tr class="separator:a45dfa156bdea76762a890bcf8df27fd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaa536460686d538948a19a2f40554f1"><td class="memItemLeft" align="right" valign="top"><a id="aeaa536460686d538948a19a2f40554f1"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aeaa536460686d538948a19a2f40554f1">ezStringBuilder</a> (const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;rhs, <a class="el" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a> *pAllocator=<a class="el" href="../../d0/d49/classez_foundation.htm#a54836d4a247f8ea89b716701f1f1a4a7">ezFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:aeaa536460686d538948a19a2f40554f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given substring into this one. The <a class="el" href="../../de/db8/structez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> might actually be a substring of this very string. <br /></td></tr>
<tr class="separator:aeaa536460686d538948a19a2f40554f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97d0149bd32e043f5177ac63e172b2dd"><td class="memItemLeft" align="right" valign="top"><a id="a97d0149bd32e043f5177ac63e172b2dd"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a97d0149bd32e043f5177ac63e172b2dd">operator=</a> (const <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;rhs)</td></tr>
<tr class="memdesc:a97d0149bd32e043f5177ac63e172b2dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a97d0149bd32e043f5177ac63e172b2dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2b87a1bec387cbcfe36629b6560957f"><td class="memItemLeft" align="right" valign="top"><a id="ab2b87a1bec387cbcfe36629b6560957f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ab2b87a1bec387cbcfe36629b6560957f">operator=</a> (<a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;&amp;rhs) noexcept</td></tr>
<tr class="memdesc:ab2b87a1bec387cbcfe36629b6560957f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:ab2b87a1bec387cbcfe36629b6560957f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc69c60c893d5e43cd3595236e68f26b"><td class="memItemLeft" align="right" valign="top"><a id="adc69c60c893d5e43cd3595236e68f26b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#adc69c60c893d5e43cd3595236e68f26b">operator=</a> (const char *szUTF8)</td></tr>
<tr class="memdesc:adc69c60c893d5e43cd3595236e68f26b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given Utf8 string into this one. <br /></td></tr>
<tr class="separator:adc69c60c893d5e43cd3595236e68f26b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bc23091233479a950adb7b23f2ecda7"><td class="memItemLeft" align="right" valign="top"><a id="a5bc23091233479a950adb7b23f2ecda7"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a5bc23091233479a950adb7b23f2ecda7">operator=</a> (const wchar_t *szWChar)</td></tr>
<tr class="memdesc:a5bc23091233479a950adb7b23f2ecda7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given wchar_t string into this one. <br /></td></tr>
<tr class="separator:a5bc23091233479a950adb7b23f2ecda7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad60738ac0958f8c81432d3fef737c7d9"><td class="memItemLeft" align="right" valign="top"><a id="ad60738ac0958f8c81432d3fef737c7d9"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ad60738ac0958f8c81432d3fef737c7d9">operator=</a> (const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;rhs)</td></tr>
<tr class="memdesc:ad60738ac0958f8c81432d3fef737c7d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given substring into this one. The <a class="el" href="../../de/db8/structez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> might actually be a substring of this very string. <br /></td></tr>
<tr class="separator:ad60738ac0958f8c81432d3fef737c7d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe3059b8d9cc7fb696bf12777b58299f"><td class="memTemplParams" colspan="2"><a id="afe3059b8d9cc7fb696bf12777b58299f"></a>
template&lt;ezUInt16 Size&gt; </td></tr>
<tr class="memitem:afe3059b8d9cc7fb696bf12777b58299f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#afe3059b8d9cc7fb696bf12777b58299f">operator=</a> (const <a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt; &amp;rhs)</td></tr>
<tr class="memdesc:afe3059b8d9cc7fb696bf12777b58299f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:afe3059b8d9cc7fb696bf12777b58299f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90e96e864b3a3558c15d075e5003bf5b"><td class="memTemplParams" colspan="2"><a id="a90e96e864b3a3558c15d075e5003bf5b"></a>
template&lt;ezUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:a90e96e864b3a3558c15d075e5003bf5b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a90e96e864b3a3558c15d075e5003bf5b">operator=</a> (const <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>&lt; Size, A &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a90e96e864b3a3558c15d075e5003bf5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a90e96e864b3a3558c15d075e5003bf5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0dabcebf009530ed5105e0f007427bf"><td class="memTemplParams" colspan="2"><a id="af0dabcebf009530ed5105e0f007427bf"></a>
template&lt;ezUInt16 Size&gt; </td></tr>
<tr class="memitem:af0dabcebf009530ed5105e0f007427bf"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#af0dabcebf009530ed5105e0f007427bf">operator=</a> (<a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:af0dabcebf009530ed5105e0f007427bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:af0dabcebf009530ed5105e0f007427bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12236c90721b3462e8606dd7d7d12433"><td class="memTemplParams" colspan="2"><a id="a12236c90721b3462e8606dd7d7d12433"></a>
template&lt;ezUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:a12236c90721b3462e8606dd7d7d12433"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a12236c90721b3462e8606dd7d7d12433">operator=</a> (<a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>&lt; Size, A &gt; &amp;&amp;rhs) noexcept</td></tr>
<tr class="memdesc:a12236c90721b3462e8606dd7d7d12433"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a12236c90721b3462e8606dd7d7d12433"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79d01c58613d2704c36a582db95b1e42"><td class="memItemLeft" align="right" valign="top"><a id="a79d01c58613d2704c36a582db95b1e42"></a>
<a class="el" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a79d01c58613d2704c36a582db95b1e42">GetAllocator</a> () const</td></tr>
<tr class="memdesc:a79d01c58613d2704c36a582db95b1e42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the allocator that is used by this object. <br /></td></tr>
<tr class="separator:a79d01c58613d2704c36a582db95b1e42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcad83a62b2769887a7d405e0f4b6453"><td class="memItemLeft" align="right" valign="top"><a id="adcad83a62b2769887a7d405e0f4b6453"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#adcad83a62b2769887a7d405e0f4b6453">operator ezStringView</a> () const</td></tr>
<tr class="memdesc:adcad83a62b2769887a7d405e0f4b6453"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:adcad83a62b2769887a7d405e0f4b6453"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada4ae74d30a0ec1d027123f6e1ae6e8e"><td class="memItemLeft" align="right" valign="top"><a id="ada4ae74d30a0ec1d027123f6e1ae6e8e"></a>
<a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ada4ae74d30a0ec1d027123f6e1ae6e8e">GetView</a> () const</td></tr>
<tr class="memdesc:ada4ae74d30a0ec1d027123f6e1ae6e8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:ada4ae74d30a0ec1d027123f6e1ae6e8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9187845cffa1b5c7b921a6b34ba80dd0"><td class="memItemLeft" align="right" valign="top"><a id="a9187845cffa1b5c7b921a6b34ba80dd0"></a>
EZ_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a9187845cffa1b5c7b921a6b34ba80dd0">operator const char *</a> () const</td></tr>
<tr class="memdesc:a9187845cffa1b5c7b921a6b34ba80dd0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the internal Utf8 string. <br /></td></tr>
<tr class="separator:a9187845cffa1b5c7b921a6b34ba80dd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a162e5eb18bb60fd044c2fbbcdfa79228"><td class="memItemLeft" align="right" valign="top"><a id="a162e5eb18bb60fd044c2fbbcdfa79228"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a162e5eb18bb60fd044c2fbbcdfa79228">Clear</a> ()</td></tr>
<tr class="memdesc:a162e5eb18bb60fd044c2fbbcdfa79228"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets this string to be empty. Does not deallocate any previously allocated data, as it might be reused later again. <br /></td></tr>
<tr class="separator:a162e5eb18bb60fd044c2fbbcdfa79228"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae70343bc31fa6d5dff4e2bc66abbc6d5"><td class="memItemLeft" align="right" valign="top"><a id="ae70343bc31fa6d5dff4e2bc66abbc6d5"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ae70343bc31fa6d5dff4e2bc66abbc6d5">GetData</a> () const</td></tr>
<tr class="memdesc:ae70343bc31fa6d5dff4e2bc66abbc6d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a char pointer to the internal Utf8 data. <br /></td></tr>
<tr class="separator:ae70343bc31fa6d5dff4e2bc66abbc6d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a946ff0b7b84634095a79a548777b51fd"><td class="memItemLeft" align="right" valign="top"><a id="a946ff0b7b84634095a79a548777b51fd"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a946ff0b7b84634095a79a548777b51fd">GetElementCount</a> () const</td></tr>
<tr class="memdesc:a946ff0b7b84634095a79a548777b51fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bytes that this string takes up. <br /></td></tr>
<tr class="separator:a946ff0b7b84634095a79a548777b51fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a3a36dcfd096259e15f167e2bd6ca07"><td class="memItemLeft" align="right" valign="top"><a id="a0a3a36dcfd096259e15f167e2bd6ca07"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a0a3a36dcfd096259e15f167e2bd6ca07">GetCharacterCount</a> () const</td></tr>
<tr class="memdesc:a0a3a36dcfd096259e15f167e2bd6ca07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of characters of which this string consists. Might be less than GetElementCount, if it contains Utf8 multi-byte characters. <br /></td></tr>
<tr class="separator:a0a3a36dcfd096259e15f167e2bd6ca07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac36f8202651a4273fcc6ac38b3116bda"><td class="memItemLeft" align="right" valign="top"><a id="ac36f8202651a4273fcc6ac38b3116bda"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ac36f8202651a4273fcc6ac38b3116bda">IsPureASCII</a> () const</td></tr>
<tr class="memdesc:ac36f8202651a4273fcc6ac38b3116bda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether this string only contains ASCII characters, which means that <a class="el" href="../../d3/d88/classez_string_builder.htm#a946ff0b7b84634095a79a548777b51fd" title="Returns the number of bytes that this string takes up.">GetElementCount()</a> == <a class="el" href="../../d3/d88/classez_string_builder.htm#a0a3a36dcfd096259e15f167e2bd6ca07" title="Returns the number of characters of which this string consists. Might be less than GetElementCount,...">GetCharacterCount()</a> <br /></td></tr>
<tr class="separator:ac36f8202651a4273fcc6ac38b3116bda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8beb183188db5f5ddacca112fe279e3c"><td class="memItemLeft" align="right" valign="top"><a id="a8beb183188db5f5ddacca112fe279e3c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a8beb183188db5f5ddacca112fe279e3c">ToUpper</a> ()</td></tr>
<tr class="memdesc:a8beb183188db5f5ddacca112fe279e3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts all characters to upper case. Might move the string data around, so all iterators to the data will be invalid afterwards. <br /></td></tr>
<tr class="separator:a8beb183188db5f5ddacca112fe279e3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61765d9803ff70f064cfc17c1fd04d89"><td class="memItemLeft" align="right" valign="top"><a id="a61765d9803ff70f064cfc17c1fd04d89"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a61765d9803ff70f064cfc17c1fd04d89">ToLower</a> ()</td></tr>
<tr class="memdesc:a61765d9803ff70f064cfc17c1fd04d89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts all characters to lower case. Might move the string data around, so all iterators to the data will be invalid afterwards. <br /></td></tr>
<tr class="separator:a61765d9803ff70f064cfc17c1fd04d89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30892f8031346691835a90f009973138"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a30892f8031346691835a90f009973138">ChangeCharacter</a> (iterator &amp;it, ezUInt32 uiCharacter)</td></tr>
<tr class="memdesc:a30892f8031346691835a90f009973138"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the single character in this string, to which the iterator currently points.  <a href="../../d3/d88/classez_string_builder.htm#a30892f8031346691835a90f009973138">More...</a><br /></td></tr>
<tr class="separator:a30892f8031346691835a90f009973138"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ba7492a22f19af45352d44ddbdb30fa"><td class="memItemLeft" align="right" valign="top"><a id="a6ba7492a22f19af45352d44ddbdb30fa"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a6ba7492a22f19af45352d44ddbdb30fa">Set</a> (const char *pData1, const char *pData2=nullptr, const char *pData3=nullptr, const char *pData4=nullptr, const char *pData5=nullptr, const char *pData6=nullptr)</td></tr>
<tr class="memdesc:a6ba7492a22f19af45352d44ddbdb30fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the string by concatenating all given strings. <br /></td></tr>
<tr class="separator:a6ba7492a22f19af45352d44ddbdb30fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a140207da00da242ae5f9b9a85d10bcc7"><td class="memItemLeft" align="right" valign="top"><a id="a140207da00da242ae5f9b9a85d10bcc7"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a140207da00da242ae5f9b9a85d10bcc7">SetSubString_FromTo</a> (const char *pStart, const char *pEnd)</td></tr>
<tr class="memdesc:a140207da00da242ae5f9b9a85d10bcc7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the string starting at <em>pStart</em> up to <em>pEnd</em> (exclusive). <br /></td></tr>
<tr class="separator:a140207da00da242ae5f9b9a85d10bcc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a565d593b87226e53b10ed4c7d80110ba"><td class="memItemLeft" align="right" valign="top"><a id="a565d593b87226e53b10ed4c7d80110ba"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a565d593b87226e53b10ed4c7d80110ba">SetSubString_ElementCount</a> (const char *pStart, ezUInt32 uiElementCount)</td></tr>
<tr class="memdesc:a565d593b87226e53b10ed4c7d80110ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the string starting at <em>pStart</em> with a length of <em>uiElementCount</em> bytes. <br /></td></tr>
<tr class="separator:a565d593b87226e53b10ed4c7d80110ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab255f8ebc1d9fb1e550757ccce4dab60"><td class="memItemLeft" align="right" valign="top"><a id="ab255f8ebc1d9fb1e550757ccce4dab60"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ab255f8ebc1d9fb1e550757ccce4dab60">SetSubString_CharacterCount</a> (const char *pStart, ezUInt32 uiCharacterCount)</td></tr>
<tr class="memdesc:ab255f8ebc1d9fb1e550757ccce4dab60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the string starting at <em>pStart</em> with a length of <em>uiCharacterCount</em> characters. <br /></td></tr>
<tr class="separator:ab255f8ebc1d9fb1e550757ccce4dab60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a605f325ea4c9c3242454a16657e24ef7"><td class="memItemLeft" align="right" valign="top"><a id="a605f325ea4c9c3242454a16657e24ef7"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a605f325ea4c9c3242454a16657e24ef7">Append</a> (ezUInt32 uiChar)</td></tr>
<tr class="memdesc:a605f325ea4c9c3242454a16657e24ef7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a single Utf32 character. <br /></td></tr>
<tr class="separator:a605f325ea4c9c3242454a16657e24ef7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abeb5eb562d24b4c7c6b8819900e28766"><td class="memItemLeft" align="right" valign="top"><a id="abeb5eb562d24b4c7c6b8819900e28766"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#abeb5eb562d24b4c7c6b8819900e28766">Append</a> (const wchar_t *pData1, const wchar_t *pData2=nullptr, const wchar_t *pData3=nullptr, const wchar_t *pData4=nullptr, const wchar_t *pData5=nullptr, const wchar_t *pData6=nullptr)</td></tr>
<tr class="memdesc:abeb5eb562d24b4c7c6b8819900e28766"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings at the back of this string in one operation. <br /></td></tr>
<tr class="separator:abeb5eb562d24b4c7c6b8819900e28766"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae90b3f0f7f69c75e2db4f01e0b11de7"><td class="memItemLeft" align="right" valign="top"><a id="aae90b3f0f7f69c75e2db4f01e0b11de7"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aae90b3f0f7f69c75e2db4f01e0b11de7">Append</a> (const char *pData1, const char *pData2=nullptr, const char *pData3=nullptr, const char *pData4=nullptr, const char *pData5=nullptr, const char *pData6=nullptr)</td></tr>
<tr class="memdesc:aae90b3f0f7f69c75e2db4f01e0b11de7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings at the back of this string in one operation. <br /></td></tr>
<tr class="separator:aae90b3f0f7f69c75e2db4f01e0b11de7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e0862602db949365d8206a728c0c164"><td class="memItemLeft" align="right" valign="top"><a id="a1e0862602db949365d8206a728c0c164"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a1e0862602db949365d8206a728c0c164">Append</a> (const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;view)</td></tr>
<tr class="memdesc:a1e0862602db949365d8206a728c0c164"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends the given string at the back of this string. <br /></td></tr>
<tr class="separator:a1e0862602db949365d8206a728c0c164"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f2c181d7a18b4296425754854710f6b"><td class="memItemLeft" align="right" valign="top"><a id="a2f2c181d7a18b4296425754854710f6b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a2f2c181d7a18b4296425754854710f6b">Prepend</a> (ezUInt32 uiChar)</td></tr>
<tr class="memdesc:a2f2c181d7a18b4296425754854710f6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends a single Utf32 character. <br /></td></tr>
<tr class="separator:a2f2c181d7a18b4296425754854710f6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59f53f467d198e72c0e284a587ca73fa"><td class="memItemLeft" align="right" valign="top"><a id="a59f53f467d198e72c0e284a587ca73fa"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a59f53f467d198e72c0e284a587ca73fa">Prepend</a> (const wchar_t *pData1, const wchar_t *pData2=nullptr, const wchar_t *pData3=nullptr, const wchar_t *pData4=nullptr, const wchar_t *pData5=nullptr, const wchar_t *pData6=nullptr)</td></tr>
<tr class="memdesc:a59f53f467d198e72c0e284a587ca73fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends all the given strings to the front of this string in one operation. <br /></td></tr>
<tr class="separator:a59f53f467d198e72c0e284a587ca73fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a629af271ba749ae037dbad0348ed7a83"><td class="memItemLeft" align="right" valign="top"><a id="a629af271ba749ae037dbad0348ed7a83"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a629af271ba749ae037dbad0348ed7a83">Prepend</a> (const char *pData1, const char *pData2=nullptr, const char *pData3=nullptr, const char *pData4=nullptr, const char *pData5=nullptr, const char *pData6=nullptr)</td></tr>
<tr class="memdesc:a629af271ba749ae037dbad0348ed7a83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends all the given strings to the front of this string in one operation. <br /></td></tr>
<tr class="separator:a629af271ba749ae037dbad0348ed7a83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f712ff307c41dd8d283cbf0065f0e3e"><td class="memItemLeft" align="right" valign="top"><a id="a8f712ff307c41dd8d283cbf0065f0e3e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a8f712ff307c41dd8d283cbf0065f0e3e">Printf</a> (const char *szUtf8Format,...)</td></tr>
<tr class="memdesc:a8f712ff307c41dd8d283cbf0065f0e3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets this string to the formatted string, uses printf-style formatting. <br /></td></tr>
<tr class="separator:a8f712ff307c41dd8d283cbf0065f0e3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a151314ba1540ff84eaebb6559b3d8dc2"><td class="memItemLeft" align="right" valign="top"><a id="a151314ba1540ff84eaebb6559b3d8dc2"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a151314ba1540ff84eaebb6559b3d8dc2">PrintfArgs</a> (const char *szUtf8Format, va_list args)</td></tr>
<tr class="memdesc:a151314ba1540ff84eaebb6559b3d8dc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets this string to the formatted string, uses printf-style formatting. <br /></td></tr>
<tr class="separator:a151314ba1540ff84eaebb6559b3d8dc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2cccf2c238ff48182428aa9464a615e"><td class="memItemLeft" align="right" valign="top"><a id="af2cccf2c238ff48182428aa9464a615e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#af2cccf2c238ff48182428aa9464a615e">Format</a> (const <a class="el" href="../../d4/d2e/classez_format_string.htm">ezFormatString</a> &amp;string)</td></tr>
<tr class="memdesc:af2cccf2c238ff48182428aa9464a615e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces this with a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d4/d2e/classez_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">ezFormatString</a> for details. <br /></td></tr>
<tr class="separator:af2cccf2c238ff48182428aa9464a615e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc6421d53a2932f4fed29e2b8a312118"><td class="memTemplParams" colspan="2"><a id="acc6421d53a2932f4fed29e2b8a312118"></a>
template&lt;typename... ARGS&gt; </td></tr>
<tr class="memitem:acc6421d53a2932f4fed29e2b8a312118"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#acc6421d53a2932f4fed29e2b8a312118">Format</a> (const char *szFormat, ARGS &amp;&amp;... args)</td></tr>
<tr class="memdesc:acc6421d53a2932f4fed29e2b8a312118"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces this with a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d4/d2e/classez_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">ezFormatString</a> for details. <br /></td></tr>
<tr class="separator:acc6421d53a2932f4fed29e2b8a312118"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa405316a4995b2fd4883d42f74db9f9a"><td class="memItemLeft" align="right" valign="top"><a id="aa405316a4995b2fd4883d42f74db9f9a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aa405316a4995b2fd4883d42f74db9f9a">AppendFormat</a> (const <a class="el" href="../../d4/d2e/classez_format_string.htm">ezFormatString</a> &amp;string)</td></tr>
<tr class="memdesc:aa405316a4995b2fd4883d42f74db9f9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d4/d2e/classez_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">ezFormatString</a> for details. <br /></td></tr>
<tr class="separator:aa405316a4995b2fd4883d42f74db9f9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2af0cad3e9a5baec55a556dd1401708c"><td class="memTemplParams" colspan="2"><a id="a2af0cad3e9a5baec55a556dd1401708c"></a>
template&lt;typename... ARGS&gt; </td></tr>
<tr class="memitem:a2af0cad3e9a5baec55a556dd1401708c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a2af0cad3e9a5baec55a556dd1401708c">AppendFormat</a> (const char *szFormat, ARGS &amp;&amp;... args)</td></tr>
<tr class="memdesc:a2af0cad3e9a5baec55a556dd1401708c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d4/d2e/classez_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">ezFormatString</a> for details. <br /></td></tr>
<tr class="separator:a2af0cad3e9a5baec55a556dd1401708c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab01f5cc58b199e7e202eb9d9434b8e34"><td class="memItemLeft" align="right" valign="top"><a id="ab01f5cc58b199e7e202eb9d9434b8e34"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ab01f5cc58b199e7e202eb9d9434b8e34">PrependFormat</a> (const <a class="el" href="../../d4/d2e/classez_format_string.htm">ezFormatString</a> &amp;string)</td></tr>
<tr class="memdesc:ab01f5cc58b199e7e202eb9d9434b8e34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d4/d2e/classez_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">ezFormatString</a> for details. <br /></td></tr>
<tr class="separator:ab01f5cc58b199e7e202eb9d9434b8e34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0aab851b5f86af410d3c54df6dbdb903"><td class="memTemplParams" colspan="2"><a id="a0aab851b5f86af410d3c54df6dbdb903"></a>
template&lt;typename... ARGS&gt; </td></tr>
<tr class="memitem:a0aab851b5f86af410d3c54df6dbdb903"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a0aab851b5f86af410d3c54df6dbdb903">PrependFormat</a> (const char *szFormat, ARGS &amp;&amp;... args)</td></tr>
<tr class="memdesc:a0aab851b5f86af410d3c54df6dbdb903"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d4/d2e/classez_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">ezFormatString</a> for details. <br /></td></tr>
<tr class="separator:a0aab851b5f86af410d3c54df6dbdb903"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a646a93dad4c0dc198196db2c8d31fd99"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a646a93dad4c0dc198196db2c8d31fd99">Shrink</a> (ezUInt32 uiShrinkCharsFront, ezUInt32 uiShrinkCharsBack)</td></tr>
<tr class="memdesc:a646a93dad4c0dc198196db2c8d31fd99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the first n and last m characters from this string.  <a href="../../d3/d88/classez_string_builder.htm#a646a93dad4c0dc198196db2c8d31fd99">More...</a><br /></td></tr>
<tr class="separator:a646a93dad4c0dc198196db2c8d31fd99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8e97941dfc6747eabf7e8dfb1c8c783"><td class="memItemLeft" align="right" valign="top"><a id="aa8e97941dfc6747eabf7e8dfb1c8c783"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aa8e97941dfc6747eabf7e8dfb1c8c783">Reserve</a> (ezUInt32 uiNumElements)</td></tr>
<tr class="memdesc:aa8e97941dfc6747eabf7e8dfb1c8c783"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reserves uiNumElements bytes. <br /></td></tr>
<tr class="separator:aa8e97941dfc6747eabf7e8dfb1c8c783"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1344a3f45ece14cf68c50012129fc870"><td class="memItemLeft" align="right" valign="top"><a id="a1344a3f45ece14cf68c50012129fc870"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a1344a3f45ece14cf68c50012129fc870">ReplaceSubString</a> (const char *szStartPos, const char *szEndPos, const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;szReplaceWith)</td></tr>
<tr class="memdesc:a1344a3f45ece14cf68c50012129fc870"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the string that starts at szStartPos and ends at szEndPos with the string szReplaceWith. <br /></td></tr>
<tr class="separator:a1344a3f45ece14cf68c50012129fc870"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d35fbf420bed080094ffd42141656db"><td class="memItemLeft" align="right" valign="top"><a id="a8d35fbf420bed080094ffd42141656db"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a8d35fbf420bed080094ffd42141656db">Insert</a> (const char *szInsertAtPos, const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;szTextToInsert)</td></tr>
<tr class="memdesc:a8d35fbf420bed080094ffd42141656db"><td class="mdescLeft">&#160;</td><td class="mdescRight">A wrapper around ReplaceSubString. Will insert the given string at szInsertAtPos. <br /></td></tr>
<tr class="separator:a8d35fbf420bed080094ffd42141656db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9e3819efaa857a532b63a7c204f5b5f"><td class="memItemLeft" align="right" valign="top"><a id="ad9e3819efaa857a532b63a7c204f5b5f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ad9e3819efaa857a532b63a7c204f5b5f">Remove</a> (const char *szRemoveFromPos, const char *szRemoveToPos)</td></tr>
<tr class="memdesc:ad9e3819efaa857a532b63a7c204f5b5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">A wrapper around ReplaceSubString. Will remove the substring which starts at szRemoveFromPos and ends at szRemoveToPos. <br /></td></tr>
<tr class="separator:ad9e3819efaa857a532b63a7c204f5b5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dbf87a7c53f518c26b22ff3543ac15d"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a6dbf87a7c53f518c26b22ff3543ac15d">ReplaceFirst</a> (const char *szSearchFor, const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;szReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:a6dbf87a7c53f518c26b22ff3543ac15d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the first occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the beginning).  <a href="../../d3/d88/classez_string_builder.htm#a6dbf87a7c53f518c26b22ff3543ac15d">More...</a><br /></td></tr>
<tr class="separator:a6dbf87a7c53f518c26b22ff3543ac15d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ab8d58e690fedbb9a7751bbea11c6ae"><td class="memItemLeft" align="right" valign="top"><a id="a1ab8d58e690fedbb9a7751bbea11c6ae"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a1ab8d58e690fedbb9a7751bbea11c6ae">ReplaceFirst_NoCase</a> (const char *szSearchFor, const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;szReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:a1ab8d58e690fedbb9a7751bbea11c6ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceFirst. <br /></td></tr>
<tr class="separator:a1ab8d58e690fedbb9a7751bbea11c6ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7b7b76f6c57d79c852a27ce7f080fc4"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ac7b7b76f6c57d79c852a27ce7f080fc4">ReplaceLast</a> (const char *szSearchFor, const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;szReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:ac7b7b76f6c57d79c852a27ce7f080fc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the last occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the end).  <a href="../../d3/d88/classez_string_builder.htm#ac7b7b76f6c57d79c852a27ce7f080fc4">More...</a><br /></td></tr>
<tr class="separator:ac7b7b76f6c57d79c852a27ce7f080fc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae02374f9cd23eba6e7c64e685458dca0"><td class="memItemLeft" align="right" valign="top"><a id="ae02374f9cd23eba6e7c64e685458dca0"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ae02374f9cd23eba6e7c64e685458dca0">ReplaceLast_NoCase</a> (const char *szSearchFor, const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;szReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:ae02374f9cd23eba6e7c64e685458dca0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceLast. <br /></td></tr>
<tr class="separator:ae02374f9cd23eba6e7c64e685458dca0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acff67e45f952634bf638540ff3cf96ca"><td class="memItemLeft" align="right" valign="top"><a id="acff67e45f952634bf638540ff3cf96ca"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#acff67e45f952634bf638540ff3cf96ca">ReplaceAll</a> (const char *szSearchFor, const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;szReplacement)</td></tr>
<tr class="memdesc:acff67e45f952634bf638540ff3cf96ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces all occurrences of szSearchFor by szReplacement. Returns the number of replacements. <br /></td></tr>
<tr class="separator:acff67e45f952634bf638540ff3cf96ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae825dadcbc20537e0313e7482bce6a16"><td class="memItemLeft" align="right" valign="top"><a id="ae825dadcbc20537e0313e7482bce6a16"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ae825dadcbc20537e0313e7482bce6a16">ReplaceAll_NoCase</a> (const char *szSearchFor, const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;szReplacement)</td></tr>
<tr class="memdesc:ae825dadcbc20537e0313e7482bce6a16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceAll. <br /></td></tr>
<tr class="separator:ae825dadcbc20537e0313e7482bce6a16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d335e6ace481c7f132928eebe116cda"><td class="memItemLeft" align="right" valign="top"><a id="a8d335e6ace481c7f132928eebe116cda"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a8d335e6ace481c7f132928eebe116cda">ReplaceWholeWord</a> (const char *szSearchFor, const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;szReplaceWith, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> IsDelimiterCB)</td></tr>
<tr class="memdesc:a8d335e6ace481c7f132928eebe116cda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the first occurrence of szSearchFor by szReplaceWith, if szSearchFor was found to be a 'whole word', as indicated by the delimiter function IsDelimiterCB. <br /></td></tr>
<tr class="separator:a8d335e6ace481c7f132928eebe116cda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1fa71a55bfebf3771d5c6c802454361"><td class="memItemLeft" align="right" valign="top"><a id="aa1fa71a55bfebf3771d5c6c802454361"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aa1fa71a55bfebf3771d5c6c802454361">ReplaceWholeWord_NoCase</a> (const char *szSearchFor, const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;szReplaceWith, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> IsDelimiterCB)</td></tr>
<tr class="memdesc:aa1fa71a55bfebf3771d5c6c802454361"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceWholeWord. <br /></td></tr>
<tr class="separator:aa1fa71a55bfebf3771d5c6c802454361"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefd9a3b4ce284abdb35a584fbae5717c"><td class="memItemLeft" align="right" valign="top"><a id="aefd9a3b4ce284abdb35a584fbae5717c"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aefd9a3b4ce284abdb35a584fbae5717c">ReplaceWholeWordAll</a> (const char *szSearchFor, const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;szReplaceWith, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> IsDelimiterCB)</td></tr>
<tr class="memdesc:aefd9a3b4ce284abdb35a584fbae5717c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces all occurrences of szSearchFor by szReplaceWith, if szSearchFor was found to be a 'whole word', as indicated by the delimiter function IsDelimiterCB. <br /></td></tr>
<tr class="separator:aefd9a3b4ce284abdb35a584fbae5717c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dc09e0c87758127ce582000658a5403"><td class="memItemLeft" align="right" valign="top"><a id="a2dc09e0c87758127ce582000658a5403"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a2dc09e0c87758127ce582000658a5403">ReplaceWholeWordAll_NoCase</a> (const char *szSearchFor, const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;szReplaceWith, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> IsDelimiterCB)</td></tr>
<tr class="memdesc:a2dc09e0c87758127ce582000658a5403"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceWholeWordAll. <br /></td></tr>
<tr class="separator:a2dc09e0c87758127ce582000658a5403"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2247bea5abf668d0fb7545dfb3acf413"><td class="memTemplParams" colspan="2"><a id="a2247bea5abf668d0fb7545dfb3acf413"></a>
template&lt;typename Container &gt; </td></tr>
<tr class="memitem:a2247bea5abf668d0fb7545dfb3acf413"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a2247bea5abf668d0fb7545dfb3acf413">Split</a> (bool bReturnEmptyStrings, Container &amp;Output, const char *szSeparator1, const char *szSeparator2=nullptr, const char *szSeparator3=nullptr, const char *szSeparator4=nullptr, const char *szSeparator5=nullptr, const char *szSeparator6=nullptr) const</td></tr>
<tr class="memdesc:a2247bea5abf668d0fb7545dfb3acf413"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills the given container with <a class="el" href="../../de/db8/structez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a>'s which represent each found substring. If bReturnEmptyStrings is true, even empty strings between separators are returned. Output must be a container that stores <a class="el" href="../../de/db8/structez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a>'s and provides the functions 'Clear' and 'Append'. szSeparator1 to szSeparator6 are strings which act as separators and indicate where to split the string. This string itself will not be modified. <br /></td></tr>
<tr class="separator:a2247bea5abf668d0fb7545dfb3acf413"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2901984d210a104541d4cbacdeb2995b"><td class="memItemLeft" align="right" valign="top"><a id="a2901984d210a104541d4cbacdeb2995b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a2901984d210a104541d4cbacdeb2995b">ReadAll</a> (<a class="el" href="../../d2/d19/classez_stream_reader.htm">ezStreamReader</a> &amp;Stream)</td></tr>
<tr class="memdesc:a2901984d210a104541d4cbacdeb2995b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the current string with the content from the stream. Reads the stream to its end. <br /></td></tr>
<tr class="separator:a2901984d210a104541d4cbacdeb2995b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adca3d6d8405f4ceb59e42a6cf79190a6"><td class="memItemLeft" align="right" valign="top"><a id="adca3d6d8405f4ceb59e42a6cf79190a6"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#adca3d6d8405f4ceb59e42a6cf79190a6">HasAnyExtension</a> () const</td></tr>
<tr class="memdesc:adca3d6d8405f4ceb59e42a6cf79190a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given path has any file extension. <br /></td></tr>
<tr class="separator:adca3d6d8405f4ceb59e42a6cf79190a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7edf5fa09c8095b876ebe14744175eb"><td class="memItemLeft" align="right" valign="top"><a id="ae7edf5fa09c8095b876ebe14744175eb"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ae7edf5fa09c8095b876ebe14744175eb">HasExtension</a> (const char *szExtension) const</td></tr>
<tr class="memdesc:ae7edf5fa09c8095b876ebe14744175eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given path ends with the given extension. szExtension should start with a '.' for performance reasons, but it will work without a '.' too. <br /></td></tr>
<tr class="separator:ae7edf5fa09c8095b876ebe14744175eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf39deb8045ac38ec59f18b14fd77d7c"><td class="memItemLeft" align="right" valign="top"><a id="adf39deb8045ac38ec59f18b14fd77d7c"></a>
<a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#adf39deb8045ac38ec59f18b14fd77d7c">GetFileExtension</a> () const</td></tr>
<tr class="memdesc:adf39deb8045ac38ec59f18b14fd77d7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file extension of the given path. Will be empty, if the path does not end with a proper extension. <br /></td></tr>
<tr class="separator:adf39deb8045ac38ec59f18b14fd77d7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf870607ef58a5899a139868ac2aa4bf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#acf870607ef58a5899a139868ac2aa4bf">GetFileName</a> () const</td></tr>
<tr class="memdesc:acf870607ef58a5899a139868ac2aa4bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file name of a path, excluding the path and extension.  <a href="../../d3/d88/classez_string_builder.htm#acf870607ef58a5899a139868ac2aa4bf">More...</a><br /></td></tr>
<tr class="separator:acf870607ef58a5899a139868ac2aa4bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb91acdad116235acba89117ad5de589"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#adb91acdad116235acba89117ad5de589">GetFileNameAndExtension</a> () const</td></tr>
<tr class="memdesc:adb91acdad116235acba89117ad5de589"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the substring that represents the file name including the file extension.  <a href="../../d3/d88/classez_string_builder.htm#adb91acdad116235acba89117ad5de589">More...</a><br /></td></tr>
<tr class="separator:adb91acdad116235acba89117ad5de589"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20f0efd1e9666494ca11fb1495bcbf73"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a20f0efd1e9666494ca11fb1495bcbf73">GetFileDirectory</a> () const</td></tr>
<tr class="memdesc:a20f0efd1e9666494ca11fb1495bcbf73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the directory of the given file, which is the substring up to the last path separator.  <a href="../../d3/d88/classez_string_builder.htm#a20f0efd1e9666494ca11fb1495bcbf73">More...</a><br /></td></tr>
<tr class="separator:a20f0efd1e9666494ca11fb1495bcbf73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28f1b234f7f346757bfd3dfa3b41450c"><td class="memItemLeft" align="right" valign="top"><a id="a28f1b234f7f346757bfd3dfa3b41450c"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a28f1b234f7f346757bfd3dfa3b41450c">IsAbsolutePath</a> () const</td></tr>
<tr class="memdesc:a28f1b234f7f346757bfd3dfa3b41450c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents an absolute path on the current OS. <br /></td></tr>
<tr class="separator:a28f1b234f7f346757bfd3dfa3b41450c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef98e02aad87a198d1b3d9bc3f23ca37"><td class="memItemLeft" align="right" valign="top"><a id="aef98e02aad87a198d1b3d9bc3f23ca37"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aef98e02aad87a198d1b3d9bc3f23ca37">IsRelativePath</a> () const</td></tr>
<tr class="memdesc:aef98e02aad87a198d1b3d9bc3f23ca37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents a relative path on the current OS. <br /></td></tr>
<tr class="separator:aef98e02aad87a198d1b3d9bc3f23ca37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3dcc5f63ea6302ef729fc6af6c23ef5c"><td class="memItemLeft" align="right" valign="top"><a id="a3dcc5f63ea6302ef729fc6af6c23ef5c"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a3dcc5f63ea6302ef729fc6af6c23ef5c">IsRootedPath</a> () const</td></tr>
<tr class="memdesc:a3dcc5f63ea6302ef729fc6af6c23ef5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents a 'rooted' path. See <a class="el" href="../../d4/d6b/classez_file_system.htm" title="The ezFileSystem provides high-level functionality to manage files in a virtual file system.">ezFileSystem</a> for details. <br /></td></tr>
<tr class="separator:a3dcc5f63ea6302ef729fc6af6c23ef5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af28ee56b65ef97cb7f5cd3b45f503019"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#af28ee56b65ef97cb7f5cd3b45f503019">GetRootedPathRootName</a> () const</td></tr>
<tr class="memdesc:af28ee56b65ef97cb7f5cd3b45f503019"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extracts the root name from a rooted path.  <a href="../../d3/d88/classez_string_builder.htm#af28ee56b65ef97cb7f5cd3b45f503019">More...</a><br /></td></tr>
<tr class="separator:af28ee56b65ef97cb7f5cd3b45f503019"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb4e8da454e08207f376cb95ec372878"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#acb4e8da454e08207f376cb95ec372878">MakeCleanPath</a> ()</td></tr>
<tr class="memdesc:acb4e8da454e08207f376cb95ec372878"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes "../" where possible, replaces all path separators with /, removes double slashes.  <a href="../../d3/d88/classez_string_builder.htm#acb4e8da454e08207f376cb95ec372878">More...</a><br /></td></tr>
<tr class="separator:acb4e8da454e08207f376cb95ec372878"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40dff448589cc69f85fce8d72922ae22"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a40dff448589cc69f85fce8d72922ae22">PathParentDirectory</a> (ezUInt32 uiLevelsUp=1)</td></tr>
<tr class="memdesc:a40dff448589cc69f85fce8d72922ae22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modifies this string to point to the parent directory.  <a href="../../d3/d88/classez_string_builder.htm#a40dff448589cc69f85fce8d72922ae22">More...</a><br /></td></tr>
<tr class="separator:a40dff448589cc69f85fce8d72922ae22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6b96e398a7232a42c307c753e34b6d8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ac6b96e398a7232a42c307c753e34b6d8">AppendPath</a> (const char *szPath1, const char *szPath2=nullptr, const char *szPath3=nullptr, const char *szPath4=nullptr)</td></tr>
<tr class="memdesc:ac6b96e398a7232a42c307c753e34b6d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends several path pieces. Makes sure they are always properly separated by a slash.  <a href="../../d3/d88/classez_string_builder.htm#ac6b96e398a7232a42c307c753e34b6d8">More...</a><br /></td></tr>
<tr class="separator:ac6b96e398a7232a42c307c753e34b6d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8049f9a06c591c5f9b6eb11dafe305d0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a8049f9a06c591c5f9b6eb11dafe305d0">AppendWithSeparator</a> (<a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> separator, <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> sText1, <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> sText2=<a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>(), <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> sText3=<a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>(), <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> sText4=<a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>(), <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> sText5=<a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>(), <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> sText6=<a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>())</td></tr>
<tr class="memdesc:a8049f9a06c591c5f9b6eb11dafe305d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="../../d3/d88/classez_string_builder.htm#a605f325ea4c9c3242454a16657e24ef7" title="Appends a single Utf32 character.">Append()</a> but the very first argument is a separator that is only appended (once) if the existing string is not empty and does not already end with the separator.  <a href="../../d3/d88/classez_string_builder.htm#a8049f9a06c591c5f9b6eb11dafe305d0">More...</a><br /></td></tr>
<tr class="separator:a8049f9a06c591c5f9b6eb11dafe305d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f7de9b6f730f3d75ea16c91a4704dcb"><td class="memItemLeft" align="right" valign="top"><a id="a9f7de9b6f730f3d75ea16c91a4704dcb"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a9f7de9b6f730f3d75ea16c91a4704dcb">ChangeFileName</a> (const char *szNewFileName)</td></tr>
<tr class="memdesc:a9f7de9b6f730f3d75ea16c91a4704dcb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the file name part of the path, keeps the extension intact (if there is any). <br /></td></tr>
<tr class="separator:a9f7de9b6f730f3d75ea16c91a4704dcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad11fb9e700b2c6633d24e687dae62011"><td class="memItemLeft" align="right" valign="top"><a id="ad11fb9e700b2c6633d24e687dae62011"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ad11fb9e700b2c6633d24e687dae62011">ChangeFileNameAndExtension</a> (const char *szNewFileNameWithExtension)</td></tr>
<tr class="memdesc:ad11fb9e700b2c6633d24e687dae62011"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the file name and the extension part of the path. <br /></td></tr>
<tr class="separator:ad11fb9e700b2c6633d24e687dae62011"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8eb36e09536e1e5744d9ea43fc2129a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ab8eb36e09536e1e5744d9ea43fc2129a">ChangeFileExtension</a> (const char *szNewExtension)</td></tr>
<tr class="memdesc:ab8eb36e09536e1e5744d9ea43fc2129a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Only changes the file extension of the path. If there is no extension yet, one is appended.  <a href="../../d3/d88/classez_string_builder.htm#ab8eb36e09536e1e5744d9ea43fc2129a">More...</a><br /></td></tr>
<tr class="separator:ab8eb36e09536e1e5744d9ea43fc2129a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23ee68002fe5a88d9e42af5e71a89548"><td class="memItemLeft" align="right" valign="top"><a id="a23ee68002fe5a88d9e42af5e71a89548"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a23ee68002fe5a88d9e42af5e71a89548">RemoveFileExtension</a> ()</td></tr>
<tr class="memdesc:a23ee68002fe5a88d9e42af5e71a89548"><td class="mdescLeft">&#160;</td><td class="mdescRight">If any extension exists, it is removed, including the dot before it. <br /></td></tr>
<tr class="separator:a23ee68002fe5a88d9e42af5e71a89548"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f424155f13f3b6e6596b6e1e032c682"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a0f424155f13f3b6e6596b6e1e032c682">MakeRelativeTo</a> (const char *szAbsolutePathToMakeThisRelativeTo)</td></tr>
<tr class="memdesc:a0f424155f13f3b6e6596b6e1e032c682"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts this path into a relative path to the path with the awesome variable name 'szAbsolutePathToMakeThisRelativeTo'.  <a href="../../d3/d88/classez_string_builder.htm#a0f424155f13f3b6e6596b6e1e032c682">More...</a><br /></td></tr>
<tr class="separator:a0f424155f13f3b6e6596b6e1e032c682"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac851131c262fee1f9ae7a9e3e16da31b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ac851131c262fee1f9ae7a9e3e16da31b">MakePathSeparatorsNative</a> ()</td></tr>
<tr class="memdesc:ac851131c262fee1f9ae7a9e3e16da31b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cleans this path up and replaces all path separators by the OS specific separator.  <a href="../../d3/d88/classez_string_builder.htm#ac851131c262fee1f9ae7a9e3e16da31b">More...</a><br /></td></tr>
<tr class="separator:ac851131c262fee1f9ae7a9e3e16da31b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5dfcc70fecd5f6493c82513c523b676f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a5dfcc70fecd5f6493c82513c523b676f">IsPathBelowFolder</a> (const char *szPathToFolder)</td></tr>
<tr class="memdesc:a5dfcc70fecd5f6493c82513c523b676f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether this path is a sub-path of the given path.  <a href="../../d3/d88/classez_string_builder.htm#a5dfcc70fecd5f6493c82513c523b676f">More...</a><br /></td></tr>
<tr class="separator:a5dfcc70fecd5f6493c82513c523b676f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1944172cbf1eeb3faef4c4ae8c7c942"><td class="memItemLeft" align="right" valign="top"><a id="ae1944172cbf1eeb3faef4c4ae8c7c942"></a>
ezUInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ae1944172cbf1eeb3faef4c4ae8c7c942">GetHeapMemoryUsage</a> () const</td></tr>
<tr class="memdesc:ae1944172cbf1eeb3faef4c4ae8c7c942"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of bytes that are currently allocated on the heap. <br /></td></tr>
<tr class="separator:ae1944172cbf1eeb3faef4c4ae8c7c942"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a873bef1677465559bfebeccda3ab4493"><td class="memItemLeft" align="right" valign="top"><a id="a873bef1677465559bfebeccda3ab4493"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a873bef1677465559bfebeccda3ab4493">Trim</a> (const char *szTrimChars)</td></tr>
<tr class="memdesc:a873bef1677465559bfebeccda3ab4493"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the start and end that appear in the given strings. <br /></td></tr>
<tr class="separator:a873bef1677465559bfebeccda3ab4493"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57730d24b21287cd1b04b09de1a0f6cd"><td class="memItemLeft" align="right" valign="top"><a id="a57730d24b21287cd1b04b09de1a0f6cd"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a57730d24b21287cd1b04b09de1a0f6cd">Trim</a> (const char *szTrimCharsStart, const char *szTrimCharsEnd)</td></tr>
<tr class="memdesc:a57730d24b21287cd1b04b09de1a0f6cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the start and/or end that appear in the given strings. <br /></td></tr>
<tr class="separator:a57730d24b21287cd1b04b09de1a0f6cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6843bb280feabb443f7659e085b3811b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a6843bb280feabb443f7659e085b3811b">TrimWordStart</a> (const char *szWord1, const char *szWord2=nullptr, const char *szWord3=nullptr, const char *szWord4=nullptr, const char *szWord5=nullptr)</td></tr>
<tr class="memdesc:a6843bb280feabb443f7659e085b3811b"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the string starts with one of the given words (case insensitive), it is removed and the function returns true.  <a href="../../d3/d88/classez_string_builder.htm#a6843bb280feabb443f7659e085b3811b">More...</a><br /></td></tr>
<tr class="separator:a6843bb280feabb443f7659e085b3811b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af66f405ed051a3239bcd1512ce610e49"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#af66f405ed051a3239bcd1512ce610e49">TrimWordEnd</a> (const char *szWord1, const char *szWord2=nullptr, const char *szWord3=nullptr, const char *szWord4=nullptr, const char *szWord5=nullptr)</td></tr>
<tr class="memdesc:af66f405ed051a3239bcd1512ce610e49"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the string ends with one of the given words (case insensitive), it is removed and the function returns true.  <a href="../../d3/d88/classez_string_builder.htm#af66f405ed051a3239bcd1512ce610e49">More...</a><br /></td></tr>
<tr class="separator:af66f405ed051a3239bcd1512ce610e49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_structez_string_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_structez_string_base')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt; ezStringBuilder &gt;</a></td></tr>
<tr class="memitem:a3b169646f62ef8a8d33b63e2b8731afb inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a3b169646f62ef8a8d33b63e2b8731afb"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a3b169646f62ef8a8d33b63e2b8731afb">IsEmpty</a> () const</td></tr>
<tr class="memdesc:a3b169646f62ef8a8d33b63e2b8731afb inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the string is an empty string. <br /></td></tr>
<tr class="separator:a3b169646f62ef8a8d33b63e2b8731afb inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40370a42191c470e969d0693385db3f3 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a40370a42191c470e969d0693385db3f3"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a40370a42191c470e969d0693385db3f3">StartsWith</a> (const char *szStartsWith) const</td></tr>
<tr class="memdesc:a40370a42191c470e969d0693385db3f3 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. <br /></td></tr>
<tr class="separator:a40370a42191c470e969d0693385db3f3 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb6973bde9b2b2b6773b69035c97e8ba inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="acb6973bde9b2b2b6773b69035c97e8ba"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#acb6973bde9b2b2b6773b69035c97e8ba">StartsWith_NoCase</a> (const char *szStartsWith) const</td></tr>
<tr class="memdesc:acb6973bde9b2b2b6773b69035c97e8ba inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:acb6973bde9b2b2b6773b69035c97e8ba inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb83fb2fc2655dfdfea37ef6ae13ef30 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="afb83fb2fc2655dfdfea37ef6ae13ef30"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#afb83fb2fc2655dfdfea37ef6ae13ef30">EndsWith</a> (const char *szEndsWith) const</td></tr>
<tr class="memdesc:afb83fb2fc2655dfdfea37ef6ae13ef30 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. <br /></td></tr>
<tr class="separator:afb83fb2fc2655dfdfea37ef6ae13ef30 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d4ac2126f45dcb7c567dee949cc68ab inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a1d4ac2126f45dcb7c567dee949cc68ab"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a1d4ac2126f45dcb7c567dee949cc68ab">EndsWith_NoCase</a> (const char *szEndsWith) const</td></tr>
<tr class="memdesc:a1d4ac2126f45dcb7c567dee949cc68ab inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:a1d4ac2126f45dcb7c567dee949cc68ab inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af672ce6437cd3c9d17b3267cfa834b48 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#af672ce6437cd3c9d17b3267cfa834b48">FindSubString</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:af672ce6437cd3c9d17b3267cfa834b48 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a139af1709f27a801b784a3f4bd2c12ed inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a139af1709f27a801b784a3f4bd2c12ed">FindSubString_NoCase</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a139af1709f27a801b784a3f4bd2c12ed inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44351ea491df5b7db1095dde6e6299c5 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a44351ea491df5b7db1095dde6e6299c5">FindLastSubString</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a44351ea491df5b7db1095dde6e6299c5 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c0563a267bee66f3a1f76cf08af153f inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a0c0563a267bee66f3a1f76cf08af153f">FindLastSubString_NoCase</a> (const char *szStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a0c0563a267bee66f3a1f76cf08af153f inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7990e9f9c36231cd41af33a25f96dbc6 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a7990e9f9c36231cd41af33a25f96dbc6">FindWholeWord</a> (const char *szSearchFor, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> IsDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a7990e9f9c36231cd41af33a25f96dbc6 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a696c890e2e534cfc0af94091f0f0a5f6 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a696c890e2e534cfc0af94091f0f0a5f6">FindWholeWord_NoCase</a> (const char *szSearchFor, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> IsDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a696c890e2e534cfc0af94091f0f0a5f6 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8db4d1eaa1ad5ad01395f3d08eb1a0c2 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a8db4d1eaa1ad5ad01395f3d08eb1a0c2"></a>
ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">Compare</a> (const char *pString2) const</td></tr>
<tr class="memdesc:a8db4d1eaa1ad5ad01395f3d08eb1a0c2 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. <br /></td></tr>
<tr class="separator:a8db4d1eaa1ad5ad01395f3d08eb1a0c2 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fcc6b07403fe714f7823f06e51ed419 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a5fcc6b07403fe714f7823f06e51ed419">CompareN</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:a5fcc6b07403fe714f7823f06e51ed419 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48e98ad28e9cc6c0a3d436b802149443 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a48e98ad28e9cc6c0a3d436b802149443"></a>
ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a48e98ad28e9cc6c0a3d436b802149443">Compare_NoCase</a> (const char *pString2) const</td></tr>
<tr class="memdesc:a48e98ad28e9cc6c0a3d436b802149443 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. Case insensitive. <br /></td></tr>
<tr class="separator:a48e98ad28e9cc6c0a3d436b802149443 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af924cf1e0bc6a35338229a7e9ad505a8 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#af924cf1e0bc6a35338229a7e9ad505a8">CompareN_NoCase</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:af924cf1e0bc6a35338229a7e9ad505a8 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6517806293ce84badc8da6c5d01c67cf inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a6517806293ce84badc8da6c5d01c67cf"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">IsEqual</a> (const char *pString2) const</td></tr>
<tr class="memdesc:a6517806293ce84badc8da6c5d01c67cf inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:a6517806293ce84badc8da6c5d01c67cf inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77bcaa8c3cc64c21d1311e45033ffae3 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a77bcaa8c3cc64c21d1311e45033ffae3"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a77bcaa8c3cc64c21d1311e45033ffae3">IsEqualN</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:a77bcaa8c3cc64c21d1311e45033ffae3 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:a77bcaa8c3cc64c21d1311e45033ffae3 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba99a929eb858f565e1fa332b6b03723 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="aba99a929eb858f565e1fa332b6b03723"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#aba99a929eb858f565e1fa332b6b03723">IsEqual_NoCase</a> (const char *pString2) const</td></tr>
<tr class="memdesc:aba99a929eb858f565e1fa332b6b03723 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:aba99a929eb858f565e1fa332b6b03723 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada89e0455b0a9bc13e76af36abb3cf8b inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ada89e0455b0a9bc13e76af36abb3cf8b"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#ada89e0455b0a9bc13e76af36abb3cf8b">IsEqualN_NoCase</a> (const char *pString2, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:ada89e0455b0a9bc13e76af36abb3cf8b inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:ada89e0455b0a9bc13e76af36abb3cf8b inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05bec3cf5581b35aa18849239b2471c6 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a05bec3cf5581b35aa18849239b2471c6"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a05bec3cf5581b35aa18849239b2471c6">ComputeCharacterPosition</a> (ezUInt32 uiCharacterIndex) const</td></tr>
<tr class="memdesc:a05bec3cf5581b35aa18849239b2471c6 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the pointer to the n-th character in the string. This is a linear search from the start. <br /></td></tr>
<tr class="separator:a05bec3cf5581b35aa18849239b2471c6 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a630aa4b168172aef7b32f8085148ed8e inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/ddc/structez_string_iterator.htm">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">GetIteratorFront</a> () const</td></tr>
<tr class="memdesc:a630aa4b168172aef7b32f8085148ed8e inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very first character.  <a href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">More...</a><br /></td></tr>
<tr class="separator:a630aa4b168172aef7b32f8085148ed8e inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3821af6b610f6c40a46336f7accc0c7e inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">GetIteratorBack</a> () const</td></tr>
<tr class="memdesc:a3821af6b610f6c40a46336f7accc0c7e inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very last character (NOT the end).  <a href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">More...</a><br /></td></tr>
<tr class="separator:a3821af6b610f6c40a46336f7accc0c7e inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:afcc265e5360a53cfe7ae05cadefeedbd"><td class="memTemplParams" colspan="2"><a id="afcc265e5360a53cfe7ae05cadefeedbd"></a>
template&lt;ezUInt16 T&gt; </td></tr>
<tr class="memitem:afcc265e5360a53cfe7ae05cadefeedbd"><td class="memTemplItemLeft" align="right" valign="top">struct&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ezHybridStringBase</b></td></tr>
<tr class="separator:afcc265e5360a53cfe7ae05cadefeedbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_structez_string_base"><td colspan="2" onclick="javascript:toggleInherit('pub_types_structez_string_base')"><img src="../../closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt; ezStringBuilder &gt;</a></td></tr>
<tr class="memitem:ab65f80cd73057c1f83921afc74200c9f inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ab65f80cd73057c1f83921afc74200c9f"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>iterator</b> = <a class="el" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&lt; <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &gt;</td></tr>
<tr class="separator:ab65f80cd73057c1f83921afc74200c9f inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade6d14a20fb3d7e2074f3b0563146b8e inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ade6d14a20fb3d7e2074f3b0563146b8e"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_iterator</b> = <a class="el" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a>&lt; <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &gt;</td></tr>
<tr class="separator:ade6d14a20fb3d7e2074f3b0563146b8e inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae164cffae6bebd68154732c2d72d313c inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ae164cffae6bebd68154732c2d72d313c"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>reverse_iterator</b> = <a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&lt; <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &gt;</td></tr>
<tr class="separator:ae164cffae6bebd68154732c2d72d313c inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad740ab8e9cfc9269d50f6da3c532e779 inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ad740ab8e9cfc9269d50f6da3c532e779"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_reverse_iterator</b> = <a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a>&lt; <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &gt;</td></tr>
<tr class="separator:ad740ab8e9cfc9269d50f6da3c532e779 inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="../../d3/d88/classez_string_builder.htm" title="ezStringBuilder is a class that is meant for creating and modifying strings.">ezStringBuilder</a> is a class that is meant for creating and modifying strings. </p>
<p>It is not meant to store strings for a longer duration. Each <a class="el" href="../../d3/d88/classez_string_builder.htm" title="ezStringBuilder is a class that is meant for creating and modifying strings.">ezStringBuilder</a> uses an <a class="el" href="../../d8/deb/classez_hybrid_array.htm" title="A hybrid array uses in-place storage to handle the first few elements without any allocation....">ezHybridArray</a> to allocate a large buffer on the stack, such that string manipulations are possible without memory allocations, unless the string is too large. No sharing of data happens between <a class="el" href="../../d3/d88/classez_string_builder.htm" title="ezStringBuilder is a class that is meant for creating and modifying strings.">ezStringBuilder</a> instances, as it is expected that they will be modified anyway. Instead all data is always copied, therefore instances should not be passed by copy. All string data is stored Utf8 encoded, just as all other string classes, too. That makes it difficult to modify individual characters. Instead you should prefer high-level functions such as 'ReplaceSubString'. If individual characters must be modified, it might make more sense to create a second <a class="el" href="../../d3/d88/classez_string_builder.htm" title="ezStringBuilder is a class that is meant for creating and modifying strings.">ezStringBuilder</a>, and iterate over the first while rebuilding the desired result in the second. Once a string is built and should only be stored for read access, it should be stored in an ezString instance. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="ac6b96e398a7232a42c307c753e34b6d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6b96e398a7232a42c307c753e34b6d8">&#9670;&nbsp;</a></span>AppendPath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::AppendPath </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPath1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPath2</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPath3</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPath4</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Appends several path pieces. Makes sure they are always properly separated by a slash. </p>
<p>Will call 'MakeCleanPath' internally, so the representation of the path might change. </p>

</div>
</div>
<a id="a8049f9a06c591c5f9b6eb11dafe305d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8049f9a06c591c5f9b6eb11dafe305d0">&#9670;&nbsp;</a></span>AppendWithSeparator()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::AppendWithSeparator </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>separator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sText1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sText2</em> = <code><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sText3</em> = <code><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sText4</em> = <code><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sText5</em> = <code><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sText6</em> = <code><a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="../../d3/d88/classez_string_builder.htm#a605f325ea4c9c3242454a16657e24ef7" title="Appends a single Utf32 character.">Append()</a> but the very first argument is a separator that is only appended (once) if the existing string is not empty and does not already end with the separator. </p>
<p>This is useful when one wants to append entries that require a separator like a comma in between items. E.g. calling AppendWithSeparator(", ", "a", "b"); AppendWithSeparator(", ", "c", "d"); results in the string "ab, cd" </p>

</div>
</div>
<a id="a30892f8031346691835a90f009973138"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30892f8031346691835a90f009973138">&#9670;&nbsp;</a></span>ChangeCharacter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::ChangeCharacter </td>
          <td>(</td>
          <td class="paramtype">iterator &amp;&#160;</td>
          <td class="paramname"><em>it</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiCharacter</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Changes the single character in this string, to which the iterator currently points. </p>
<p>The string might need to be moved around, if its encoding size changes, however the given iterator will be adjusted so that it will always stay valid. </p><dl class="section note"><dt>Note</dt><dd>This can be a very costly operation (unless this string is pure ASCII). It is only provided for the few rare cases where it is more convenient and performance is not of concern. If possible, do not use this function, at all. </dd></dl>

</div>
</div>
<a id="ab8eb36e09536e1e5744d9ea43fc2129a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8eb36e09536e1e5744d9ea43fc2129a">&#9670;&nbsp;</a></span>ChangeFileExtension()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::ChangeFileExtension </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szNewExtension</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Only changes the file extension of the path. If there is no extension yet, one is appended. </p>
<p>szNewExtension must not start with a dot. </p>

</div>
</div>
<a id="a20f0efd1e9666494ca11fb1495bcbf73"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20f0efd1e9666494ca11fb1495bcbf73">&#9670;&nbsp;</a></span>GetFileDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EZ_FORCE_INLINE <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> ezStringBuilder::GetFileDirectory </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the directory of the given file, which is the substring up to the last path separator. </p>
<p>If the path already ends in a path separator, and thus points to a folder, instead of a file, the unchanged path is returned. "path/to/file" -&gt; "path/to/" "path/to/folder/" -&gt; "path/to/folder/" "filename" -&gt; "" "/file_at_root_level" -&gt; "/" </p>

</div>
</div>
<a id="acf870607ef58a5899a139868ac2aa4bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf870607ef58a5899a139868ac2aa4bf">&#9670;&nbsp;</a></span>GetFileName()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EZ_FORCE_INLINE <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> ezStringBuilder::GetFileName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the file name of a path, excluding the path and extension. </p>
<p>If the path already ends with a path separator, the result will be empty. </p>

</div>
</div>
<a id="adb91acdad116235acba89117ad5de589"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb91acdad116235acba89117ad5de589">&#9670;&nbsp;</a></span>GetFileNameAndExtension()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EZ_FORCE_INLINE <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> ezStringBuilder::GetFileNameAndExtension </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the substring that represents the file name including the file extension. </p>
<p>Returns an empty string, if sPath already ends in a path separator, or is empty itself. </p>

</div>
</div>
<a id="af28ee56b65ef97cb7f5cd3b45f503019"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af28ee56b65ef97cb7f5cd3b45f503019">&#9670;&nbsp;</a></span>GetRootedPathRootName()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EZ_FORCE_INLINE <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> ezStringBuilder::GetRootedPathRootName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Extracts the root name from a rooted path. </p>
<p>":MyRoot" -&gt; "MyRoot" ":MyRoot\folder" -&gt; "MyRoot" ":\MyRoot\folder" -&gt; "MyRoot" ":/MyRoot\folder" -&gt; "MyRoot" Returns an empty string, if the path is not rooted. </p>

</div>
</div>
<a id="a5dfcc70fecd5f6493c82513c523b676f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5dfcc70fecd5f6493c82513c523b676f">&#9670;&nbsp;</a></span>IsPathBelowFolder()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ezStringBuilder::IsPathBelowFolder </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPathToFolder</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks whether this path is a sub-path of the given path. </p>
<p>This function will call 'MakeCleanPath' to be able to compare both paths, thus it might modify the data of this instance.</p>
<p>An empty folder (zero length) does not contain ANY files.<br  />
A non-existing file-name (zero length) is never in any folder.<br  />
Example:<br  />
IsFileBelowFolder ("", "XYZ") -&gt; always false<br  />
IsFileBelowFolder ("XYZ", "") -&gt; always false<br  />
IsFileBelowFolder ("", "") -&gt; always false<br  />
 </p>

</div>
</div>
<a id="acb4e8da454e08207f376cb95ec372878"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb4e8da454e08207f376cb95ec372878">&#9670;&nbsp;</a></span>MakeCleanPath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::MakeCleanPath </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes "../" where possible, replaces all path separators with /, removes double slashes. </p>
<p>All paths use slashes on all platforms. If you need to convert a path to the OS specific representation, use 'MakePathSeparatorsNative' 'MakeCleanPath' will in rare circumstances grow the string by one character. That means it is quite safe to assume that it will not waste time on memory allocations. If it is repeatedly called on the same string, it has a minor overhead for computing the same string over and over, but no memory allocations will be done (everything is in-place).</p>
<p>Removes all double path separators (slashes and backslashes) in a path, except if the path starts with two (back-)slashes, those are kept, as they might indicate a UNC path. </p>

</div>
</div>
<a id="ac851131c262fee1f9ae7a9e3e16da31b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac851131c262fee1f9ae7a9e3e16da31b">&#9670;&nbsp;</a></span>MakePathSeparatorsNative()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::MakePathSeparatorsNative </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Cleans this path up and replaces all path separators by the OS specific separator. </p>
<p>This can be used, if you want to present paths in the OS specific form to the user in the UI. In all other cases the internal representation uses slashes, no matter on which operating system. </p>

</div>
</div>
<a id="a0f424155f13f3b6e6596b6e1e032c682"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f424155f13f3b6e6596b6e1e032c682">&#9670;&nbsp;</a></span>MakeRelativeTo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> ezStringBuilder::MakeRelativeTo </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szAbsolutePathToMakeThisRelativeTo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts this path into a relative path to the path with the awesome variable name 'szAbsolutePathToMakeThisRelativeTo'. </p>
<p>If the method succeeds the StringBuilder's contents are modified in place. </p>

</div>
</div>
<a id="a40dff448589cc69f85fce8d72922ae22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40dff448589cc69f85fce8d72922ae22">&#9670;&nbsp;</a></span>PathParentDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::PathParentDirectory </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiLevelsUp</em> = <code>1</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Modifies this string to point to the parent directory. </p>
<p>'uiLevelsUp' can be used to go several folders upwards. It has to be at least one. If there are no more folders to go up, "../" is appended as much as needed. </p>

</div>
</div>
<a id="a6dbf87a7c53f518c26b22ff3543ac15d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dbf87a7c53f518c26b22ff3543ac15d">&#9670;&nbsp;</a></span>ReplaceFirst()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * ezStringBuilder::ReplaceFirst </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;&#160;</td>
          <td class="paramname"><em>szReplacement</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replaces the first occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the beginning). </p>
<p>Returns the first position where szSearchFor was found, or nullptr if nothing was found (and replaced). </p>

</div>
</div>
<a id="ac7b7b76f6c57d79c852a27ce7f080fc4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7b7b76f6c57d79c852a27ce7f080fc4">&#9670;&nbsp;</a></span>ReplaceLast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * ezStringBuilder::ReplaceLast </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../de/db8/structez_string_view.htm">ezStringView</a> &amp;&#160;</td>
          <td class="paramname"><em>szReplacement</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replaces the last occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the end). </p>
<p>Returns the last position where szSearchFor was found, or nullptr if nothing was found (and replaced). </p>

</div>
</div>
<a id="a646a93dad4c0dc198196db2c8d31fd99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a646a93dad4c0dc198196db2c8d31fd99">&#9670;&nbsp;</a></span>Shrink()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::Shrink </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiShrinkCharsFront</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiShrinkCharsBack</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes the first n and last m characters from this string. </p>
<p>This function will never reallocate data. Removing characters at the back is very cheap. Removing characters at the front needs to move data around, so can be quite costly. </p>

</div>
</div>
<a id="af66f405ed051a3239bcd1512ce610e49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af66f405ed051a3239bcd1512ce610e49">&#9670;&nbsp;</a></span>TrimWordEnd()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ezStringBuilder::TrimWordEnd </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szWord1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szWord2</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szWord3</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szWord4</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szWord5</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>If the string ends with one of the given words (case insensitive), it is removed and the function returns true. </p>
<dl class="test"><dt><b><a class="el" href="../../d4/df6/test.htm#_test000035">Test:</a></b></dt><dd>TrimWordEnd </dd></dl>

</div>
</div>
<a id="a6843bb280feabb443f7659e085b3811b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6843bb280feabb443f7659e085b3811b">&#9670;&nbsp;</a></span>TrimWordStart()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ezStringBuilder::TrimWordStart </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szWord1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szWord2</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szWord3</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szWord4</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szWord5</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>If the string starts with one of the given words (case insensitive), it is removed and the function returns true. </p>
<dl class="test"><dt><b><a class="el" href="../../d4/df6/test.htm#_test000034">Test:</a></b></dt><dd>TrimWordStart </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/Strings/<a class="el" href="../../d5/df1/_string_builder_8h_source.htm">StringBuilder.h</a></li>
<li>Code/Engine/Foundation/Strings/Implementation/StringBuilder.cpp</li>
<li>Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../da/dbb/_string_builder__inl_8h_source.htm">StringBuilder_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a></li>
    <li class="footer">Generated on Tue Jun 8 2021 14:34:08 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
