<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezStringBuilder Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 24.09</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d3/d88/classez_string_builder.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../d0/d90/classez_string_builder-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezStringBuilder Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="../../d3/d88/classez_string_builder.htm" title="ezStringBuilder is a class that is meant for creating and modifying strings.">ezStringBuilder</a> is a class that is meant for creating and modifying strings.  
 <a href="../../d3/d88/classez_string_builder.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d5/df1/_string_builder_8h_source.htm">StringBuilder.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ezStringBuilder:</div>
<div class="dyncontent">
<div class="center"><img src="../../d9/d3a/classez_string_builder__inherit__graph.png" border="0" usemap="#ez_string_builder_inherit__map" alt="Inheritance graph"/></div>
<map name="ez_string_builder_inherit__map" id="ez_string_builder_inherit__map">
<area shape="rect" title="ezStringBuilder is a class that is meant for creating and modifying strings." alt="" coords="63,155,184,181"/>
<area shape="rect" href="../../dd/d69/structez_string_base.htm" title=" " alt="" coords="5,80,241,107"/>
<area shape="rect" href="../../d8/d9a/structez_this_is_a_string.htm" title="Base class which marks a class as containing string data." alt="" coords="62,5,185,32"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a572bcaa03de5c9da673e98a62fe64d86"><td class="memItemLeft" align="right" valign="top"><a id="a572bcaa03de5c9da673e98a62fe64d86"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a572bcaa03de5c9da673e98a62fe64d86">ezStringBuilder</a> (<a class="el" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a> *pAllocator=<a class="el" href="../../d0/d49/classez_foundation.htm#a9fec1f3614e3ba19daf06f8c22c91f78">ezFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:a572bcaa03de5c9da673e98a62fe64d86"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the string to be empty. No data is allocated, but the <a class="el" href="../../d3/d88/classez_string_builder.htm" title="ezStringBuilder is a class that is meant for creating and modifying strings.">ezStringBuilder</a> ALWAYS creates an array on the stack. <br /></td></tr>
<tr class="separator:a572bcaa03de5c9da673e98a62fe64d86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0eff19ce3b5583ef753b658e019518e7"><td class="memItemLeft" align="right" valign="top"><a id="a0eff19ce3b5583ef753b658e019518e7"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a0eff19ce3b5583ef753b658e019518e7">ezStringBuilder</a> (const <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;rhs)</td></tr>
<tr class="memdesc:a0eff19ce3b5583ef753b658e019518e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a0eff19ce3b5583ef753b658e019518e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04e87df39f893e06bdb918c8cfd954db"><td class="memItemLeft" align="right" valign="top"><a id="a04e87df39f893e06bdb918c8cfd954db"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a04e87df39f893e06bdb918c8cfd954db">ezStringBuilder</a> (<a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;&amp;rhs) noexcept</td></tr>
<tr class="memdesc:a04e87df39f893e06bdb918c8cfd954db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a04e87df39f893e06bdb918c8cfd954db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac726d09612fe6a06cfad3d144cda7ab"><td class="memTemplParams" colspan="2"><a id="aac726d09612fe6a06cfad3d144cda7ab"></a>
template&lt;ezUInt16 Size&gt; </td></tr>
<tr class="memitem:aac726d09612fe6a06cfad3d144cda7ab"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aac726d09612fe6a06cfad3d144cda7ab">ezStringBuilder</a> (const <a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt; &amp;rhs)</td></tr>
<tr class="memdesc:aac726d09612fe6a06cfad3d144cda7ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:aac726d09612fe6a06cfad3d144cda7ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38ab7f804a615884732786ffd71381cc"><td class="memTemplParams" colspan="2"><a id="a38ab7f804a615884732786ffd71381cc"></a>
template&lt;ezUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:a38ab7f804a615884732786ffd71381cc"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a38ab7f804a615884732786ffd71381cc">ezStringBuilder</a> (const <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>&lt; Size, A &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a38ab7f804a615884732786ffd71381cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a38ab7f804a615884732786ffd71381cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e16d660aed7c664987c73b0f44828ba"><td class="memTemplParams" colspan="2"><a id="a6e16d660aed7c664987c73b0f44828ba"></a>
template&lt;ezUInt16 Size&gt; </td></tr>
<tr class="memitem:a6e16d660aed7c664987c73b0f44828ba"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a6e16d660aed7c664987c73b0f44828ba">ezStringBuilder</a> (<a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a6e16d660aed7c664987c73b0f44828ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a6e16d660aed7c664987c73b0f44828ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a266bc4e41bc7247f3094ab0b2555cdcf"><td class="memTemplParams" colspan="2"><a id="a266bc4e41bc7247f3094ab0b2555cdcf"></a>
template&lt;ezUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:a266bc4e41bc7247f3094ab0b2555cdcf"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a266bc4e41bc7247f3094ab0b2555cdcf">ezStringBuilder</a> (<a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>&lt; Size, A &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a266bc4e41bc7247f3094ab0b2555cdcf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a266bc4e41bc7247f3094ab0b2555cdcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05f4317b6fbb3ada5bd860cfc0afd93b"><td class="memItemLeft" align="right" valign="top"><a id="a05f4317b6fbb3ada5bd860cfc0afd93b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a05f4317b6fbb3ada5bd860cfc0afd93b">ezStringBuilder</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData1, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData2, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData3={}, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData4={}, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData5={}, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData6={})</td></tr>
<tr class="memdesc:a05f4317b6fbb3ada5bd860cfc0afd93b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor that appends all the given strings. <br /></td></tr>
<tr class="separator:a05f4317b6fbb3ada5bd860cfc0afd93b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0a24a7d1186445c0174c4052e9f11cb"><td class="memItemLeft" align="right" valign="top"><a id="ae0a24a7d1186445c0174c4052e9f11cb"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ae0a24a7d1186445c0174c4052e9f11cb">ezStringBuilder</a> (const char *szUTF8, <a class="el" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a> *pAllocator=<a class="el" href="../../d0/d49/classez_foundation.htm#a9fec1f3614e3ba19daf06f8c22c91f78">ezFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:ae0a24a7d1186445c0174c4052e9f11cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given Utf8 string into this one. <br /></td></tr>
<tr class="separator:ae0a24a7d1186445c0174c4052e9f11cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa26df083989a4b54cab7e50122b2e48a"><td class="memItemLeft" align="right" valign="top"><a id="aa26df083989a4b54cab7e50122b2e48a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aa26df083989a4b54cab7e50122b2e48a">ezStringBuilder</a> (const wchar_t *pWChar, <a class="el" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a> *pAllocator=<a class="el" href="../../d0/d49/classez_foundation.htm#a9fec1f3614e3ba19daf06f8c22c91f78">ezFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:aa26df083989a4b54cab7e50122b2e48a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given wchar_t string into this one. <br /></td></tr>
<tr class="separator:aa26df083989a4b54cab7e50122b2e48a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56cac06f37afc20835a298860f524302"><td class="memItemLeft" align="right" valign="top"><a id="a56cac06f37afc20835a298860f524302"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a56cac06f37afc20835a298860f524302">ezStringBuilder</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> rhs, <a class="el" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a> *pAllocator=<a class="el" href="../../d0/d49/classez_foundation.htm#a9fec1f3614e3ba19daf06f8c22c91f78">ezFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:a56cac06f37afc20835a298860f524302"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given substring into this one. The <a class="el" href="../../d9/d18/classez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> might actually be a substring of this very string. <br /></td></tr>
<tr class="separator:a56cac06f37afc20835a298860f524302"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97d0149bd32e043f5177ac63e172b2dd"><td class="memItemLeft" align="right" valign="top"><a id="a97d0149bd32e043f5177ac63e172b2dd"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a97d0149bd32e043f5177ac63e172b2dd">operator=</a> (const <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;rhs)</td></tr>
<tr class="memdesc:a97d0149bd32e043f5177ac63e172b2dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a97d0149bd32e043f5177ac63e172b2dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2b87a1bec387cbcfe36629b6560957f"><td class="memItemLeft" align="right" valign="top"><a id="ab2b87a1bec387cbcfe36629b6560957f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ab2b87a1bec387cbcfe36629b6560957f">operator=</a> (<a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;&amp;rhs) noexcept</td></tr>
<tr class="memdesc:ab2b87a1bec387cbcfe36629b6560957f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:ab2b87a1bec387cbcfe36629b6560957f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc69c60c893d5e43cd3595236e68f26b"><td class="memItemLeft" align="right" valign="top"><a id="adc69c60c893d5e43cd3595236e68f26b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#adc69c60c893d5e43cd3595236e68f26b">operator=</a> (const char *szUTF8)</td></tr>
<tr class="memdesc:adc69c60c893d5e43cd3595236e68f26b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given Utf8 string into this one. <br /></td></tr>
<tr class="separator:adc69c60c893d5e43cd3595236e68f26b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad754ed0b6ea472e20b16bf3c93e327ea"><td class="memItemLeft" align="right" valign="top"><a id="ad754ed0b6ea472e20b16bf3c93e327ea"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ad754ed0b6ea472e20b16bf3c93e327ea">operator=</a> (const wchar_t *pWChar)</td></tr>
<tr class="memdesc:ad754ed0b6ea472e20b16bf3c93e327ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given wchar_t string into this one. <br /></td></tr>
<tr class="separator:ad754ed0b6ea472e20b16bf3c93e327ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8651f375835f8753ac2a9355114c4687"><td class="memItemLeft" align="right" valign="top"><a id="a8651f375835f8753ac2a9355114c4687"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a8651f375835f8753ac2a9355114c4687">operator=</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> rhs)</td></tr>
<tr class="memdesc:a8651f375835f8753ac2a9355114c4687"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given substring into this one. The <a class="el" href="../../d9/d18/classez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a> might actually be a substring of this very string. <br /></td></tr>
<tr class="separator:a8651f375835f8753ac2a9355114c4687"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe3059b8d9cc7fb696bf12777b58299f"><td class="memTemplParams" colspan="2"><a id="afe3059b8d9cc7fb696bf12777b58299f"></a>
template&lt;ezUInt16 Size&gt; </td></tr>
<tr class="memitem:afe3059b8d9cc7fb696bf12777b58299f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#afe3059b8d9cc7fb696bf12777b58299f">operator=</a> (const <a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt; &amp;rhs)</td></tr>
<tr class="memdesc:afe3059b8d9cc7fb696bf12777b58299f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:afe3059b8d9cc7fb696bf12777b58299f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90e96e864b3a3558c15d075e5003bf5b"><td class="memTemplParams" colspan="2"><a id="a90e96e864b3a3558c15d075e5003bf5b"></a>
template&lt;ezUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:a90e96e864b3a3558c15d075e5003bf5b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a90e96e864b3a3558c15d075e5003bf5b">operator=</a> (const <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>&lt; Size, A &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a90e96e864b3a3558c15d075e5003bf5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a90e96e864b3a3558c15d075e5003bf5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0dabcebf009530ed5105e0f007427bf"><td class="memTemplParams" colspan="2"><a id="af0dabcebf009530ed5105e0f007427bf"></a>
template&lt;ezUInt16 Size&gt; </td></tr>
<tr class="memitem:af0dabcebf009530ed5105e0f007427bf"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#af0dabcebf009530ed5105e0f007427bf">operator=</a> (<a class="el" href="../../d6/d43/structez_hybrid_string_base.htm">ezHybridStringBase</a>&lt; Size &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:af0dabcebf009530ed5105e0f007427bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:af0dabcebf009530ed5105e0f007427bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12236c90721b3462e8606dd7d7d12433"><td class="memTemplParams" colspan="2"><a id="a12236c90721b3462e8606dd7d7d12433"></a>
template&lt;ezUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:a12236c90721b3462e8606dd7d7d12433"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a12236c90721b3462e8606dd7d7d12433">operator=</a> (<a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezHybridString</a>&lt; Size, A &gt; &amp;&amp;rhs) noexcept</td></tr>
<tr class="memdesc:a12236c90721b3462e8606dd7d7d12433"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a12236c90721b3462e8606dd7d7d12433"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2648971fba117e2e48484b5e828e9a99"><td class="memItemLeft" align="right" valign="top"><a id="a2648971fba117e2e48484b5e828e9a99"></a>
<a class="el" href="../../d0/dbb/classez_allocator.htm">ezAllocator</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a2648971fba117e2e48484b5e828e9a99">GetAllocator</a> () const</td></tr>
<tr class="memdesc:a2648971fba117e2e48484b5e828e9a99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the allocator that is used by this object. <br /></td></tr>
<tr class="separator:a2648971fba117e2e48484b5e828e9a99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a162e5eb18bb60fd044c2fbbcdfa79228"><td class="memItemLeft" align="right" valign="top"><a id="a162e5eb18bb60fd044c2fbbcdfa79228"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a162e5eb18bb60fd044c2fbbcdfa79228">Clear</a> ()</td></tr>
<tr class="memdesc:a162e5eb18bb60fd044c2fbbcdfa79228"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets this string to be empty. Does not deallocate any previously allocated data, as it might be reused later again. <br /></td></tr>
<tr class="separator:a162e5eb18bb60fd044c2fbbcdfa79228"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3063473d38e978ef950a11d302983bba"><td class="memItemLeft" align="right" valign="top"><a id="a3063473d38e978ef950a11d302983bba"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a3063473d38e978ef950a11d302983bba">GetData</a> () const</td></tr>
<tr class="memdesc:a3063473d38e978ef950a11d302983bba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a char pointer to the internal Utf8 data. <br /></td></tr>
<tr class="separator:a3063473d38e978ef950a11d302983bba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a946ff0b7b84634095a79a548777b51fd"><td class="memItemLeft" align="right" valign="top"><a id="a946ff0b7b84634095a79a548777b51fd"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a946ff0b7b84634095a79a548777b51fd">GetElementCount</a> () const</td></tr>
<tr class="memdesc:a946ff0b7b84634095a79a548777b51fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bytes that this string takes up. <br /></td></tr>
<tr class="separator:a946ff0b7b84634095a79a548777b51fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a3a36dcfd096259e15f167e2bd6ca07"><td class="memItemLeft" align="right" valign="top">ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a0a3a36dcfd096259e15f167e2bd6ca07">GetCharacterCount</a> () const</td></tr>
<tr class="memdesc:a0a3a36dcfd096259e15f167e2bd6ca07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of characters of which this string consists. Might be less than GetElementCount, if it contains Utf8 multi-byte characters.  <a href="../../d3/d88/classez_string_builder.htm#a0a3a36dcfd096259e15f167e2bd6ca07">More...</a><br /></td></tr>
<tr class="separator:a0a3a36dcfd096259e15f167e2bd6ca07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8beb183188db5f5ddacca112fe279e3c"><td class="memItemLeft" align="right" valign="top"><a id="a8beb183188db5f5ddacca112fe279e3c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a8beb183188db5f5ddacca112fe279e3c">ToUpper</a> ()</td></tr>
<tr class="memdesc:a8beb183188db5f5ddacca112fe279e3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts all characters to upper case. Might move the string data around, so all iterators to the data will be invalid afterwards. <br /></td></tr>
<tr class="separator:a8beb183188db5f5ddacca112fe279e3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61765d9803ff70f064cfc17c1fd04d89"><td class="memItemLeft" align="right" valign="top"><a id="a61765d9803ff70f064cfc17c1fd04d89"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a61765d9803ff70f064cfc17c1fd04d89">ToLower</a> ()</td></tr>
<tr class="memdesc:a61765d9803ff70f064cfc17c1fd04d89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts all characters to lower case. Might move the string data around, so all iterators to the data will be invalid afterwards. <br /></td></tr>
<tr class="separator:a61765d9803ff70f064cfc17c1fd04d89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98f618275d4d78bc56825499b8c21b13"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a98f618275d4d78bc56825499b8c21b13">ChangeCharacter</a> (iterator &amp;ref_it, ezUInt32 uiCharacter)</td></tr>
<tr class="memdesc:a98f618275d4d78bc56825499b8c21b13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the single character in this string, to which the iterator currently points.  <a href="../../d3/d88/classez_string_builder.htm#a98f618275d4d78bc56825499b8c21b13">More...</a><br /></td></tr>
<tr class="separator:a98f618275d4d78bc56825499b8c21b13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5afb1486975ac3d876d0afe0b0a77686"><td class="memItemLeft" align="right" valign="top"><a id="a5afb1486975ac3d876d0afe0b0a77686"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a5afb1486975ac3d876d0afe0b0a77686">Set</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData1)</td></tr>
<tr class="memdesc:a5afb1486975ac3d876d0afe0b0a77686"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the string to the given string. <br /></td></tr>
<tr class="separator:a5afb1486975ac3d876d0afe0b0a77686"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a821e91c8a55fc4e37601fd9f4410e677"><td class="memItemLeft" align="right" valign="top"><a id="a821e91c8a55fc4e37601fd9f4410e677"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a821e91c8a55fc4e37601fd9f4410e677">Set</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData1, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData2)</td></tr>
<tr class="memdesc:a821e91c8a55fc4e37601fd9f4410e677"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the string by concatenating all given strings. <br /></td></tr>
<tr class="separator:a821e91c8a55fc4e37601fd9f4410e677"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1f8d686f1466144ed5e7554f84dd8ca"><td class="memItemLeft" align="right" valign="top"><a id="ad1f8d686f1466144ed5e7554f84dd8ca"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ad1f8d686f1466144ed5e7554f84dd8ca">Set</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData1, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData2, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData3)</td></tr>
<tr class="memdesc:ad1f8d686f1466144ed5e7554f84dd8ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the string by concatenating all given strings. <br /></td></tr>
<tr class="separator:ad1f8d686f1466144ed5e7554f84dd8ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9439a4e2aaea88971a8f1b1a9621bf8"><td class="memItemLeft" align="right" valign="top"><a id="af9439a4e2aaea88971a8f1b1a9621bf8"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#af9439a4e2aaea88971a8f1b1a9621bf8">Set</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData1, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData2, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData3, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData4)</td></tr>
<tr class="memdesc:af9439a4e2aaea88971a8f1b1a9621bf8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the string by concatenating all given strings. <br /></td></tr>
<tr class="separator:af9439a4e2aaea88971a8f1b1a9621bf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50f9a0a297d093924e3ddac4d02857ba"><td class="memItemLeft" align="right" valign="top"><a id="a50f9a0a297d093924e3ddac4d02857ba"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a50f9a0a297d093924e3ddac4d02857ba">Set</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData1, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData2, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData3, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData4, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData5, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData6={})</td></tr>
<tr class="memdesc:a50f9a0a297d093924e3ddac4d02857ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the string by concatenating all given strings. <br /></td></tr>
<tr class="separator:a50f9a0a297d093924e3ddac4d02857ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70e179f101d5df0c8fec06ffc4df0d6f"><td class="memItemLeft" align="right" valign="top"><a id="a70e179f101d5df0c8fec06ffc4df0d6f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a70e179f101d5df0c8fec06ffc4df0d6f">SetPath</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData1, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData2, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData3={}, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData4={})</td></tr>
<tr class="memdesc:a70e179f101d5df0c8fec06ffc4df0d6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets several path pieces. Makes sure they are always properly separated by a slash. <br /></td></tr>
<tr class="separator:a70e179f101d5df0c8fec06ffc4df0d6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a140207da00da242ae5f9b9a85d10bcc7"><td class="memItemLeft" align="right" valign="top"><a id="a140207da00da242ae5f9b9a85d10bcc7"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a140207da00da242ae5f9b9a85d10bcc7">SetSubString_FromTo</a> (const char *pStart, const char *pEnd)</td></tr>
<tr class="memdesc:a140207da00da242ae5f9b9a85d10bcc7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the string starting at <em>pStart</em> up to <em>pEnd</em> (exclusive). <br /></td></tr>
<tr class="separator:a140207da00da242ae5f9b9a85d10bcc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a565d593b87226e53b10ed4c7d80110ba"><td class="memItemLeft" align="right" valign="top"><a id="a565d593b87226e53b10ed4c7d80110ba"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a565d593b87226e53b10ed4c7d80110ba">SetSubString_ElementCount</a> (const char *pStart, ezUInt32 uiElementCount)</td></tr>
<tr class="memdesc:a565d593b87226e53b10ed4c7d80110ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the string starting at <em>pStart</em> with a length of <em>uiElementCount</em> bytes. <br /></td></tr>
<tr class="separator:a565d593b87226e53b10ed4c7d80110ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab255f8ebc1d9fb1e550757ccce4dab60"><td class="memItemLeft" align="right" valign="top"><a id="ab255f8ebc1d9fb1e550757ccce4dab60"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ab255f8ebc1d9fb1e550757ccce4dab60">SetSubString_CharacterCount</a> (const char *pStart, ezUInt32 uiCharacterCount)</td></tr>
<tr class="memdesc:ab255f8ebc1d9fb1e550757ccce4dab60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the string starting at <em>pStart</em> with a length of <em>uiCharacterCount</em> characters. <br /></td></tr>
<tr class="separator:ab255f8ebc1d9fb1e550757ccce4dab60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a605f325ea4c9c3242454a16657e24ef7"><td class="memItemLeft" align="right" valign="top"><a id="a605f325ea4c9c3242454a16657e24ef7"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a605f325ea4c9c3242454a16657e24ef7">Append</a> (ezUInt32 uiChar)</td></tr>
<tr class="memdesc:a605f325ea4c9c3242454a16657e24ef7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a single Utf32 character. <br /></td></tr>
<tr class="separator:a605f325ea4c9c3242454a16657e24ef7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abeb5eb562d24b4c7c6b8819900e28766"><td class="memItemLeft" align="right" valign="top"><a id="abeb5eb562d24b4c7c6b8819900e28766"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#abeb5eb562d24b4c7c6b8819900e28766">Append</a> (const wchar_t *pData1, const wchar_t *pData2=nullptr, const wchar_t *pData3=nullptr, const wchar_t *pData4=nullptr, const wchar_t *pData5=nullptr, const wchar_t *pData6=nullptr)</td></tr>
<tr class="memdesc:abeb5eb562d24b4c7c6b8819900e28766"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings at the back of this string in one operation. <br /></td></tr>
<tr class="separator:abeb5eb562d24b4c7c6b8819900e28766"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa46c98c157b9a41149d55e88299c51e"><td class="memItemLeft" align="right" valign="top"><a id="afa46c98c157b9a41149d55e88299c51e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#afa46c98c157b9a41149d55e88299c51e">Append</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData1)</td></tr>
<tr class="memdesc:afa46c98c157b9a41149d55e88299c51e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings to the back of this string in one operation. <br /></td></tr>
<tr class="separator:afa46c98c157b9a41149d55e88299c51e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40f2121cba0cb1791f8dd60b8d5324bf"><td class="memItemLeft" align="right" valign="top"><a id="a40f2121cba0cb1791f8dd60b8d5324bf"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a40f2121cba0cb1791f8dd60b8d5324bf">Append</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData1, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData2)</td></tr>
<tr class="memdesc:a40f2121cba0cb1791f8dd60b8d5324bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings to the back of this string in one operation. <br /></td></tr>
<tr class="separator:a40f2121cba0cb1791f8dd60b8d5324bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae192668782d552ebff0ad7eeccadd26e"><td class="memItemLeft" align="right" valign="top"><a id="ae192668782d552ebff0ad7eeccadd26e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ae192668782d552ebff0ad7eeccadd26e">Append</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData1, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData2, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData3)</td></tr>
<tr class="memdesc:ae192668782d552ebff0ad7eeccadd26e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings to the back of this string in one operation. <br /></td></tr>
<tr class="separator:ae192668782d552ebff0ad7eeccadd26e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6437ae04df5d8f998c06c29b193e5de"><td class="memItemLeft" align="right" valign="top"><a id="ac6437ae04df5d8f998c06c29b193e5de"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ac6437ae04df5d8f998c06c29b193e5de">Append</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData1, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData2, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData3, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData4)</td></tr>
<tr class="memdesc:ac6437ae04df5d8f998c06c29b193e5de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings to the back of this string in one operation. <br /></td></tr>
<tr class="separator:ac6437ae04df5d8f998c06c29b193e5de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41d569cab30a9ac70ece5b92c0cd1a69"><td class="memItemLeft" align="right" valign="top"><a id="a41d569cab30a9ac70ece5b92c0cd1a69"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a41d569cab30a9ac70ece5b92c0cd1a69">Append</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData1, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData2, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData3, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData4, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData5, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData6={})</td></tr>
<tr class="memdesc:a41d569cab30a9ac70ece5b92c0cd1a69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings to the back of this string in one operation. <br /></td></tr>
<tr class="separator:a41d569cab30a9ac70ece5b92c0cd1a69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f2c181d7a18b4296425754854710f6b"><td class="memItemLeft" align="right" valign="top"><a id="a2f2c181d7a18b4296425754854710f6b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a2f2c181d7a18b4296425754854710f6b">Prepend</a> (ezUInt32 uiChar)</td></tr>
<tr class="memdesc:a2f2c181d7a18b4296425754854710f6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends a single Utf32 character. <br /></td></tr>
<tr class="separator:a2f2c181d7a18b4296425754854710f6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59f53f467d198e72c0e284a587ca73fa"><td class="memItemLeft" align="right" valign="top"><a id="a59f53f467d198e72c0e284a587ca73fa"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a59f53f467d198e72c0e284a587ca73fa">Prepend</a> (const wchar_t *pData1, const wchar_t *pData2=nullptr, const wchar_t *pData3=nullptr, const wchar_t *pData4=nullptr, const wchar_t *pData5=nullptr, const wchar_t *pData6=nullptr)</td></tr>
<tr class="memdesc:a59f53f467d198e72c0e284a587ca73fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends all the given strings to the front of this string in one operation. <br /></td></tr>
<tr class="separator:a59f53f467d198e72c0e284a587ca73fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae890cbc3ad97c234156ecef97c8a9e08"><td class="memItemLeft" align="right" valign="top"><a id="ae890cbc3ad97c234156ecef97c8a9e08"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ae890cbc3ad97c234156ecef97c8a9e08">Prepend</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData1, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData2={}, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData3={}, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData4={}, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData5={}, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sData6={})</td></tr>
<tr class="memdesc:ae890cbc3ad97c234156ecef97c8a9e08"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends all the given strings to the front of this string in one operation. <br /></td></tr>
<tr class="separator:ae890cbc3ad97c234156ecef97c8a9e08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b39836837902fd4b6ed2ee97349aeb8"><td class="memItemLeft" align="right" valign="top"><a id="a5b39836837902fd4b6ed2ee97349aeb8"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a5b39836837902fd4b6ed2ee97349aeb8">SetPrintf</a> (const char *szUtf8Format,...)</td></tr>
<tr class="memdesc:a5b39836837902fd4b6ed2ee97349aeb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets this string to the formatted string, uses printf-style formatting. <br /></td></tr>
<tr class="separator:a5b39836837902fd4b6ed2ee97349aeb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb151ac540a131b697f33de75e1daf46"><td class="memItemLeft" align="right" valign="top"><a id="abb151ac540a131b697f33de75e1daf46"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#abb151ac540a131b697f33de75e1daf46">SetPrintfArgs</a> (const char *szUtf8Format, va_list szArgs)</td></tr>
<tr class="memdesc:abb151ac540a131b697f33de75e1daf46"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets this string to the formatted string, uses printf-style formatting. <br /></td></tr>
<tr class="separator:abb151ac540a131b697f33de75e1daf46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16cc36445b2215661cee8e414a60e2b2"><td class="memItemLeft" align="right" valign="top"><a id="a16cc36445b2215661cee8e414a60e2b2"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a16cc36445b2215661cee8e414a60e2b2">SetFormat</a> (const <a class="el" href="../../d4/d2e/classez_format_string.htm">ezFormatString</a> &amp;string)</td></tr>
<tr class="memdesc:a16cc36445b2215661cee8e414a60e2b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces this with a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d4/d2e/classez_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">ezFormatString</a> for details. <br /></td></tr>
<tr class="separator:a16cc36445b2215661cee8e414a60e2b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8fc1d2b841c02923ca96392cc9497e7"><td class="memTemplParams" colspan="2"><a id="ae8fc1d2b841c02923ca96392cc9497e7"></a>
template&lt;typename... ARGS&gt; </td></tr>
<tr class="memitem:ae8fc1d2b841c02923ca96392cc9497e7"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ae8fc1d2b841c02923ca96392cc9497e7">SetFormat</a> (const char *szFormat, ARGS &amp;&amp;... args)</td></tr>
<tr class="memdesc:ae8fc1d2b841c02923ca96392cc9497e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces this with a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d4/d2e/classez_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">ezFormatString</a> for details. <br /></td></tr>
<tr class="separator:ae8fc1d2b841c02923ca96392cc9497e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa405316a4995b2fd4883d42f74db9f9a"><td class="memItemLeft" align="right" valign="top"><a id="aa405316a4995b2fd4883d42f74db9f9a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aa405316a4995b2fd4883d42f74db9f9a">AppendFormat</a> (const <a class="el" href="../../d4/d2e/classez_format_string.htm">ezFormatString</a> &amp;string)</td></tr>
<tr class="memdesc:aa405316a4995b2fd4883d42f74db9f9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d4/d2e/classez_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">ezFormatString</a> for details. <br /></td></tr>
<tr class="separator:aa405316a4995b2fd4883d42f74db9f9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2af0cad3e9a5baec55a556dd1401708c"><td class="memTemplParams" colspan="2"><a id="a2af0cad3e9a5baec55a556dd1401708c"></a>
template&lt;typename... ARGS&gt; </td></tr>
<tr class="memitem:a2af0cad3e9a5baec55a556dd1401708c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a2af0cad3e9a5baec55a556dd1401708c">AppendFormat</a> (const char *szFormat, ARGS &amp;&amp;... args)</td></tr>
<tr class="memdesc:a2af0cad3e9a5baec55a556dd1401708c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d4/d2e/classez_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">ezFormatString</a> for details. <br /></td></tr>
<tr class="separator:a2af0cad3e9a5baec55a556dd1401708c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab01f5cc58b199e7e202eb9d9434b8e34"><td class="memItemLeft" align="right" valign="top"><a id="ab01f5cc58b199e7e202eb9d9434b8e34"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ab01f5cc58b199e7e202eb9d9434b8e34">PrependFormat</a> (const <a class="el" href="../../d4/d2e/classez_format_string.htm">ezFormatString</a> &amp;string)</td></tr>
<tr class="memdesc:ab01f5cc58b199e7e202eb9d9434b8e34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d4/d2e/classez_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">ezFormatString</a> for details. <br /></td></tr>
<tr class="separator:ab01f5cc58b199e7e202eb9d9434b8e34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0aab851b5f86af410d3c54df6dbdb903"><td class="memTemplParams" colspan="2"><a id="a0aab851b5f86af410d3c54df6dbdb903"></a>
template&lt;typename... ARGS&gt; </td></tr>
<tr class="memitem:a0aab851b5f86af410d3c54df6dbdb903"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a0aab851b5f86af410d3c54df6dbdb903">PrependFormat</a> (const char *szFormat, ARGS &amp;&amp;... args)</td></tr>
<tr class="memdesc:a0aab851b5f86af410d3c54df6dbdb903"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d4/d2e/classez_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">ezFormatString</a> for details. <br /></td></tr>
<tr class="separator:a0aab851b5f86af410d3c54df6dbdb903"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a646a93dad4c0dc198196db2c8d31fd99"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a646a93dad4c0dc198196db2c8d31fd99">Shrink</a> (ezUInt32 uiShrinkCharsFront, ezUInt32 uiShrinkCharsBack)</td></tr>
<tr class="memdesc:a646a93dad4c0dc198196db2c8d31fd99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the first n and last m characters from this string.  <a href="../../d3/d88/classez_string_builder.htm#a646a93dad4c0dc198196db2c8d31fd99">More...</a><br /></td></tr>
<tr class="separator:a646a93dad4c0dc198196db2c8d31fd99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8e97941dfc6747eabf7e8dfb1c8c783"><td class="memItemLeft" align="right" valign="top"><a id="aa8e97941dfc6747eabf7e8dfb1c8c783"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aa8e97941dfc6747eabf7e8dfb1c8c783">Reserve</a> (ezUInt32 uiNumElements)</td></tr>
<tr class="memdesc:aa8e97941dfc6747eabf7e8dfb1c8c783"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reserves uiNumElements bytes. <br /></td></tr>
<tr class="separator:aa8e97941dfc6747eabf7e8dfb1c8c783"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e617f7559a49a9a838defed90a7272f"><td class="memItemLeft" align="right" valign="top"><a id="a3e617f7559a49a9a838defed90a7272f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a3e617f7559a49a9a838defed90a7272f">ReplaceSubString</a> (const char *szStartPos, const char *szEndPos, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sReplaceWith)</td></tr>
<tr class="memdesc:a3e617f7559a49a9a838defed90a7272f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the string that starts at szStartPos and ends at szEndPos with the string szReplaceWith. <br /></td></tr>
<tr class="separator:a3e617f7559a49a9a838defed90a7272f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a256a6671500684d47ced992673752e88"><td class="memItemLeft" align="right" valign="top"><a id="a256a6671500684d47ced992673752e88"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a256a6671500684d47ced992673752e88">Insert</a> (const char *szInsertAtPos, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sTextToInsert)</td></tr>
<tr class="memdesc:a256a6671500684d47ced992673752e88"><td class="mdescLeft">&#160;</td><td class="mdescRight">A wrapper around ReplaceSubString. Will insert the given string at szInsertAtPos. <br /></td></tr>
<tr class="separator:a256a6671500684d47ced992673752e88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9e3819efaa857a532b63a7c204f5b5f"><td class="memItemLeft" align="right" valign="top"><a id="ad9e3819efaa857a532b63a7c204f5b5f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ad9e3819efaa857a532b63a7c204f5b5f">Remove</a> (const char *szRemoveFromPos, const char *szRemoveToPos)</td></tr>
<tr class="memdesc:ad9e3819efaa857a532b63a7c204f5b5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">A wrapper around ReplaceSubString. Will remove the substring which starts at szRemoveFromPos and ends at szRemoveToPos. <br /></td></tr>
<tr class="separator:ad9e3819efaa857a532b63a7c204f5b5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa958e242c7c3d1cd71a693cdc5924bd"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aaa958e242c7c3d1cd71a693cdc5924bd">ReplaceFirst</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sSearchFor, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:aaa958e242c7c3d1cd71a693cdc5924bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the first occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the beginning).  <a href="../../d3/d88/classez_string_builder.htm#aaa958e242c7c3d1cd71a693cdc5924bd">More...</a><br /></td></tr>
<tr class="separator:aaa958e242c7c3d1cd71a693cdc5924bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60229c9cea43fc02d7bbf1cfe770972a"><td class="memItemLeft" align="right" valign="top"><a id="a60229c9cea43fc02d7bbf1cfe770972a"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a60229c9cea43fc02d7bbf1cfe770972a">ReplaceFirst_NoCase</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sSearchFor, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:a60229c9cea43fc02d7bbf1cfe770972a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceFirst. <br /></td></tr>
<tr class="separator:a60229c9cea43fc02d7bbf1cfe770972a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ec854555945add5d7a2be8115e9bf72"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a7ec854555945add5d7a2be8115e9bf72">ReplaceLast</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sSearchFor, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:a7ec854555945add5d7a2be8115e9bf72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the last occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the end).  <a href="../../d3/d88/classez_string_builder.htm#a7ec854555945add5d7a2be8115e9bf72">More...</a><br /></td></tr>
<tr class="separator:a7ec854555945add5d7a2be8115e9bf72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae26fdc1474dbf6fd17f0747e8a2b0445"><td class="memItemLeft" align="right" valign="top"><a id="ae26fdc1474dbf6fd17f0747e8a2b0445"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ae26fdc1474dbf6fd17f0747e8a2b0445">ReplaceLast_NoCase</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sSearchFor, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:ae26fdc1474dbf6fd17f0747e8a2b0445"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceLast. <br /></td></tr>
<tr class="separator:ae26fdc1474dbf6fd17f0747e8a2b0445"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab00bf8210b069a78433b7561fd78a6e4"><td class="memItemLeft" align="right" valign="top"><a id="ab00bf8210b069a78433b7561fd78a6e4"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ab00bf8210b069a78433b7561fd78a6e4">ReplaceAll</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sSearchFor, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sReplacement)</td></tr>
<tr class="memdesc:ab00bf8210b069a78433b7561fd78a6e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces all occurrences of szSearchFor by szReplacement. Returns the number of replacements. <br /></td></tr>
<tr class="separator:ab00bf8210b069a78433b7561fd78a6e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace819585e6c2c8705c04bcf155b8f829"><td class="memItemLeft" align="right" valign="top"><a id="ace819585e6c2c8705c04bcf155b8f829"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ace819585e6c2c8705c04bcf155b8f829">ReplaceAll_NoCase</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sSearchFor, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sReplacement)</td></tr>
<tr class="memdesc:ace819585e6c2c8705c04bcf155b8f829"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceAll. <br /></td></tr>
<tr class="separator:ace819585e6c2c8705c04bcf155b8f829"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60ff8f79ca29e14d0eea17e41af5865f"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a60ff8f79ca29e14d0eea17e41af5865f">ReplaceWholeWord</a> (const char *szSearchFor, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sReplaceWith, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> isDelimiterCB)</td></tr>
<tr class="memdesc:a60ff8f79ca29e14d0eea17e41af5865f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the first occurrence of szSearchFor by szReplaceWith, if szSearchFor was found to be a 'whole word', as indicated by the delimiter function IsDelimiterCB.  <a href="../../d3/d88/classez_string_builder.htm#a60ff8f79ca29e14d0eea17e41af5865f">More...</a><br /></td></tr>
<tr class="separator:a60ff8f79ca29e14d0eea17e41af5865f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9eb493b73c7334149109ff1c8a87233"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#af9eb493b73c7334149109ff1c8a87233">ReplaceWholeWord_NoCase</a> (const char *szSearchFor, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sReplaceWith, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> isDelimiterCB)</td></tr>
<tr class="memdesc:af9eb493b73c7334149109ff1c8a87233"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceWholeWord.  <a href="../../d3/d88/classez_string_builder.htm#af9eb493b73c7334149109ff1c8a87233">More...</a><br /></td></tr>
<tr class="separator:af9eb493b73c7334149109ff1c8a87233"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15e638eea1fba0bf18cf62e795e69ffa"><td class="memItemLeft" align="right" valign="top">ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a15e638eea1fba0bf18cf62e795e69ffa">ReplaceWholeWordAll</a> (const char *szSearchFor, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sReplaceWith, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> isDelimiterCB)</td></tr>
<tr class="memdesc:a15e638eea1fba0bf18cf62e795e69ffa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces all occurrences of szSearchFor by szReplaceWith, if szSearchFor was found to be a 'whole word', as indicated by the delimiter function IsDelimiterCB.  <a href="../../d3/d88/classez_string_builder.htm#a15e638eea1fba0bf18cf62e795e69ffa">More...</a><br /></td></tr>
<tr class="separator:a15e638eea1fba0bf18cf62e795e69ffa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6bc3f7315d175093c75bcec88b16508"><td class="memItemLeft" align="right" valign="top">ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ac6bc3f7315d175093c75bcec88b16508">ReplaceWholeWordAll_NoCase</a> (const char *szSearchFor, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sReplaceWith, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> isDelimiterCB)</td></tr>
<tr class="memdesc:ac6bc3f7315d175093c75bcec88b16508"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceWholeWordAll.  <a href="../../d3/d88/classez_string_builder.htm#ac6bc3f7315d175093c75bcec88b16508">More...</a><br /></td></tr>
<tr class="separator:ac6bc3f7315d175093c75bcec88b16508"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d7a28d81299e4d46181d7667e259918"><td class="memItemLeft" align="right" valign="top"><a id="a6d7a28d81299e4d46181d7667e259918"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a6d7a28d81299e4d46181d7667e259918">ReadAll</a> (<a class="el" href="../../d2/d19/classez_stream_reader.htm">ezStreamReader</a> &amp;inout_stream)</td></tr>
<tr class="memdesc:a6d7a28d81299e4d46181d7667e259918"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the current string with the content from the stream. Reads the stream to its end. <br /></td></tr>
<tr class="separator:a6d7a28d81299e4d46181d7667e259918"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb4e8da454e08207f376cb95ec372878"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#acb4e8da454e08207f376cb95ec372878">MakeCleanPath</a> ()</td></tr>
<tr class="memdesc:acb4e8da454e08207f376cb95ec372878"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes "../" where possible, replaces all path separators with /, removes double slashes.  <a href="../../d3/d88/classez_string_builder.htm#acb4e8da454e08207f376cb95ec372878">More...</a><br /></td></tr>
<tr class="separator:acb4e8da454e08207f376cb95ec372878"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40dff448589cc69f85fce8d72922ae22"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a40dff448589cc69f85fce8d72922ae22">PathParentDirectory</a> (ezUInt32 uiLevelsUp=1)</td></tr>
<tr class="memdesc:a40dff448589cc69f85fce8d72922ae22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modifies this string to point to the parent directory.  <a href="../../d3/d88/classez_string_builder.htm#a40dff448589cc69f85fce8d72922ae22">More...</a><br /></td></tr>
<tr class="separator:a40dff448589cc69f85fce8d72922ae22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab79507e3dccd411cb2df68c60d560677"><td class="memItemLeft" align="right" valign="top"><a id="ab79507e3dccd411cb2df68c60d560677"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ab79507e3dccd411cb2df68c60d560677">AppendPath</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sPath1, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sPath2={}, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sPath3={}, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sPath4={})</td></tr>
<tr class="memdesc:ab79507e3dccd411cb2df68c60d560677"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends several path pieces. Makes sure they are always properly separated by a slash. <br /></td></tr>
<tr class="separator:ab79507e3dccd411cb2df68c60d560677"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dd73a8110229df2c071947687d97a6f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a7dd73a8110229df2c071947687d97a6f">AppendWithSeparator</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sSeparator, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sText1, <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sText2=<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>(), <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sText3=<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>(), <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sText4=<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>(), <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sText5=<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>(), <a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sText6=<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>())</td></tr>
<tr class="memdesc:a7dd73a8110229df2c071947687d97a6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="../../d3/d88/classez_string_builder.htm#a605f325ea4c9c3242454a16657e24ef7" title="Appends a single Utf32 character.">Append()</a> but the very first argument is a separator that is only appended (once) if the existing string is not empty and does not already end with the separator.  <a href="../../d3/d88/classez_string_builder.htm#a7dd73a8110229df2c071947687d97a6f">More...</a><br /></td></tr>
<tr class="separator:a7dd73a8110229df2c071947687d97a6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0a0d6efadc59b8b9a615913118a9246"><td class="memItemLeft" align="right" valign="top"><a id="af0a0d6efadc59b8b9a615913118a9246"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#af0a0d6efadc59b8b9a615913118a9246">ChangeFileName</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sNewFileName)</td></tr>
<tr class="memdesc:af0a0d6efadc59b8b9a615913118a9246"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the file name part of the path, keeps the extension intact (if there is any). <br /></td></tr>
<tr class="separator:af0a0d6efadc59b8b9a615913118a9246"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5409f6b25c257b8cbbd7d5621834e6a3"><td class="memItemLeft" align="right" valign="top"><a id="a5409f6b25c257b8cbbd7d5621834e6a3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a5409f6b25c257b8cbbd7d5621834e6a3">ChangeFileNameAndExtension</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sNewFileNameWithExtension)</td></tr>
<tr class="memdesc:a5409f6b25c257b8cbbd7d5621834e6a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the file name and the extension part of the path. <br /></td></tr>
<tr class="separator:a5409f6b25c257b8cbbd7d5621834e6a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03e7869e8a31a64ee4259e797fb80c76"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a03e7869e8a31a64ee4259e797fb80c76">ChangeFileExtension</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sNewExtension, bool bFullExtension=false)</td></tr>
<tr class="memdesc:a03e7869e8a31a64ee4259e797fb80c76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Only changes the file extension of the path. If there is no extension yet, one is appended (including a dot).  <a href="../../d3/d88/classez_string_builder.htm#a03e7869e8a31a64ee4259e797fb80c76">More...</a><br /></td></tr>
<tr class="separator:a03e7869e8a31a64ee4259e797fb80c76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1163357bb5018104bf01786ffc0ff6d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#af1163357bb5018104bf01786ffc0ff6d">RemoveFileExtension</a> (bool bFullExtension=false)</td></tr>
<tr class="memdesc:af1163357bb5018104bf01786ffc0ff6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">If any extension exists, it is removed, including the dot before it.  <a href="../../d3/d88/classez_string_builder.htm#af1163357bb5018104bf01786ffc0ff6d">More...</a><br /></td></tr>
<tr class="separator:af1163357bb5018104bf01786ffc0ff6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d14277bf37c42065340015ac40ada67"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a2d14277bf37c42065340015ac40ada67">MakeRelativeTo</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sAbsolutePathToMakeThisRelativeTo)</td></tr>
<tr class="memdesc:a2d14277bf37c42065340015ac40ada67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts this path into a relative path to the path with the awesome variable name 'szAbsolutePathToMakeThisRelativeTo'.  <a href="../../d3/d88/classez_string_builder.htm#a2d14277bf37c42065340015ac40ada67">More...</a><br /></td></tr>
<tr class="separator:a2d14277bf37c42065340015ac40ada67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac851131c262fee1f9ae7a9e3e16da31b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ac851131c262fee1f9ae7a9e3e16da31b">MakePathSeparatorsNative</a> ()</td></tr>
<tr class="memdesc:ac851131c262fee1f9ae7a9e3e16da31b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cleans this path up and replaces all path separators by the OS specific separator.  <a href="../../d3/d88/classez_string_builder.htm#ac851131c262fee1f9ae7a9e3e16da31b">More...</a><br /></td></tr>
<tr class="separator:ac851131c262fee1f9ae7a9e3e16da31b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5dfcc70fecd5f6493c82513c523b676f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a5dfcc70fecd5f6493c82513c523b676f">IsPathBelowFolder</a> (const char *szPathToFolder)</td></tr>
<tr class="memdesc:a5dfcc70fecd5f6493c82513c523b676f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether this path is a sub-path of the given path.  <a href="../../d3/d88/classez_string_builder.htm#a5dfcc70fecd5f6493c82513c523b676f">More...</a><br /></td></tr>
<tr class="separator:a5dfcc70fecd5f6493c82513c523b676f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1944172cbf1eeb3faef4c4ae8c7c942"><td class="memItemLeft" align="right" valign="top"><a id="ae1944172cbf1eeb3faef4c4ae8c7c942"></a>
ezUInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ae1944172cbf1eeb3faef4c4ae8c7c942">GetHeapMemoryUsage</a> () const</td></tr>
<tr class="memdesc:ae1944172cbf1eeb3faef4c4ae8c7c942"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of bytes that are currently allocated on the heap. <br /></td></tr>
<tr class="separator:ae1944172cbf1eeb3faef4c4ae8c7c942"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6629b25ebffffc97501e6a24e78bb28"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ae6629b25ebffffc97501e6a24e78bb28">Trim</a> (const char *szTrimChars=&quot; \f\n\r\t\v&quot;)</td></tr>
<tr class="memdesc:ae6629b25ebffffc97501e6a24e78bb28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the start and end that appear in the given strings.  <a href="../../d3/d88/classez_string_builder.htm#ae6629b25ebffffc97501e6a24e78bb28">More...</a><br /></td></tr>
<tr class="separator:ae6629b25ebffffc97501e6a24e78bb28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57730d24b21287cd1b04b09de1a0f6cd"><td class="memItemLeft" align="right" valign="top"><a id="a57730d24b21287cd1b04b09de1a0f6cd"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a57730d24b21287cd1b04b09de1a0f6cd">Trim</a> (const char *szTrimCharsStart, const char *szTrimCharsEnd)</td></tr>
<tr class="memdesc:a57730d24b21287cd1b04b09de1a0f6cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the start and/or end that appear in the given strings. <br /></td></tr>
<tr class="separator:a57730d24b21287cd1b04b09de1a0f6cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a541435f71c6b4cc7994ba75c58e59a73"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a541435f71c6b4cc7994ba75c58e59a73">TrimLeft</a> (const char *szTrimChars=&quot; \f\n\r\t\v&quot;)</td></tr>
<tr class="memdesc:a541435f71c6b4cc7994ba75c58e59a73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the start that appear in the given strings.  <a href="../../d3/d88/classez_string_builder.htm#a541435f71c6b4cc7994ba75c58e59a73">More...</a><br /></td></tr>
<tr class="separator:a541435f71c6b4cc7994ba75c58e59a73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f18fa8ae9436794bc90aa218d88940f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#a7f18fa8ae9436794bc90aa218d88940f">TrimRight</a> (const char *szTrimChars=&quot; \f\n\r\t\v&quot;)</td></tr>
<tr class="memdesc:a7f18fa8ae9436794bc90aa218d88940f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the end that appear in the given strings.  <a href="../../d3/d88/classez_string_builder.htm#a7f18fa8ae9436794bc90aa218d88940f">More...</a><br /></td></tr>
<tr class="separator:a7f18fa8ae9436794bc90aa218d88940f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad068c80ae201219b2288a53888895d82"><td class="memItemLeft" align="right" valign="top"><a id="ad068c80ae201219b2288a53888895d82"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#ad068c80ae201219b2288a53888895d82">TrimWordStart</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sWord)</td></tr>
<tr class="memdesc:ad068c80ae201219b2288a53888895d82"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the string starts with the given word (case insensitive), it is removed and the function returns true. <br /></td></tr>
<tr class="separator:ad068c80ae201219b2288a53888895d82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5af41d0eecea261dde9e8e2ffc266e4"><td class="memItemLeft" align="right" valign="top"><a id="aa5af41d0eecea261dde9e8e2ffc266e4"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d88/classez_string_builder.htm#aa5af41d0eecea261dde9e8e2ffc266e4">TrimWordEnd</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sWord)</td></tr>
<tr class="memdesc:aa5af41d0eecea261dde9e8e2ffc266e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the string ends with the given word (case insensitive), it is removed and the function returns true. <br /></td></tr>
<tr class="separator:aa5af41d0eecea261dde9e8e2ffc266e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_structez_string_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_structez_string_base')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt; ezStringBuilder &gt;</a></td></tr>
<tr class="memitem:a3b169646f62ef8a8d33b63e2b8731afb inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a3b169646f62ef8a8d33b63e2b8731afb"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a3b169646f62ef8a8d33b63e2b8731afb">IsEmpty</a> () const</td></tr>
<tr class="memdesc:a3b169646f62ef8a8d33b63e2b8731afb inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the string is an empty string. <br /></td></tr>
<tr class="separator:a3b169646f62ef8a8d33b63e2b8731afb inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2292b0dc69f7889157e6488455f5fd6 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="aa2292b0dc69f7889157e6488455f5fd6"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#aa2292b0dc69f7889157e6488455f5fd6">StartsWith</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sStartsWith) const</td></tr>
<tr class="memdesc:aa2292b0dc69f7889157e6488455f5fd6 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. <br /></td></tr>
<tr class="separator:aa2292b0dc69f7889157e6488455f5fd6 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5820e97ac4c87313b8874f9f03e6b902 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a5820e97ac4c87313b8874f9f03e6b902"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a5820e97ac4c87313b8874f9f03e6b902">StartsWith_NoCase</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sStartsWith) const</td></tr>
<tr class="memdesc:a5820e97ac4c87313b8874f9f03e6b902 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:a5820e97ac4c87313b8874f9f03e6b902 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bc84753ec74d1692958ad6c0b60a065 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a0bc84753ec74d1692958ad6c0b60a065"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a0bc84753ec74d1692958ad6c0b60a065">EndsWith</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sEndsWith) const</td></tr>
<tr class="memdesc:a0bc84753ec74d1692958ad6c0b60a065 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. <br /></td></tr>
<tr class="separator:a0bc84753ec74d1692958ad6c0b60a065 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af063ac74d2c0a66f0bbddb62d16c5c50 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="af063ac74d2c0a66f0bbddb62d16c5c50"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#af063ac74d2c0a66f0bbddb62d16c5c50">EndsWith_NoCase</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sEndsWith) const</td></tr>
<tr class="memdesc:af063ac74d2c0a66f0bbddb62d16c5c50 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:af063ac74d2c0a66f0bbddb62d16c5c50 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7526c38e876eb72118bbb37ab1e36732 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a7526c38e876eb72118bbb37ab1e36732">FindSubString</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a7526c38e876eb72118bbb37ab1e36732 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a836c2433b152208146b07be5182aa90d inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a836c2433b152208146b07be5182aa90d">FindSubString_NoCase</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a836c2433b152208146b07be5182aa90d inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1119c28eec83e75e524b7355024cd636 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a1119c28eec83e75e524b7355024cd636">FindLastSubString</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a1119c28eec83e75e524b7355024cd636 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a549f29a89a36526391f4e407ca9f3a4b inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a549f29a89a36526391f4e407ca9f3a4b">FindLastSubString_NoCase</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a549f29a89a36526391f4e407ca9f3a4b inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcc7196e4bb81b8b3e2da961dd917fde inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#afcc7196e4bb81b8b3e2da961dd917fde">FindWholeWord</a> (const char *szSearchFor, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> isDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:afcc7196e4bb81b8b3e2da961dd917fde inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab40b7ada5f552ec62ad5c2a87d9eb2e9 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#ab40b7ada5f552ec62ad5c2a87d9eb2e9">FindWholeWord_NoCase</a> (const char *szSearchFor, <a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> isDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:ab40b7ada5f552ec62ad5c2a87d9eb2e9 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4aa8e43c8a2bf68e642ad1bfbffb9fa inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ab4aa8e43c8a2bf68e642ad1bfbffb9fa"></a>
ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#ab4aa8e43c8a2bf68e642ad1bfbffb9fa">Compare</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther) const</td></tr>
<tr class="memdesc:ab4aa8e43c8a2bf68e642ad1bfbffb9fa inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. <br /></td></tr>
<tr class="separator:ab4aa8e43c8a2bf68e642ad1bfbffb9fa inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad59a099496386a4dc0225f2564a9e9cb inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#ad59a099496386a4dc0225f2564a9e9cb">CompareN</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:ad59a099496386a4dc0225f2564a9e9cb inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11cc4a3305c78e7e5f062073562b78b1 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a11cc4a3305c78e7e5f062073562b78b1"></a>
ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a11cc4a3305c78e7e5f062073562b78b1">Compare_NoCase</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther) const</td></tr>
<tr class="memdesc:a11cc4a3305c78e7e5f062073562b78b1 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. Case insensitive. <br /></td></tr>
<tr class="separator:a11cc4a3305c78e7e5f062073562b78b1 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa234e5c9e6b3fb6e0296d00fd863e726 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top">ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#aa234e5c9e6b3fb6e0296d00fd863e726">CompareN_NoCase</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:aa234e5c9e6b3fb6e0296d00fd863e726 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1283e59a13f463d2137726c0fa2573f inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="af1283e59a13f463d2137726c0fa2573f"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#af1283e59a13f463d2137726c0fa2573f">IsEqual</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther) const</td></tr>
<tr class="memdesc:af1283e59a13f463d2137726c0fa2573f inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:af1283e59a13f463d2137726c0fa2573f inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa75c907e8543d51e46e9715427a2e3db inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="aa75c907e8543d51e46e9715427a2e3db"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#aa75c907e8543d51e46e9715427a2e3db">IsEqualN</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:aa75c907e8543d51e46e9715427a2e3db inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:aa75c907e8543d51e46e9715427a2e3db inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a819d3861f3efcaeb4393268840a43c37 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a819d3861f3efcaeb4393268840a43c37"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a819d3861f3efcaeb4393268840a43c37">IsEqual_NoCase</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther) const</td></tr>
<tr class="memdesc:a819d3861f3efcaeb4393268840a43c37 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:a819d3861f3efcaeb4393268840a43c37 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a746a8a1119e1eee5a5671bada6877265 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a746a8a1119e1eee5a5671bada6877265"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a746a8a1119e1eee5a5671bada6877265">IsEqualN_NoCase</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther, ezUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:a746a8a1119e1eee5a5671bada6877265 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:a746a8a1119e1eee5a5671bada6877265 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05bec3cf5581b35aa18849239b2471c6 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a05bec3cf5581b35aa18849239b2471c6"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a05bec3cf5581b35aa18849239b2471c6">ComputeCharacterPosition</a> (ezUInt32 uiCharacterIndex) const</td></tr>
<tr class="memdesc:a05bec3cf5581b35aa18849239b2471c6 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the pointer to the n-th character in the string. This is a linear search from the start. <br /></td></tr>
<tr class="separator:a05bec3cf5581b35aa18849239b2471c6 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a630aa4b168172aef7b32f8085148ed8e inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/ddc/structez_string_iterator.htm">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">GetIteratorFront</a> () const</td></tr>
<tr class="memdesc:a630aa4b168172aef7b32f8085148ed8e inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very first character.  <a href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">More...</a><br /></td></tr>
<tr class="separator:a630aa4b168172aef7b32f8085148ed8e inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3821af6b610f6c40a46336f7accc0c7e inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">GetIteratorBack</a> () const</td></tr>
<tr class="memdesc:a3821af6b610f6c40a46336f7accc0c7e inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very last character (NOT the end).  <a href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">More...</a><br /></td></tr>
<tr class="separator:a3821af6b610f6c40a46336f7accc0c7e inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f255aa67639f3d3c0abd7a55a8ee9e3 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a2f255aa67639f3d3c0abd7a55a8ee9e3"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a2f255aa67639f3d3c0abd7a55a8ee9e3">operator ezStringView</a> () const</td></tr>
<tr class="memdesc:a2f255aa67639f3d3c0abd7a55a8ee9e3 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:a2f255aa67639f3d3c0abd7a55a8ee9e3 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dc8b54007099ca61b4b937923e7987b inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a4dc8b54007099ca61b4b937923e7987b"></a>
<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a4dc8b54007099ca61b4b937923e7987b">GetView</a> () const</td></tr>
<tr class="memdesc:a4dc8b54007099ca61b4b937923e7987b inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:a4dc8b54007099ca61b4b937923e7987b inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c0fec33cd00f409985b68a820ead16f inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a3c0fec33cd00f409985b68a820ead16f"></a>
EZ_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a3c0fec33cd00f409985b68a820ead16f">operator const char *</a> () const</td></tr>
<tr class="memdesc:a3c0fec33cd00f409985b68a820ead16f inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the internal Utf8 string. <br /></td></tr>
<tr class="separator:a3c0fec33cd00f409985b68a820ead16f inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a328c33c66707ecea8ed93512a5ad2465 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a328c33c66707ecea8ed93512a5ad2465"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a328c33c66707ecea8ed93512a5ad2465">Split</a> (bool bReturnEmptyStrings, Container &amp;ref_output, const char *szSeparator1, const char *szSeparator2=nullptr, const char *szSeparator3=nullptr, const char *szSeparator4=nullptr, const char *szSeparator5=nullptr, const char *szSeparator6=nullptr) const</td></tr>
<tr class="memdesc:a328c33c66707ecea8ed93512a5ad2465 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills the given container with <a class="el" href="../../d9/d18/classez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a>'s which represent each found substring. If bReturnEmptyStrings is true, even empty strings between separators are returned. Output must be a container that stores <a class="el" href="../../d9/d18/classez_string_view.htm" title="ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">ezStringView</a>'s and provides the functions 'Clear' and 'Append'. szSeparator1 to szSeparator6 are strings which act as separators and indicate where to split the string. This string itself will not be modified. <br /></td></tr>
<tr class="separator:a328c33c66707ecea8ed93512a5ad2465 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31f4090e3be6134eb1702f909cd3ba33 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a31f4090e3be6134eb1702f909cd3ba33"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a31f4090e3be6134eb1702f909cd3ba33">HasAnyExtension</a> () const</td></tr>
<tr class="memdesc:a31f4090e3be6134eb1702f909cd3ba33 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given path has any file extension. <br /></td></tr>
<tr class="separator:a31f4090e3be6134eb1702f909cd3ba33 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdbb18858405f981767e683d858fb73c inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="afdbb18858405f981767e683d858fb73c"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#afdbb18858405f981767e683d858fb73c">HasExtension</a> (<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sExtension) const</td></tr>
<tr class="memdesc:afdbb18858405f981767e683d858fb73c inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given path ends with the given extension. szExtension should start with a '.' for performance reasons, but it will work without a '.' too. <br /></td></tr>
<tr class="separator:afdbb18858405f981767e683d858fb73c inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5643d2cd395334ef41df8d253cfe85b1 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a5643d2cd395334ef41df8d253cfe85b1"></a>
<a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a5643d2cd395334ef41df8d253cfe85b1">GetFileExtension</a> (bool bFullExtension=false) const</td></tr>
<tr class="memdesc:a5643d2cd395334ef41df8d253cfe85b1 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file extension of the given path. Will be empty, if the path does not end with a proper extension. <br /></td></tr>
<tr class="separator:a5643d2cd395334ef41df8d253cfe85b1 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e36684efb429bac40152974cd8ca817 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a6e36684efb429bac40152974cd8ca817">GetFileName</a> () const</td></tr>
<tr class="memdesc:a6e36684efb429bac40152974cd8ca817 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file name of a path, excluding the path and extension.  <a href="../../dd/d69/structez_string_base.htm#a6e36684efb429bac40152974cd8ca817">More...</a><br /></td></tr>
<tr class="separator:a6e36684efb429bac40152974cd8ca817 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a839a783b7199310da98f5e52f7174c43 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a839a783b7199310da98f5e52f7174c43">GetFileNameAndExtension</a> () const</td></tr>
<tr class="memdesc:a839a783b7199310da98f5e52f7174c43 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the substring that represents the file name including the file extension.  <a href="../../dd/d69/structez_string_base.htm#a839a783b7199310da98f5e52f7174c43">More...</a><br /></td></tr>
<tr class="separator:a839a783b7199310da98f5e52f7174c43 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcd136562b6d279801aa6653c3dbd7c8 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#abcd136562b6d279801aa6653c3dbd7c8">GetFileDirectory</a> () const</td></tr>
<tr class="memdesc:abcd136562b6d279801aa6653c3dbd7c8 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the directory of the given file, which is the substring up to the last path separator.  <a href="../../dd/d69/structez_string_base.htm#abcd136562b6d279801aa6653c3dbd7c8">More...</a><br /></td></tr>
<tr class="separator:abcd136562b6d279801aa6653c3dbd7c8 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2bb565f17573d92b3f995ede720b915 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="aa2bb565f17573d92b3f995ede720b915"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#aa2bb565f17573d92b3f995ede720b915">IsAbsolutePath</a> () const</td></tr>
<tr class="memdesc:aa2bb565f17573d92b3f995ede720b915 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents an absolute path on the current OS. <br /></td></tr>
<tr class="separator:aa2bb565f17573d92b3f995ede720b915 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2fc8eecf7a508bcb383b70ced7ffc25 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ac2fc8eecf7a508bcb383b70ced7ffc25"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#ac2fc8eecf7a508bcb383b70ced7ffc25">IsRelativePath</a> () const</td></tr>
<tr class="memdesc:ac2fc8eecf7a508bcb383b70ced7ffc25 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents a relative path on the current OS. <br /></td></tr>
<tr class="separator:ac2fc8eecf7a508bcb383b70ced7ffc25 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5981da7976e9bd420dc871da0bfab1a2 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a5981da7976e9bd420dc871da0bfab1a2"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a5981da7976e9bd420dc871da0bfab1a2">IsRootedPath</a> () const</td></tr>
<tr class="memdesc:a5981da7976e9bd420dc871da0bfab1a2 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents a 'rooted' path. See <a class="el" href="../../d4/d6b/classez_file_system.htm" title="The ezFileSystem provides high-level functionality to manage files in a virtual file system.">ezFileSystem</a> for details. <br /></td></tr>
<tr class="separator:a5981da7976e9bd420dc871da0bfab1a2 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a501c95c64bd9476f553ea361d0f94a33 inherit pub_methods_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d69/structez_string_base.htm#a501c95c64bd9476f553ea361d0f94a33">GetRootedPathRootName</a> () const</td></tr>
<tr class="memdesc:a501c95c64bd9476f553ea361d0f94a33 inherit pub_methods_structez_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extracts the root name from a rooted path.  <a href="../../dd/d69/structez_string_base.htm#a501c95c64bd9476f553ea361d0f94a33">More...</a><br /></td></tr>
<tr class="separator:a501c95c64bd9476f553ea361d0f94a33 inherit pub_methods_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:afcc265e5360a53cfe7ae05cadefeedbd"><td class="memTemplParams" colspan="2"><a id="afcc265e5360a53cfe7ae05cadefeedbd"></a>
template&lt;ezUInt16 T&gt; </td></tr>
<tr class="memitem:afcc265e5360a53cfe7ae05cadefeedbd"><td class="memTemplItemLeft" align="right" valign="top">struct&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ezHybridStringBase</b></td></tr>
<tr class="separator:afcc265e5360a53cfe7ae05cadefeedbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_structez_string_base"><td colspan="2" onclick="javascript:toggleInherit('pub_types_structez_string_base')"><img src="../../closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt; ezStringBuilder &gt;</a></td></tr>
<tr class="memitem:a6d70336d6bc99eb0ffc416dc5244e4ae inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a6d70336d6bc99eb0ffc416dc5244e4ae"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>iterator</b> = <a class="el" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a></td></tr>
<tr class="separator:a6d70336d6bc99eb0ffc416dc5244e4ae inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a531d3947b6eec62f004ca77f662b78e1 inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a531d3947b6eec62f004ca77f662b78e1"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_iterator</b> = <a class="el" href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a></td></tr>
<tr class="separator:a531d3947b6eec62f004ca77f662b78e1 inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b2f3b0362604dfa9bbf4f157ac841d2 inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a4b2f3b0362604dfa9bbf4f157ac841d2"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>reverse_iterator</b> = <a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a></td></tr>
<tr class="separator:a4b2f3b0362604dfa9bbf4f157ac841d2 inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae708cb6d1cfcb5ca696272434087266c inherit pub_types_structez_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ae708cb6d1cfcb5ca696272434087266c"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_reverse_iterator</b> = <a class="el" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a></td></tr>
<tr class="separator:ae708cb6d1cfcb5ca696272434087266c inherit pub_types_structez_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="../../d3/d88/classez_string_builder.htm" title="ezStringBuilder is a class that is meant for creating and modifying strings.">ezStringBuilder</a> is a class that is meant for creating and modifying strings. </p>
<p>It is not meant to store strings for a longer duration. Each <a class="el" href="../../d3/d88/classez_string_builder.htm" title="ezStringBuilder is a class that is meant for creating and modifying strings.">ezStringBuilder</a> uses an <a class="el" href="../../d8/deb/classez_hybrid_array.htm" title="A hybrid array uses in-place storage to handle the first few elements without any allocation....">ezHybridArray</a> to allocate a large buffer on the stack, such that string manipulations are possible without memory allocations, unless the string is too large. No sharing of data happens between <a class="el" href="../../d3/d88/classez_string_builder.htm" title="ezStringBuilder is a class that is meant for creating and modifying strings.">ezStringBuilder</a> instances, as it is expected that they will be modified anyway. Instead all data is always copied, therefore instances should not be passed by copy. All string data is stored Utf8 encoded, just as all other string classes, too. That makes it difficult to modify individual characters. Instead you should prefer high-level functions such as 'ReplaceSubString'. If individual characters must be modified, it might make more sense to create a second <a class="el" href="../../d3/d88/classez_string_builder.htm" title="ezStringBuilder is a class that is meant for creating and modifying strings.">ezStringBuilder</a>, and iterate over the first while rebuilding the desired result in the second. Once a string is built and should only be stored for read access, it should be stored in an ezString instance. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a7dd73a8110229df2c071947687d97a6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7dd73a8110229df2c071947687d97a6f">&#9670;&nbsp;</a></span>AppendWithSeparator()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::AppendWithSeparator </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sSeparator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sText1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sText2</em> = <code><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sText3</em> = <code><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sText4</em> = <code><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sText5</em> = <code><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sText6</em> = <code><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="../../d3/d88/classez_string_builder.htm#a605f325ea4c9c3242454a16657e24ef7" title="Appends a single Utf32 character.">Append()</a> but the very first argument is a separator that is only appended (once) if the existing string is not empty and does not already end with the separator. </p>
<p>This is useful when one wants to append entries that require a separator like a comma in between items. E.g. calling AppendWithSeparator(", ", "a", "b"); AppendWithSeparator(", ", "c", "d"); results in the string "ab, cd" </p>

</div>
</div>
<a id="a98f618275d4d78bc56825499b8c21b13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98f618275d4d78bc56825499b8c21b13">&#9670;&nbsp;</a></span>ChangeCharacter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::ChangeCharacter </td>
          <td>(</td>
          <td class="paramtype">iterator &amp;&#160;</td>
          <td class="paramname"><em>ref_it</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiCharacter</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Changes the single character in this string, to which the iterator currently points. </p>
<p>The string might need to be moved around, if its encoding size changes, however the given iterator will be adjusted so that it will always stay valid. </p><dl class="section note"><dt>Note</dt><dd>This can be a very costly operation (unless this string is pure ASCII). It is only provided for the few rare cases where it is more convenient and performance is not of concern. If possible, do not use this function, at all. </dd></dl>

</div>
</div>
<a id="a03e7869e8a31a64ee4259e797fb80c76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03e7869e8a31a64ee4259e797fb80c76">&#9670;&nbsp;</a></span>ChangeFileExtension()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::ChangeFileExtension </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sNewExtension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bFullExtension</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Only changes the file extension of the path. If there is no extension yet, one is appended (including a dot). </p>
<p>sNewExtension may or may not start with a dot. If sNewExtension is empty, the file extension is removed, but the dot remains. E.g. "file.txt" -&gt; "file." If you also want to remove the dot, use <a class="el" href="../../d3/d88/classez_string_builder.htm#af1163357bb5018104bf01786ffc0ff6d" title="If any extension exists, it is removed, including the dot before it.">RemoveFileExtension()</a> instead.</p>
<p>If bFullExtension is false, a file named "file.a.b.c" will replace only "c". If bFullExtension is true, a file named "file.a.b.c" will replace all of "a.b.c". </p>

</div>
</div>
<a id="a0a3a36dcfd096259e15f167e2bd6ca07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a3a36dcfd096259e15f167e2bd6ca07">&#9670;&nbsp;</a></span>GetCharacterCount()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EZ_ALWAYS_INLINE ezUInt32 ezStringBuilder::GetCharacterCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of characters of which this string consists. Might be less than GetElementCount, if it contains Utf8 multi-byte characters. </p>
<dl class="section note"><dt>Note</dt><dd>This is a slow operation, as it has to run through the entire string to count the Unicode characters. Only call this once and use the result as long as the string doesn't change. Don't call this in a loop. </dd></dl>

</div>
</div>
<a id="a5dfcc70fecd5f6493c82513c523b676f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5dfcc70fecd5f6493c82513c523b676f">&#9670;&nbsp;</a></span>IsPathBelowFolder()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ezStringBuilder::IsPathBelowFolder </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPathToFolder</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks whether this path is a sub-path of the given path. </p>
<p>This function will call 'MakeCleanPath' to be able to compare both paths, thus it might modify the data of this instance.</p>
<p>An empty folder (zero length) does not contain ANY files.<br  />
A non-existing file-name (zero length) is never in any folder.<br  />
Example:<br  />
IsFileBelowFolder ("", "XYZ") -&gt; always false<br  />
IsFileBelowFolder ("XYZ", "") -&gt; always false<br  />
IsFileBelowFolder ("", "") -&gt; always false<br  />
 </p>

</div>
</div>
<a id="acb4e8da454e08207f376cb95ec372878"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb4e8da454e08207f376cb95ec372878">&#9670;&nbsp;</a></span>MakeCleanPath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::MakeCleanPath </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes "../" where possible, replaces all path separators with /, removes double slashes. </p>
<p>All paths use slashes on all platforms. If you need to convert a path to the OS specific representation, use 'MakePathSeparatorsNative' 'MakeCleanPath' will in rare circumstances grow the string by one character. That means it is quite safe to assume that it will not waste time on memory allocations. If it is repeatedly called on the same string, it has a minor overhead for computing the same string over and over, but no memory allocations will be done (everything is in-place).</p>
<p>Removes all double path separators (slashes and backslashes) in a path, except if the path starts with two (back-)slashes, those are kept, as they might indicate a UNC path. </p>

</div>
</div>
<a id="ac851131c262fee1f9ae7a9e3e16da31b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac851131c262fee1f9ae7a9e3e16da31b">&#9670;&nbsp;</a></span>MakePathSeparatorsNative()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::MakePathSeparatorsNative </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Cleans this path up and replaces all path separators by the OS specific separator. </p>
<p>This can be used, if you want to present paths in the OS specific form to the user in the UI. In all other cases the internal representation uses slashes, no matter on which operating system. </p>

</div>
</div>
<a id="a2d14277bf37c42065340015ac40ada67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d14277bf37c42065340015ac40ada67">&#9670;&nbsp;</a></span>MakeRelativeTo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> ezStringBuilder::MakeRelativeTo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sAbsolutePathToMakeThisRelativeTo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts this path into a relative path to the path with the awesome variable name 'szAbsolutePathToMakeThisRelativeTo'. </p>
<p>If the method succeeds the StringBuilder's contents are modified in place. </p>

</div>
</div>
<a id="a40dff448589cc69f85fce8d72922ae22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40dff448589cc69f85fce8d72922ae22">&#9670;&nbsp;</a></span>PathParentDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::PathParentDirectory </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiLevelsUp</em> = <code>1</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Modifies this string to point to the parent directory. </p>
<p>'uiLevelsUp' can be used to go several folders upwards. It has to be at least one. If there are no more folders to go up, "../" is appended as much as needed. </p>

</div>
</div>
<a id="af1163357bb5018104bf01786ffc0ff6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1163357bb5018104bf01786ffc0ff6d">&#9670;&nbsp;</a></span>RemoveFileExtension()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::RemoveFileExtension </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bFullExtension</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>If any extension exists, it is removed, including the dot before it. </p>
<p>If bFullExtension is false, a file named "file.a.b.c" will end up as "file.a.b" If bFullExtension is true, a file named "file.a.b.c" will end up as "file" </p>

</div>
</div>
<a id="aaa958e242c7c3d1cd71a693cdc5924bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa958e242c7c3d1cd71a693cdc5924bd">&#9670;&nbsp;</a></span>ReplaceFirst()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * ezStringBuilder::ReplaceFirst </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sReplacement</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replaces the first occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the beginning). </p>
<p>Returns the first position where szSearchFor was found, or nullptr if nothing was found (and replaced). </p>

</div>
</div>
<a id="a7ec854555945add5d7a2be8115e9bf72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ec854555945add5d7a2be8115e9bf72">&#9670;&nbsp;</a></span>ReplaceLast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * ezStringBuilder::ReplaceLast </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sReplacement</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replaces the last occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the end). </p>
<p>Returns the last position where szSearchFor was found, or nullptr if nothing was found (and replaced). </p>

</div>
</div>
<a id="a60ff8f79ca29e14d0eea17e41af5865f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60ff8f79ca29e14d0eea17e41af5865f">&#9670;&nbsp;</a></span>ReplaceWholeWord()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * ezStringBuilder::ReplaceWholeWord </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sReplaceWith</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a>&#160;</td>
          <td class="paramname"><em>isDelimiterCB</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replaces the first occurrence of szSearchFor by szReplaceWith, if szSearchFor was found to be a 'whole word', as indicated by the delimiter function IsDelimiterCB. </p>
<p>Returns the start position of where the word was replaced or nullptr if nothing got replaced. </p>

</div>
</div>
<a id="af9eb493b73c7334149109ff1c8a87233"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9eb493b73c7334149109ff1c8a87233">&#9670;&nbsp;</a></span>ReplaceWholeWord_NoCase()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * ezStringBuilder::ReplaceWholeWord_NoCase </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sReplaceWith</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a>&#160;</td>
          <td class="paramname"><em>isDelimiterCB</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Case-insensitive version of ReplaceWholeWord. </p>
<p>Returns the start position of where the word was replaced or nullptr if nothing got replaced. </p>

</div>
</div>
<a id="a15e638eea1fba0bf18cf62e795e69ffa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15e638eea1fba0bf18cf62e795e69ffa">&#9670;&nbsp;</a></span>ReplaceWholeWordAll()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezStringBuilder::ReplaceWholeWordAll </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sReplaceWith</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a>&#160;</td>
          <td class="paramname"><em>isDelimiterCB</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replaces all occurrences of szSearchFor by szReplaceWith, if szSearchFor was found to be a 'whole word', as indicated by the delimiter function IsDelimiterCB. </p>
<p>Returns how many words got replaced. </p>

</div>
</div>
<a id="ac6bc3f7315d175093c75bcec88b16508"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6bc3f7315d175093c75bcec88b16508">&#9670;&nbsp;</a></span>ReplaceWholeWordAll_NoCase()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezStringBuilder::ReplaceWholeWordAll_NoCase </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/d18/classez_string_view.htm">ezStringView</a>&#160;</td>
          <td class="paramname"><em>sReplaceWith</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a>&#160;</td>
          <td class="paramname"><em>isDelimiterCB</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Case-insensitive version of ReplaceWholeWordAll. </p>
<p>Returns how many words got replaced. </p>

</div>
</div>
<a id="a646a93dad4c0dc198196db2c8d31fd99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a646a93dad4c0dc198196db2c8d31fd99">&#9670;&nbsp;</a></span>Shrink()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::Shrink </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiShrinkCharsFront</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiShrinkCharsBack</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes the first n and last m characters from this string. </p>
<p>This function will never reallocate data. Removing characters at the back is very cheap. Removing characters at the front needs to move data around, so can be quite costly. </p>

</div>
</div>
<a id="ae6629b25ebffffc97501e6a24e78bb28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6629b25ebffffc97501e6a24e78bb28">&#9670;&nbsp;</a></span>Trim()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::Trim </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szTrimChars</em> = <code>&quot;&#160;\f\n\r\t\v&quot;</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes all characters from the start and end that appear in the given strings. </p>
<p>The default string removes all standard whitespace characters. </p>

</div>
</div>
<a id="a541435f71c6b4cc7994ba75c58e59a73"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a541435f71c6b4cc7994ba75c58e59a73">&#9670;&nbsp;</a></span>TrimLeft()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::TrimLeft </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szTrimChars</em> = <code>&quot;&#160;\f\n\r\t\v&quot;</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes all characters from the start that appear in the given strings. </p>
<p>The default string removes all standard whitespace characters. </p>

</div>
</div>
<a id="a7f18fa8ae9436794bc90aa218d88940f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f18fa8ae9436794bc90aa218d88940f">&#9670;&nbsp;</a></span>TrimRight()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezStringBuilder::TrimRight </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szTrimChars</em> = <code>&quot;&#160;\f\n\r\t\v&quot;</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes all characters from the end that appear in the given strings. </p>
<p>The default string removes all standard whitespace characters. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/<a class="el" href="../../d5/df1/_string_builder_8h_source.htm">StringBuilder.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/StringBuilder.cpp</li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../da/dbb/_string_builder__inl_8h_source.htm">StringBuilder_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a></li>
    <li class="footer">Generated on Sun Aug 25 2024 13:06:33 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
