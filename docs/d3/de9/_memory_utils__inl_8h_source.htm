<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: Code/Engine/Foundation/Memory/Implementation/MemoryUtils_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search','.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d3/de9/_memory_utils__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">MemoryUtils_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160; </div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#define EZ_CHECK_CLASS(T)                                 \</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">  EZ_CHECK_AT_COMPILETIME_MSG(!std::is_trivial&lt;T&gt;::value, \</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">    &quot;POD type is treated as class. Use EZ_DECLARE_POD_TYPE(YourClass) or EZ_DEFINE_AS_POD_TYPE(ExternalClass) to mark it as POD.&quot;</span>)</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160; </div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// public methods: redirect to implementation</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a2944b511c0f4181b4b6a96b472df703f">ezMemoryUtils::Construct</a>(T* pDestination, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;{</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  <span class="comment">// Default constructor is always called, so that debug helper initializations (e.g. ezVec3 initializes to NaN) take place.</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  <span class="comment">// Note that destructor is ONLY called for class types.</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <span class="comment">// Special case for c++11 to prevent default construction of &quot;real&quot; Pod types, also avoids warnings on msvc</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a2944b511c0f4181b4b6a96b472df703f">Construct</a>(pDestination, uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a> &lt; <a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType&lt;T&gt;::value</a> &amp;&amp; std::is_trivial&lt;T&gt;::value &gt; ());</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;}</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;EZ_ALWAYS_INLINE ezMemoryUtils::ConstructorFunction <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a784da93eacf66f6fd369f5c93426f407">ezMemoryUtils::MakeConstructorFunction</a>()</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  <span class="keywordflow">return</span> MakeConstructorFunction&lt;T&gt;(<a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a> &lt; <a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType&lt;T&gt;::value</a> &amp;&amp; std::is_trivial&lt;T&gt;::value &gt; ());</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;}</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ac8fa5b7a4d059fb8c423be8ff75cfcf8">ezMemoryUtils::DefaultConstruct</a>(T* pDestination, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; uiCount; i++)</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  {</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    ::new (pDestination + i) T();</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  }</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;EZ_ALWAYS_INLINE ezMemoryUtils::ConstructorFunction <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a974eaaa7df95b7d10480cfa7f2f41992">ezMemoryUtils::MakeDefaultConstructorFunction</a>()</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keyword">struct </span>Helper</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  {</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ac8fa5b7a4d059fb8c423be8ff75cfcf8">DefaultConstruct</a>(<span class="keywordtype">void</span>* pDestination) { <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ac8fa5b7a4d059fb8c423be8ff75cfcf8">ezMemoryUtils::DefaultConstruct</a>(<span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(pDestination), 1); }</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  };</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keywordflow">return</span> &amp;Helper::DefaultConstruct;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Destination, <span class="keyword">typename</span> Source&gt;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ab768b24491ab1feb611b5036d37e39f2">ezMemoryUtils::CopyConstruct</a>(Destination* pDestination, <span class="keyword">const</span> Source&amp; copy, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  CopyConstruct&lt;Destination, Source&gt;(pDestination, copy, uiCount, <a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType&lt;Destination&gt;</a>());</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;}</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a4c12c5af647ec366b7a99b15cca9386b">ezMemoryUtils::CopyConstructArray</a>(T* pDestination, <span class="keyword">const</span> T* pSource, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  EZ_ASSERT_DEV(pDestination &lt; pSource || pSource + uiCount &lt;= pDestination, <span class="stringliteral">&quot;Memory regions must not overlap when using CopyConstruct.&quot;</span>);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  CopyConstructArray&lt;T&gt;(pDestination, pSource, uiCount, <a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType&lt;T&gt;</a>());</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;EZ_ALWAYS_INLINE ezMemoryUtils::CopyConstructorFunction <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aa87226b4362949aa02ffbbea97bf14d0">ezMemoryUtils::MakeCopyConstructorFunction</a>()</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keyword">struct </span>Helper</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ab768b24491ab1feb611b5036d37e39f2">CopyConstruct</a>(<span class="keywordtype">void</span>* pDestination, <span class="keyword">const</span> <span class="keywordtype">void</span>* pSource)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ab768b24491ab1feb611b5036d37e39f2">ezMemoryUtils::CopyConstruct</a>(<span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(pDestination), *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>T*<span class="keyword">&gt;</span>(pSource), 1);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  };</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="keywordflow">return</span> &amp;Helper::CopyConstruct;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a945a697e081b8f264a7b9d4ec8f66ffe">ezMemoryUtils::MoveConstruct</a>(T* pDestination, T&amp;&amp; source)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="comment">// Make sure source is actually an rvalue reference (T&amp;&amp; is a universal reference).</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  static_assert(std::is_rvalue_reference&lt;decltype(source)&gt;::value, <span class="stringliteral">&quot;&#39;source&#39; parameter is not an rvalue reference.&quot;</span>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  ::new (pDestination) T(std::forward&lt;T&gt;(source));</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a945a697e081b8f264a7b9d4ec8f66ffe">ezMemoryUtils::MoveConstruct</a>(T* pDestination, T* pSource, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  EZ_ASSERT_DEV(pDestination &lt; pSource || pSource + uiCount &lt;= pDestination, <span class="stringliteral">&quot;Memory regions must not overlap when using MoveConstruct.&quot;</span>);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="comment">// Enforce move construction.</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  static_assert(std::is_move_constructible&lt;T&gt;::value, <span class="stringliteral">&quot;Type is not move constructible!&quot;</span>);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; uiCount; ++i)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    ::new (pDestination + i) T(std::move(pSource[i]));</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Destination, <span class="keyword">typename</span> Source&gt;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a0a8156e3c8c1686be6a27ddac6e5772f">ezMemoryUtils::CopyOrMoveConstruct</a>(Destination* pDestination, Source&amp;&amp; source)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keyword">typedef</span> <span class="keyword">typename</span> std::is_rvalue_reference&lt;decltype(source)&gt;::type IsRValueRef;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  CopyOrMoveConstruct&lt;Destination, Source&gt;(pDestination, std::forward&lt;Source&gt;(source), IsRValueRef());</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;}</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a43ee17f152fe10a7e2cea71bdbf68521">ezMemoryUtils::RelocateConstruct</a>(T* pDestination, T* pSource, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  EZ_ASSERT_DEV(pDestination &lt; pSource || pSource + uiCount &lt;= pDestination, <span class="stringliteral">&quot;Memory regions must not overlap when using RelocateConstruct.&quot;</span>);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a43ee17f152fe10a7e2cea71bdbf68521">RelocateConstruct</a>(pDestination, pSource, uiCount, <a class="code" href="../../d5/d86/structez_get_type_class.htm">ezGetTypeClass&lt;T&gt;</a>());</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aea6c4d3ce40c31abd9cc00fd94759c64">ezMemoryUtils::Destruct</a>(T* pDestination, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aea6c4d3ce40c31abd9cc00fd94759c64">Destruct</a>(pDestination, uiCount, <a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType&lt;T&gt;</a>());</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;EZ_ALWAYS_INLINE ezMemoryUtils::DestructorFunction <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a30225d2e06fd8980244a0bc8a07b66bc">ezMemoryUtils::MakeDestructorFunction</a>()</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="keywordflow">return</span> MakeDestructorFunction&lt;T&gt;(<a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType&lt;T&gt;</a>());</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="../../dc/d4d/classez_memory_utils.htm#a8f9eefe70348ce0b05f0bb5a884c9eae">  117</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a8f9eefe70348ce0b05f0bb5a884c9eae">ezMemoryUtils::RawByteCopy</a>(<span class="keywordtype">void</span>* pDestination, <span class="keyword">const</span> <span class="keywordtype">void</span>* pSource, <span class="keywordtype">size_t</span> uiNumBytesToCopy)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  memcpy(pDestination, pSource, uiNumBytesToCopy);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a15ff9286bc6efd02271c6d61578b5c02">ezMemoryUtils::Copy</a>(T* pDestination, <span class="keyword">const</span> T* pSource, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  EZ_ASSERT_DEV(</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    pDestination &lt; pSource || pSource + uiCount &lt;= pDestination, <span class="stringliteral">&quot;Memory regions must not overlap when using Copy. Use CopyOverlapped instead.&quot;</span>);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a15ff9286bc6efd02271c6d61578b5c02">Copy</a>(pDestination, pSource, uiCount, <a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType&lt;T&gt;</a>());</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a3dcba6aa092c250b6569eed266df9184">ezMemoryUtils::CopyOverlapped</a>(T* pDestination, <span class="keyword">const</span> T* pSource, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a3dcba6aa092c250b6569eed266df9184">CopyOverlapped</a>(pDestination, pSource, uiCount, <a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType&lt;T&gt;</a>());</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a5b91f2f466d6009ce02116e3397dfbfb">ezMemoryUtils::Relocate</a>(T* pDestination, T* pSource, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  EZ_ASSERT_DEV(pDestination &lt; pSource || pSource + uiCount &lt;= pDestination, <span class="stringliteral">&quot;Memory regions must not overlap when using Relocate.&quot;</span>);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a5b91f2f466d6009ce02116e3397dfbfb">Relocate</a>(pDestination, pSource, uiCount, <a class="code" href="../../d5/d86/structez_get_type_class.htm">ezGetTypeClass&lt;T&gt;</a>());</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#adce58a6d9b1e90c6c4f59e1bb9004c61">ezMemoryUtils::RelocateOverlapped</a>(T* pDestination, T* pSource, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#adce58a6d9b1e90c6c4f59e1bb9004c61">RelocateOverlapped</a>(pDestination, pSource, uiCount, <a class="code" href="../../d5/d86/structez_get_type_class.htm">ezGetTypeClass&lt;T&gt;</a>());</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">ezMemoryUtils::Prepend</a>(T* pDestination, <span class="keyword">const</span> T&amp; source, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;{</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">Prepend</a>(pDestination, source, uiCount, <a class="code" href="../../d5/d86/structez_get_type_class.htm">ezGetTypeClass&lt;T&gt;</a>());</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">ezMemoryUtils::Prepend</a>(T* pDestination, T&amp;&amp; source, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;{</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">Prepend</a>(pDestination, std::move(source), uiCount, <a class="code" href="../../d5/d86/structez_get_type_class.htm">ezGetTypeClass&lt;T&gt;</a>());</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a744d60b4b000c61f2dd3819a12410595">ezMemoryUtils::IsEqual</a>(<span class="keyword">const</span> T* a, <span class="keyword">const</span> T* b, <span class="keywordtype">size_t</span> uiCount <span class="comment">/*= 1*/</span>)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;{</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a744d60b4b000c61f2dd3819a12410595">IsEqual</a>(a, b, uiCount, <a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType&lt;T&gt;</a>());</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aed226ed6447ce30053c0b5b990b978ff">ezMemoryUtils::ZeroFill</a>(T* pDestination, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  memset(pDestination, 0, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aed226ed6447ce30053c0b5b990b978ff">ezMemoryUtils::ZeroFill</a>(T (&amp;destination)[N])</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;{</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aed226ed6447ce30053c0b5b990b978ff">ZeroFill</a>(destination, N);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a8357dd1b098551c03e6faa59f64968ae">ezMemoryUtils::PatternFill</a>(T* pDestination, ezUInt8 uiBytePattern, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  memset(pDestination, uiBytePattern, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a8357dd1b098551c03e6faa59f64968ae">ezMemoryUtils::PatternFill</a>(T (&amp;destination)[N], ezUInt8 uiBytePattern)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a8357dd1b098551c03e6faa59f64968ae">PatternFill</a>(destination, uiBytePattern, N);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;}</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;EZ_ALWAYS_INLINE ezInt32 <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a7671e5bce6bc9fd9636ab50206b0f033">ezMemoryUtils::Compare</a>(<span class="keyword">const</span> T* a, <span class="keyword">const</span> T* b, <span class="keywordtype">size_t</span> uiCount <span class="comment">/*= 1*/</span>)</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;{</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <span class="keywordflow">return</span> memcmp(a, b, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="../../dc/d4d/classez_memory_utils.htm#a9e6294897c28081e935147d72340788d">  197</a></span>&#160;EZ_ALWAYS_INLINE ezInt32 <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9e6294897c28081e935147d72340788d">ezMemoryUtils::RawByteCompare</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* a, <span class="keyword">const</span> <span class="keywordtype">void</span>* b, <span class="keywordtype">size_t</span> uiNumBytesToCompare)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;{</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <span class="keywordflow">return</span> memcmp(a, b, uiNumBytesToCompare);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;}</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;EZ_ALWAYS_INLINE T* <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a154a2ccb52b2abdfdbe6d068948bc6b4">ezMemoryUtils::AddByteOffset</a>(T* ptr, ptrdiff_t iOffset)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;{</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span>T*<span class="keyword">&gt;</span>(<span class="keyword">reinterpret_cast&lt;</span>uintptr_t<span class="keyword">&gt;</span>(ptr) + iOffset);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;}</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;EZ_ALWAYS_INLINE T* <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a5181525aa2159916c8dc2713d9a6e8cb">ezMemoryUtils::Align</a>(T* ptr, <span class="keywordtype">size_t</span> uiAlignment)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span>T*<span class="keyword">&gt;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(ptr) &amp; ~(uiAlignment - 1));</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;EZ_ALWAYS_INLINE T <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a2583fd48644a0a7b3eb72797c7c65a34">ezMemoryUtils::AlignSize</a>(T uiSize, T uiAlignment)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;{</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  <span class="keywordflow">return</span> ((uiSize + (uiAlignment - 1)) &amp; ~(uiAlignment - 1));</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;}</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aa7c2521406e21cf4c64519a4a460dffe">ezMemoryUtils::IsAligned</a>(<span class="keyword">const</span> T* ptr, <span class="keywordtype">size_t</span> uiAlignment)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;{</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="keywordflow">return</span> (<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(ptr) &amp; (uiAlignment - 1)) == 0;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9fffe2aadea9b3876e558e8cc8a6a45b">ezMemoryUtils::IsSizeAligned</a>(T uiSize, T uiAlignment)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;{</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  <span class="keywordflow">return</span> (uiSize &amp; (uiAlignment - 1)) == 0;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;}</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">// private methods</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a2944b511c0f4181b4b6a96b472df703f">ezMemoryUtils::Construct</a>(T* pDestination, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;{</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  EZ_CHECK_AT_COMPILETIME_MSG(std::is_trivial&lt;T&gt;::value, <span class="stringliteral">&quot;This method should only be called for &#39;real&#39; pod aka trivial types&quot;</span>);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;}</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a2944b511c0f4181b4b6a96b472df703f">ezMemoryUtils::Construct</a>(T* pDestination, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;{</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  EZ_CHECK_CLASS(T);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; uiCount; i++)</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  {</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    ::new (pDestination + i) T();</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;}</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;EZ_ALWAYS_INLINE ezMemoryUtils::ConstructorFunction <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a784da93eacf66f6fd369f5c93426f407">ezMemoryUtils::MakeConstructorFunction</a>(<a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;{</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  EZ_CHECK_AT_COMPILETIME_MSG(std::is_trivial&lt;T&gt;::value, <span class="stringliteral">&quot;This method should only be called for &#39;real&#39; pod aka trivial types&quot;</span>);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;EZ_ALWAYS_INLINE ezMemoryUtils::ConstructorFunction <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a784da93eacf66f6fd369f5c93426f407">ezMemoryUtils::MakeConstructorFunction</a>(<a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;{</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  EZ_CHECK_CLASS(T);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  <span class="keyword">struct </span>Helper</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a2944b511c0f4181b4b6a96b472df703f">Construct</a>(<span class="keywordtype">void</span>* pDestination) { <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a2944b511c0f4181b4b6a96b472df703f">ezMemoryUtils::Construct</a>(<span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(pDestination), 1, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>()); }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  };</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="keywordflow">return</span> &amp;Helper::Construct;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;}</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Destination, <span class="keyword">typename</span> Source&gt;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ab768b24491ab1feb611b5036d37e39f2">ezMemoryUtils::CopyConstruct</a>(Destination* pDestination, <span class="keyword">const</span> Source&amp; copy, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;{</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  static_assert(std::is_same&lt;Destination, Source&gt;::value ||</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                  (std::is_base_of&lt;Destination, Source&gt;::value == <span class="keyword">false</span> &amp;&amp; std::is_base_of&lt;Source, Destination&gt;::value == <span class="keyword">false</span>),</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="stringliteral">&quot;Can&#39;t copy POD types that are derived from each other. Are you certain any of these types should be POD?&quot;</span>);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  <span class="keyword">const</span> Destination&amp; copyConverted = copy;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; uiCount; i++)</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  {</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    memcpy(pDestination + i, &amp;copyConverted, <span class="keyword">sizeof</span>(Destination));</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  }</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;}</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Destination, <span class="keyword">typename</span> Source&gt;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ab768b24491ab1feb611b5036d37e39f2">ezMemoryUtils::CopyConstruct</a>(Destination* pDestination, <span class="keyword">const</span> Source&amp; copy, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;{</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  EZ_CHECK_CLASS(Destination);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; uiCount; i++)</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  {</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    ::new (pDestination + i) Destination(copy); <span class="comment">// Note that until now copy has not been converted to Destination. This allows for calling</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                                                <span class="comment">// specialized constructors if available.</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;}</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a4c12c5af647ec366b7a99b15cca9386b">ezMemoryUtils::CopyConstructArray</a>(T* pDestination, <span class="keyword">const</span> T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;{</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  memcpy(pDestination, pSource, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;}</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a4c12c5af647ec366b7a99b15cca9386b">ezMemoryUtils::CopyConstructArray</a>(T* pDestination, <span class="keyword">const</span> T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;{</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  EZ_CHECK_CLASS(T);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; uiCount; i++)</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  {</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    ::new (pDestination + i) T(pSource[i]);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  }</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;}</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Destination, <span class="keyword">typename</span> Source&gt;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a0a8156e3c8c1686be6a27ddac6e5772f">ezMemoryUtils::CopyOrMoveConstruct</a>(Destination* pDestination, <span class="keyword">const</span> Source&amp; source, NotRValueReference)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;{</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  CopyConstruct&lt;Destination, Source&gt;(pDestination, source, 1);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;}</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Destination, <span class="keyword">typename</span> Source&gt;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a0a8156e3c8c1686be6a27ddac6e5772f">ezMemoryUtils::CopyOrMoveConstruct</a>(Destination* pDestination, Source&amp;&amp; source, IsRValueReference)</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;{</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  static_assert(std::is_rvalue_reference&lt;decltype(source)&gt;::value,</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="stringliteral">&quot;Implementation Error: This version of CopyOrMoveConstruct should only be called with a rvalue reference!&quot;</span>);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  ::new (pDestination) Destination(std::move(source));</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a43ee17f152fe10a7e2cea71bdbf68521">ezMemoryUtils::RelocateConstruct</a>(T* pDestination, T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;{</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  memcpy(pDestination, pSource, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160; </div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a43ee17f152fe10a7e2cea71bdbf68521">ezMemoryUtils::RelocateConstruct</a>(T* pDestination, T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsMemRelocatable</a>)</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;{</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  memcpy(pDestination, pSource, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;}</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160; </div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a43ee17f152fe10a7e2cea71bdbf68521">ezMemoryUtils::RelocateConstruct</a>(T* pDestination, T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;{</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  EZ_CHECK_CLASS(T);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160; </div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; uiCount; i++)</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  {</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="comment">// Note that this calls the move constructor only if available and will copy otherwise.</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    ::new (pDestination + i) T(std::move(pSource[i]));</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aea6c4d3ce40c31abd9cc00fd94759c64">Destruct</a>(pSource, uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>());</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;}</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aea6c4d3ce40c31abd9cc00fd94759c64">ezMemoryUtils::Destruct</a>(T* pDestination, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;{</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  <span class="comment">// Nothing to do here. See Construct of for more info.</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;}</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aea6c4d3ce40c31abd9cc00fd94759c64">ezMemoryUtils::Destruct</a>(T* pDestination, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;{</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  EZ_CHECK_CLASS(T);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160; </div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = uiCount; i-- &gt; 0;)</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  {</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    pDestination[i].~T();</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;}</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;EZ_ALWAYS_INLINE ezMemoryUtils::DestructorFunction <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a30225d2e06fd8980244a0bc8a07b66bc">ezMemoryUtils::MakeDestructorFunction</a>(<a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;}</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;EZ_ALWAYS_INLINE ezMemoryUtils::DestructorFunction <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a30225d2e06fd8980244a0bc8a07b66bc">ezMemoryUtils::MakeDestructorFunction</a>(<a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;{</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  EZ_CHECK_CLASS(T);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160; </div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  <span class="keyword">struct </span>Helper</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  {</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aea6c4d3ce40c31abd9cc00fd94759c64">Destruct</a>(<span class="keywordtype">void</span>* pDestination) { <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aea6c4d3ce40c31abd9cc00fd94759c64">ezMemoryUtils::Destruct</a>(<span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(pDestination), 1, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>()); }</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;  };</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  <span class="keywordflow">return</span> &amp;Helper::Destruct;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;}</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160; </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a15ff9286bc6efd02271c6d61578b5c02">ezMemoryUtils::Copy</a>(T* pDestination, <span class="keyword">const</span> T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;{</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  memcpy(pDestination, pSource, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160; </div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a15ff9286bc6efd02271c6d61578b5c02">ezMemoryUtils::Copy</a>(T* pDestination, <span class="keyword">const</span> T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;{</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;  EZ_CHECK_CLASS(T);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160; </div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; uiCount; i++)</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  {</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    pDestination[i] = pSource[i];</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;  }</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;}</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160; </div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a3dcba6aa092c250b6569eed266df9184">ezMemoryUtils::CopyOverlapped</a>(T* pDestination, <span class="keyword">const</span> T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;{</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  memmove(pDestination, pSource, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;}</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160; </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a3dcba6aa092c250b6569eed266df9184">ezMemoryUtils::CopyOverlapped</a>(T* pDestination, <span class="keyword">const</span> T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;{</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;  EZ_CHECK_CLASS(T);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;  <span class="keywordflow">if</span> (pDestination == pSource)</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160; </div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;  <span class="keywordflow">if</span> (pDestination &lt; pSource)</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;  {</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; uiCount; i++)</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    {</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;      pDestination[i] = pSource[i];</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    }</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;  }</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;  {</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = uiCount; i-- &gt; 0;)</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    {</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;      pDestination[i] = pSource[i];</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    }</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;  }</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;}</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160; </div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a5b91f2f466d6009ce02116e3397dfbfb">ezMemoryUtils::Relocate</a>(T* pDestination, T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;{</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  memcpy(pDestination, pSource, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;}</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160; </div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a5b91f2f466d6009ce02116e3397dfbfb">ezMemoryUtils::Relocate</a>(T* pDestination, T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsMemRelocatable</a>)</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;{</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;  memcpy(pDestination, pSource, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;}</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160; </div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a5b91f2f466d6009ce02116e3397dfbfb">ezMemoryUtils::Relocate</a>(T* pDestination, T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;{</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;  EZ_CHECK_CLASS(T);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160; </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; uiCount; i++)</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;  {</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="comment">// Note that this calls the move constructor only if available and will copy otherwise.</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    pDestination[i] = std::move(pSource[i]);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;  }</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160; </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aea6c4d3ce40c31abd9cc00fd94759c64">Destruct</a>(pSource, uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>());</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;}</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160; </div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#adce58a6d9b1e90c6c4f59e1bb9004c61">ezMemoryUtils::RelocateOverlapped</a>(T* pDestination, T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;{</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;  memmove(pDestination, pSource, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;}</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160; </div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#adce58a6d9b1e90c6c4f59e1bb9004c61">ezMemoryUtils::RelocateOverlapped</a>(T* pDestination, T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsMemRelocatable</a>)</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;{</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;  <span class="keywordflow">if</span> (pDestination &lt; pSource)</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  {</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordtype">size_t</span> uiDestructCount = pSource - pDestination;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aea6c4d3ce40c31abd9cc00fd94759c64">Destruct</a>(pDestination, uiDestructCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>());</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;  }</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;  {</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="keywordtype">size_t</span> uiDestructCount = pDestination - pSource;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aea6c4d3ce40c31abd9cc00fd94759c64">Destruct</a>(pSource + uiCount, uiDestructCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>());</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;  }</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;  memmove(pDestination, pSource, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;}</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160; </div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#adce58a6d9b1e90c6c4f59e1bb9004c61">ezMemoryUtils::RelocateOverlapped</a>(T* pDestination, T* pSource, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;{</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;  EZ_CHECK_CLASS(T);</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160; </div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;  <span class="keywordflow">if</span> (pDestination == pSource)</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160; </div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;  <span class="keywordflow">if</span> (pDestination &lt; pSource)</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;  {</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; uiCount; i++)</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    {</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;      pDestination[i] = std::move(pSource[i]);</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    }</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160; </div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keywordtype">size_t</span> uiDestructCount = pSource - pDestination;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aea6c4d3ce40c31abd9cc00fd94759c64">Destruct</a>(pSource + uiCount - uiDestructCount, uiDestructCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>());</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;  }</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;  {</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = uiCount; i-- &gt; 0;)</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    {</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;      pDestination[i] = std::move(pSource[i]);</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    }</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160; </div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keywordtype">size_t</span> uiDestructCount = pDestination - pSource;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aea6c4d3ce40c31abd9cc00fd94759c64">Destruct</a>(pSource, uiDestructCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>());</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;  }</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;}</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160; </div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">ezMemoryUtils::Prepend</a>(T* pDestination, <span class="keyword">const</span> T&amp; source, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;{</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;  memmove(pDestination + 1, pDestination, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ab768b24491ab1feb611b5036d37e39f2">CopyConstruct</a>(pDestination, source, 1, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>());</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;}</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160; </div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">ezMemoryUtils::Prepend</a>(T* pDestination, <span class="keyword">const</span> T&amp; source, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsMemRelocatable</a>)</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;{</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;  memmove(pDestination + 1, pDestination, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ab768b24491ab1feb611b5036d37e39f2">CopyConstruct</a>(pDestination, source, 1, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>());</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;}</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160; </div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">ezMemoryUtils::Prepend</a>(T* pDestination, <span class="keyword">const</span> T&amp; source, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;{</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;  EZ_CHECK_CLASS(T);</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160; </div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;  <span class="keywordflow">if</span> (uiCount &gt; 0)</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;  {</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a945a697e081b8f264a7b9d4ec8f66ffe">MoveConstruct</a>(pDestination + uiCount, std::move(pDestination[uiCount - 1]));</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160; </div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = uiCount - 1; i-- &gt; 0;)</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    {</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;      pDestination[i + 1] = std::move(pDestination[i]);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    }</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160; </div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    *pDestination = source;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;  }</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;  {</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ab768b24491ab1feb611b5036d37e39f2">CopyConstruct</a>(pDestination, source, 1, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>());</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;  }</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;}</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160; </div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">ezMemoryUtils::Prepend</a>(T* pDestination, T&amp;&amp; source, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;{</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;  memmove(pDestination + 1, pDestination, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a945a697e081b8f264a7b9d4ec8f66ffe">MoveConstruct</a>(pDestination, std::move(source));</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;}</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160; </div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">ezMemoryUtils::Prepend</a>(T* pDestination, T&amp;&amp; source, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsMemRelocatable</a>)</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;{</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;  memmove(pDestination + 1, pDestination, uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a945a697e081b8f264a7b9d4ec8f66ffe">MoveConstruct</a>(pDestination, std::move(source));</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;}</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160; </div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">ezMemoryUtils::Prepend</a>(T* pDestination, T&amp;&amp; source, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;{</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;  EZ_CHECK_CLASS(T);</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160; </div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;  <span class="keywordflow">if</span> (uiCount &gt; 0)</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;  {</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a945a697e081b8f264a7b9d4ec8f66ffe">MoveConstruct</a>(pDestination + uiCount, std::move(pDestination[uiCount - 1]));</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160; </div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = uiCount - 1; i-- &gt; 0;)</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    {</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;      pDestination[i + 1] = std::move(pDestination[i]);</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    }</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160; </div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    *pDestination = std::move(source);</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;  }</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;  {</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a945a697e081b8f264a7b9d4ec8f66ffe">MoveConstruct</a>(pDestination, std::move(source));</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;  }</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;}</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160; </div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a744d60b4b000c61f2dd3819a12410595">ezMemoryUtils::IsEqual</a>(<span class="keyword">const</span> T* a, <span class="keyword">const</span> T* b, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;{</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;  <span class="keywordflow">return</span> memcmp(a, b, uiCount * <span class="keyword">sizeof</span>(T)) == 0;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;}</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160; </div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a744d60b4b000c61f2dd3819a12410595">ezMemoryUtils::IsEqual</a>(<span class="keyword">const</span> T* a, <span class="keyword">const</span> T* b, <span class="keywordtype">size_t</span> uiCount, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;{</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;  EZ_CHECK_CLASS(T);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160; </div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; uiCount; i++)</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;  {</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keywordflow">if</span> (!(a[i] == b[i]))</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;  }</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;}</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160; </div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160; </div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="preprocessor">#undef EZ_CHECK_CLASS</span></div>
<div class="ttc" id="aclassez_memory_utils_htm_a0a8156e3c8c1686be6a27ddac6e5772f"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a0a8156e3c8c1686be6a27ddac6e5772f">ezMemoryUtils::CopyOrMoveConstruct</a></div><div class="ttdeci">static void CopyOrMoveConstruct(Destination *pDestination, Source &amp;&amp;source)</div><div class="ttdoc">This function will either move call MoveConstruct or CopyConstruct for a single element source,...</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a154a2ccb52b2abdfdbe6d068948bc6b4"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a154a2ccb52b2abdfdbe6d068948bc6b4">ezMemoryUtils::AddByteOffset</a></div><div class="ttdeci">static T * AddByteOffset(T *ptr, ptrdiff_t iOffset)</div><div class="ttdoc">Returns the address stored in ptr plus the given byte offset iOffset, cast to type T.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a15ff9286bc6efd02271c6d61578b5c02"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a15ff9286bc6efd02271c6d61578b5c02">ezMemoryUtils::Copy</a></div><div class="ttdeci">static void Copy(T *pDestination, const T *pSource, size_t uiCount)</div><div class="ttdoc">Copies objects of type T from pSource to pDestination.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a2583fd48644a0a7b3eb72797c7c65a34"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a2583fd48644a0a7b3eb72797c7c65a34">ezMemoryUtils::AlignSize</a></div><div class="ttdeci">static T AlignSize(T uiSize, T uiAlignment)</div><div class="ttdoc">Aligns the given size uiSize by rounding up to the next multiple of the size.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a2944b511c0f4181b4b6a96b472df703f"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a2944b511c0f4181b4b6a96b472df703f">ezMemoryUtils::Construct</a></div><div class="ttdeci">static void Construct(T *pDestination, size_t uiCount)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a30225d2e06fd8980244a0bc8a07b66bc"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a30225d2e06fd8980244a0bc8a07b66bc">ezMemoryUtils::MakeDestructorFunction</a></div><div class="ttdeci">static DestructorFunction MakeDestructorFunction()</div><div class="ttdoc">Returns a function pointer to destruct an instance of T. Returns nullptr for POD-types.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a3dcba6aa092c250b6569eed266df9184"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a3dcba6aa092c250b6569eed266df9184">ezMemoryUtils::CopyOverlapped</a></div><div class="ttdeci">static void CopyOverlapped(T *pDestination, const T *pSource, size_t uiCount)</div><div class="ttdoc">Copies objects of type T from pSource to pDestination.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a43ee17f152fe10a7e2cea71bdbf68521"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a43ee17f152fe10a7e2cea71bdbf68521">ezMemoryUtils::RelocateConstruct</a></div><div class="ttdeci">static void RelocateConstruct(T *pDestination, T *pSource, size_t uiCount)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination from an existing array of object...</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a4c12c5af647ec366b7a99b15cca9386b"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a4c12c5af647ec366b7a99b15cca9386b">ezMemoryUtils::CopyConstructArray</a></div><div class="ttdeci">static void CopyConstructArray(T *pDestination, const T *pSource, size_t uiCount)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination from an existing array of object...</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a5181525aa2159916c8dc2713d9a6e8cb"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a5181525aa2159916c8dc2713d9a6e8cb">ezMemoryUtils::Align</a></div><div class="ttdeci">static T * Align(T *ptr, size_t uiAlignment)</div><div class="ttdoc">Aligns the pointer ptr by moving its address backwards to the previous multiple of uiAlignment.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a5b91f2f466d6009ce02116e3397dfbfb"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a5b91f2f466d6009ce02116e3397dfbfb">ezMemoryUtils::Relocate</a></div><div class="ttdeci">static void Relocate(T *pDestination, T *pSource, size_t uiCount)</div><div class="ttdoc">Moves objects of type T from pSource to pDestination.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a744d60b4b000c61f2dd3819a12410595"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a744d60b4b000c61f2dd3819a12410595">ezMemoryUtils::IsEqual</a></div><div class="ttdeci">static bool IsEqual(const T *a, const T *b, size_t uiCount=1)</div><div class="ttdoc">Tests if objects of type T from pSource and pDestination are equal.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a7671e5bce6bc9fd9636ab50206b0f033"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a7671e5bce6bc9fd9636ab50206b0f033">ezMemoryUtils::Compare</a></div><div class="ttdeci">static ezInt32 Compare(const T *a, const T *b, size_t uiCount=1)</div><div class="ttdoc">Compares two buffers of raw memory byte wise.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a784da93eacf66f6fd369f5c93426f407"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a784da93eacf66f6fd369f5c93426f407">ezMemoryUtils::MakeConstructorFunction</a></div><div class="ttdeci">static ConstructorFunction MakeConstructorFunction()</div><div class="ttdoc">Returns a function pointer to construct an instance of T. Returns nullptr for trivial types.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a8357dd1b098551c03e6faa59f64968ae"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a8357dd1b098551c03e6faa59f64968ae">ezMemoryUtils::PatternFill</a></div><div class="ttdeci">static void PatternFill(T *pDestination, ezUInt8 uiBytePattern, size_t uiCount)</div><div class="ttdoc">Fills every byte of the provided buffer with the given value.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a8f9eefe70348ce0b05f0bb5a884c9eae"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a8f9eefe70348ce0b05f0bb5a884c9eae">ezMemoryUtils::RawByteCopy</a></div><div class="ttdeci">static void RawByteCopy(void *pDestination, const void *pSource, size_t uiNumBytesToCopy)</div><div class="ttdoc">Copies exactly uiNumBytesToCopy from pSource to pDestination, independent of the involved types and t...</div><div class="ttdef"><b>Definition:</b> MemoryUtils_inl.h:117</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a945a697e081b8f264a7b9d4ec8f66ffe"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a945a697e081b8f264a7b9d4ec8f66ffe">ezMemoryUtils::MoveConstruct</a></div><div class="ttdeci">static void MoveConstruct(T *pDestination, T &amp;&amp;source)</div><div class="ttdoc">Constructs an object of type T in a raw buffer at pDestination, by using move construction from sourc...</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a974eaaa7df95b7d10480cfa7f2f41992"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a974eaaa7df95b7d10480cfa7f2f41992">ezMemoryUtils::MakeDefaultConstructorFunction</a></div><div class="ttdeci">static ConstructorFunction MakeDefaultConstructorFunction()</div><div class="ttdoc">Returns a function pointer to construct an instance of T. Always returns a constructor function regar...</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a9e6294897c28081e935147d72340788d"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a9e6294897c28081e935147d72340788d">ezMemoryUtils::RawByteCompare</a></div><div class="ttdeci">static ezInt32 RawByteCompare(const void *a, const void *b, size_t uiNumBytesToCompare)</div><div class="ttdoc">Compares exactly uiNumBytesToCompare from a and b, independent of the involved types and their sizes.</div><div class="ttdef"><b>Definition:</b> MemoryUtils_inl.h:197</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a9fd0a49960e146262101081c5ae0feeb"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">ezMemoryUtils::Prepend</a></div><div class="ttdeci">static void Prepend(T *pDestination, const T &amp;source, size_t uiCount)</div><div class="ttdoc">Moves uiCount objects in pDestination by one object and copies source to the free space.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a9fffe2aadea9b3876e558e8cc8a6a45b"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a9fffe2aadea9b3876e558e8cc8a6a45b">ezMemoryUtils::IsSizeAligned</a></div><div class="ttdeci">static bool IsSizeAligned(T uiSize, T uiAlignment)</div><div class="ttdoc">Checks whether the given size is aligned.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_aa7c2521406e21cf4c64519a4a460dffe"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#aa7c2521406e21cf4c64519a4a460dffe">ezMemoryUtils::IsAligned</a></div><div class="ttdeci">static bool IsAligned(const T *ptr, size_t uiAlignment)</div><div class="ttdoc">Checks whether ptr is aligned to a memory address that is a multiple of uiAlignment.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_aa87226b4362949aa02ffbbea97bf14d0"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#aa87226b4362949aa02ffbbea97bf14d0">ezMemoryUtils::MakeCopyConstructorFunction</a></div><div class="ttdeci">static CopyConstructorFunction MakeCopyConstructorFunction()</div><div class="ttdoc">Returns a function pointer to copy construct an instance of T.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_ab768b24491ab1feb611b5036d37e39f2"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#ab768b24491ab1feb611b5036d37e39f2">ezMemoryUtils::CopyConstruct</a></div><div class="ttdeci">static void CopyConstruct(Destination *pDestination, const Source &amp;copy, size_t uiCount)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination, by creating uiCount copies of c...</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_ac8fa5b7a4d059fb8c423be8ff75cfcf8"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#ac8fa5b7a4d059fb8c423be8ff75cfcf8">ezMemoryUtils::DefaultConstruct</a></div><div class="ttdeci">static void DefaultConstruct(T *pDestination, size_t uiCount)</div><div class="ttdoc">Default constructs uiCount objects of type T in a raw buffer at pDestination regardless of T being a ...</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_adce58a6d9b1e90c6c4f59e1bb9004c61"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#adce58a6d9b1e90c6c4f59e1bb9004c61">ezMemoryUtils::RelocateOverlapped</a></div><div class="ttdeci">static void RelocateOverlapped(T *pDestination, T *pSource, size_t uiCount)</div><div class="ttdoc">Moves objects of type T from pSource to pDestination.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_aea6c4d3ce40c31abd9cc00fd94759c64"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#aea6c4d3ce40c31abd9cc00fd94759c64">ezMemoryUtils::Destruct</a></div><div class="ttdeci">static void Destruct(T *pDestination, size_t uiCount)</div><div class="ttdoc">Destructs uiCount objects of type T at pDestination.</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_aed226ed6447ce30053c0b5b990b978ff"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#aed226ed6447ce30053c0b5b990b978ff">ezMemoryUtils::ZeroFill</a></div><div class="ttdeci">static void ZeroFill(T *pDestination, size_t uiCount)</div><div class="ttdoc">Zeros every byte in the provided memory buffer.</div></div>
<div class="ttc" id="astructez_get_type_class_htm"><div class="ttname"><a href="../../d5/d86/structez_get_type_class.htm">ezGetTypeClass</a></div><div class="ttdoc">If there is an % operator which takes a ezTypeIsMemRelocatable and returns a CompileTimeTrueType T is...</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:68</div></div>
<div class="ttc" id="astructez_is_pod_type_htm"><div class="ttname"><a href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType</a></div><div class="ttdoc">If there is an % operator which takes a TypeIsPod and returns a CompileTimeTrueType T is Pod....</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:44</div></div>
<div class="ttc" id="astructez_trait_int_htm"><div class="ttname"><a href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a></div><div class="ttdoc">Type traits.</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:10</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_4fbc68de02063aadaaa993e858caad29.htm">Memory</a></li><li class="navelem"><a class="el" href="../../dir_9825cd250d0f1cc944c46f91bcc01b24.htm">Implementation</a></li><li class="navelem"><b>MemoryUtils_inl.h</b></li>
    <li class="footer">Generated on Tue Jun 8 2021 14:33:53 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
