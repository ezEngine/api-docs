<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/Implementation/Plane_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function() { init_codefold(1); });
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('d3/d1f/_plane__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Plane_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Math/Mat4.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00006" data-start="{" data-end="}">
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a1de3da403b933d43433a758289b7a858">    6</a></span>EZ_FORCE_INLINE <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a1de3da403b933d43433a758289b7a858">ezPlaneTemplate&lt;Type&gt;::ezPlaneTemplate</a>()</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>{</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="preprocessor">#if EZ_ENABLED(EZ_MATH_CHECK_FOR_NAN)</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span>  <span class="comment">// Initialize all data to NaN in debug mode to find problems with uninitialized data easier.</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>  <span class="keyword">const</span> Type TypeNaN = ezMath::NaN&lt;Type&gt;();</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>  m_vNormal.Set(TypeNaN);</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>  m_fNegDistance = TypeNaN;</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>}</div>
</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00017" data-start="{" data-end="}">
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#af69ba68dd8563d28b8c59da733e6b9b2">   17</a></span><a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate&lt;Type&gt;</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#af69ba68dd8563d28b8c59da733e6b9b2">ezPlaneTemplate&lt;Type&gt;::MakeInvalid</a>()</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>{</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>  <a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate&lt;Type&gt;</a> res;</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  res.m_vNormal.Set(0);</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  res.m_fNegDistance = 0;</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>}</div>
</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span> </div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00026" data-start="{" data-end="}">
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#ac5ffef5e5462391813003ce6084aab6a">   26</a></span><a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate&lt;Type&gt;</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#ac5ffef5e5462391813003ce6084aab6a">ezPlaneTemplate&lt;Type&gt;::MakeFromNormalAndPoint</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vNormal, <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vPointOnPlane)</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>{</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  EZ_ASSERT_DEV(vNormal.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a100b2d039a3ae3ecfb47db05b600f4f8">IsNormalized</a>(), <span class="stringliteral">&quot;Normal must be normalized.&quot;</span>);</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span> </div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  <a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate&lt;Type&gt;</a> res;</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  res.m_vNormal = vNormal;</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>  res.m_fNegDistance = -vNormal.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#ab7672fa59655c642c16f8caf581e03f3">Dot</a>(vPointOnPlane);</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>}</div>
</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00037" data-start="{" data-end="}">
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#afb5008b67f62f03c2dbd5e158db09b18">   37</a></span><a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate&lt;Type&gt;</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#afb5008b67f62f03c2dbd5e158db09b18">ezPlaneTemplate&lt;Type&gt;::MakeFromPoints</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v2, <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v3)</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>{</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>  <a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate&lt;Type&gt;</a> res;</div>
<div class="foldopen" id="foldopen00040" data-start="{" data-end="}">
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#af69ba68dd8563d28b8c59da733e6b9b2">   40</a></span>  EZ_VERIFY(res.m_vNormal.CalculateNormal(v1, v2, v3).Succeeded(), <span class="stringliteral">&quot;The 3 provided points do not form a plane&quot;</span>);</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  res.m_fNegDistance = -res.m_vNormal.Dot(v1);</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>}</div>
<div class="foldopen" id="foldopen00045" data-start="{" data-end="}">
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#ac5ffef5e5462391813003ce6084aab6a">   45</a></span> </div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00047" data-start="{" data-end="}">
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#aa4dfcf604b449b67d5d50f34fb5b204c">   47</a></span><a class="code hl_class" href="../../da/dd2/classez_vec4_template.htm">ezVec4Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#aa4dfcf604b449b67d5d50f34fb5b204c">ezPlaneTemplate&lt;Type&gt;::GetAsVec4</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../da/dd2/classez_vec4_template.htm">ezVec4</a>(m_vNormal.x, m_vNormal.y, m_vNormal.z, m_fNegDistance);</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>}</div>
</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="foldopen" id="foldopen00052" data-start="{" data-end="}">
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#afb5008b67f62f03c2dbd5e158db09b18">   52</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00053" data-start="{" data-end="}">
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a82c740662e228339a4b9ee28c9d4dce0">   53</a></span><a class="code hl_struct" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a82c740662e228339a4b9ee28c9d4dce0">ezPlaneTemplate&lt;Type&gt;::SetFromPoints</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v2, <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v3)</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>{</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>  <span class="keywordflow">if</span> (m_vNormal.CalculateNormal(v1, v2, v3) == EZ_FAILURE)</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>    <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span> </div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  m_fNegDistance = -m_vNormal.Dot(v1);</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>  <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>}</div>
</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span> </div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00063" data-start="{" data-end="}">
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#aa4dfcf604b449b67d5d50f34fb5b204c">   63</a></span><a class="code hl_struct" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a82c740662e228339a4b9ee28c9d4dce0">ezPlaneTemplate&lt;Type&gt;::SetFromPoints</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>* <span class="keyword">const</span> pVertices)</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>{</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  <span class="keywordflow">if</span> (m_vNormal.CalculateNormal(pVertices[0], pVertices[1], pVertices[2]) == EZ_FAILURE)</div>
<div class="foldopen" id="foldopen00066" data-start="{" data-end="}">
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a82c740662e228339a4b9ee28c9d4dce0">   66</a></span>    <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span> </div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  m_fNegDistance = -m_vNormal.Dot(pVertices[0]);</div>
<div class="foldopen" id="foldopen00069" data-start="{" data-end="}">
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#adc55d0897f8c39dc8c07afbb0a484a81">   69</a></span>  <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>}</div>
</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span> </div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00073" data-start="{" data-end="}">
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a87c0f6bc684fca6c1736ded74b185263">   73</a></span><a class="code hl_struct" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a87c0f6bc684fca6c1736ded74b185263">ezPlaneTemplate&lt;Type&gt;::SetFromDirections</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vTangent1, <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vTangent2, <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vPointOnPlane)</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>{</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> vNormal = vTangent1.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#ac75d15f3524fbc880a4cb7ae1cb45094">CrossRH</a>(vTangent2);</div>
<div class="foldopen" id="foldopen00076" data-start="{" data-end="}">
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a87c0f6bc684fca6c1736ded74b185263">   76</a></span>  <a class="code hl_struct" href="../../d4/da9/structez_result.htm">ezResult</a> res = vNormal.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a3d5f0da5ec0379f9ad1c08787c8183af">NormalizeIfNotZero</a>();</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span> </div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  m_vNormal = vNormal;</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>  m_fNegDistance = -vNormal.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#ab7672fa59655c642c16f8caf581e03f3">Dot</a>(vPointOnPlane);</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a9e8f1c0e5f0ec6d086026ac817d3a72e">   81</a></span>}</div>
</div>
</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span> </div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00084" data-start="{" data-end="}">
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#add9700307efa3f30fbd89feb7904b86f">   84</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#add9700307efa3f30fbd89feb7904b86f">ezPlaneTemplate&lt;Type&gt;::Transform</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/daf/classez_mat3_template.htm">ezMat3Template&lt;Type&gt;</a>&amp; m)</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>{</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> vPointOnPlane = m_vNormal * -m_fNegDistance;</div>
<div class="foldopen" id="foldopen00087" data-start="{" data-end="}">
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a4f31e60fb1708add1aebcbbabfcdaa69">   87</a></span> </div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>  <span class="comment">// Transform the normal</span></div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>  <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> vTransformedNormal = m.<a class="code hl_function" href="../../db/daf/classez_mat3_template.htm#ad693de4e1c45bb59036f8f290d2105d1">TransformDirection</a>(m_vNormal);</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>  <span class="comment">// Normalize the normal vector</span></div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>  <span class="keyword">const</span> <span class="keywordtype">bool</span> normalizeSucceeded = vTransformedNormal.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a3d5f0da5ec0379f9ad1c08787c8183af">NormalizeIfNotZero</a>().Succeeded();</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  EZ_ASSERT_DEBUG(normalizeSucceeded, <span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>  EZ_IGNORE_UNUSED(normalizeSucceeded);</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span> </div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  <span class="comment">// If the plane&#39;s distance is already infinite, there won&#39;t be any meaningful change</span></div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>  <span class="comment">// to it as a result of the transformation.</span></div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>  <span class="keywordflow">if</span> (!ezMath::IsFinite(m_fNegDistance))</div>
<div class="foldopen" id="foldopen00099" data-start="{" data-end="}">
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#adcf9fc9a41b04ab68a2f0dbe97096887">   99</a></span>  {</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    m_vNormal = vTransformedNormal;</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>  }</div>
<div class="foldopen" id="foldopen00102" data-start="{" data-end="}">
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#aea8e5e369188e2e5fd5ce172caeb5ec2">  102</a></span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>  {</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>    *<span class="keyword">this</span> = <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#ac5ffef5e5462391813003ce6084aab6a">ezPlane::MakeFromNormalAndPoint</a>(vTransformedNormal, m * vPointOnPlane);</div>
<div class="foldopen" id="foldopen00105" data-start="{" data-end="}">
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#ab23434808842d9cf8743e170a59279b4">  105</a></span>  }</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>}</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span> </div>
<div class="foldopen" id="foldopen00108" data-start="{" data-end="}">
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a61bce56755f1ab47838afa42194698ff">  108</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00109" data-start="{" data-end="}">
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#aa2a5beb707c03659bc2e8f66aa9e1e2e">  109</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#add9700307efa3f30fbd89feb7904b86f">ezPlaneTemplate&lt;Type&gt;::Transform</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/d9b/classez_mat4_template.htm">ezMat4Template&lt;Type&gt;</a>&amp; m)</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>{</div>
<div class="foldopen" id="foldopen00111" data-start="{" data-end="}">
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#adbb34ebf4578a3ea1b722b4842ccfc60">  111</a></span>  <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> vPointOnPlane = m_vNormal * -m_fNegDistance;</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span> </div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>  <span class="comment">// Transform the normal</span></div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>  <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> vTransformedNormal = m.<a class="code hl_function" href="../../d7/d9b/classez_mat4_template.htm#a73b8b97daadb081cba0cfaf0c39a95bb">TransformDirection</a>(m_vNormal);</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span> </div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  <span class="comment">// Normalize the normal vector</span></div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>  <span class="keyword">const</span> <span class="keywordtype">bool</span> normalizeSucceeded = vTransformedNormal.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a3d5f0da5ec0379f9ad1c08787c8183af">NormalizeIfNotZero</a>().Succeeded();</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>  EZ_ASSERT_DEBUG(normalizeSucceeded, <span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>  EZ_IGNORE_UNUSED(normalizeSucceeded);</div>
<div class="foldopen" id="foldopen00120" data-start="{" data-end="}">
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#af7394d3eb65e3359ff1597e4f811a550">  120</a></span> </div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  <span class="comment">// If the plane&#39;s distance is already infinite, there won&#39;t be any meaningful change</span></div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>  <span class="comment">// to it as a result of the transformation.</span></div>
<div class="foldopen" id="foldopen00123" data-start="{" data-end="}">
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#adfcfd2ba2927fc7ccf075d51a52ec315">  123</a></span>  <span class="keywordflow">if</span> (!ezMath::IsFinite(m_fNegDistance))</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>  {</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>    m_vNormal = vTransformedNormal;</div>
<div class="foldopen" id="foldopen00126" data-start="{" data-end="}">
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a3ed189801d0cbdc6563cb6b3efd80169">  126</a></span>  }</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>  {</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>    *<span class="keyword">this</span> = <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#ac5ffef5e5462391813003ce6084aab6a">ezPlane::MakeFromNormalAndPoint</a>(vTransformedNormal, m * vPointOnPlane);</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  }</div>
<div class="foldopen" id="foldopen00131" data-start="{" data-end="}">
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a28ed715903e01728f3c7d414019a5aa4">  131</a></span>}</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span> </div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00134" data-start="{" data-end="}">
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#ac0a1a557cb5f996bfda7d145acd23e88">  134</a></span>EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#ac0a1a557cb5f996bfda7d145acd23e88">ezPlaneTemplate&lt;Type&gt;::Flip</a>()</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>{</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  m_fNegDistance = -m_fNegDistance;</div>
<div class="foldopen" id="foldopen00137" data-start="{" data-end="}">
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a6c1a787b6d5994e283150fb7c98fb27a">  137</a></span>  m_vNormal = -m_vNormal;</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>}</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span> </div>
<div class="foldopen" id="foldopen00140" data-start="{" data-end="}">
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#ab552082d9b537a4d3f52f12cec194cc0">  140</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00141" data-start="{" data-end="}">
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a9e8f1c0e5f0ec6d086026ac817d3a72e">  141</a></span>EZ_FORCE_INLINE Type <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a9e8f1c0e5f0ec6d086026ac817d3a72e">ezPlaneTemplate&lt;Type&gt;::GetDistanceTo</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vPoint)<span class="keyword"> const</span></div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span><span class="keyword"></span>{</div>
<div class="foldopen" id="foldopen00143" data-start="{" data-end="}">
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#ab61816663e35211f64eff20ec0561155">  143</a></span>  <span class="keywordflow">return</span> (m_vNormal.Dot(vPoint) + m_fNegDistance);</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>}</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span> </div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00147" data-start="{" data-end="}">
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#aea8e5e369188e2e5fd5ce172caeb5ec2">  147</a></span>EZ_FORCE_INLINE <a class="code hl_enumeration" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493a">ezPositionOnPlane::Enum</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#aea8e5e369188e2e5fd5ce172caeb5ec2">ezPlaneTemplate&lt;Type&gt;::GetPointPosition</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vPoint)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00148" data-start="{" data-end="}">
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#add9700307efa3f30fbd89feb7904b86f">  148</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>  <span class="keywordflow">return</span> (m_vNormal.Dot(vPoint) &lt; -m_fNegDistance ? <a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaf7fd432be55b3b305215efa02f3d74df">ezPositionOnPlane::Back</a> : <a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaebe326c76bceb98d6abb19c3a5d78069">ezPositionOnPlane::Front</a>);</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>}</div>
<div class="foldopen" id="foldopen00151" data-start="{" data-end="}">
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#aa2a5beb707c03659bc2e8f66aa9e1e2e">  151</a></span> </div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00153" data-start="{" data-end="}">
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#ab23434808842d9cf8743e170a59279b4">  153</a></span><a class="code hl_enumeration" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493a">ezPositionOnPlane::Enum</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#aea8e5e369188e2e5fd5ce172caeb5ec2">ezPlaneTemplate&lt;Type&gt;::GetPointPosition</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vPoint, Type fPlaneHalfWidth)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00154" data-start="{" data-end="}">
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#ac0a1a557cb5f996bfda7d145acd23e88">  154</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>  <span class="keyword">const</span> Type f = m_vNormal.Dot(vPoint);</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span> </div>
<div class="foldopen" id="foldopen00157" data-start="{" data-end="}">
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a433d69109382ca8fb062bb678dae5a9e">  157</a></span>  <span class="keywordflow">if</span> (f + fPlaneHalfWidth &lt; -m_fNegDistance)</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    <span class="keywordflow">return</span> <a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaf7fd432be55b3b305215efa02f3d74df">ezPositionOnPlane::Back</a>;</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span> </div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>  <span class="keywordflow">if</span> (f - fPlaneHalfWidth &gt; -m_fNegDistance)</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>    <span class="keywordflow">return</span> <a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaebe326c76bceb98d6abb19c3a5d78069">ezPositionOnPlane::Front</a>;</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span> </div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  <span class="keywordflow">return</span> <a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aab0d95c5104ddc7fcbc98328507f19919">ezPositionOnPlane::OnPlane</a>;</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>}</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00167" data-start="{" data-end="}">
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#af7394d3eb65e3359ff1597e4f811a550">  167</a></span>EZ_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#af7394d3eb65e3359ff1597e4f811a550">ezPlaneTemplate&lt;Type&gt;::ProjectOntoPlane</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vPoint)<span class="keyword"> const</span></div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span><span class="keyword"></span>{</div>
<div class="foldopen" id="foldopen00169" data-start="{" data-end="}">
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a8f634a506e232c58c1c41f1f4c5cba9a">  169</a></span>  <span class="keywordflow">return</span> vPoint - m_vNormal * (m_vNormal.Dot(vPoint) + m_fNegDistance);</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>}</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span> </div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00173" data-start="{" data-end="}">
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#afcd7e99d95506a12d1b17a83461208ac">  173</a></span>EZ_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#adfcfd2ba2927fc7ccf075d51a52ec315">ezPlaneTemplate&lt;Type&gt;::Mirror</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vPoint)<span class="keyword"> const</span></div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  <span class="keywordflow">return</span> vPoint - (Type)2 * GetDistanceTo(vPoint) * m_vNormal;</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>}</div>
<div class="foldopen" id="foldopen00177" data-start="{" data-end="}">
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#ab3bcce23bd81f23551ae219ca2bc2644">  177</a></span> </div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00179" data-start="{" data-end="}">
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a3ed189801d0cbdc6563cb6b3efd80169">  179</a></span><span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a3ed189801d0cbdc6563cb6b3efd80169">ezPlaneTemplate&lt;Type&gt;::GetCoplanarDirection</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vDirection)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00180" data-start="{" data-end="}">
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a77957ecb2ac5c2be8af8d4e77ce27607">  180</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>  <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> res = vDirection;</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  res.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#aa67f5a9a263b661357c874c66e6fab3b">MakeOrthogonalTo</a>(m_vNormal);</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>}</div>
<div class="foldopen" id="foldopen00185" data-start="{" data-end="}">
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a1a281cd486cd85c999af6d94cfbbd3db">  185</a></span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00187" data-start="{" data-end="}">
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a28ed715903e01728f3c7d414019a5aa4">  187</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a28ed715903e01728f3c7d414019a5aa4">ezPlaneTemplate&lt;Type&gt;::IsIdentical</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>  <span class="keywordflow">return</span> m_vNormal.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a3ca79a707f6473af0e295909fb3f3cb1">IsIdentical</a>(rhs.m_vNormal) &amp;&amp; m_fNegDistance == rhs.m_fNegDistance;</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>}</div>
</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span> </div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00193" data-start="{" data-end="}">
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#ac09e6e736ffe4763aaf75c13bc7ad87b">  193</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#ac09e6e736ffe4763aaf75c13bc7ad87b">ezPlaneTemplate&lt;Type&gt;::IsEqual</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a>&amp; rhs, Type fEpsilon)<span class="keyword"> const</span></div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  <span class="keywordflow">return</span> m_vNormal.IsEqual(rhs.m_vNormal, fEpsilon) &amp;&amp; <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#aa15fef5dd09bffb82b0d3ce5d7de3255">ezMath::IsEqual</a>(m_fNegDistance, rhs.m_fNegDistance, fEpsilon);</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>}</div>
</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span> </div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate&lt;Type&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>{</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a28ed715903e01728f3c7d414019a5aa4">IsIdentical</a>(rhs);</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>}</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span> </div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate&lt;Type&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>{</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>  <span class="keywordflow">return</span> !lhs.<a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a28ed715903e01728f3c7d414019a5aa4">IsIdentical</a>(rhs);</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>}</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00211" data-start="{" data-end="}">
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a433d69109382ca8fb062bb678dae5a9e">  211</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a433d69109382ca8fb062bb678dae5a9e">ezPlaneTemplate&lt;Type&gt;::FlipIfNecessary</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vPoint, <span class="keywordtype">bool</span> bPlaneShouldFacePoint)</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>{</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>  <span class="keywordflow">if</span> ((GetPointPosition(vPoint) == <a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaebe326c76bceb98d6abb19c3a5d78069">ezPositionOnPlane::Front</a>) != bPlaneShouldFacePoint)</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>  {</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>    Flip();</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>  }</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span> </div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>}</div>
</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span> </div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00223" data-start="{" data-end="}">
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a6c1a787b6d5994e283150fb7c98fb27a">  223</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a6c1a787b6d5994e283150fb7c98fb27a">ezPlaneTemplate&lt;Type&gt;::IsValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>  <span class="keywordflow">return</span> !IsNaN() &amp;&amp; m_vNormal.IsNormalized(ezMath::DefaultEpsilon&lt;Type&gt;());</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>}</div>
</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span> </div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00229" data-start="{" data-end="}">
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#ab552082d9b537a4d3f52f12cec194cc0">  229</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#ab552082d9b537a4d3f52f12cec194cc0">ezPlaneTemplate&lt;Type&gt;::IsNaN</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>  <span class="keywordflow">return</span> ezMath::IsNaN(m_fNegDistance) || m_vNormal.IsNaN();</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>}</div>
</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span> </div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00235" data-start="{" data-end="}">
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#ab61816663e35211f64eff20ec0561155">  235</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#ab61816663e35211f64eff20ec0561155">ezPlaneTemplate&lt;Type&gt;::IsFinite</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>  <span class="keywordflow">return</span> m_vNormal.IsValid() &amp;&amp; ezMath::IsFinite(m_fNegDistance);</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>}</div>
</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span> </div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00244" data-start="{" data-end="}">
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a0b0257c65ce052db1a3412e14301d7a1">  244</a></span><a class="code hl_struct" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a82c740662e228339a4b9ee28c9d4dce0">ezPlaneTemplate&lt;Type&gt;::SetFromPoints</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>* <span class="keyword">const</span> pVertices, ezUInt32 uiMaxVertices)</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>{</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>  ezInt32 iPoints[3];</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span> </div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  <span class="keywordflow">if</span> (FindSupportPoints(pVertices, uiMaxVertices, iPoints[0], iPoints[1], iPoints[2]) == EZ_FAILURE)</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>  {</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>    SetFromPoints(pVertices).<a class="code hl_function" href="../../d4/da9/structez_result.htm#acb0bb72646ee6d5966edd5b4108fb670">IgnoreResult</a>();</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>    <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>  }</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span> </div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>  SetFromPoints(pVertices[iPoints[0]], pVertices[iPoints[1]], pVertices[iPoints[2]]).IgnoreResult();</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>  <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>}</div>
</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span> </div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00259" data-start="{" data-end="}">
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a1a281cd486cd85c999af6d94cfbbd3db">  259</a></span><a class="code hl_struct" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a1a281cd486cd85c999af6d94cfbbd3db">ezPlaneTemplate&lt;Type&gt;::FindSupportPoints</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>* <span class="keyword">const</span> pVertices, <span class="keywordtype">int</span> iMaxVertices, <span class="keywordtype">int</span>&amp; out_i1, <span class="keywordtype">int</span>&amp; out_i2, <span class="keywordtype">int</span>&amp; out_i3)</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>{</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> v1 = pVertices[0];</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span> </div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>  <span class="keywordtype">bool</span> bFoundSecond = <span class="keyword">false</span>;</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span> </div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>  <span class="keywordtype">int</span> i = 1;</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>  <span class="keywordflow">while</span> (i &lt; iMaxVertices)</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>  {</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>    <span class="keywordflow">if</span> (pVertices[i].IsEqual(v1, 0.001f) == <span class="keyword">false</span>)</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>    {</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>      bFoundSecond = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>      <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>    }</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span> </div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>    ++i;</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>  }</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span> </div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>  <span class="keywordflow">if</span> (!bFoundSecond)</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>    <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span> </div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> v2 = pVertices[i];</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span> </div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> vDir1 = (v1 - v2).GetNormalized();</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span> </div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>  out_i1 = 0;</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>  out_i2 = i;</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span> </div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>  ++i;</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span> </div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>  <span class="keywordflow">while</span> (i &lt; iMaxVertices)</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>  {</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>    <span class="comment">// check for inequality, then for non-collinearity</span></div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span>    <span class="keywordflow">if</span> ((pVertices[i].IsEqual(v2, 0.001f) == <span class="keyword">false</span>) &amp;&amp; (<a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>((pVertices[i] - v2).GetNormalized().Dot(vDir1)) &lt; (Type)0.999))</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>    {</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>      out_i3 = i;</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>      <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>    }</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span> </div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>    ++i;</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>  }</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span> </div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>  <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>}</div>
</div>
</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span> </div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00305" data-start="{" data-end="}">
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a61bce56755f1ab47838afa42194698ff">  305</a></span><a class="code hl_enumeration" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493a">ezPositionOnPlane::Enum</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a61bce56755f1ab47838afa42194698ff">ezPlaneTemplate&lt;Type&gt;::GetObjectPosition</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>* <span class="keyword">const</span> pPoints, ezUInt32 uiVertices)<span class="keyword"> const</span></div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>  <span class="keywordtype">bool</span> bFront = <span class="keyword">false</span>;</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>  <span class="keywordtype">bool</span> bBack = <span class="keyword">false</span>;</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span> </div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>  <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; uiVertices; ++i)</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>  {</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>    <span class="keywordflow">switch</span> (GetPointPosition(pPoints[i]))</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>    {</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>      <span class="keywordflow">case</span> <a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaebe326c76bceb98d6abb19c3a5d78069">ezPositionOnPlane::Front</a>:</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>        <span class="keywordflow">if</span> (bBack)</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>          <span class="keywordflow">return</span> (<a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aad02f359204ea0a13cb95b9adda945892">ezPositionOnPlane::Spanning</a>);</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>        bFront = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>        <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>      <span class="keywordflow">case</span> <a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaf7fd432be55b3b305215efa02f3d74df">ezPositionOnPlane::Back</a>:</div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>        <span class="keywordflow">if</span> (bFront)</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>          <span class="keywordflow">return</span> (<a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aad02f359204ea0a13cb95b9adda945892">ezPositionOnPlane::Spanning</a>);</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>        bBack = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>        <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span> </div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>      <span class="keywordflow">default</span>:</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>        <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>    }</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>  }</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span> </div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>  <span class="keywordflow">return</span> (bFront ? <a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaebe326c76bceb98d6abb19c3a5d78069">ezPositionOnPlane::Front</a> : <a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaf7fd432be55b3b305215efa02f3d74df">ezPositionOnPlane::Back</a>);</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>}</div>
</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span> </div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00334" data-start="{" data-end="}">
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#adbb34ebf4578a3ea1b722b4842ccfc60">  334</a></span><a class="code hl_enumeration" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493a">ezPositionOnPlane::Enum</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a61bce56755f1ab47838afa42194698ff">ezPlaneTemplate&lt;Type&gt;::GetObjectPosition</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>* <span class="keyword">const</span> pPoints, ezUInt32 uiVertices, Type fPlaneHalfWidth)<span class="keyword"> const</span></div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>  <span class="keywordtype">bool</span> bFront = <span class="keyword">false</span>;</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>  <span class="keywordtype">bool</span> bBack = <span class="keyword">false</span>;</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span> </div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span>  <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; uiVertices; ++i)</div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span>  {</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span>    <span class="keywordflow">switch</span> (GetPointPosition(pPoints[i], fPlaneHalfWidth))</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>    {</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>      <span class="keywordflow">case</span> <a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaebe326c76bceb98d6abb19c3a5d78069">ezPositionOnPlane::Front</a>:</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>        <span class="keywordflow">if</span> (bBack)</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span>          <span class="keywordflow">return</span> (<a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aad02f359204ea0a13cb95b9adda945892">ezPositionOnPlane::Spanning</a>);</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>        bFront = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span>        <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>      <span class="keywordflow">case</span> <a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaf7fd432be55b3b305215efa02f3d74df">ezPositionOnPlane::Back</a>:</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span>        <span class="keywordflow">if</span> (bFront)</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>          <span class="keywordflow">return</span> (<a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aad02f359204ea0a13cb95b9adda945892">ezPositionOnPlane::Spanning</a>);</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>        bBack = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>        <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span> </div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span>      <span class="keywordflow">default</span>:</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>        <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>    }</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span>  }</div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span> </div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>  <span class="keywordflow">if</span> (bFront)</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span>    <span class="keywordflow">return</span> (<a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaebe326c76bceb98d6abb19c3a5d78069">ezPositionOnPlane::Front</a>);</div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>  <span class="keywordflow">if</span> (bBack)</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>    <span class="keywordflow">return</span> (<a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaf7fd432be55b3b305215efa02f3d74df">ezPositionOnPlane::Back</a>);</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span> </div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>  <span class="keywordflow">return</span> (<a class="code hl_enumvalue" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aab0d95c5104ddc7fcbc98328507f19919">ezPositionOnPlane::OnPlane</a>);</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>}</div>
</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span> </div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00368" data-start="{" data-end="}">
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a8f634a506e232c58c1c41f1f4c5cba9a">  368</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a8f634a506e232c58c1c41f1f4c5cba9a">ezPlaneTemplate&lt;Type&gt;::GetRayIntersection</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vRayStartPos, <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vRayDir, Type* out_pIntersectionDistance, <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>* out_pIntersection)<span class="keyword"> const</span></div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>  EZ_ASSERT_DEBUG(vRayStartPos.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a216fcb73cd48b1bd9062fdf9b8be0b88">IsValid</a>(), <span class="stringliteral">&quot;Ray start position must be valid.&quot;</span>);</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span>  EZ_ASSERT_DEBUG(vRayDir.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a216fcb73cd48b1bd9062fdf9b8be0b88">IsValid</a>(), <span class="stringliteral">&quot;Ray direction must be valid.&quot;</span>);</div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span> </div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>  <span class="keyword">const</span> Type fPlaneSide = GetDistanceTo(vRayStartPos);</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>  <span class="keyword">const</span> Type fCosAlpha = m_vNormal.Dot(vRayDir);</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span> </div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span>  <span class="keywordflow">if</span> (fCosAlpha == 0)                                      <span class="comment">// ray is orthogonal to plane</span></div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span> </div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>  <span class="keywordflow">if</span> (<a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a916b088a06b14fe88660d630f8f63489">ezMath::Sign</a>(fPlaneSide) == <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a916b088a06b14fe88660d630f8f63489">ezMath::Sign</a>(fCosAlpha)) <span class="comment">// ray points away from the plane</span></div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span> </div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span>  <span class="keyword">const</span> Type fTime = -fPlaneSide / fCosAlpha;</div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span> </div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span>  <span class="keywordflow">if</span> (out_pIntersectionDistance)</div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>    *out_pIntersectionDistance = fTime;</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span> </div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span>  <span class="keywordflow">if</span> (out_pIntersection)</div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span>    *out_pIntersection = vRayStartPos + fTime * vRayDir;</div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span> </div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span>}</div>
</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span> </div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00394" data-start="{" data-end="}">
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#afcd7e99d95506a12d1b17a83461208ac">  394</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#afcd7e99d95506a12d1b17a83461208ac">ezPlaneTemplate&lt;Type&gt;::GetRayIntersectionBiDirectional</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vRayStartPos, <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vRayDir, Type* out_pIntersectionDistance, <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>* out_pIntersection)<span class="keyword"> const</span></div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span>  EZ_ASSERT_DEBUG(vRayStartPos.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a216fcb73cd48b1bd9062fdf9b8be0b88">IsValid</a>(), <span class="stringliteral">&quot;Ray start position must be valid.&quot;</span>);</div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span>  EZ_ASSERT_DEBUG(vRayDir.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#a216fcb73cd48b1bd9062fdf9b8be0b88">IsValid</a>(), <span class="stringliteral">&quot;Ray direction must be valid.&quot;</span>);</div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span> </div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span>  <span class="keyword">const</span> Type fPlaneSide = GetDistanceTo(vRayStartPos);</div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno">  400</span>  <span class="keyword">const</span> Type fCosAlpha = m_vNormal.Dot(vRayDir);</div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span> </div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>  <span class="keywordflow">if</span> (fCosAlpha == 0) <span class="comment">// ray is orthogonal to plane</span></div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span> </div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span>  <span class="keyword">const</span> Type fTime = -fPlaneSide / fCosAlpha;</div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span> </div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span>  <span class="keywordflow">if</span> (out_pIntersectionDistance)</div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span>    *out_pIntersectionDistance = fTime;</div>
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno">  409</span> </div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span>  <span class="keywordflow">if</span> (out_pIntersection)</div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>    *out_pIntersection = vRayStartPos + fTime * vRayDir;</div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span> </div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno">  414</span>}</div>
</div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span> </div>
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno">  416</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00417" data-start="{" data-end="}">
<div class="line"><a id="l00417" name="l00417"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#ab3bcce23bd81f23551ae219ca2bc2644">  417</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#ab3bcce23bd81f23551ae219ca2bc2644">ezPlaneTemplate&lt;Type&gt;::GetLineSegmentIntersection</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vLineStartPos, <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vLineEndPos, Type* out_pHitFraction, <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>* out_pIntersection)<span class="keyword"> const</span></div>
<div class="line"><a id="l00418" name="l00418"></a><span class="lineno">  418</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span>  Type fTime = 0;</div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span> </div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span>  <span class="keywordflow">if</span> (!GetRayIntersection(vLineStartPos, vLineEndPos - vLineStartPos, &amp;fTime, out_pIntersection))</div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span> </div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span>  <span class="keywordflow">if</span> (out_pHitFraction)</div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span>    *out_pHitFraction = fTime;</div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span> </div>
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno">  427</span>  <span class="keywordflow">return</span> (fTime &lt;= 1);</div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span>}</div>
</div>
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno">  429</span> </div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00431" data-start="{" data-end="}">
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a4f31e60fb1708add1aebcbbabfcdaa69">  431</a></span>Type <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a4f31e60fb1708add1aebcbbabfcdaa69">ezPlaneTemplate&lt;Type&gt;::GetMinimumDistanceTo</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>* pPoints, ezUInt32 uiNumPoints, ezUInt32 uiStride <span class="comment">/* = sizeof (ezVec3Template&lt;Type&gt;) */</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span>  EZ_ASSERT_DEBUG(pPoints != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Array may not be nullptr.&quot;</span>);</div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span>  EZ_ASSERT_DEBUG(uiStride &gt;= <span class="keyword">sizeof</span>(<a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>), <span class="stringliteral">&quot;Stride must be at least sizeof(ezVec3Template) to not have overlapping data.&quot;</span>);</div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span>  EZ_ASSERT_DEBUG(uiNumPoints &gt;= 1, <span class="stringliteral">&quot;Array must contain at least one point.&quot;</span>);</div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span> </div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span>  Type fMinDist = ezMath::MaxValue&lt;Type&gt;();</div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span> </div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>* pCurPoint = pPoints;</div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span> </div>
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno">  441</span>  <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; uiNumPoints; ++i)</div>
<div class="line"><a id="l00442" name="l00442"></a><span class="lineno">  442</span>  {</div>
<div class="line"><a id="l00443" name="l00443"></a><span class="lineno">  443</span>    fMinDist = <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">ezMath::Min</a>(m_vNormal.Dot(*pCurPoint), fMinDist);</div>
<div class="line"><a id="l00444" name="l00444"></a><span class="lineno">  444</span> </div>
<div class="line"><a id="l00445" name="l00445"></a><span class="lineno">  445</span>    pCurPoint = <a class="code hl_function" href="../../dc/d4d/classez_memory_utils.htm#aaa8814eb70ee62638d61609635346446">ezMemoryUtils::AddByteOffset</a>(pCurPoint, uiStride);</div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span>  }</div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span> </div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span>  <span class="keywordflow">return</span> fMinDist + m_fNegDistance;</div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span>}</div>
</div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span> </div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00452" data-start="{" data-end="}">
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#adcf9fc9a41b04ab68a2f0dbe97096887">  452</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#adcf9fc9a41b04ab68a2f0dbe97096887">ezPlaneTemplate&lt;Type&gt;::GetMinMaxDistanceTo</a>(Type&amp; out_fMin, Type&amp; out_fMax, <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>* pPoints, ezUInt32 uiNumPoints, ezUInt32 uiStride <span class="comment">/* = sizeof (ezVec3Template&lt;Type&gt;) */</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00453" name="l00453"></a><span class="lineno">  453</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00454" name="l00454"></a><span class="lineno">  454</span>  EZ_ASSERT_DEBUG(pPoints != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Array may not be nullptr.&quot;</span>);</div>
<div class="line"><a id="l00455" name="l00455"></a><span class="lineno">  455</span>  EZ_ASSERT_DEBUG(uiStride &gt;= <span class="keyword">sizeof</span>(<a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>), <span class="stringliteral">&quot;Stride must be at least sizeof(ezVec3Template) to not have overlapping data.&quot;</span>);</div>
<div class="line"><a id="l00456" name="l00456"></a><span class="lineno">  456</span>  EZ_ASSERT_DEBUG(uiNumPoints &gt;= 1, <span class="stringliteral">&quot;Array must contain at least one point.&quot;</span>);</div>
<div class="line"><a id="l00457" name="l00457"></a><span class="lineno">  457</span> </div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span>  out_fMin = ezMath::MaxValue&lt;Type&gt;();</div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span>  out_fMax = -ezMath::MaxValue&lt;Type&gt;();</div>
<div class="line"><a id="l00460" name="l00460"></a><span class="lineno">  460</span> </div>
<div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>* pCurPoint = pPoints;</div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span> </div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span>  <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; uiNumPoints; ++i)</div>
<div class="line"><a id="l00464" name="l00464"></a><span class="lineno">  464</span>  {</div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno">  465</span>    <span class="keyword">const</span> Type f = m_vNormal.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#ab7672fa59655c642c16f8caf581e03f3">Dot</a>(*pCurPoint);</div>
<div class="line"><a id="l00466" name="l00466"></a><span class="lineno">  466</span> </div>
<div class="line"><a id="l00467" name="l00467"></a><span class="lineno">  467</span>    out_fMin = <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">ezMath::Min</a>(f, out_fMin);</div>
<div class="line"><a id="l00468" name="l00468"></a><span class="lineno">  468</span>    out_fMax = <a class="code hl_function" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a>(f, out_fMax);</div>
<div class="line"><a id="l00469" name="l00469"></a><span class="lineno">  469</span> </div>
<div class="line"><a id="l00470" name="l00470"></a><span class="lineno">  470</span>    pCurPoint = <a class="code hl_function" href="../../dc/d4d/classez_memory_utils.htm#aaa8814eb70ee62638d61609635346446">ezMemoryUtils::AddByteOffset</a>(pCurPoint, uiStride);</div>
<div class="line"><a id="l00471" name="l00471"></a><span class="lineno">  471</span>  }</div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span> </div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span>  out_fMin += m_fNegDistance;</div>
<div class="line"><a id="l00474" name="l00474"></a><span class="lineno">  474</span>  out_fMax += m_fNegDistance;</div>
<div class="line"><a id="l00475" name="l00475"></a><span class="lineno">  475</span>}</div>
</div>
<div class="line"><a id="l00476" name="l00476"></a><span class="lineno">  476</span> </div>
<div class="line"><a id="l00477" name="l00477"></a><span class="lineno">  477</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00478" data-start="{" data-end="}">
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno"><a class="line" href="../../d5/d8d/structez_plane_template.htm#a77957ecb2ac5c2be8af8d4e77ce27607">  478</a></span><a class="code hl_struct" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="code hl_function" href="../../d5/d8d/structez_plane_template.htm#a77957ecb2ac5c2be8af8d4e77ce27607">ezPlaneTemplate&lt;Type&gt;::GetPlanesIntersectionPoint</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a>&amp; p0, <span class="keyword">const</span> <a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a>&amp; p1, <span class="keyword">const</span> <a class="code hl_struct" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a>&amp; p2, <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; out_vResult)</div>
<div class="line"><a id="l00479" name="l00479"></a><span class="lineno">  479</span>{</div>
<div class="line"><a id="l00480" name="l00480"></a><span class="lineno">  480</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> n1(p0.m_vNormal);</div>
<div class="line"><a id="l00481" name="l00481"></a><span class="lineno">  481</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> n2(p1.m_vNormal);</div>
<div class="line"><a id="l00482" name="l00482"></a><span class="lineno">  482</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> n3(p2.m_vNormal);</div>
<div class="line"><a id="l00483" name="l00483"></a><span class="lineno">  483</span> </div>
<div class="line"><a id="l00484" name="l00484"></a><span class="lineno">  484</span>  <span class="keyword">const</span> Type det = n1.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#ab7672fa59655c642c16f8caf581e03f3">Dot</a>(n2.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#ac75d15f3524fbc880a4cb7ae1cb45094">CrossRH</a>(n3));</div>
<div class="line"><a id="l00485" name="l00485"></a><span class="lineno">  485</span> </div>
<div class="line"><a id="l00486" name="l00486"></a><span class="lineno">  486</span>  <span class="keywordflow">if</span> (ezMath::IsZero&lt;Type&gt;(det, ezMath::LargeEpsilon&lt;Type&gt;()))</div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno">  487</span>    <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span> </div>
<div class="line"><a id="l00489" name="l00489"></a><span class="lineno">  489</span>  out_vResult = (-p0.m_fNegDistance * n2.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#ac75d15f3524fbc880a4cb7ae1cb45094">CrossRH</a>(n3) + -p1.m_fNegDistance * n3.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#ac75d15f3524fbc880a4cb7ae1cb45094">CrossRH</a>(n1) + -p2.m_fNegDistance * n1.<a class="code hl_function" href="../../da/df1/classez_vec3_template.htm#ac75d15f3524fbc880a4cb7ae1cb45094">CrossRH</a>(n2)) / det;</div>
<div class="line"><a id="l00490" name="l00490"></a><span class="lineno">  490</span> </div>
<div class="line"><a id="l00491" name="l00491"></a><span class="lineno">  491</span>  <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a id="l00492" name="l00492"></a><span class="lineno">  492</span>}</div>
</div>
</div>
<div class="line"><a id="l00493" name="l00493"></a><span class="lineno">  493</span> </div>
<div class="line"><a id="l00494" name="l00494"></a><span class="lineno">  494</span><span class="preprocessor">#include &lt;Foundation/Math/Implementation/AllClasses_inl.h&gt;</span></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="ttc" id="aclassez_mat3_template_htm"><div class="ttname"><a href="../../db/daf/classez_mat3_template.htm">ezMat3Template</a></div><div class="ttdoc">A 3x3 component matrix class.</div><div class="ttdef"><b>Definition</b> Mat3.h:9</div></div>
<div class="ttc" id="aclassez_mat3_template_htm_ad693de4e1c45bb59036f8f290d2105d1"><div class="ttname"><a href="../../db/daf/classez_mat3_template.htm#ad693de4e1c45bb59036f8f290d2105d1">ezMat3Template::TransformDirection</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; TransformDirection(const ezVec3Template&lt; Type &gt; &amp;v) const</div><div class="ttdoc">Matrix-vector multiplication, assuming the 4th component of the vector is zero. So,...</div><div class="ttdef"><b>Definition</b> Mat3_inl.h:244</div></div>
<div class="ttc" id="aclassez_mat4_template_htm"><div class="ttname"><a href="../../d7/d9b/classez_mat4_template.htm">ezMat4Template</a></div><div class="ttdoc">A 4x4 component matrix class.</div><div class="ttdef"><b>Definition</b> Mat4.h:11</div></div>
<div class="ttc" id="aclassez_mat4_template_htm_a73b8b97daadb081cba0cfaf0c39a95bb"><div class="ttname"><a href="../../d7/d9b/classez_mat4_template.htm#a73b8b97daadb081cba0cfaf0c39a95bb">ezMat4Template::TransformDirection</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; TransformDirection(const ezVec3Template&lt; Type &gt; &amp;v) const</div><div class="ttdoc">Matrix-vector multiplication, assuming the 4th component of the vector is zero. So,...</div><div class="ttdef"><b>Definition</b> Mat4_inl.h:374</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_aaa8814eb70ee62638d61609635346446"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#aaa8814eb70ee62638d61609635346446">ezMemoryUtils::AddByteOffset</a></div><div class="ttdeci">static T * AddByteOffset(T *pPtr, std::ptrdiff_t offset)</div><div class="ttdoc">Returns the address stored in ptr plus the given byte offset iOffset, cast to type T.</div></div>
<div class="ttc" id="aclassez_vec3_template_htm"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm">ezVec3Template</a></div><div class="ttdoc">A 3-component vector class.</div><div class="ttdef"><b>Definition</b> Vec3.h:9</div></div>
<div class="ttc" id="aclassez_vec3_template_htm_a100b2d039a3ae3ecfb47db05b600f4f8"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#a100b2d039a3ae3ecfb47db05b600f4f8">ezVec3Template::IsNormalized</a></div><div class="ttdeci">EZ_DECLARE_IF_FLOAT_TYPE bool IsNormalized(Type fEpsilon=ezMath::HugeEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Returns, whether the squared length of this vector is between 0.999f and 1.001f.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:133</div></div>
<div class="ttc" id="aclassez_vec3_template_htm_a216fcb73cd48b1bd9062fdf9b8be0b88"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#a216fcb73cd48b1bd9062fdf9b8be0b88">ezVec3Template::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Checks that all components are finite numbers.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:169</div></div>
<div class="ttc" id="aclassez_vec3_template_htm_a3ca79a707f6473af0e295909fb3f3cb1"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#a3ca79a707f6473af0e295909fb3f3cb1">ezVec3Template::IsIdentical</a></div><div class="ttdeci">bool IsIdentical(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Equality Check (bitwise)</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:468</div></div>
<div class="ttc" id="aclassez_vec3_template_htm_a3d5f0da5ec0379f9ad1c08787c8183af"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#a3d5f0da5ec0379f9ad1c08787c8183af">ezVec3Template::NormalizeIfNotZero</a></div><div class="ttdeci">EZ_DECLARE_IF_FLOAT_TYPE ezResult NormalizeIfNotZero(const ezVec3Template&lt; Type &gt; &amp;vFallback=ezVec3Template&lt; Type &gt;(1, 0, 0), Type fEpsilon=ezMath::SmallEpsilon&lt; Type &gt;())</div><div class="ttdoc">Tries to normalize this vector. If the vector is too close to zero, EZ_FAILURE is returned and the ve...</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:113</div></div>
<div class="ttc" id="aclassez_vec3_template_htm_aa67f5a9a263b661357c874c66e6fab3b"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#aa67f5a9a263b661357c874c66e6fab3b">ezVec3Template::MakeOrthogonalTo</a></div><div class="ttdeci">EZ_DECLARE_IF_FLOAT_TYPE void MakeOrthogonalTo(const ezVec3Template&lt; Type &gt; &amp;vNormal)</div><div class="ttdoc">Modifies this direction vector to be orthogonal to the given (normalized) direction vector....</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:289</div></div>
<div class="ttc" id="aclassez_vec3_template_htm_ab7672fa59655c642c16f8caf581e03f3"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#ab7672fa59655c642c16f8caf581e03f3">ezVec3Template::Dot</a></div><div class="ttdeci">Type Dot(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the Dot-product of the two vectors (commutative, order does not matter)</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:318</div></div>
<div class="ttc" id="aclassez_vec3_template_htm_ac75d15f3524fbc880a4cb7ae1cb45094"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm#ac75d15f3524fbc880a4cb7ae1cb45094">ezVec3Template::CrossRH</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; CrossRH(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the Cross-product of the two vectors (NOT commutative, order DOES matter)</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:327</div></div>
<div class="ttc" id="aclassez_vec4_template_htm"><div class="ttname"><a href="../../da/dd2/classez_vec4_template.htm">ezVec4Template</a></div><div class="ttdoc">A 4-component vector class.</div><div class="ttdef"><b>Definition</b> Vec4.h:9</div></div>
<div class="ttc" id="anamespaceez_math_htm_a6f7ee19d0f8e81ff6ae5f394075e3a56"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:39</div></div>
<div class="ttc" id="anamespaceez_math_htm_a746232810344aec07f7b870fa302fa8f"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Abs(T f)</div><div class="ttdoc">Returns the absolute value of f.</div><div class="ttdef"><b>Definition</b> Math_inl.h:21</div></div>
<div class="ttc" id="anamespaceez_math_htm_a916b088a06b14fe88660d630f8f63489"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a916b088a06b14fe88660d630f8f63489">ezMath::Sign</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Sign(T f)</div><div class="ttdoc">Returns the sign of f (i.e: -1, 1 or 0)</div><div class="ttdef"><b>Definition</b> Math_inl.h:14</div></div>
<div class="ttc" id="anamespaceez_math_htm_aa15fef5dd09bffb82b0d3ce5d7de3255"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#aa15fef5dd09bffb82b0d3ce5d7de3255">ezMath::IsEqual</a></div><div class="ttdeci">constexpr bool IsEqual(Type lhs, Type rhs, Type fEpsilon)</div><div class="ttdoc">Checks, whether fValue is in the range [fDesired - fMaxImprecision; fDesired + fMaxImprecision].</div><div class="ttdef"><b>Definition</b> Math_inl.h:276</div></div>
<div class="ttc" id="anamespaceez_math_htm_ad8009b4da9cb427658d71e30576f209e"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">ezMath::Min</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:27</div></div>
<div class="ttc" id="astructez_plane_template_htm"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a></div><div class="ttdoc">A class that represents a mathematical plane.</div><div class="ttdef"><b>Definition</b> Plane.h:21</div></div>
<div class="ttc" id="astructez_plane_template_htm_a1a281cd486cd85c999af6d94cfbbd3db"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a1a281cd486cd85c999af6d94cfbbd3db">ezPlaneTemplate::FindSupportPoints</a></div><div class="ttdeci">static ezResult FindSupportPoints(const ezVec3Template&lt; Type &gt; *const pVertices, ezInt32 iMaxVertices, ezInt32 &amp;out_i1, ezInt32 &amp;out_i2, ezInt32 &amp;out_i3)</div><div class="ttdoc">Returns three points from an unreliable set of points, that reliably form a plane....</div><div class="ttdef"><b>Definition</b> Plane_inl.h:259</div></div>
<div class="ttc" id="astructez_plane_template_htm_a1de3da403b933d43433a758289b7a858"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a1de3da403b933d43433a758289b7a858">ezPlaneTemplate::ezPlaneTemplate</a></div><div class="ttdeci">ezPlaneTemplate()</div><div class="ttdoc">Default constructor. Does not initialize the plane.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:6</div></div>
<div class="ttc" id="astructez_plane_template_htm_a28ed715903e01728f3c7d414019a5aa4"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a28ed715903e01728f3c7d414019a5aa4">ezPlaneTemplate::IsIdentical</a></div><div class="ttdeci">bool IsIdentical(const ezPlaneTemplate&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Checks whether this plane and the other are identical.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:187</div></div>
<div class="ttc" id="astructez_plane_template_htm_a3ed189801d0cbdc6563cb6b3efd80169"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a3ed189801d0cbdc6563cb6b3efd80169">ezPlaneTemplate::GetCoplanarDirection</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; GetCoplanarDirection(const ezVec3Template&lt; Type &gt; &amp;vDirection) const</div><div class="ttdoc">Take the given direction vector and returns a modified one that is coplanar to the plane.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:179</div></div>
<div class="ttc" id="astructez_plane_template_htm_a433d69109382ca8fb062bb678dae5a9e"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a433d69109382ca8fb062bb678dae5a9e">ezPlaneTemplate::FlipIfNecessary</a></div><div class="ttdeci">bool FlipIfNecessary(const ezVec3Template&lt; Type &gt; &amp;vPoint, bool bPlaneShouldFacePoint=true)</div><div class="ttdoc">Negates Normal/Distance to switch which side of the plane is front and back. Returns true,...</div><div class="ttdef"><b>Definition</b> Plane_inl.h:211</div></div>
<div class="ttc" id="astructez_plane_template_htm_a4f31e60fb1708add1aebcbbabfcdaa69"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a4f31e60fb1708add1aebcbbabfcdaa69">ezPlaneTemplate::GetMinimumDistanceTo</a></div><div class="ttdeci">Type GetMinimumDistanceTo(const ezVec3Template&lt; Type &gt; *pPoints, ezUInt32 uiNumPoints, ezUInt32 uiStride=sizeof(ezVec3Template&lt; Type &gt;)) const</div><div class="ttdoc">Returns the minimum distance that any of the given points had to the plane.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:431</div></div>
<div class="ttc" id="astructez_plane_template_htm_a61bce56755f1ab47838afa42194698ff"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a61bce56755f1ab47838afa42194698ff">ezPlaneTemplate::GetObjectPosition</a></div><div class="ttdeci">ezPositionOnPlane::Enum GetObjectPosition(const ezVec3Template&lt; Type &gt; *const pPoints, ezUInt32 uiVertices) const</div><div class="ttdoc">Returns on which side of the plane the set of points lies. Might be on both sides.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:305</div></div>
<div class="ttc" id="astructez_plane_template_htm_a6c1a787b6d5994e283150fb7c98fb27a"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a6c1a787b6d5994e283150fb7c98fb27a">ezPlaneTemplate::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Checks whether the plane has valid values (not NaN, normalized normal).</div><div class="ttdef"><b>Definition</b> Plane_inl.h:223</div></div>
<div class="ttc" id="astructez_plane_template_htm_a77957ecb2ac5c2be8af8d4e77ce27607"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a77957ecb2ac5c2be8af8d4e77ce27607">ezPlaneTemplate::GetPlanesIntersectionPoint</a></div><div class="ttdeci">static ezResult GetPlanesIntersectionPoint(const ezPlaneTemplate&lt; Type &gt; &amp;p0, const ezPlaneTemplate&lt; Type &gt; &amp;p1, const ezPlaneTemplate&lt; Type &gt; &amp;p2, ezVec3Template&lt; Type &gt; &amp;out_vResult)</div><div class="ttdoc">Computes the one point where all three planes intersect. Returns EZ_FAILURE if no such point exists.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:478</div></div>
<div class="ttc" id="astructez_plane_template_htm_a82c740662e228339a4b9ee28c9d4dce0"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a82c740662e228339a4b9ee28c9d4dce0">ezPlaneTemplate::SetFromPoints</a></div><div class="ttdeci">ezResult SetFromPoints(const ezVec3Template&lt; Type &gt; &amp;v1, const ezVec3Template&lt; Type &gt; &amp;v2, const ezVec3Template&lt; Type &gt; &amp;v3)</div><div class="ttdoc">Creates the plane-equation from three points on the plane.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:53</div></div>
<div class="ttc" id="astructez_plane_template_htm_a87c0f6bc684fca6c1736ded74b185263"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a87c0f6bc684fca6c1736ded74b185263">ezPlaneTemplate::SetFromDirections</a></div><div class="ttdeci">ezResult SetFromDirections(const ezVec3Template&lt; Type &gt; &amp;vTangent1, const ezVec3Template&lt; Type &gt; &amp;vTangent2, const ezVec3Template&lt; Type &gt; &amp;vPointOnPlane)</div><div class="ttdoc">Creates a plane from two direction vectors that span the plane, and one point on it.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:73</div></div>
<div class="ttc" id="astructez_plane_template_htm_a8f634a506e232c58c1c41f1f4c5cba9a"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a8f634a506e232c58c1c41f1f4c5cba9a">ezPlaneTemplate::GetRayIntersection</a></div><div class="ttdeci">bool GetRayIntersection(const ezVec3Template&lt; Type &gt; &amp;vRayStartPos, const ezVec3Template&lt; Type &gt; &amp;vRayDir, Type *out_pIntersectionDinstance=nullptr, ezVec3Template&lt; Type &gt; *out_pIntersection=nullptr) const</div><div class="ttdoc">Returns true, if the ray hit the plane. The intersection time describes at which multiple of the ray ...</div><div class="ttdef"><b>Definition</b> Plane_inl.h:368</div></div>
<div class="ttc" id="astructez_plane_template_htm_a9e8f1c0e5f0ec6d086026ac817d3a72e"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#a9e8f1c0e5f0ec6d086026ac817d3a72e">ezPlaneTemplate::GetDistanceTo</a></div><div class="ttdeci">Type GetDistanceTo(const ezVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Returns the distance of the point to the plane.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:141</div></div>
<div class="ttc" id="astructez_plane_template_htm_aa4dfcf604b449b67d5d50f34fb5b204c"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#aa4dfcf604b449b67d5d50f34fb5b204c">ezPlaneTemplate::GetAsVec4</a></div><div class="ttdeci">ezVec4Template&lt; Type &gt; GetAsVec4() const</div><div class="ttdoc">Returns an ezVec4 with the plane normal in x,y,z and the negative distance in w.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:47</div></div>
<div class="ttc" id="astructez_plane_template_htm_ab3bcce23bd81f23551ae219ca2bc2644"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#ab3bcce23bd81f23551ae219ca2bc2644">ezPlaneTemplate::GetLineSegmentIntersection</a></div><div class="ttdeci">bool GetLineSegmentIntersection(const ezVec3Template&lt; Type &gt; &amp;vLineStartPos, const ezVec3Template&lt; Type &gt; &amp;vLineEndPos, Type *out_pHitFraction=nullptr, ezVec3Template&lt; Type &gt; *out_pIntersection=nullptr) const</div><div class="ttdoc">Returns true, if there is any intersection with the plane between the line's start and end position....</div><div class="ttdef"><b>Definition</b> Plane_inl.h:417</div></div>
<div class="ttc" id="astructez_plane_template_htm_ab552082d9b537a4d3f52f12cec194cc0"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#ab552082d9b537a4d3f52f12cec194cc0">ezPlaneTemplate::IsNaN</a></div><div class="ttdeci">bool IsNaN() const</div><div class="ttdoc">Checks whether any component is NaN.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:229</div></div>
<div class="ttc" id="astructez_plane_template_htm_ab61816663e35211f64eff20ec0561155"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#ab61816663e35211f64eff20ec0561155">ezPlaneTemplate::IsFinite</a></div><div class="ttdeci">bool IsFinite() const</div><div class="ttdoc">Checks whether any component is Infinity.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:235</div></div>
<div class="ttc" id="astructez_plane_template_htm_ac09e6e736ffe4763aaf75c13bc7ad87b"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#ac09e6e736ffe4763aaf75c13bc7ad87b">ezPlaneTemplate::IsEqual</a></div><div class="ttdeci">bool IsEqual(const ezPlaneTemplate&lt; Type &gt; &amp;rhs, Type fEpsilon=ezMath::DefaultEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Checks whether this plane and the other are equal within some threshold.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:193</div></div>
<div class="ttc" id="astructez_plane_template_htm_ac0a1a557cb5f996bfda7d145acd23e88"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#ac0a1a557cb5f996bfda7d145acd23e88">ezPlaneTemplate::Flip</a></div><div class="ttdeci">void Flip()</div><div class="ttdoc">Negates Normal/Distance to switch which side of the plane is front and back.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:134</div></div>
<div class="ttc" id="astructez_plane_template_htm_ac5ffef5e5462391813003ce6084aab6a"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#ac5ffef5e5462391813003ce6084aab6a">ezPlaneTemplate::MakeFromNormalAndPoint</a></div><div class="ttdeci">static ezPlaneTemplate&lt; Type &gt; MakeFromNormalAndPoint(const ezVec3Template&lt; Type &gt; &amp;vNormal, const ezVec3Template&lt; Type &gt; &amp;vPointOnPlane)</div><div class="ttdoc">Creates a plane from a normal and a point on the plane.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:26</div></div>
<div class="ttc" id="astructez_plane_template_htm_adcf9fc9a41b04ab68a2f0dbe97096887"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#adcf9fc9a41b04ab68a2f0dbe97096887">ezPlaneTemplate::GetMinMaxDistanceTo</a></div><div class="ttdeci">void GetMinMaxDistanceTo(Type &amp;out_fMin, Type &amp;out_fMax, const ezVec3Template&lt; Type &gt; *pPoints, ezUInt32 uiNumPoints, ezUInt32 uiStride=sizeof(ezVec3Template&lt; Type &gt;)) const</div><div class="ttdoc">Returns the minimum and maximum distance that any of the given points had to the plane.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:452</div></div>
<div class="ttc" id="astructez_plane_template_htm_add9700307efa3f30fbd89feb7904b86f"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#add9700307efa3f30fbd89feb7904b86f">ezPlaneTemplate::Transform</a></div><div class="ttdeci">void Transform(const ezMat3Template&lt; Type &gt; &amp;m)</div><div class="ttdoc">Transforms the plane with the given matrix.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:84</div></div>
<div class="ttc" id="astructez_plane_template_htm_adfcfd2ba2927fc7ccf075d51a52ec315"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#adfcfd2ba2927fc7ccf075d51a52ec315">ezPlaneTemplate::Mirror</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; Mirror(const ezVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Returns the mirrored point. E.g. on the other side of the plane, at the same distance.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:173</div></div>
<div class="ttc" id="astructez_plane_template_htm_aea8e5e369188e2e5fd5ce172caeb5ec2"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#aea8e5e369188e2e5fd5ce172caeb5ec2">ezPlaneTemplate::GetPointPosition</a></div><div class="ttdeci">ezPositionOnPlane::Enum GetPointPosition(const ezVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Returns on which side of the plane the point lies.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:147</div></div>
<div class="ttc" id="astructez_plane_template_htm_af69ba68dd8563d28b8c59da733e6b9b2"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#af69ba68dd8563d28b8c59da733e6b9b2">ezPlaneTemplate::MakeInvalid</a></div><div class="ttdeci">static ezPlaneTemplate&lt; Type &gt; MakeInvalid()</div><div class="ttdoc">Returns an invalid plane with a zero normal.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:17</div></div>
<div class="ttc" id="astructez_plane_template_htm_af7394d3eb65e3359ff1597e4f811a550"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#af7394d3eb65e3359ff1597e4f811a550">ezPlaneTemplate::ProjectOntoPlane</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; ProjectOntoPlane(const ezVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Projects a point onto a plane (along the planes normal).</div><div class="ttdef"><b>Definition</b> Plane_inl.h:167</div></div>
<div class="ttc" id="astructez_plane_template_htm_afb5008b67f62f03c2dbd5e158db09b18"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#afb5008b67f62f03c2dbd5e158db09b18">ezPlaneTemplate::MakeFromPoints</a></div><div class="ttdeci">static ezPlaneTemplate&lt; Type &gt; MakeFromPoints(const ezVec3Template&lt; Type &gt; &amp;v1, const ezVec3Template&lt; Type &gt; &amp;v2, const ezVec3Template&lt; Type &gt; &amp;v3)</div><div class="ttdoc">Creates a plane from three points.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:37</div></div>
<div class="ttc" id="astructez_plane_template_htm_afcd7e99d95506a12d1b17a83461208ac"><div class="ttname"><a href="../../d5/d8d/structez_plane_template.htm#afcd7e99d95506a12d1b17a83461208ac">ezPlaneTemplate::GetRayIntersectionBiDirectional</a></div><div class="ttdeci">bool GetRayIntersectionBiDirectional(const ezVec3Template&lt; Type &gt; &amp;vRayStartPos, const ezVec3Template&lt; Type &gt; &amp;vRayDir, Type *out_pIntersectionDistance=nullptr, ezVec3Template&lt; Type &gt; *out_pIntersection=nullptr) const</div><div class="ttdoc">Returns true, if the ray intersects the plane. Intersection time and point are stored in the out-para...</div><div class="ttdef"><b>Definition</b> Plane_inl.h:394</div></div>
<div class="ttc" id="astructez_position_on_plane_htm_a377e6d93106db3d72713f119abba493a"><div class="ttname"><a href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493a">ezPositionOnPlane::Enum</a></div><div class="ttdeci">Enum</div><div class="ttdef"><b>Definition</b> Plane.h:10</div></div>
<div class="ttc" id="astructez_position_on_plane_htm_a377e6d93106db3d72713f119abba493aab0d95c5104ddc7fcbc98328507f19919"><div class="ttname"><a href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aab0d95c5104ddc7fcbc98328507f19919">ezPositionOnPlane::OnPlane</a></div><div class="ttdeci">@ OnPlane</div><div class="ttdoc">Something is lying completely on a plane (all points)</div><div class="ttdef"><b>Definition</b> Plane.h:13</div></div>
<div class="ttc" id="astructez_position_on_plane_htm_a377e6d93106db3d72713f119abba493aad02f359204ea0a13cb95b9adda945892"><div class="ttname"><a href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aad02f359204ea0a13cb95b9adda945892">ezPositionOnPlane::Spanning</a></div><div class="ttdeci">@ Spanning</div><div class="ttdoc">Something is spanning a plane, i.e. some points are on the front and some on the back.</div><div class="ttdef"><b>Definition</b> Plane.h:14</div></div>
<div class="ttc" id="astructez_position_on_plane_htm_a377e6d93106db3d72713f119abba493aaebe326c76bceb98d6abb19c3a5d78069"><div class="ttname"><a href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaebe326c76bceb98d6abb19c3a5d78069">ezPositionOnPlane::Front</a></div><div class="ttdeci">@ Front</div><div class="ttdoc">Something is completely in front of a plane.</div><div class="ttdef"><b>Definition</b> Plane.h:12</div></div>
<div class="ttc" id="astructez_position_on_plane_htm_a377e6d93106db3d72713f119abba493aaf7fd432be55b3b305215efa02f3d74df"><div class="ttname"><a href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493aaf7fd432be55b3b305215efa02f3d74df">ezPositionOnPlane::Back</a></div><div class="ttdeci">@ Back</div><div class="ttdoc">Something is completely on the back side of a plane.</div><div class="ttdef"><b>Definition</b> Plane.h:11</div></div>
<div class="ttc" id="astructez_result_htm"><div class="ttname"><a href="../../d4/da9/structez_result.htm">ezResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition</b> Types.h:54</div></div>
<div class="ttc" id="astructez_result_htm_acb0bb72646ee6d5966edd5b4108fb670"><div class="ttname"><a href="../../d4/da9/structez_result.htm#acb0bb72646ee6d5966edd5b4108fb670">ezResult::IgnoreResult</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void IgnoreResult()</div><div class="ttdoc">Used to silence compiler warnings, when success or failure doesn't matter.</div><div class="ttdef"><b>Definition</b> Types.h:69</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_4ad0f5fbee83b30173e7fecedeea26f0.htm">Math</a></li><li class="navelem"><a class="el" href="../../dir_89ec743f7412cd7cb287fad7b6649245.htm">Implementation</a></li><li class="navelem"><b>Plane_inl.h</b></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:17:51 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
