<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/Implementation/Vec3_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.10</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d5/d68/_vec3__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Vec3_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00004"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a96f63b8bd98381acc8603773f183ab44">    4</a></span>&#160;EZ_FORCE_INLINE <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a96f63b8bd98381acc8603773f183ab44">ezVec3Template&lt;Type&gt;::ezVec3Template</a>()</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;{</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_COMPILE_FOR_DEBUG)</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  <span class="comment">// Initialize all data to NaN in debug mode to find problems with uninitialized data easier.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;  <span class="keyword">const</span> Type TypeNaN = ezMath::NaN&lt;Type&gt;();</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  x = TypeNaN;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  y = TypeNaN;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  z = TypeNaN;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;}</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160; </div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a7167be2233bb19808eff9847ae6d2607">   16</a></span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a96f63b8bd98381acc8603773f183ab44">ezVec3Template&lt;Type&gt;::ezVec3Template</a>(Type X, Type Y, Type Z)</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;  : x(X)</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  , y(Y)</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  , z(Z)</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;}</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#acb8670e5e174356112787d5b40338e0e">   24</a></span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a96f63b8bd98381acc8603773f183ab44">ezVec3Template&lt;Type&gt;::ezVec3Template</a>(Type V)</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  : x(V)</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  , y(V)</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  , z(V)</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a4693ce7e3ea568fb31504369e69836fb">   32</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a4693ce7e3ea568fb31504369e69836fb">ezVec3Template&lt;Type&gt;::Set</a>(Type xyz)</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  x = xyz;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  y = xyz;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  z = xyz;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#adb04ac1c5183e80b22c690c5daa16574">   40</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a4693ce7e3ea568fb31504369e69836fb">ezVec3Template&lt;Type&gt;::Set</a>(Type X, Type Y, Type Z)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  x = X;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  y = Y;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  z = Z;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#af217f183c290134d4db0d382759bdfe3">   48</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#af217f183c290134d4db0d382759bdfe3">ezVec3Template&lt;Type&gt;::SetZero</a>()</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  x = y = z = 0;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#aceb7b6c4aa4040fb03d85f0adb27a433">   54</a></span>&#160;EZ_ALWAYS_INLINE Type <a class="code" href="../../d6/dbd/structez_vec3_template.htm#aceb7b6c4aa4040fb03d85f0adb27a433">ezVec3Template&lt;Type&gt;::GetLength</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="keywordflow">return</span> (<a class="code" href="../../db/d78/namespaceez_math.htm#a7f4e38e30c7914d11bcc85b0a4b1c09a">ezMath::Sqrt</a>(GetLengthSquared()));</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#ab0ba74a3f20ca18355119f33c328f0c6">   60</a></span>&#160;<a class="code" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#ab0ba74a3f20ca18355119f33c328f0c6">ezVec3Template&lt;Type&gt;::SetLength</a>(Type fNewLength, Type fEpsilon <span class="comment">/* = ezMath::DefaultEpsilon&lt;Type&gt;() */</span>)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keywordflow">if</span> (NormalizeIfNotZero(<a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;::ZeroVector</a>(), fEpsilon) == EZ_FAILURE)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  *<span class="keyword">this</span> *= fNewLength;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#aa47fcb03a5aa1272b8afe9ba00e66ee9">   70</a></span>&#160;EZ_FORCE_INLINE Type <a class="code" href="../../d6/dbd/structez_vec3_template.htm#aa47fcb03a5aa1272b8afe9ba00e66ee9">ezVec3Template&lt;Type&gt;::GetLengthSquared</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <span class="keywordflow">return</span> (x * x + y * y + z * z);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a74e9b90edf238ac0678959334e4f3b6c">   78</a></span>&#160;EZ_FORCE_INLINE Type <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a74e9b90edf238ac0678959334e4f3b6c">ezVec3Template&lt;Type&gt;::GetLengthAndNormalize</a>()</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keyword">const</span> Type fLength = GetLength();</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  *<span class="keyword">this</span> /= fLength;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordflow">return</span> fLength;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a0dbd093d6f8abe8f783ea83b0b40a744">   86</a></span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a0dbd093d6f8abe8f783ea83b0b40a744">ezVec3Template&lt;Type&gt;::GetNormalized</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keyword">const</span> Type fLen = GetLength();</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keyword">const</span> Type fLengthInv = <a class="code" href="../../db/d78/namespaceez_math.htm#ac0dc1e649849596eedbfa9f54894d779">ezMath::Invert</a>(fLen);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(x * fLengthInv, y * fLengthInv, z * fLengthInv);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#af0a6d50203589742653c50484734ef19">   95</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#af0a6d50203589742653c50484734ef19">ezVec3Template&lt;Type&gt;::Normalize</a>()</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  *<span class="keyword">this</span> /= GetLength();</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a371533372c47fa274e0e39144d51f73c">  101</a></span>&#160;<a class="code" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a371533372c47fa274e0e39144d51f73c">ezVec3Template&lt;Type&gt;::NormalizeIfNotZero</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vFallback, Type fEpsilon)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  EZ_NAN_ASSERT(&amp;vFallback);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keyword">const</span> Type fLength = GetLength();</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keywordflow">if</span> (!ezMath::IsFinite(fLength) || <a class="code" href="../../db/d78/namespaceez_math.htm#ad0c686588a98fa8c07722fc48f1ffd7f">ezMath::IsZero</a>(fLength, fEpsilon))</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    *<span class="keyword">this</span> = vFallback;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  *<span class="keyword">this</span> /= fLength;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a77807aabfdcd88cdba96f5b500fe9522">  121</a></span>&#160;EZ_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a77807aabfdcd88cdba96f5b500fe9522">ezVec3Template&lt;Type&gt;::IsNormalized</a>(Type fEpsilon <span class="comment">/* = ezMath::HugeEpsilon&lt;Type&gt;() */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keyword">const</span> Type t = GetLengthSquared();</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../db/d78/namespaceez_math.htm#aa15fef5dd09bffb82b0d3ce5d7de3255">ezMath::IsEqual</a>(t, (Type)1, fEpsilon);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a52d86f05731890b4a5ca7762a5d65bb3">  128</a></span>&#160;EZ_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a52d86f05731890b4a5ca7762a5d65bb3">ezVec3Template&lt;Type&gt;::IsZero</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keywordflow">return</span> ((x == 0.0f) &amp;&amp; (y == 0.0f) &amp;&amp; (z == 0.0f));</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a3a070fded3017061e2f96620d5148828">  136</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a52d86f05731890b4a5ca7762a5d65bb3">ezVec3Template&lt;Type&gt;::IsZero</a>(Type fEpsilon)<span class="keyword"> const</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keywordflow">return</span> (<a class="code" href="../../db/d78/namespaceez_math.htm#ad0c686588a98fa8c07722fc48f1ffd7f">ezMath::IsZero</a>(x, fEpsilon) &amp;&amp; <a class="code" href="../../db/d78/namespaceez_math.htm#ad0c686588a98fa8c07722fc48f1ffd7f">ezMath::IsZero</a>(y, fEpsilon) &amp;&amp; <a class="code" href="../../db/d78/namespaceez_math.htm#ad0c686588a98fa8c07722fc48f1ffd7f">ezMath::IsZero</a>(z, fEpsilon));</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a330f758d541d570f19443bbbc0969e5e">  144</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a330f758d541d570f19443bbbc0969e5e">ezVec3Template&lt;Type&gt;::IsNaN</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keywordflow">if</span> (ezMath::IsNaN(x))</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  <span class="keywordflow">if</span> (ezMath::IsNaN(y))</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  <span class="keywordflow">if</span> (ezMath::IsNaN(z))</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a216fcb73cd48b1bd9062fdf9b8be0b88">  157</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a216fcb73cd48b1bd9062fdf9b8be0b88">ezVec3Template&lt;Type&gt;::IsValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  <span class="keywordflow">if</span> (!ezMath::IsFinite(x))</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="keywordflow">if</span> (!ezMath::IsFinite(y))</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keywordflow">if</span> (!ezMath::IsFinite(z))</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#ab9f531d0e615080d02ed4a42b6b184e5">  170</a></span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#ab9f531d0e615080d02ed4a42b6b184e5">ezVec3Template&lt;Type&gt;::operator-</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(-x, -y, -z);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a8a43db9c1ba66e580bf3eea85cc3f559">  178</a></span>&#160;EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a8a43db9c1ba66e580bf3eea85cc3f559">ezVec3Template&lt;Type&gt;::operator+=</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;{</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  x += rhs.x;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  y += rhs.y;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  z += rhs.z;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a5349436a34546a479a64bbe2ffdbb969">  188</a></span>&#160;EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a5349436a34546a479a64bbe2ffdbb969">ezVec3Template&lt;Type&gt;::operator-=</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;{</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  x -= rhs.x;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  y -= rhs.y;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  z -= rhs.z;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00198"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a8009bc202b1f20dc95d4296d063f3ff4">  198</a></span>&#160;EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a8009bc202b1f20dc95d4296d063f3ff4">ezVec3Template&lt;Type&gt;::operator*=</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&amp; rhs)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;{</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  x *= rhs.x;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  y *= rhs.y;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  z *= rhs.z;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;}</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#acf4fd0903b014af9fc671b4cc47f7853">  210</a></span>&#160;EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#acf4fd0903b014af9fc671b4cc47f7853">ezVec3Template&lt;Type&gt;::operator/=</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&amp; rhs)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;{</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  x /= rhs.x;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  y /= rhs.y;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  z /= rhs.z;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;}</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a0fcb807c8aa58a796520fd3ca2d1c4b2">  222</a></span>&#160;EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a8009bc202b1f20dc95d4296d063f3ff4">ezVec3Template&lt;Type&gt;::operator*=</a>(Type f)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;{</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  x *= f;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  y *= f;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  z *= f;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#ad531e99b4fed299bf8826f89e035eb48">  232</a></span>&#160;EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#acf4fd0903b014af9fc671b4cc47f7853">ezVec3Template&lt;Type&gt;::operator/=</a>(Type f)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  <span class="keyword">const</span> Type f_inv = <a class="code" href="../../db/d78/namespaceez_math.htm#ac0dc1e649849596eedbfa9f54894d779">ezMath::Invert</a>(f);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  x *= f_inv;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  y *= f_inv;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  z *= f_inv;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <span class="comment">// if this assert fires, you might have tried to normalize a zero-length vector</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00245"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a8a3564acb96f281e3ad47187d98a9d01">  245</a></span>&#160;<a class="code" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a8a3564acb96f281e3ad47187d98a9d01">ezVec3Template&lt;Type&gt;::CalculateNormal</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v2, <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v3)</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;{</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  *<span class="keyword">this</span> = (v3 - v2).CrossRH(v1 - v2);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="keywordflow">return</span> NormalizeIfNotZero();</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;}</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a4283a7b22b195027731f0a02bbc58611">  252</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a4283a7b22b195027731f0a02bbc58611">ezVec3Template&lt;Type&gt;::MakeOrthogonalTo</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vNormal)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;{</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  EZ_ASSERT_DEBUG(</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    vNormal.<a class="code" href="../../d6/dbd/structez_vec3_template.htm#a77807aabfdcd88cdba96f5b500fe9522">IsNormalized</a>(), <span class="stringliteral">&quot;The vector to make this vector orthogonal to, must be normalized. It&#39;s length is {0}&quot;</span>, <a class="code" href="../../d7/dfa/structez_arg_f.htm">ezArgF</a>(vNormal.<a class="code" href="../../d6/dbd/structez_vec3_template.htm#aceb7b6c4aa4040fb03d85f0adb27a433">GetLength</a>(), 3));</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> vOrtho = vNormal.<a class="code" href="../../d6/dbd/structez_vec3_template.htm#ac75d15f3524fbc880a4cb7ae1cb45094">CrossRH</a>(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  *<span class="keyword">this</span> = vOrtho.<a class="code" href="../../d6/dbd/structez_vec3_template.htm#ac75d15f3524fbc880a4cb7ae1cb45094">CrossRH</a>(vNormal);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;}</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00262"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a99a8f512e13672cde4e60a453a922e50">  262</a></span>&#160;<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a99a8f512e13672cde4e60a453a922e50">ezVec3Template&lt;Type&gt;::GetOrthogonalVector</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  EZ_ASSERT_DEBUG(!IsZero(ezMath::SmallEpsilon&lt;Type&gt;()), <span class="stringliteral">&quot;The vector must not be zero to be able to compute an orthogonal vector.&quot;</span>);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  Type fDot = <a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(this-&gt;Dot(<a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(0, 1, 0)));</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  <span class="keywordflow">if</span> (fDot &lt; 0.999f)</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">return</span> this-&gt;CrossRH(<a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(0, 1, 0));</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  <span class="keywordflow">return</span> this-&gt;CrossRH(<a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(1, 0, 0));</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00274"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a08f4508a3c6894a4bd1ca9c0f57bd466">  274</a></span>&#160;<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a08f4508a3c6894a4bd1ca9c0f57bd466">ezVec3Template&lt;Type&gt;::GetReflectedVector</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vNormal)<span class="keyword"> const</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  EZ_ASSERT_DEBUG(vNormal.<a class="code" href="../../d6/dbd/structez_vec3_template.htm#a77807aabfdcd88cdba96f5b500fe9522">IsNormalized</a>(), <span class="stringliteral">&quot;vNormal must be normalized.&quot;</span>);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  <span class="keywordflow">return</span> ((*<span class="keyword">this</span>) - ((Type)2 * this-&gt;Dot(vNormal) * vNormal));</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00282"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#ab7672fa59655c642c16f8caf581e03f3">  282</a></span>&#160;EZ_FORCE_INLINE Type <a class="code" href="../../d6/dbd/structez_vec3_template.htm#ab7672fa59655c642c16f8caf581e03f3">ezVec3Template&lt;Type&gt;::Dot</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  EZ_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="keywordflow">return</span> ((x * rhs.x) + (y * rhs.y) + (z * rhs.z));</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#ac75d15f3524fbc880a4cb7ae1cb45094">  291</a></span>&#160;<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#ac75d15f3524fbc880a4cb7ae1cb45094">ezVec3Template&lt;Type&gt;::CrossRH</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  EZ_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(y * rhs.z - z * rhs.y, z * rhs.x - x * rhs.z, x * rhs.y - y * rhs.x);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;}</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160; </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00300"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a726ff5ddd3f38d4dfc4e99f541023674">  300</a></span>&#160;<a class="code" href="../../db/d6f/classez_angle.htm">ezAngle</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a726ff5ddd3f38d4dfc4e99f541023674">ezVec3Template&lt;Type&gt;::GetAngleBetween</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  EZ_ASSERT_DEBUG(this-&gt;IsNormalized(), <span class="stringliteral">&quot;This vector must be normalized.&quot;</span>);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  EZ_ASSERT_DEBUG(rhs.<a class="code" href="../../d6/dbd/structez_vec3_template.htm#a77807aabfdcd88cdba96f5b500fe9522">IsNormalized</a>(), <span class="stringliteral">&quot;The other vector must be normalized.&quot;</span>);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../db/d78/namespaceez_math.htm#afcbf5132d5cbfc7070cd6d3086709ceb">ezMath::ACos</a>(<a class="code" href="../../db/d78/namespaceez_math.htm#aaaedc100ad5d35ae5362021b9d1b0e7c">ezMath::Clamp</a>(this-&gt;Dot(rhs), (Type)-1, (Type)1));</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;}</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#aa72f7d2a6d9b8d30f67c36eef15db7b7">  309</a></span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#aa72f7d2a6d9b8d30f67c36eef15db7b7">ezVec3Template&lt;Type&gt;::CompMin</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  EZ_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(<a class="code" href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">ezMath::Min</a>(x, rhs.x), <a class="code" href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">ezMath::Min</a>(y, rhs.y), <a class="code" href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">ezMath::Min</a>(z, rhs.z));</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;}</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a7fa99794e2995ef0c95114b3e6960ff7">  318</a></span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a7fa99794e2995ef0c95114b3e6960ff7">ezVec3Template&lt;Type&gt;::CompMax</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  EZ_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(<a class="code" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a>(x, rhs.x), <a class="code" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a>(y, rhs.y), <a class="code" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a>(z, rhs.z));</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;}</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00327"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a852195f72abdd019095140134502fbbb">  327</a></span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a852195f72abdd019095140134502fbbb">ezVec3Template&lt;Type&gt;::CompClamp</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&amp; low, <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&amp; high)<span class="keyword"> const</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  EZ_NAN_ASSERT(&amp;low);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  EZ_NAN_ASSERT(&amp;high);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(<a class="code" href="../../db/d78/namespaceez_math.htm#aaaedc100ad5d35ae5362021b9d1b0e7c">ezMath::Clamp</a>(x, low.x, high.x), <a class="code" href="../../db/d78/namespaceez_math.htm#aaaedc100ad5d35ae5362021b9d1b0e7c">ezMath::Clamp</a>(y, low.y, high.y), <a class="code" href="../../db/d78/namespaceez_math.htm#aaaedc100ad5d35ae5362021b9d1b0e7c">ezMath::Clamp</a>(z, low.z, high.z));</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;}</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160; </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00337"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a1e0aabc06569839962d16a71def3ae6b">  337</a></span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a1e0aabc06569839962d16a71def3ae6b">ezVec3Template&lt;Type&gt;::CompMul</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  EZ_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160; </div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(x * rhs.x, y * rhs.y, z * rhs.z);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;}</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160; </div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00346"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a97da3d92338ae762c2ddf6573cadd832">  346</a></span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a97da3d92338ae762c2ddf6573cadd832">ezVec3Template&lt;Type&gt;::CompDiv</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  EZ_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(x / rhs.x, y / rhs.y, z / rhs.z);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;}</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00355"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#ab6e2563b421a4d9e637eb7472fa6b327">  355</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#ab6e2563b421a4d9e637eb7472fa6b327">ezVec3Template&lt;Type&gt;::Abs</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160; </div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(<a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(x), <a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(y), <a class="code" href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a>(z));</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;}</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160; </div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> operator+(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;{</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  EZ_NAN_ASSERT(&amp;v1);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  EZ_NAN_ASSERT(&amp;v2);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;}</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> operator-(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  EZ_NAN_ASSERT(&amp;v1);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  EZ_NAN_ASSERT(&amp;v2);</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;}</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> operator*(Type f, <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v)</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;{</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  EZ_NAN_ASSERT(&amp;v);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(v.x * f, v.y * f, v.z * f);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;}</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> operator*(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v, Type f)</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;{</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  EZ_NAN_ASSERT(&amp;v);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160; </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(v.x * f, v.y * f, v.z * f);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160; </div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> operator/(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v, Type f)</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;{</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;  EZ_NAN_ASSERT(&amp;v);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160; </div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;  <span class="comment">// multiplication is much faster than division</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  <span class="keyword">const</span> Type f_inv = <a class="code" href="../../db/d78/namespaceez_math.htm#ac0dc1e649849596eedbfa9f54894d779">ezMath::Invert</a>(f);</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>(v.x * f_inv, v.y * f_inv, v.z * f_inv);</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;}</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160; </div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#a3ca79a707f6473af0e295909fb3f3cb1">  407</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#a3ca79a707f6473af0e295909fb3f3cb1">ezVec3Template&lt;Type&gt;::IsIdentical</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  EZ_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160; </div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  <span class="keywordflow">return</span> ((x == rhs.x) &amp;&amp; (y == rhs.y) &amp;&amp; (z == rhs.z));</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;}</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00416"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#af7dd54170c3e008dc8f7065573947e4b">  416</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#af7dd54170c3e008dc8f7065573947e4b">ezVec3Template&lt;Type&gt;::IsEqual</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; rhs, Type fEpsilon)<span class="keyword"> const</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;  EZ_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;  EZ_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160; </div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;  <span class="keywordflow">return</span> (<a class="code" href="../../db/d78/namespaceez_math.htm#aa15fef5dd09bffb82b0d3ce5d7de3255">ezMath::IsEqual</a>(x, rhs.x, fEpsilon) &amp;&amp; <a class="code" href="../../db/d78/namespaceez_math.htm#aa15fef5dd09bffb82b0d3ce5d7de3255">ezMath::IsEqual</a>(y, rhs.y, fEpsilon) &amp;&amp; <a class="code" href="../../db/d78/namespaceez_math.htm#aa15fef5dd09bffb82b0d3ce5d7de3255">ezMath::IsEqual</a>(z, rhs.z, fEpsilon));</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;}</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160; </div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;{</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;  <span class="keywordflow">return</span> v1.<a class="code" href="../../d6/dbd/structez_vec3_template.htm#a3ca79a707f6473af0e295909fb3f3cb1">IsIdentical</a>(v2);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;}</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160; </div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;{</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;  <span class="keywordflow">return</span> !v1.<a class="code" href="../../d6/dbd/structez_vec3_template.htm#a3ca79a707f6473af0e295909fb3f3cb1">IsIdentical</a>(v2);</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;}</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160; </div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;EZ_FORCE_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;{</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;  EZ_NAN_ASSERT(&amp;v1);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  EZ_NAN_ASSERT(&amp;v2);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;  <span class="keywordflow">if</span> (v1.x &lt; v2.x)</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;  <span class="keywordflow">if</span> (v1.x &gt; v2.x)</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;  <span class="keywordflow">if</span> (v1.y &lt; v2.y)</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;  <span class="keywordflow">if</span> (v1.y &gt; v2.y)</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160; </div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;  <span class="keywordflow">return</span> (v1.z &lt; v2.z);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;}</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160; </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00455"></a><span class="lineno"><a class="line" href="../../d6/dbd/structez_vec3_template.htm#ad22967387501e0bf86c461264c58a194">  455</a></span>&#160;<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a> <a class="code" href="../../d6/dbd/structez_vec3_template.htm#ad22967387501e0bf86c461264c58a194">ezVec3Template&lt;Type&gt;::GetRefractedVector</a>(<span class="keyword">const</span> <a class="code" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template&lt;Type&gt;</a>&amp; vNormal, Type fRefIndex1, Type fRefIndex2)<span class="keyword"> const</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;  EZ_ASSERT_DEBUG(vNormal.<a class="code" href="../../d6/dbd/structez_vec3_template.htm#a77807aabfdcd88cdba96f5b500fe9522">IsNormalized</a>(), <span class="stringliteral">&quot;vNormal must be normalized.&quot;</span>);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160; </div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;  <span class="keyword">const</span> Type n = fRefIndex1 / fRefIndex2;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;  <span class="keyword">const</span> Type cosI = this-&gt;Dot(vNormal);</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;  <span class="keyword">const</span> Type sinT2 = n * n * (1.0f - (cosI * cosI));</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160; </div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;  <span class="comment">// invalid refraction</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;  <span class="keywordflow">if</span> (sinT2 &gt; 1.0f)</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="keywordflow">return</span> (*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160; </div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;  <span class="keywordflow">return</span> ((n * (*<span class="keyword">this</span>)) - (n + <a class="code" href="../../db/d78/namespaceez_math.htm#a7f4e38e30c7914d11bcc85b0a4b1c09a">ezMath::Sqrt</a>(1.0f - sinT2)) * vNormal);</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructez_vec3_template_htm_a8a3564acb96f281e3ad47187d98a9d01"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a8a3564acb96f281e3ad47187d98a9d01">ezVec3Template::CalculateNormal</a></div><div class="ttdeci">ezResult CalculateNormal(const ezVec3Template&lt; Type &gt; &amp;v1, const ezVec3Template&lt; Type &gt; &amp;v2, const ezVec3Template&lt; Type &gt; &amp;v3)</div><div class="ttdoc">Calculates the normal of the triangle defined by the three vertices. Vertices are assumed to be order...</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:245</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a8a43db9c1ba66e580bf3eea85cc3f559"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a8a43db9c1ba66e580bf3eea85cc3f559">ezVec3Template::operator+=</a></div><div class="ttdeci">void operator+=(const ezVec3Template&lt; Type &gt; &amp;rhs)</div><div class="ttdoc">Adds rhs component-wise to this vector.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:178</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a7fa99794e2995ef0c95114b3e6960ff7"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a7fa99794e2995ef0c95114b3e6960ff7">ezVec3Template::CompMax</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; CompMax(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise maximum of *this and rhs.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:318</div></div>
<div class="ttc" id="astructez_vec3_template_htm_aceb7b6c4aa4040fb03d85f0adb27a433"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#aceb7b6c4aa4040fb03d85f0adb27a433">ezVec3Template::GetLength</a></div><div class="ttdeci">Type GetLength() const</div><div class="ttdoc">Returns the length of the vector.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:54</div></div>
<div class="ttc" id="astructez_vec3_template_htm_ad22967387501e0bf86c461264c58a194"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#ad22967387501e0bf86c461264c58a194">ezVec3Template::GetRefractedVector</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; GetRefractedVector(const ezVec3Template&lt; Type &gt; &amp;vNormal, Type fRefIndex1, Type fRefIndex2) const</div><div class="ttdoc">Returns this vector, refracted at vNormal, using the refraction index of the current medium and the m...</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:455</div></div>
<div class="ttc" id="astructez_result_htm"><div class="ttname"><a href="../../d4/da9/structez_result.htm">ezResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition:</b> Types.h:50</div></div>
<div class="ttc" id="anamespaceez_math_htm_ac0dc1e649849596eedbfa9f54894d779"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ac0dc1e649849596eedbfa9f54894d779">ezMath::Invert</a></div><div class="ttdeci">constexpr Type Invert(Type f)</div><div class="ttdoc">Returns 1 / f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:62</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a726ff5ddd3f38d4dfc4e99f541023674"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a726ff5ddd3f38d4dfc4e99f541023674">ezVec3Template::GetAngleBetween</a></div><div class="ttdeci">ezAngle GetAngleBetween(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the positive angle between *this and rhs. Both this and rhs must be normalized.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:300</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a4283a7b22b195027731f0a02bbc58611"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a4283a7b22b195027731f0a02bbc58611">ezVec3Template::MakeOrthogonalTo</a></div><div class="ttdeci">void MakeOrthogonalTo(const ezVec3Template&lt; Type &gt; &amp;vNormal)</div><div class="ttdoc">Modifies this direction vector to be orthogonal to the given (normalized) direction vector....</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:252</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a330f758d541d570f19443bbbc0969e5e"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a330f758d541d570f19443bbbc0969e5e">ezVec3Template::IsNaN</a></div><div class="ttdeci">bool IsNaN() const</div><div class="ttdoc">Returns true, if any of x, y or z is NaN.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:144</div></div>
<div class="ttc" id="astructez_vec3_template_htm_ab0ba74a3f20ca18355119f33c328f0c6"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#ab0ba74a3f20ca18355119f33c328f0c6">ezVec3Template::SetLength</a></div><div class="ttdeci">ezResult SetLength(Type fNewLength, Type fEpsilon=ezMath::DefaultEpsilon&lt; Type &gt;())</div><div class="ttdoc">Tries to rescale the vector to the given length. If the vector is too close to zero,...</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:60</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a08f4508a3c6894a4bd1ca9c0f57bd466"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a08f4508a3c6894a4bd1ca9c0f57bd466">ezVec3Template::GetReflectedVector</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; GetReflectedVector(const ezVec3Template&lt; Type &gt; &amp;vNormal) const</div><div class="ttdoc">Returns this vector reflected at vNormal.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:274</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a99a8f512e13672cde4e60a453a922e50"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a99a8f512e13672cde4e60a453a922e50">ezVec3Template::GetOrthogonalVector</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; GetOrthogonalVector() const</div><div class="ttdoc">Returns some arbitrary vector orthogonal to this one. The vector is NOT normalized.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:262</div></div>
<div class="ttc" id="anamespaceez_math_htm_a7f4e38e30c7914d11bcc85b0a4b1c09a"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a7f4e38e30c7914d11bcc85b0a4b1c09a">ezMath::Sqrt</a></div><div class="ttdeci">EZ_ALWAYS_INLINE double Sqrt(double f)</div><div class="ttdoc">Returns the square root of f.</div><div class="ttdef"><b>Definition:</b> MathDouble_inl.h:63</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a216fcb73cd48b1bd9062fdf9b8be0b88"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a216fcb73cd48b1bd9062fdf9b8be0b88">ezVec3Template::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Checks that all components are finite numbers.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:157</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a5349436a34546a479a64bbe2ffdbb969"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a5349436a34546a479a64bbe2ffdbb969">ezVec3Template::operator-=</a></div><div class="ttdeci">void operator-=(const ezVec3Template&lt; Type &gt; &amp;rhs)</div><div class="ttdoc">Subtracts rhs component-wise from this vector.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:188</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a1e0aabc06569839962d16a71def3ae6b"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a1e0aabc06569839962d16a71def3ae6b">ezVec3Template::CompMul</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; CompMul(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise multiplication of *this and rhs.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:337</div></div>
<div class="ttc" id="anamespaceez_math_htm_a6f7ee19d0f8e81ff6ae5f394075e3a56"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:38</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a371533372c47fa274e0e39144d51f73c"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a371533372c47fa274e0e39144d51f73c">ezVec3Template::NormalizeIfNotZero</a></div><div class="ttdeci">ezResult NormalizeIfNotZero(const ezVec3Template&lt; Type &gt; &amp;vFallback=ezVec3Template(1, 0, 0), Type fEpsilon=ezMath::SmallEpsilon&lt; Type &gt;())</div><div class="ttdoc">Tries to normalize this vector. If the vector is too close to zero, EZ_FAILURE is returned and the ve...</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:101</div></div>
<div class="ttc" id="anamespaceez_math_htm_a746232810344aec07f7b870fa302fa8f"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a746232810344aec07f7b870fa302fa8f">ezMath::Abs</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Abs(T f)</div><div class="ttdoc">Returns the absolute value of f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:20</div></div>
<div class="ttc" id="anamespaceez_math_htm_aaaedc100ad5d35ae5362021b9d1b0e7c"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#aaaedc100ad5d35ae5362021b9d1b0e7c">ezMath::Clamp</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Clamp(T value, T min_val, T max_val)</div><div class="ttdoc">Clamps &quot;value&quot; to the range [min; max]. Returns &quot;value&quot;, if it is inside the range already.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:50</div></div>
<div class="ttc" id="astructez_vec3_template_htm_af0a6d50203589742653c50484734ef19"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#af0a6d50203589742653c50484734ef19">ezVec3Template::Normalize</a></div><div class="ttdeci">void Normalize()</div><div class="ttdoc">Normalizes this vector.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:95</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a52d86f05731890b4a5ca7762a5d65bb3"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a52d86f05731890b4a5ca7762a5d65bb3">ezVec3Template::IsZero</a></div><div class="ttdeci">bool IsZero() const</div><div class="ttdoc">Returns, whether this vector is (0, 0, 0).</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:128</div></div>
<div class="ttc" id="astructez_vec3_template_htm_ab9f531d0e615080d02ed4a42b6b184e5"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#ab9f531d0e615080d02ed4a42b6b184e5">ezVec3Template::operator-</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; operator-() const</div><div class="ttdoc">Returns the negation of this vector.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:170</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a74e9b90edf238ac0678959334e4f3b6c"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a74e9b90edf238ac0678959334e4f3b6c">ezVec3Template::GetLengthAndNormalize</a></div><div class="ttdeci">Type GetLengthAndNormalize()</div><div class="ttdoc">Normalizes this vector and returns its previous length in one operation. More efficient than calling ...</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:78</div></div>
<div class="ttc" id="anamespaceez_math_htm_ad0c686588a98fa8c07722fc48f1ffd7f"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ad0c686588a98fa8c07722fc48f1ffd7f">ezMath::IsZero</a></div><div class="ttdeci">bool IsZero(Type f, Type fEpsilon)</div><div class="ttdoc">Checks whether the given number is close to zero.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:217</div></div>
<div class="ttc" id="aclassez_angle_htm"><div class="ttname"><a href="../../db/d6f/classez_angle.htm">ezAngle</a></div><div class="ttdoc">Float wrapper struct for a safe usage and conversions of angles.</div><div class="ttdef"><b>Definition:</b> Angle.h:9</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a3ca79a707f6473af0e295909fb3f3cb1"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a3ca79a707f6473af0e295909fb3f3cb1">ezVec3Template::IsIdentical</a></div><div class="ttdeci">bool IsIdentical(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Equality Check (bitwise)</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:407</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a852195f72abdd019095140134502fbbb"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a852195f72abdd019095140134502fbbb">ezVec3Template::CompClamp</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; CompClamp(const ezVec3Template&lt; Type &gt; &amp;low, const ezVec3Template&lt; Type &gt; &amp;high) const</div><div class="ttdoc">Returns the component-wise clamped value of *this between low and high.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:327</div></div>
<div class="ttc" id="astructez_vec3_template_htm_af217f183c290134d4db0d382759bdfe3"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#af217f183c290134d4db0d382759bdfe3">ezVec3Template::SetZero</a></div><div class="ttdeci">void SetZero()</div><div class="ttdoc">Sets the vector to all zero.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:48</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a77807aabfdcd88cdba96f5b500fe9522"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a77807aabfdcd88cdba96f5b500fe9522">ezVec3Template::IsNormalized</a></div><div class="ttdeci">bool IsNormalized(Type fEpsilon=ezMath::HugeEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Returns, whether the squared length of this vector is between 0.999f and 1.001f.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:121</div></div>
<div class="ttc" id="astructez_vec3_template_htm_ab7672fa59655c642c16f8caf581e03f3"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#ab7672fa59655c642c16f8caf581e03f3">ezVec3Template::Dot</a></div><div class="ttdeci">Type Dot(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the Dot-product of the two vectors (commutative, order does not matter)</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:282</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a0dbd093d6f8abe8f783ea83b0b40a744"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a0dbd093d6f8abe8f783ea83b0b40a744">ezVec3Template::GetNormalized</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; GetNormalized() const</div><div class="ttdoc">Returns a normalized version of this vector, leaves the vector itself unchanged.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:86</div></div>
<div class="ttc" id="anamespaceez_math_htm_ad8009b4da9cb427658d71e30576f209e"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">ezMath::Min</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:26</div></div>
<div class="ttc" id="astructez_vec3_template_htm_aa72f7d2a6d9b8d30f67c36eef15db7b7"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#aa72f7d2a6d9b8d30f67c36eef15db7b7">ezVec3Template::CompMin</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; CompMin(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise minimum of *this and rhs.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:309</div></div>
<div class="ttc" id="astructez_vec3_template_htm_ac75d15f3524fbc880a4cb7ae1cb45094"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#ac75d15f3524fbc880a4cb7ae1cb45094">ezVec3Template::CrossRH</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; CrossRH(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the Cross-product of the two vectors (NOT commutative, order DOES matter)</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:291</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a8009bc202b1f20dc95d4296d063f3ff4"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a8009bc202b1f20dc95d4296d063f3ff4">ezVec3Template::operator*=</a></div><div class="ttdeci">void operator*=(const ezVec3Template&lt; Type &gt; &amp;rhs)</div><div class="ttdoc">Multiplies rhs component-wise to this vector.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:198</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a4693ce7e3ea568fb31504369e69836fb"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a4693ce7e3ea568fb31504369e69836fb">ezVec3Template::Set</a></div><div class="ttdeci">void Set(Type xyz)</div><div class="ttdoc">Sets all 3 components to this value.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:32</div></div>
<div class="ttc" id="astructez_arg_f_htm"><div class="ttname"><a href="../../d7/dfa/structez_arg_f.htm">ezArgF</a></div><div class="ttdef"><b>Definition:</b> FormatStringArgs.h:46</div></div>
<div class="ttc" id="astructez_vec3_template_htm_aa47fcb03a5aa1272b8afe9ba00e66ee9"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#aa47fcb03a5aa1272b8afe9ba00e66ee9">ezVec3Template::GetLengthSquared</a></div><div class="ttdeci">Type GetLengthSquared() const</div><div class="ttdoc">Returns the squared length. Faster, since no square-root is taken. Useful, if one only wants to compa...</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:70</div></div>
<div class="ttc" id="anamespaceez_math_htm_aa15fef5dd09bffb82b0d3ce5d7de3255"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#aa15fef5dd09bffb82b0d3ce5d7de3255">ezMath::IsEqual</a></div><div class="ttdeci">constexpr bool IsEqual(Type lhs, Type rhs, Type fEpsilon)</div><div class="ttdoc">Checks, whether fValue is in the range [fDesired - fMaxImprecision; fDesired + fMaxImprecision].</div><div class="ttdef"><b>Definition:</b> Math_inl.h:205</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a97da3d92338ae762c2ddf6573cadd832"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a97da3d92338ae762c2ddf6573cadd832">ezVec3Template::CompDiv</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; CompDiv(const ezVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise division of *this and rhs.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:346</div></div>
<div class="ttc" id="astructez_vec3_template_htm_ab6e2563b421a4d9e637eb7472fa6b327"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#ab6e2563b421a4d9e637eb7472fa6b327">ezVec3Template::Abs</a></div><div class="ttdeci">const ezVec3Template&lt; Type &gt; Abs() const</div><div class="ttdoc">brief Returns the component-wise absolute of *this.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:355</div></div>
<div class="ttc" id="astructez_vec3_template_htm"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a></div><div class="ttdoc">A 3-component vector class.</div><div class="ttdef"><b>Definition:</b> Declarations.h:134</div></div>
<div class="ttc" id="astructez_vec3_template_htm_af7dd54170c3e008dc8f7065573947e4b"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#af7dd54170c3e008dc8f7065573947e4b">ezVec3Template::IsEqual</a></div><div class="ttdeci">bool IsEqual(const ezVec3Template&lt; Type &gt; &amp;rhs, Type fEpsilon) const</div><div class="ttdoc">Equality Check with epsilon.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:416</div></div>
<div class="ttc" id="astructez_vec3_template_htm_a96f63b8bd98381acc8603773f183ab44"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#a96f63b8bd98381acc8603773f183ab44">ezVec3Template::ezVec3Template</a></div><div class="ttdeci">ezVec3Template()</div><div class="ttdoc">default-constructed vector is uninitialized (for speed)</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:4</div></div>
<div class="ttc" id="anamespaceez_math_htm_afcbf5132d5cbfc7070cd6d3086709ceb"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#afcbf5132d5cbfc7070cd6d3086709ceb">ezMath::ACos</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezAngle ACos(float f)</div><div class="ttdoc">Returns the arcus cosinus of f.</div><div class="ttdef"><b>Definition:</b> MathFloat_inl.h:58</div></div>
<div class="ttc" id="astructez_vec3_template_htm_acf4fd0903b014af9fc671b4cc47f7853"><div class="ttname"><a href="../../d6/dbd/structez_vec3_template.htm#acf4fd0903b014af9fc671b4cc47f7853">ezVec3Template::operator/=</a></div><div class="ttdeci">void operator/=(const ezVec3Template&lt; Type &gt; &amp;rhs)</div><div class="ttdoc">Divides this vector component-wise by rhs.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:210</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_4ad0f5fbee83b30173e7fecedeea26f0.htm">Math</a></li><li class="navelem"><a class="el" href="../../dir_89ec743f7412cd7cb287fad7b6649245.htm">Implementation</a></li><li class="navelem"><b>Vec3_inl.h</b></li>
    <li class="footer">Generated on Mon Oct 18 2021 15:33:28 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
