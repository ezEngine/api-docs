<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Types/Implementation/Variant_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 24.09</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d5/d0a/_variant__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Variant_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160; </div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;EZ_WARNING_PUSH()</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;EZ_WARNING_DISABLE_MSVC(4702) <span class="comment">// Unreachable code for some reason</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>::<a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>()</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;{</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  m_uiType = Type::Invalid;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;  m_bIsShared = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;}</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;EZ_WARNING_POP()</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;EZ_WARNING_PUSH()</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;EZ_WARNING_DISABLE_CLANG(&quot;-Wunused-local-typedef&quot;)</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;EZ_WARNING_DISABLE_GCC(&quot;-Wunused-local-typedefs&quot;)</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#a4bc357e9365781be44da78cc1fc4d454">   17</a></span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>::<a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>(const <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; other)</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  CopyFrom(other);</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;}</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#a28de848797207790d3ff2e568cfa4329">   22</a></span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp;&amp; other) noexcept</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  MoveFrom(std::move(other));</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;}</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; value)</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;}</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> ezInt8&amp; value)</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> ezUInt8&amp; value)</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> ezInt16&amp; value)</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> ezUInt16&amp; value)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> ezInt32&amp; value)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> ezUInt32&amp; value)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> ezInt64&amp; value)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> ezUInt64&amp; value)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <span class="keywordtype">float</span>&amp; value)</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <span class="keywordtype">double</span>&amp; value)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d01/classez_color.htm">ezColor</a>&amp; value)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d1/df8/classez_vec2_template.htm">ezVec2</a>&amp; value)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3</a>&amp; value)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/dd2/classez_vec4_template.htm">ezVec4</a>&amp; value)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d1/df8/classez_vec2_template.htm">ezVec2I32</a>&amp; value)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3I32</a>&amp; value)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/dd2/classez_vec4_template.htm">ezVec4I32</a>&amp; value)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d1/df8/classez_vec2_template.htm">ezVec2U32</a>&amp; value)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/df1/classez_vec3_template.htm">ezVec3U32</a>&amp; value)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;{</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/dd2/classez_vec4_template.htm">ezVec4U32</a>&amp; value)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;{</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../de/d15/classez_quat_template.htm">ezQuat</a>&amp; value)</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../d3/d90/structez_time.htm">ezTime</a>&amp; value)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/d89/classez_uuid.htm">ezUuid</a>&amp; value)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../db/d6f/classez_angle.htm">ezAngle</a>&amp; value)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../da/d51/classez_color_gamma_u_b.htm">ezColorGammaUB</a>&amp; value)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../de/dce/classez_hashed_string.htm">ezHashedString</a>&amp; value)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> <a class="code" href="../../db/dcf/classez_temp_hashed_string.htm">ezTempHashedString</a>&amp; value)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;{</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  InitInplace(value);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a30fc1012cda837e3ebb8fcce36a51576">ezVariantClass::CustomTypeCast</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  <span class="keyword">const</span> constexpr <span class="keywordtype">bool</span> forceSharing = TypeDeduction&lt;T&gt;::forceSharing;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  <span class="keyword">const</span> constexpr <span class="keywordtype">bool</span> inlineSized = <span class="keyword">sizeof</span>(T) &lt;= InlinedStruct::DataSize;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  <span class="keyword">const</span> constexpr <span class="keywordtype">bool</span> isPOD = <a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType&lt;T&gt;::value</a>;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  InitTypedObject(value, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a> &lt; (!forceSharing &amp;&amp; inlineSized &amp;&amp; isPOD) ? 1 : 0 &gt; ());</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keyword">const</span> T* value)</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;{</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  constexpr <span class="keywordtype">bool</span> bla = !std::is_same&lt;T, void&gt;::value;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  static_assert(bla);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  InitTypedPointer(<span class="keyword">const_cast&lt;</span>T*<span class="keyword">&gt;</span>(value), ezGetStaticRTTI&lt;T&gt;());</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#a2ba66830b7b90d489f5a3337efb71f16">  184</a></span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a>(<span class="keywordtype">void</span>* value, <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  InitTypedPointer(value, pType);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#a7cd8df78e9a2fc22c4aab614d6f9f316">  189</a></span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../de/de6/classez_variant.htm#a7cd8df78e9a2fc22c4aab614d6f9f316">ezVariant::~ezVariant</a>()</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;{</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  Release();</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;}</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#a856c5e7106896004b8d64acc67706336">  194</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../de/de6/classez_variant.htm#a856c5e7106896004b8d64acc67706336">ezVariant::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; other)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;{</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp;other)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    Release();</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    CopyFrom(other);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;}</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#a1d52d600ad7e7da387512b7c9d5f85b6">  203</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../de/de6/classez_variant.htm#a856c5e7106896004b8d64acc67706336">ezVariant::operator=</a>(<a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp;&amp; other) noexcept</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;{</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp;other)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    Release();</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    MoveFrom(std::move(other));</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  }</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;}</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../de/de6/classez_variant.htm#a856c5e7106896004b8d64acc67706336">ezVariant::operator=</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;{</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  *<span class="keyword">this</span> = <a class="code" href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant</a>(value);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;EZ_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/de6/classez_variant.htm#ab65bd8d072ce37a60540bbb855269f95">ezVariant::operator==</a>(<span class="keyword">const</span> T&amp; other)<span class="keyword"> const</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../de/de6/classez_variant.htm#a74cbd57a00a32985066d5ac2d6272f65">IsFloatingPoint</a>())</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">if</span> constexpr (TypeDeduction&lt;T&gt;::value &gt; <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612">Type::Invalid</a> &amp;&amp; TypeDeduction&lt;T&gt;::value &lt;= <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4dce61236b47f48fc6f4e40f9929abbd">Type::Double</a>)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;      <span class="keywordflow">return</span> ConvertNumber&lt;double&gt;() == <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(other);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="../../de/de6/classez_variant.htm#a28d58328f691dad9211e686939f2a52c">IsNumber</a>())</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  {</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">if</span> constexpr (TypeDeduction&lt;T&gt;::value &gt; <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612">Type::Invalid</a> &amp;&amp; TypeDeduction&lt;T&gt;::value &lt;= <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4dce61236b47f48fc6f4e40f9929abbd">Type::Double</a>)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;      <span class="keywordflow">return</span> ConvertNumber&lt;ezInt64&gt;() == <span class="keyword">static_cast&lt;</span>ezInt64<span class="keyword">&gt;</span>(other);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;T, ezHashedString&gt;)</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">if</span> (m_uiType == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a9e2d0b789ad6dddf2345ae1b5ae982c4">Type::TempHashedString</a>)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      <span class="keywordflow">return</span> Cast&lt;ezTempHashedString&gt;() == other;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;T, ezTempHashedString&gt;)</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  {</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">if</span> (m_uiType == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4f2c3b6f7fa7ed4b569becf000c50a10">Type::HashedString</a>)</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    {</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;      <span class="keywordflow">return</span> Cast&lt;ezHashedString&gt;() == other;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;T, ezStringView&gt;)</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">if</span> (m_uiType == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a48205086a6745f6402107719a3d7da19">Type::String</a>)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;      <span class="keywordflow">return</span> Cast&lt;ezString&gt;().GetView() == other;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;T, ezString&gt;)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">if</span> (m_uiType == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a1dcad4ffe7766be8ea210b487357c336">Type::StringView</a>)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;      <span class="keywordflow">return</span> Cast&lt;ezStringView&gt;() == other.GetView();</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    }</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160; </div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  <span class="keyword">using</span> StorageType = <span class="keyword">typename</span> TypeDeduction&lt;T&gt;::StorageType;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  EZ_ASSERT_DEV(IsA&lt;StorageType&gt;(), <span class="stringliteral">&quot;Stored type &#39;{0}&#39; does not match comparison type &#39;{1}&#39;&quot;</span>, m_uiType, TypeDeduction&lt;T&gt;::value);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <span class="keywordflow">return</span> Cast&lt;StorageType&gt;() == other;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#af2f7572448f55313284fd5a3b1495ef0">  274</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/de6/classez_variant.htm#af2f7572448f55313284fd5a3b1495ef0">ezVariant::IsValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  <span class="keywordflow">return</span> m_uiType != <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612">Type::Invalid</a>;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#a28d58328f691dad9211e686939f2a52c">  279</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/de6/classez_variant.htm#a28d58328f691dad9211e686939f2a52c">ezVariant::IsNumber</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  <span class="keywordflow">return</span> IsNumberStatic(m_uiType);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;}</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#a74cbd57a00a32985066d5ac2d6272f65">  284</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/de6/classez_variant.htm#a74cbd57a00a32985066d5ac2d6272f65">ezVariant::IsFloatingPoint</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="keywordflow">return</span> IsFloatingPointStatic(m_uiType);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;}</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00289"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#a1c3d6c218528d70fdd86145254ce577b">  289</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/de6/classez_variant.htm#a1c3d6c218528d70fdd86145254ce577b">ezVariant::IsString</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="keywordflow">return</span> IsStringStatic(m_uiType);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#a0dc8f8b3d5270b597c7ad37e94500ff0">  294</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/de6/classez_variant.htm#a0dc8f8b3d5270b597c7ad37e94500ff0">ezVariant::IsHashedString</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <span class="keywordflow">return</span> IsHashedStringStatic(m_uiType);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;}</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160; </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a544fe59452cc4a860699b3c45d99b37c">ezVariantClass::DirectCast</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/de6/classez_variant.htm#a694f12156828e7de34c4d592ef554aef">ezVariant::IsA</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  <span class="keywordflow">return</span> m_uiType == TypeDeduction&lt;T&gt;::value;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;}</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab5146ef580ac0d56e43e0b29edcdab18">ezVariantClass::PointerCast</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/de6/classez_variant.htm#a694f12156828e7de34c4d592ef554aef">ezVariant::IsA</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  <span class="keywordflow">if</span> (m_uiType == TypeDeduction&lt;T&gt;::value)</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  {</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keyword">const</span> <a class="code" href="../../d3/d1f/structez_typed_pointer.htm">ezTypedPointer</a>&amp; ptr = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="../../d3/d1f/structez_typed_pointer.htm">ezTypedPointer</a>*<span class="keyword">&gt;</span>(&amp;m_Data);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="comment">// Always allow cast to void*.</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordflow">if</span> constexpr (std::is_same&lt;T, void*&gt;::value || std::is_same&lt;T, const void*&gt;::value)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ptr.m_pType)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;      <span class="keyword">using</span> NonPointerT = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#a9dcee6bb8dad253cbdc804cd45ce22f1">ezTypeTraits&lt;T&gt;::NonConstReferencePointerType</a>;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;      <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType = ezGetStaticRTTI&lt;NonPointerT&gt;();</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;      <span class="keywordflow">return</span> IsDerivedFrom(ptr.m_pType, pType);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!ptr.m_pObject)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;      <span class="comment">// nullptr can be converted to anything</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  }</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;}</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab10e0ffd04891df70e6a65c01c3c4f94">ezVariantClass::TypedObject</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/de6/classez_variant.htm#a694f12156828e7de34c4d592ef554aef">ezVariant::IsA</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  <span class="keywordflow">return</span> m_uiType == TypeDeduction&lt;T&gt;::value;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;}</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a30fc1012cda837e3ebb8fcce36a51576">ezVariantClass::CustomTypeCast</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/de6/classez_variant.htm#a694f12156828e7de34c4d592ef554aef">ezVariant::IsA</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  <span class="keyword">using</span> NonRefT = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;T&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  <span class="keywordflow">if</span> (m_uiType == TypeDeduction&lt;T&gt;::value)</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType = <a class="code" href="../../de/de6/classez_variant.htm#a50f0cb8c5c4b936f42925bdb1769b75b">GetReflectedType</a>())</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    {</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;      <span class="keywordflow">return</span> IsDerivedFrom(pType, ezGetStaticRTTI&lt;NonRefT&gt;());</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  }</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;}</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#a05b7a40ffc160d48d71d39fce5f1ac7c">  351</a></span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">ezVariant::Type::Enum</a> <a class="code" href="../../de/de6/classez_variant.htm#a05b7a40ffc160d48d71d39fce5f1ac7c">ezVariant::GetType</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">Type::Enum</a><span class="keyword">&gt;</span>(m_uiType);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;}</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a544fe59452cc4a860699b3c45d99b37c">ezVariantClass::DirectCast</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;EZ_ALWAYS_INLINE <span class="keyword">const</span> T&amp; <a class="code" href="../../de/de6/classez_variant.htm#a053a9279ed97d59955850d0e0760327c">ezVariant::Get</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  EZ_ASSERT_DEV(IsA&lt;T&gt;(), <span class="stringliteral">&quot;Stored type &#39;{0}&#39; does not match requested type &#39;{1}&#39;&quot;</span>, m_uiType, TypeDeduction&lt;T&gt;::value);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  <span class="keywordflow">return</span> Cast&lt;T&gt;();</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;}</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab5146ef580ac0d56e43e0b29edcdab18">ezVariantClass::PointerCast</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;EZ_ALWAYS_INLINE T <a class="code" href="../../de/de6/classez_variant.htm#a053a9279ed97d59955850d0e0760327c">ezVariant::Get</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  EZ_ASSERT_DEV(IsA&lt;T&gt;(), <span class="stringliteral">&quot;Stored type &#39;{0}&#39; does not match requested type &#39;{1}&#39;&quot;</span>, m_uiType, TypeDeduction&lt;T&gt;::value);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  <span class="keywordflow">return</span> Cast&lt;T&gt;();</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;}</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab10e0ffd04891df70e6a65c01c3c4f94">ezVariantClass::TypedObject</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;EZ_ALWAYS_INLINE <span class="keyword">const</span> T <a class="code" href="../../de/de6/classez_variant.htm#a053a9279ed97d59955850d0e0760327c">ezVariant::Get</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  EZ_ASSERT_DEV(IsA&lt;T&gt;(), <span class="stringliteral">&quot;Stored type &#39;{0}&#39; does not match requested type &#39;{1}&#39;&quot;</span>, m_uiType, TypeDeduction&lt;T&gt;::value);</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  <span class="keywordflow">return</span> Cast&lt;T&gt;();</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;}</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a30fc1012cda837e3ebb8fcce36a51576">ezVariantClass::CustomTypeCast</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;EZ_ALWAYS_INLINE <span class="keyword">const</span> T&amp; <a class="code" href="../../de/de6/classez_variant.htm#a053a9279ed97d59955850d0e0760327c">ezVariant::Get</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  EZ_ASSERT_DEV(m_uiType == TypeDeduction&lt;T&gt;::value, <span class="stringliteral">&quot;Stored type &#39;{0}&#39; does not match requested type &#39;{1}&#39;&quot;</span>, m_uiType, TypeDeduction&lt;T&gt;::value);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  <span class="keywordflow">return</span> Cast&lt;T&gt;();</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;}</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a544fe59452cc4a860699b3c45d99b37c">ezVariantClass::DirectCast</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;EZ_ALWAYS_INLINE T&amp; ezVariant::GetWritable()</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;{</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm#a2622fb2a5680325a1ee4ecdd9e14f39a">GetWriteAccess</a>();</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span>T&amp;<span class="keyword">&gt;</span>(Get&lt;T&gt;());</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;}</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab5146ef580ac0d56e43e0b29edcdab18">ezVariantClass::PointerCast</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;EZ_ALWAYS_INLINE T ezVariant::GetWritable()</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;{</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm#a2622fb2a5680325a1ee4ecdd9e14f39a">GetWriteAccess</a>();</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span>T<span class="keyword">&gt;</span>(Get&lt;T&gt;());</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;}</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160; </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a30fc1012cda837e3ebb8fcce36a51576">ezVariantClass::CustomTypeCast</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;EZ_ALWAYS_INLINE T&amp; ezVariant::GetWritable()</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;{</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;  <a class="code" href="../../de/de6/classez_variant.htm#a2622fb2a5680325a1ee4ecdd9e14f39a">GetWriteAccess</a>();</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span>T&amp;<span class="keyword">&gt;</span>(Get&lt;T&gt;());</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;}</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#a549cde299001c85ce0ddc4f231e684c3">  405</a></span>&#160;EZ_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">void</span>* <a class="code" href="../../de/de6/classez_variant.htm#a549cde299001c85ce0ddc4f231e684c3">ezVariant::GetData</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;  <span class="keywordflow">if</span> (m_uiType == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a69f1de31ac5b331ea6c2725c8b6a8d41">Type::TypedPointer</a>)</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;  {</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordflow">return</span> Cast&lt;ezTypedPointer&gt;().m_pObject;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  }</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  <span class="keywordflow">return</span> m_bIsShared ? m_Data.shared-&gt;m_Ptr : &amp;m_Data;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;}</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160; </div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/de6/classez_variant.htm#a8588b2d87f2312ae4206cec6576a4373">ezVariant::CanConvertTo</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/de6/classez_variant.htm#a8588b2d87f2312ae4206cec6576a4373">CanConvertTo</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">Type::Enum</a><span class="keyword">&gt;</span>(TypeDeduction&lt;T&gt;::value));</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;}</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160; </div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00421"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#a188df8c0b7b0c9d06a312135f3672e8d">  421</a></span>&#160;T <a class="code" href="../../de/de6/classez_variant.htm#a188df8c0b7b0c9d06a312135f3672e8d">ezVariant::ConvertTo</a>(<a class="code" href="../../d4/da9/structez_result.htm">ezResult</a>* out_pConversionStatus <span class="comment">/* = nullptr*/</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;  <span class="keywordflow">if</span> (!CanConvertTo&lt;T&gt;())</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;  {</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keywordflow">if</span> (out_pConversionStatus != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;      *out_pConversionStatus = EZ_FAILURE;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160; </div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordflow">return</span> T();</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;  }</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160; </div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;  <span class="keywordflow">if</span> (m_uiType == <a class="code" href="../../df/da8/structez_variant_type_deduction.htm">TypeDeduction&lt;T&gt;::value</a>)</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;  {</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keywordflow">if</span> (out_pConversionStatus != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;      *out_pConversionStatus = EZ_SUCCESS;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160; </div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordflow">return</span> Cast&lt;T&gt;();</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;  }</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160; </div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;  T result = {};</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  <span class="keywordtype">bool</span> bSuccessful = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;  ezVariantHelper::To(*<span class="keyword">this</span>, result, bSuccessful);</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160; </div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;  <span class="keywordflow">if</span> (out_pConversionStatus != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    *out_pConversionStatus = bSuccessful ? EZ_SUCCESS : EZ_FAILURE;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160; </div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;  <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;}</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160; </div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160; </div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160; </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00453"></a><span class="lineno"><a class="line" href="../../de/de6/classez_variant.htm#a1a853050f5a2db162beb802ad2cac8a9">  453</a></span>&#160;EZ_FORCE_INLINE <span class="keywordtype">void</span> ezVariant::InitInplace(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;{</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;  static_assert(<a class="code" href="../../df/da8/structez_variant_type_deduction.htm">TypeDeduction&lt;T&gt;::value</a> != <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612">Type::Invalid</a>, <span class="stringliteral">&quot;value of this type cannot be stored in a Variant&quot;</span>);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;  static_assert(<a class="code" href="../../d5/d86/structez_get_type_class.htm">ezGetTypeClass&lt;T&gt;::value</a> &lt;= ezTypeIsMemRelocatable::value, <span class="stringliteral">&quot;in place data needs to be POD or mem relocatable&quot;</span>);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;  static_assert(<span class="keyword">sizeof</span>(T) &lt;= <span class="keyword">sizeof</span>(m_Data), <span class="stringliteral">&quot;value of this type is too big to bestored inline in a Variant&quot;</span>);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9a615b84872b968b7f8523c6f7b0a25b">ezMemoryUtils::CopyConstruct</a>(<span class="keyword">reinterpret_cast&lt;</span>T*<span class="keyword">&gt;</span>(&amp;m_Data), value, 1);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160; </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;  m_uiType = <a class="code" href="../../df/da8/structez_variant_type_deduction.htm">TypeDeduction&lt;T&gt;::value</a>;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;  m_bIsShared = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;}</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160; </div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;EZ_FORCE_INLINE <span class="keywordtype">void</span> ezVariant::InitTypedObject(<span class="keyword">const</span> T&amp; value, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt&lt;0&gt;</a>)</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;{</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;  <span class="keyword">using</span> StorageType = <span class="keyword">typename</span> TypeDeduction&lt;T&gt;::StorageType;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160; </div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;  static_assert((<span class="keyword">sizeof</span>(StorageType) &gt; <span class="keyword">sizeof</span>(InlinedStruct::DataSize)) || TypeDeduction&lt;T&gt;::forceSharing, <span class="stringliteral">&quot;Value should be inplace instead.&quot;</span>);</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;  static_assert(TypeDeduction&lt;T&gt;::value == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a22fc12dbb9224863e361f30ac161e27b">Type::TypedObject</a>, <span class="stringliteral">&quot;value of this type cannot be stored in a Variant&quot;</span>);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType = ezGetStaticRTTI&lt;T&gt;();</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;  m_Data.shared = EZ_DEFAULT_NEW(TypedSharedData&lt;StorageType&gt;, value, pType);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  m_uiType = <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a22fc12dbb9224863e361f30ac161e27b">Type::TypedObject</a>;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;  m_bIsShared = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;}</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160; </div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;EZ_FORCE_INLINE <span class="keywordtype">void</span> ezVariant::InitTypedObject(<span class="keyword">const</span> T&amp; value, <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt&lt;1&gt;</a>)</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;{</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;  <span class="keyword">using</span> StorageType = <span class="keyword">typename</span> TypeDeduction&lt;T&gt;::StorageType;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;  static_assert((<span class="keyword">sizeof</span>(StorageType) &lt;= InlinedStruct::DataSize) &amp;&amp; !TypeDeduction&lt;T&gt;::forceSharing, <span class="stringliteral">&quot;Value can&#39;t be stored inplace.&quot;</span>);</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;  static_assert(TypeDeduction&lt;T&gt;::value == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a22fc12dbb9224863e361f30ac161e27b">Type::TypedObject</a>, <span class="stringliteral">&quot;value of this type cannot be stored in a Variant&quot;</span>);</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;  static_assert(<a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType&lt;T&gt;::value</a>, <span class="stringliteral">&quot;in place data needs to be POD&quot;</span>);</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9a615b84872b968b7f8523c6f7b0a25b">ezMemoryUtils::CopyConstruct</a>(<span class="keyword">reinterpret_cast&lt;</span>T*<span class="keyword">&gt;</span>(&amp;m_Data), value, 1);</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;  m_Data.inlined.m_pType = ezGetStaticRTTI&lt;T&gt;();</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;  m_uiType = <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a22fc12dbb9224863e361f30ac161e27b">Type::TypedObject</a>;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;  m_bIsShared = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;}</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160; </div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> ezVariant::Release()</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;{</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;  <span class="keywordflow">if</span> (m_bIsShared)</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;  {</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keywordflow">if</span> (m_Data.shared-&gt;m_uiRef.Decrement() == 0)</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    {</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;      EZ_DEFAULT_DELETE(m_Data.shared);</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    }</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;  }</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;}</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160; </div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> ezVariant::CopyFrom(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; other)</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;{</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;  m_uiType = other.m_uiType;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;  m_bIsShared = other.m_bIsShared;</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160; </div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;  <span class="keywordflow">if</span> (m_bIsShared)</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;  {</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    m_Data.shared = other.m_Data.shared;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    m_Data.shared-&gt;m_uiRef.Increment();</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;  }</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (other.<a class="code" href="../../de/de6/classez_variant.htm#af2f7572448f55313284fd5a3b1495ef0">IsValid</a>())</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;  {</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    m_Data = other.m_Data;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;  }</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;}</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160; </div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> ezVariant::MoveFrom(<a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp;&amp; other)</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;{</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;  m_uiType = other.m_uiType;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;  m_bIsShared = other.m_bIsShared;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;  m_Data = other.m_Data;</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160; </div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;  other.m_uiType = <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612">Type::Invalid</a>;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;  other.m_bIsShared = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;  other.m_Data.shared = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;}</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160; </div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a544fe59452cc4a860699b3c45d99b37c">ezVariantClass::DirectCast</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="keyword">const</span> T&amp; ezVariant::Cast()<span class="keyword"> const</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">bool</span> validType = <a class="code" href="../../de/dc1/structez_conversion_test.htm">ezConversionTest&lt;T, typename TypeDeduction&lt;T&gt;::StorageType</a>&gt;::sameType;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;  static_assert(validType, <span class="stringliteral">&quot;Invalid Cast, can only cast to storage type&quot;</span>);</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160; </div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;  <span class="keywordflow">return</span> m_bIsShared ? *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>T*<span class="keyword">&gt;</span>(m_Data.shared-&gt;m_Ptr) : *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T*<span class="keyword">&gt;</span>(&amp;m_Data);</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;}</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160; </div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab5146ef580ac0d56e43e0b29edcdab18">ezVariantClass::PointerCast</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;T ezVariant::Cast()<span class="keyword"> const</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d3/d1f/structez_typed_pointer.htm">ezTypedPointer</a>&amp; ptr = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="../../d3/d1f/structez_typed_pointer.htm">ezTypedPointer</a>*<span class="keyword">&gt;</span>(&amp;m_Data);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160; </div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType = <a class="code" href="../../de/de6/classez_variant.htm#a50f0cb8c5c4b936f42925bdb1769b75b">GetReflectedType</a>();</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;  EZ_IGNORE_UNUSED(pType);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;  <span class="keyword">using</span> NonRefPtrT = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#a9dcee6bb8dad253cbdc804cd45ce22f1">ezTypeTraits&lt;T&gt;::NonConstReferencePointerType</a>;</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;  <span class="keywordflow">if</span> constexpr (!std::is_same&lt;T, void*&gt;::value &amp;&amp; !std::is_same&lt;T, const void*&gt;::value)</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;  {</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    EZ_ASSERT_DEV(pType == <span class="keyword">nullptr</span> || IsDerivedFrom(pType, ezGetStaticRTTI&lt;NonRefPtrT&gt;()), <span class="stringliteral">&quot;Object of type &#39;{0}&#39; does not derive from &#39;{}&#39;&quot;</span>, GetTypeName(pType), GetTypeName(ezGetStaticRTTI&lt;NonRefPtrT&gt;()));</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;  }</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(ptr.m_pObject);</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;}</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160; </div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab10e0ffd04891df70e6a65c01c3c4f94">ezVariantClass::TypedObject</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="keyword">const</span> T ezVariant::Cast()<span class="keyword"> const</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;  <a class="code" href="../../d2/d31/structez_typed_object.htm">ezTypedObject</a> obj;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;  obj.m_pObject = <a class="code" href="../../de/de6/classez_variant.htm#a549cde299001c85ce0ddc4f231e684c3">GetData</a>();</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;  obj.m_pType = <a class="code" href="../../de/de6/classez_variant.htm#a50f0cb8c5c4b936f42925bdb1769b75b">GetReflectedType</a>();</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;  <span class="keywordflow">return</span> obj;</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;}</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160; </div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;template &lt;typename T, typename std::enable_if_t&lt;ezVariantTypeDeduction&lt;T&gt;::classification == <a class="code" href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a30fc1012cda837e3ebb8fcce36a51576">ezVariantClass::CustomTypeCast</a>, <span class="keywordtype">int</span>&gt;&gt;</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="keyword">const</span> T&amp; ezVariant::Cast()<span class="keyword"> const</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* pType = <a class="code" href="../../de/de6/classez_variant.htm#a50f0cb8c5c4b936f42925bdb1769b75b">GetReflectedType</a>();</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;  EZ_IGNORE_UNUSED(pType);</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;  <span class="keyword">using</span> NonRefT = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;T&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;  EZ_ASSERT_DEV(IsDerivedFrom(pType, ezGetStaticRTTI&lt;NonRefT&gt;()), <span class="stringliteral">&quot;Object of type &#39;{0}&#39; does not derive from &#39;{}&#39;&quot;</span>, GetTypeName(pType), GetTypeName(ezGetStaticRTTI&lt;NonRefT&gt;()));</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160; </div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;  <span class="keywordflow">return</span> m_bIsShared ? *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>T*<span class="keyword">&gt;</span>(m_Data.shared-&gt;m_Ptr) : *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T*<span class="keyword">&gt;</span>(&amp;m_Data);</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;}</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160; </div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> ezVariant::IsNumberStatic(ezUInt32 type)</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;{</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;  <span class="keywordflow">return</span> type &gt; <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299ac4af591f48624b00a42223fa8ecb2c97">Type::FirstStandardType</a> &amp;&amp; type &lt;= <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4dce61236b47f48fc6f4e40f9929abbd">Type::Double</a>;</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;}</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160; </div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> ezVariant::IsFloatingPointStatic(ezUInt32 type)</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;{</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;  <span class="keywordflow">return</span> type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a940d0bf7fbce528f43f7e99754f29eb1">Type::Float</a> || type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4dce61236b47f48fc6f4e40f9929abbd">Type::Double</a>;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;}</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160; </div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> ezVariant::IsStringStatic(ezUInt32 type)</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;{</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;  <span class="keywordflow">return</span> type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a48205086a6745f6402107719a3d7da19">Type::String</a> || type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a1dcad4ffe7766be8ea210b487357c336">Type::StringView</a>;</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;}</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160; </div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> ezVariant::IsHashedStringStatic(ezUInt32 type)</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;{</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;  <span class="keywordflow">return</span> type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4f2c3b6f7fa7ed4b569becf000c50a10">Type::HashedString</a> || type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a9e2d0b789ad6dddf2345ae1b5ae982c4">Type::TempHashedString</a>;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;}</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160; </div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> ezVariant::IsVector2Static(ezUInt32 type)</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;{</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;  <span class="keywordflow">return</span> type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299acf049dfb45c676b051d4dd00fbce1f4f">Type::Vector2</a> || type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299ae097f3bfd33c3c52bc76e1aaf822c617">Type::Vector2I</a> || type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299ab9ed463646ac4cc45d256c4c1f6ea2ec">Type::Vector2U</a>;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;}</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160; </div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> ezVariant::IsVector3Static(ezUInt32 type)</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;{</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;  <span class="keywordflow">return</span> type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a011e74cc4c62ac8e345903d985b6e18e">Type::Vector3</a> || type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a51a54d914a4d77f75f4a669aabacd9d7">Type::Vector3I</a> || type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a2a5999196c04344462df5a3ae269d129">Type::Vector3U</a>;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;}</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160; </div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> ezVariant::IsVector4Static(ezUInt32 type)</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;{</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;  <span class="keywordflow">return</span> type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299adfbc23d17132a8494193c286d9627d49">Type::Vector4</a> || type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299af71db2cd89fcf5bccb5f27fdefe9db8d">Type::Vector4I</a> || type == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299aeb0611b76c54a17195926912deb5c8e6">Type::Vector4U</a>;</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;}</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160; </div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;T ezVariant::ConvertNumber()<span class="keyword"> const</span></div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;  <span class="keywordflow">switch</span> (m_uiType)</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;  {</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a09f7b52399c70d1711df918f503ed4bc">Type::Bool</a>:</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(Cast&lt;bool&gt;());</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299aa563f7094d3eae8efc0f548652f87b43">Type::Int8</a>:</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(Cast&lt;ezInt8&gt;());</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a8e099a4968f6a842bde4544821757e33">Type::UInt8</a>:</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(Cast&lt;ezUInt8&gt;());</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299ad93959ba7201eee06b0545dd3ac278cf">Type::Int16</a>:</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(Cast&lt;ezInt16&gt;());</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a7bb9cd5abb15d1a9b9986c194b49a12e">Type::UInt16</a>:</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(Cast&lt;ezUInt16&gt;());</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a3c9d4fcdcd0f07b87ee80c5c2bc5366a">Type::Int32</a>:</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(Cast&lt;ezInt32&gt;());</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a2a708f37fb132f935d7abacb0a289631">Type::UInt32</a>:</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(Cast&lt;ezUInt32&gt;());</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299ab066b314c0abb93be5fa976a7cc5f820">Type::Int64</a>:</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(Cast&lt;ezInt64&gt;());</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a1c73b190337f4a139e10dfab48110130">Type::UInt64</a>:</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(Cast&lt;ezUInt64&gt;());</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a940d0bf7fbce528f43f7e99754f29eb1">Type::Float</a>:</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(Cast&lt;float&gt;());</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4dce61236b47f48fc6f4e40f9929abbd">Type::Double</a>:</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(Cast&lt;double&gt;());</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;  }</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160; </div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;  EZ_REPORT_FAILURE(<span class="stringliteral">&quot;Variant is not a number&quot;</span>);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;  <span class="keywordflow">return</span> T(0);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;}</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160; </div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00641"></a><span class="lineno"><a class="line" href="../../d3/d6f/structez_hash_helper_3_01ez_variant_01_4.htm">  641</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dc/d65/structez_hash_helper.htm">ezHashHelper</a>&lt;<a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&gt;</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;{</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">static</span> ezUInt32 Hash(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; value)</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;  {</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    ezUInt64 uiHash = value.<a class="code" href="../../de/de6/classez_variant.htm#a67999f7c05f82b500b269b7deaa447b8">ComputeHash</a>(0);</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keywordflow">return</span> (ezUInt32)uiHash;</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;  }</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160; </div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;  EZ_ALWAYS_INLINE <span class="keyword">static</span> <span class="keywordtype">bool</span> Equal(<span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; a, <span class="keyword">const</span> <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; b)</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;  {</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keywordflow">return</span> a.<a class="code" href="../../de/de6/classez_variant.htm#a05b7a40ffc160d48d71d39fce5f1ac7c">GetType</a>() == b.<a class="code" href="../../de/de6/classez_variant.htm#a05b7a40ffc160d48d71d39fce5f1ac7c">GetType</a>() &amp;&amp; a == b;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;  }</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;};</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160; </div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;EZ_WARNING_POP()</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299ac4af591f48624b00a42223fa8ecb2c97"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299ac4af591f48624b00a42223fa8ecb2c97">ezVariantType::FirstStandardType</a></div><div class="ttdeci">@ FirstStandardType</div><div class="ttdoc">*** Types that are flagged as 'StandardTypes' (see DetermineTypeFlags) ***</div><div class="ttdef"><b>Definition:</b> VariantType.h:30</div></div>
<div class="ttc" id="astructez_type_traits_htm_af2051eb05a731b9618b107540f8f46f8"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits::NonConstReferenceType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type NonConstReferenceType</div><div class="ttdoc">removes reference and const qualifier</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:218</div></div>
<div class="ttc" id="astructez_variant_class_htm_ae69956de86b79976526628f7847c6e29ab10e0ffd04891df70e6a65c01c3c4f94"><div class="ttname"><a href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab10e0ffd04891df70e6a65c01c3c4f94">ezVariantClass::TypedObject</a></div><div class="ttdeci">@ TypedObject</div><div class="ttdoc">ezTypedObject cast. Needed because at no point does and ezVariant ever store a ezTypedObject so it ca...</div><div class="ttdef"><b>Definition:</b> VariantType.h:89</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a48205086a6745f6402107719a3d7da19"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a48205086a6745f6402107719a3d7da19">ezVariantType::String</a></div><div class="ttdeci">@ String</div><div class="ttdoc">The variant stores a string. A heap allocation is required to store this data type.</div><div class="ttdef"><b>Definition:</b> VariantType.h:56</div></div>
<div class="ttc" id="astructez_result_htm"><div class="ttname"><a href="../../d4/da9/structez_result.htm">ezResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition:</b> Types.h:53</div></div>
<div class="ttc" id="aclassez_variant_htm_a05b7a40ffc160d48d71d39fce5f1ac7c"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a05b7a40ffc160d48d71d39fce5f1ac7c">ezVariant::GetType</a></div><div class="ttdeci">Type::Enum GetType() const</div><div class="ttdoc">Returns the exact ezVariant::Type value.</div><div class="ttdef"><b>Definition:</b> Variant_inl.h:351</div></div>
<div class="ttc" id="aclassez_variant_htm_a74cbd57a00a32985066d5ac2d6272f65"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a74cbd57a00a32985066d5ac2d6272f65">ezVariant::IsFloatingPoint</a></div><div class="ttdeci">bool IsFloatingPoint() const</div><div class="ttdoc">Returns whether the stored type is floating point (float or double).</div><div class="ttdef"><b>Definition:</b> Variant_inl.h:284</div></div>
<div class="ttc" id="aclassez_color_htm"><div class="ttname"><a href="../../dd/d01/classez_color.htm">ezColor</a></div><div class="ttdoc">ezColor represents an RGBA color in linear color space. Values are stored as float,...</div><div class="ttdef"><b>Definition:</b> Color.h:43</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299ad93959ba7201eee06b0545dd3ac278cf"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299ad93959ba7201eee06b0545dd3ac278cf">ezVariantType::Int16</a></div><div class="ttdeci">@ Int16</div><div class="ttdoc">The variant stores an ezInt16.</div><div class="ttdef"><b>Definition:</b> VariantType.h:34</div></div>
<div class="ttc" id="astructez_typed_object_htm"><div class="ttname"><a href="../../d2/d31/structez_typed_object.htm">ezTypedObject</a></div><div class="ttdoc">Defines a reference to an immutable object owned by an ezVariant.</div><div class="ttdef"><b>Definition:</b> Variant.h:23</div></div>
<div class="ttc" id="aclassez_variant_htm_a8588b2d87f2312ae4206cec6576a4373"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a8588b2d87f2312ae4206cec6576a4373">ezVariant::CanConvertTo</a></div><div class="ttdeci">bool CanConvertTo() const</div><div class="ttdoc">Returns whether the stored type can generally be converted to the desired type.</div></div>
<div class="ttc" id="aclassez_variant_htm_a28d58328f691dad9211e686939f2a52c"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a28d58328f691dad9211e686939f2a52c">ezVariant::IsNumber</a></div><div class="ttdeci">bool IsNumber() const</div><div class="ttdoc">Returns whether the stored type is numerical type either integer or floating point.</div><div class="ttdef"><b>Definition:</b> Variant_inl.h:279</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a3c9d4fcdcd0f07b87ee80c5c2bc5366a"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a3c9d4fcdcd0f07b87ee80c5c2bc5366a">ezVariantType::Int32</a></div><div class="ttdeci">@ Int32</div><div class="ttdoc">The variant stores an ezInt32.</div><div class="ttdef"><b>Definition:</b> VariantType.h:36</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299aa563f7094d3eae8efc0f548652f87b43"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299aa563f7094d3eae8efc0f548652f87b43">ezVariantType::Int8</a></div><div class="ttdeci">@ Int8</div><div class="ttdoc">The variant stores an ezInt8.</div><div class="ttdef"><b>Definition:</b> VariantType.h:32</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a></div><div class="ttdoc">This class holds information about reflected types. Each instance represents one type that is known t...</div><div class="ttdef"><b>Definition:</b> RTTI.h:29</div></div>
<div class="ttc" id="astructez_time_htm"><div class="ttname"><a href="../../d3/d90/structez_time.htm">ezTime</a></div><div class="ttdoc">The time class encapsulates a double value storing the time in seconds.</div><div class="ttdef"><b>Definition:</b> Time.h:11</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a1dcad4ffe7766be8ea210b487357c336"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a1dcad4ffe7766be8ea210b487357c336">ezVariantType::StringView</a></div><div class="ttdeci">@ StringView</div><div class="ttdoc">The variant stores an ezStringView.</div><div class="ttdef"><b>Definition:</b> VariantType.h:57</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299">ezVariantType::Enum</a></div><div class="ttdeci">Enum</div><div class="ttdoc">This enum describes the type of data that is currently stored inside the variant. Note that changes t...</div><div class="ttdef"><b>Definition:</b> VariantType.h:25</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299af71db2cd89fcf5bccb5f27fdefe9db8d"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299af71db2cd89fcf5bccb5f27fdefe9db8d">ezVariantType::Vector4I</a></div><div class="ttdeci">@ Vector4I</div><div class="ttdoc">The variant stores an ezVec4I32.</div><div class="ttdef"><b>Definition:</b> VariantType.h:48</div></div>
<div class="ttc" id="aclassez_color_gamma_u_b_htm"><div class="ttname"><a href="../../da/d51/classez_color_gamma_u_b.htm">ezColorGammaUB</a></div><div class="ttdoc">A 8bit per channel unsigned normalized (values interpreted as 0-1) color storage format that represen...</div><div class="ttdef"><b>Definition:</b> Color8UNorm.h:98</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299ab9ed463646ac4cc45d256c4c1f6ea2ec"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299ab9ed463646ac4cc45d256c4c1f6ea2ec">ezVariantType::Vector2U</a></div><div class="ttdeci">@ Vector2U</div><div class="ttdoc">The variant stores an ezVec2U32.</div><div class="ttdef"><b>Definition:</b> VariantType.h:49</div></div>
<div class="ttc" id="aclassez_variant_htm_af2f7572448f55313284fd5a3b1495ef0"><div class="ttname"><a href="../../de/de6/classez_variant.htm#af2f7572448f55313284fd5a3b1495ef0">ezVariant::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Returns whether this variant stores any other type than 'Invalid'.</div><div class="ttdef"><b>Definition:</b> Variant_inl.h:274</div></div>
<div class="ttc" id="astructez_variant_class_htm_ae69956de86b79976526628f7847c6e29a30fc1012cda837e3ebb8fcce36a51576"><div class="ttname"><a href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a30fc1012cda837e3ebb8fcce36a51576">ezVariantClass::CustomTypeCast</a></div><div class="ttdeci">@ CustomTypeCast</div><div class="ttdoc">Custom object types.</div><div class="ttdef"><b>Definition:</b> VariantType.h:90</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299ae097f3bfd33c3c52bc76e1aaf822c617"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299ae097f3bfd33c3c52bc76e1aaf822c617">ezVariantType::Vector2I</a></div><div class="ttdeci">@ Vector2I</div><div class="ttdoc">The variant stores an ezVec2I32.</div><div class="ttdef"><b>Definition:</b> VariantType.h:46</div></div>
<div class="ttc" id="astructez_get_type_class_htm"><div class="ttname"><a href="../../d5/d86/structez_get_type_class.htm">ezGetTypeClass</a></div><div class="ttdoc">If there is an % operator which takes a ezTypeIsMemRelocatable and returns a CompileTimeTrueType T is...</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:65</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a9a615b84872b968b7f8523c6f7b0a25b"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a9a615b84872b968b7f8523c6f7b0a25b">ezMemoryUtils::CopyConstruct</a></div><div class="ttdeci">static void CopyConstruct(Destination *pDestination, const Source &amp;copy, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination, by creating uiCount copies of c...</div></div>
<div class="ttc" id="aclassez_variant_htm_a50f0cb8c5c4b936f42925bdb1769b75b"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a50f0cb8c5c4b936f42925bdb1769b75b">ezVariant::GetReflectedType</a></div><div class="ttdeci">const ezRTTI * GetReflectedType() const</div><div class="ttdoc">Returns the ezRTTI type of the held value. For TypedPointer and TypedObject this will return the type...</div><div class="ttdef"><b>Definition:</b> Variant.cpp:603</div></div>
<div class="ttc" id="astructez_variant_type_deduction_htm"><div class="ttname"><a href="../../df/da8/structez_variant_type_deduction.htm">ezVariantTypeDeduction</a></div><div class="ttdoc">A helper struct to convert the C++ type, which is passed as the template argument,...</div><div class="ttdef"><b>Definition:</b> VariantType.h:96</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a09f7b52399c70d1711df918f503ed4bc"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a09f7b52399c70d1711df918f503ed4bc">ezVariantType::Bool</a></div><div class="ttdeci">@ Bool</div><div class="ttdoc">The variant stores a bool.</div><div class="ttdef"><b>Definition:</b> VariantType.h:31</div></div>
<div class="ttc" id="aclassez_variant_htm_a053a9279ed97d59955850d0e0760327c"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a053a9279ed97d59955850d0e0760327c">ezVariant::Get</a></div><div class="ttdeci">const T &amp; Get() const</div><div class="ttdoc">Returns the variants value as the provided type.</div></div>
<div class="ttc" id="aclassez_temp_hashed_string_htm"><div class="ttname"><a href="../../db/dcf/classez_temp_hashed_string.htm">ezTempHashedString</a></div><div class="ttdoc">A class to use together with ezHashedString for quick comparisons with temporary strings that need no...</div><div class="ttdef"><b>Definition:</b> HashedString.h:156</div></div>
<div class="ttc" id="aclassez_variant_htm_ab65bd8d072ce37a60540bbb855269f95"><div class="ttname"><a href="../../de/de6/classez_variant.htm#ab65bd8d072ce37a60540bbb855269f95">ezVariant::operator==</a></div><div class="ttdeci">bool operator==(const ezVariant &amp;other) const</div><div class="ttdoc">Will compare the value of this variant to that of other.</div><div class="ttdef"><b>Definition:</b> Variant.cpp:359</div></div>
<div class="ttc" id="aclassez_variant_htm_a694f12156828e7de34c4d592ef554aef"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a694f12156828e7de34c4d592ef554aef">ezVariant::IsA</a></div><div class="ttdeci">bool IsA() const</div><div class="ttdoc">Returns whether the stored type is exactly the given type.</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a940d0bf7fbce528f43f7e99754f29eb1"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a940d0bf7fbce528f43f7e99754f29eb1">ezVariantType::Float</a></div><div class="ttdeci">@ Float</div><div class="ttdoc">The variant stores a float.</div><div class="ttdef"><b>Definition:</b> VariantType.h:40</div></div>
<div class="ttc" id="aclassez_variant_htm_a67999f7c05f82b500b269b7deaa447b8"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a67999f7c05f82b500b269b7deaa447b8">ezVariant::ComputeHash</a></div><div class="ttdeci">ezUInt64 ComputeHash(ezUInt64 uiSeed=0) const</div><div class="ttdoc">Computes the hash value of the stored data. Returns uiSeed (unchanged) for an invalid Variant.</div><div class="ttdef"><b>Definition:</b> Variant.cpp:542</div></div>
<div class="ttc" id="astructez_hash_helper_htm"><div class="ttname"><a href="../../dc/d65/structez_hash_helper.htm">ezHashHelper</a></div><div class="ttdoc">Helper struct to calculate the Hash of different types.</div><div class="ttdef"><b>Definition:</b> HashingUtils.h:74</div></div>
<div class="ttc" id="astructez_variant_class_htm_ae69956de86b79976526628f7847c6e29ab5146ef580ac0d56e43e0b29edcdab18"><div class="ttname"><a href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29ab5146ef580ac0d56e43e0b29edcdab18">ezVariantClass::PointerCast</a></div><div class="ttdeci">@ PointerCast</div><div class="ttdoc">Any cast to T*.</div><div class="ttdef"><b>Definition:</b> VariantType.h:88</div></div>
<div class="ttc" id="aclassez_variant_htm_a188df8c0b7b0c9d06a312135f3672e8d"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a188df8c0b7b0c9d06a312135f3672e8d">ezVariant::ConvertTo</a></div><div class="ttdeci">T ConvertTo(ezResult *out_pConversionStatus=nullptr) const</div><div class="ttdoc">Tries to convert the stored value to the given type. The optional status parameter can be used to che...</div><div class="ttdef"><b>Definition:</b> Variant_inl.h:421</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a22fc12dbb9224863e361f30ac161e27b"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a22fc12dbb9224863e361f30ac161e27b">ezVariantType::TypedObject</a></div><div class="ttdeci">@ TypedObject</div><div class="ttdoc">The variant stores an ezTypedObject value. Reflected type and data queries will match the object....</div><div class="ttdef"><b>Definition:</b> VariantType.h:72</div></div>
<div class="ttc" id="aclassez_variant_htm_a0dc8f8b3d5270b597c7ad37e94500ff0"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a0dc8f8b3d5270b597c7ad37e94500ff0">ezVariant::IsHashedString</a></div><div class="ttdeci">bool IsHashedString() const</div><div class="ttdoc">Returns whether the stored type is a hashed string (ezHashedString or ezTempHashedString).</div><div class="ttdef"><b>Definition:</b> Variant_inl.h:294</div></div>
<div class="ttc" id="astructez_type_traits_htm_a9dcee6bb8dad253cbdc804cd45ce22f1"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#a9dcee6bb8dad253cbdc804cd45ce22f1">ezTypeTraits::NonConstReferencePointerType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; typename std::remove_pointer&lt; T &gt;::type &gt;::type &gt;::type NonConstReferencePointerType</div><div class="ttdoc">removes reference, const and pointer qualifier Note that this removes the const and reference of the ...</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:225</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a011e74cc4c62ac8e345903d985b6e18e"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a011e74cc4c62ac8e345903d985b6e18e">ezVariantType::Vector3</a></div><div class="ttdeci">@ Vector3</div><div class="ttdoc">The variant stores an ezVec3.</div><div class="ttdef"><b>Definition:</b> VariantType.h:44</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a69f1de31ac5b331ea6c2725c8b6a8d41"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a69f1de31ac5b331ea6c2725c8b6a8d41">ezVariantType::TypedPointer</a></div><div class="ttdeci">@ TypedPointer</div><div class="ttdoc">The variant stores an ezTypedPointer value. Reflected type and data queries will match the pointed to...</div><div class="ttdef"><b>Definition:</b> VariantType.h:71</div></div>
<div class="ttc" id="aclassez_variant_htm_a549cde299001c85ce0ddc4f231e684c3"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a549cde299001c85ce0ddc4f231e684c3">ezVariant::GetData</a></div><div class="ttdeci">const void * GetData() const</div><div class="ttdoc">Returns a const void* to the internal data. For TypedPointer and TypedObject this will return a point...</div><div class="ttdef"><b>Definition:</b> Variant_inl.h:405</div></div>
<div class="ttc" id="astructez_typed_pointer_htm"><div class="ttname"><a href="../../d3/d1f/structez_typed_pointer.htm">ezTypedPointer</a></div><div class="ttdoc">A typed raw pointer.</div><div class="ttdef"><b>Definition:</b> TypedPointer.h:12</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299acf049dfb45c676b051d4dd00fbce1f4f"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299acf049dfb45c676b051d4dd00fbce1f4f">ezVariantType::Vector2</a></div><div class="ttdeci">@ Vector2</div><div class="ttdoc">The variant stores an ezVec2.</div><div class="ttdef"><b>Definition:</b> VariantType.h:43</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a1c73b190337f4a139e10dfab48110130"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a1c73b190337f4a139e10dfab48110130">ezVariantType::UInt64</a></div><div class="ttdeci">@ UInt64</div><div class="ttdoc">The variant stores an ezUInt64.</div><div class="ttdef"><b>Definition:</b> VariantType.h:39</div></div>
<div class="ttc" id="aclassez_angle_htm"><div class="ttname"><a href="../../db/d6f/classez_angle.htm">ezAngle</a></div><div class="ttdoc">Float wrapper struct for a safe usage and conversions of angles.</div><div class="ttdef"><b>Definition:</b> Angle.h:9</div></div>
<div class="ttc" id="aclassez_variant_htm_a7cd8df78e9a2fc22c4aab614d6f9f316"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a7cd8df78e9a2fc22c4aab614d6f9f316">ezVariant::~ezVariant</a></div><div class="ttdeci">~ezVariant()</div><div class="ttdoc">If necessary, this will deallocate any heap memory that is not in use any more.</div><div class="ttdef"><b>Definition:</b> Variant_inl.h:189</div></div>
<div class="ttc" id="aclassez_variant_htm_a1c3d6c218528d70fdd86145254ce577b"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a1c3d6c218528d70fdd86145254ce577b">ezVariant::IsString</a></div><div class="ttdeci">bool IsString() const</div><div class="ttdoc">Returns whether the stored type is a string (ezString or ezStringView).</div><div class="ttdef"><b>Definition:</b> Variant_inl.h:289</div></div>
<div class="ttc" id="aclassez_variant_htm"><div class="ttname"><a href="../../de/de6/classez_variant.htm">ezVariant</a></div><div class="ttdoc">ezVariant is a class that can store different types of variables, which is useful in situations where...</div><div class="ttdef"><b>Definition:</b> Variant.h:43</div></div>
<div class="ttc" id="aclassez_variant_htm_a2622fb2a5680325a1ee4ecdd9e14f39a"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a2622fb2a5680325a1ee4ecdd9e14f39a">ezVariant::GetWriteAccess</a></div><div class="ttdeci">ezTypedPointer GetWriteAccess()</div><div class="ttdoc">Returns an writable ezTypedPointer to the internal data. If the data is currently shared a clone will...</div><div class="ttdef"><b>Definition:</b> Variant.cpp:401</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299ab066b314c0abb93be5fa976a7cc5f820"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299ab066b314c0abb93be5fa976a7cc5f820">ezVariantType::Int64</a></div><div class="ttdeci">@ Int64</div><div class="ttdoc">The variant stores an ezInt64.</div><div class="ttdef"><b>Definition:</b> VariantType.h:38</div></div>
<div class="ttc" id="aclassez_quat_template_htm"><div class="ttname"><a href="../../de/d15/classez_quat_template.htm">ezQuatTemplate&lt; float &gt;</a></div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a8e099a4968f6a842bde4544821757e33"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a8e099a4968f6a842bde4544821757e33">ezVariantType::UInt8</a></div><div class="ttdeci">@ UInt8</div><div class="ttdoc">The variant stores an ezUInt8.</div><div class="ttdef"><b>Definition:</b> VariantType.h:33</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a2a708f37fb132f935d7abacb0a289631"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a2a708f37fb132f935d7abacb0a289631">ezVariantType::UInt32</a></div><div class="ttdeci">@ UInt32</div><div class="ttdoc">The variant stores an ezUInt32.</div><div class="ttdef"><b>Definition:</b> VariantType.h:37</div></div>
<div class="ttc" id="aclassez_uuid_htm"><div class="ttname"><a href="../../da/d89/classez_uuid.htm">ezUuid</a></div><div class="ttdoc">This data type is the abstraction for 128-bit Uuid (also known as GUID) instances.</div><div class="ttdef"><b>Definition:</b> Uuid.h:10</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a4f2c3b6f7fa7ed4b569becf000c50a10"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4f2c3b6f7fa7ed4b569becf000c50a10">ezVariantType::HashedString</a></div><div class="ttdeci">@ HashedString</div><div class="ttdoc">The variant stores an ezHashedString value.</div><div class="ttdef"><b>Definition:</b> VariantType.h:63</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a7bb9cd5abb15d1a9b9986c194b49a12e"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a7bb9cd5abb15d1a9b9986c194b49a12e">ezVariantType::UInt16</a></div><div class="ttdeci">@ UInt16</div><div class="ttdoc">The variant stores an ezUInt16.</div><div class="ttdef"><b>Definition:</b> VariantType.h:35</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612">ezVariantType::Invalid</a></div><div class="ttdeci">@ Invalid</div><div class="ttdoc">The variant stores no (valid) data at the moment.</div><div class="ttdef"><b>Definition:</b> VariantType.h:27</div></div>
<div class="ttc" id="astructez_is_pod_type_htm"><div class="ttname"><a href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType</a></div><div class="ttdoc">If there is an % operator which takes a TypeIsPod and returns a CompileTimeTrueType T is Pod....</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:42</div></div>
<div class="ttc" id="aclassez_hashed_string_htm"><div class="ttname"><a href="../../de/dce/classez_hashed_string.htm">ezHashedString</a></div><div class="ttdoc">This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...</div><div class="ttdef"><b>Definition:</b> HashedString.h:24</div></div>
<div class="ttc" id="astructez_variant_class_htm_ae69956de86b79976526628f7847c6e29a544fe59452cc4a860699b3c45d99b37c"><div class="ttname"><a href="../../dc/dd6/structez_variant_class.htm#ae69956de86b79976526628f7847c6e29a544fe59452cc4a860699b3c45d99b37c">ezVariantClass::DirectCast</a></div><div class="ttdeci">@ DirectCast</div><div class="ttdoc">A standard type.</div><div class="ttdef"><b>Definition:</b> VariantType.h:87</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a4dce61236b47f48fc6f4e40f9929abbd"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4dce61236b47f48fc6f4e40f9929abbd">ezVariantType::Double</a></div><div class="ttdeci">@ Double</div><div class="ttdoc">The variant stores a double.</div><div class="ttdef"><b>Definition:</b> VariantType.h:41</div></div>
<div class="ttc" id="astructez_trait_int_htm"><div class="ttname"><a href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a></div><div class="ttdoc">Type traits.</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:11</div></div>
<div class="ttc" id="astructez_conversion_test_htm"><div class="ttname"><a href="../../de/dc1/structez_conversion_test.htm">ezConversionTest</a></div><div class="ttdoc">Static Conversion Test.</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:72</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a9e2d0b789ad6dddf2345ae1b5ae982c4"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a9e2d0b789ad6dddf2345ae1b5ae982c4">ezVariantType::TempHashedString</a></div><div class="ttdeci">@ TempHashedString</div><div class="ttdoc">The variant stores an ezTempHashedString value.</div><div class="ttdef"><b>Definition:</b> VariantType.h:64</div></div>
<div class="ttc" id="aclassez_variant_htm_a7f5e74020a7b3b2c07ce601cb0b81578"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a7f5e74020a7b3b2c07ce601cb0b81578">ezVariant::ezVariant</a></div><div class="ttdeci">ezVariant()</div><div class="ttdoc">Initializes the variant to be 'Invalid'.</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299adfbc23d17132a8494193c286d9627d49"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299adfbc23d17132a8494193c286d9627d49">ezVariantType::Vector4</a></div><div class="ttdeci">@ Vector4</div><div class="ttdoc">The variant stores an ezVec4.</div><div class="ttdef"><b>Definition:</b> VariantType.h:45</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299aeb0611b76c54a17195926912deb5c8e6"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299aeb0611b76c54a17195926912deb5c8e6">ezVariantType::Vector4U</a></div><div class="ttdeci">@ Vector4U</div><div class="ttdoc">The variant stores an ezVec4U32.</div><div class="ttdef"><b>Definition:</b> VariantType.h:51</div></div>
<div class="ttc" id="aclassez_vec2_template_htm"><div class="ttname"><a href="../../d1/df8/classez_vec2_template.htm">ezVec2Template</a></div><div class="ttdoc">A 2-component vector class.</div><div class="ttdef"><b>Definition:</b> Declarations.h:129</div></div>
<div class="ttc" id="aclassez_variant_htm_a856c5e7106896004b8d64acc67706336"><div class="ttname"><a href="../../de/de6/classez_variant.htm#a856c5e7106896004b8d64acc67706336">ezVariant::operator=</a></div><div class="ttdeci">void operator=(const ezVariant &amp;other)</div><div class="ttdoc">Copies the data from the other variant into this one.</div><div class="ttdef"><b>Definition:</b> Variant_inl.h:194</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a2a5999196c04344462df5a3ae269d129"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a2a5999196c04344462df5a3ae269d129">ezVariantType::Vector3U</a></div><div class="ttdeci">@ Vector3U</div><div class="ttdoc">The variant stores an ezVec3U32.</div><div class="ttdef"><b>Definition:</b> VariantType.h:50</div></div>
<div class="ttc" id="aclassez_vec4_template_htm"><div class="ttname"><a href="../../da/dd2/classez_vec4_template.htm">ezVec4Template</a></div><div class="ttdoc">A 4-component vector class.</div><div class="ttdef"><b>Definition:</b> Declarations.h:149</div></div>
<div class="ttc" id="aclassez_vec3_template_htm"><div class="ttname"><a href="../../da/df1/classez_vec3_template.htm">ezVec3Template&lt; float &gt;</a></div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a51a54d914a4d77f75f4a669aabacd9d7"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a51a54d914a4d77f75f4a669aabacd9d7">ezVariantType::Vector3I</a></div><div class="ttdeci">@ Vector3I</div><div class="ttdoc">The variant stores an ezVec3I32.</div><div class="ttdef"><b>Definition:</b> VariantType.h:47</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_f95f7c440efc771b227d40e9293549bd.htm">Types</a></li><li class="navelem"><a class="el" href="../../dir_81708b2bf5e0f7f3d10c3c7a8700c5a1.htm">Implementation</a></li><li class="navelem"><b>Variant_inl.h</b></li>
    <li class="footer">Generated on Sun Aug 25 2024 13:06:22 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
