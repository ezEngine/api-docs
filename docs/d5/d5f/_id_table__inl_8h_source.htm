<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Containers/Implementation/IdTable_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 23.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d5/d5f/_id_table__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">IdTable_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160; </div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// ***** Const Iterator *****</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<a class="code" href="../../da/d31/classez_id_table_base.htm">ezIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::ConstIterator</a>(<span class="keyword">const</span> <a class="code" href="../../da/d31/classez_id_table_base.htm">ezIdTableBase&lt;IdType, ValueType&gt;</a>&amp; idTable)</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;  : m_IdTable(idTable)</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  , m_CurrentIndex(0)</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;  , m_CurrentCount(0)</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;{</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  <span class="keywordflow">if</span> (m_IdTable.IsEmpty())</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="keywordflow">while</span> (m_IdTable.m_pEntries[m_CurrentIndex].id.m_InstanceIndex != m_CurrentIndex)</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  {</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    ++m_CurrentIndex;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  }</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;}</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160; </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a2bd94e22d8781ee01d661f4fda849801">   20</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a2bd94e22d8781ee01d661f4fda849801">ezIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::IsValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  <span class="keywordflow">return</span> m_CurrentCount &lt; m_IdTable.m_Count;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;}</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a8a021d7a095d9ce1bdab46a1faf97e39">   26</a></span>&#160;EZ_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a8a021d7a095d9ce1bdab46a1faf97e39">ezIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::operator==</a>(</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  <span class="keyword">const</span> <span class="keyword">typename</span> <a class="code" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm">ezIdTableBase&lt;IdType, ValueType&gt;::ConstIterator</a>&amp; it2)<span class="keyword"> const</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  <span class="keywordflow">return</span> m_IdTable.m_pEntries == it2.m_IdTable.m_pEntries &amp;&amp; m_CurrentIndex == it2.m_CurrentIndex;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;}</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#adbb139112ee45ffd15cc26060dffbb39">   33</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#adbb139112ee45ffd15cc26060dffbb39">ezIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::operator!=</a>(</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keyword">const</span> <span class="keyword">typename</span> <a class="code" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm">ezIdTableBase&lt;IdType, ValueType&gt;::ConstIterator</a>&amp; it2)<span class="keyword"> const</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == it2);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a7460b6edb9271cc571d784748a0e4cf0">   40</a></span>&#160;EZ_ALWAYS_INLINE IdType <a class="code" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a7460b6edb9271cc571d784748a0e4cf0">ezIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::Id</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keywordflow">return</span> m_IdTable.m_pEntries[m_CurrentIndex].id;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a386382e8489925828ddc17deffff39fc">   46</a></span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> ValueType&amp; <a class="code" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a386382e8489925828ddc17deffff39fc">ezIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::Value</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keywordflow">return</span> m_IdTable.m_pEntries[m_CurrentIndex].value;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a89a58213008f4482a294211fcdd13345">   52</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a89a58213008f4482a294211fcdd13345">ezIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::Next</a>()</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  ++m_CurrentCount;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <span class="keywordflow">if</span> (m_CurrentCount == m_IdTable.m_Count)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keywordflow">do</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    ++m_CurrentIndex;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  } <span class="keywordflow">while</span> (m_IdTable.m_pEntries[m_CurrentIndex].id.m_InstanceIndex != m_CurrentIndex);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a4e8bcfa80bbb7e1196c4ef57127b7251">   65</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a4e8bcfa80bbb7e1196c4ef57127b7251">ezIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::operator++</a>()</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  Next();</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">// ***** Iterator *****</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<a class="code" href="../../da/d31/classez_id_table_base.htm">ezIdTableBase&lt;IdType, ValueType&gt;::Iterator::Iterator</a>(<span class="keyword">const</span> <a class="code" href="../../da/d31/classez_id_table_base.htm">ezIdTableBase&lt;IdType, ValueType&gt;</a>&amp; idTable)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  : <a class="code" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm">ConstIterator</a>(idTable)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="../../d7/d1b/structez_id_table_base_1_1_iterator.htm#a44b14d225eb9a75cd6b915879cc974aa">   80</a></span>&#160;EZ_ALWAYS_INLINE ValueType&amp; <a class="code" href="../../d7/d1b/structez_id_table_base_1_1_iterator.htm#a44b14d225eb9a75cd6b915879cc974aa">ezIdTableBase&lt;IdType, ValueType&gt;::Iterator::Value</a>()</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;{</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordflow">return</span> this-&gt;m_IdTable.m_pEntries[this-&gt;m_CurrentIndex].value;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">// ***** ezIdTableBase *****</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#af00fe7c45f08585d3e4d8a60d887f2d4">   89</a></span>&#160;<a class="code" href="../../da/d31/classez_id_table_base.htm#af00fe7c45f08585d3e4d8a60d887f2d4">ezIdTableBase&lt;IdType, ValueType&gt;::ezIdTableBase</a>(<a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  m_pEntries = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  m_Count = 0;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  m_Capacity = 0;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  m_FreelistEnqueue = -1;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  m_FreelistDequeue = 0;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  m_pAllocator = pAllocator;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#af370b7f3f2ba8e22193498b05c972409">  100</a></span>&#160;<a class="code" href="../../da/d31/classez_id_table_base.htm#af00fe7c45f08585d3e4d8a60d887f2d4">ezIdTableBase&lt;IdType, ValueType&gt;::ezIdTableBase</a>(<span class="keyword">const</span> <a class="code" href="../../da/d31/classez_id_table_base.htm">ezIdTableBase&lt;IdType, ValueType&gt;</a>&amp; other, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  m_pEntries = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  m_Count = 0;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  m_Capacity = 0;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  m_FreelistEnqueue = -1;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  m_FreelistDequeue = 0;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  m_pAllocator = pAllocator;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  *<span class="keyword">this</span> = other;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#a8e8d83852a64760ee3226d70aded21e4">  113</a></span>&#160;<a class="code" href="../../da/d31/classez_id_table_base.htm#a8e8d83852a64760ee3226d70aded21e4">ezIdTableBase&lt;IdType, ValueType&gt;::~ezIdTableBase</a>()</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keywordflow">for</span> (IndexType i = 0; i &lt; m_Capacity; ++i)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">if</span> (m_pEntries[i].<span class="keywordtype">id</span>.m_InstanceIndex == i)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      <a class="code" href="../../dc/d4d/classez_memory_utils.htm#add65b87c39dade4ee7b0671c16b10a39">ezMemoryUtils::Destruct</a>(&amp;m_pEntries[i].value, 1);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  EZ_DELETE_RAW_BUFFER(m_pAllocator, m_pEntries);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  m_Capacity = 0;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#a12f12c67dbc228b435139822e7d1af97">  128</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../da/d31/classez_id_table_base.htm#a12f12c67dbc228b435139822e7d1af97">ezIdTableBase&lt;IdType, ValueType&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../da/d31/classez_id_table_base.htm">ezIdTableBase&lt;IdType, ValueType&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <a class="code" href="../../da/d31/classez_id_table_base.htm#af024397d0e055dabdc87f176a9e5b4d8">Clear</a>();</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <a class="code" href="../../da/d31/classez_id_table_base.htm#afcbeb04501c9d0ce6058daff0581b678">Reserve</a>(rhs.m_Capacity);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keywordflow">for</span> (IndexType i = 0; i &lt; rhs.m_Capacity; ++i)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    Entry&amp; entry = m_pEntries[i];</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    entry.id = rhs.m_pEntries[i].id;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">if</span> (entry.id.m_InstanceIndex == i)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9a615b84872b968b7f8523c6f7b0a25b">ezMemoryUtils::CopyConstruct</a>(&amp;entry.value, rhs.m_pEntries[i].value, 1);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  m_Count = rhs.m_Count;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  m_FreelistDequeue = rhs.m_FreelistDequeue;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#afcbeb04501c9d0ce6058daff0581b678">  149</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../da/d31/classez_id_table_base.htm#afcbeb04501c9d0ce6058daff0581b678">ezIdTableBase&lt;IdType, ValueType&gt;::Reserve</a>(IndexType capacity)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <span class="keywordflow">if</span> (m_Capacity &gt;= capacity + CAPACITY_ALIGNMENT)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  <span class="keyword">const</span> ezUInt64 uiCurCap64 = <span class="keyword">static_cast&lt;</span>ezUInt64<span class="keyword">&gt;</span>(this-&gt;m_Capacity);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  ezUInt64 uiNewCapacity64 = uiCurCap64 + (uiCurCap64 / 2);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  uiNewCapacity64 = ezMath::Max&lt;ezUInt64&gt;(uiNewCapacity64, capacity + CAPACITY_ALIGNMENT);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  <span class="comment">// the maximum value must leave room for the capacity alignment computation below (without overflowing the 32 bit range)</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  uiNewCapacity64 = ezMath::Min&lt;ezUInt64&gt;(uiNewCapacity64, 0xFFFFFFFFllu - (CAPACITY_ALIGNMENT - 1));</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  uiNewCapacity64 = (uiNewCapacity64 + (CAPACITY_ALIGNMENT - 1)) &amp; ~(CAPACITY_ALIGNMENT - 1);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  SetCapacity(<span class="keyword">static_cast&lt;</span>IndexType<span class="keyword">&gt;</span>(uiNewCapacity64 &amp; 0xFFFFFFFF));</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#a4f3ebb3269b4fea7dd24342df3cd5bc8">  168</a></span>&#160;EZ_ALWAYS_INLINE <span class="keyword">typename</span> ezIdTableBase&lt;IdType, ValueType&gt;::IndexType <a class="code" href="../../da/d31/classez_id_table_base.htm#a4f3ebb3269b4fea7dd24342df3cd5bc8">ezIdTableBase&lt;IdType, ValueType&gt;::GetCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  <span class="keywordflow">return</span> m_Count;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#af5190eea7e07b8b1e053f39b731ffdf9">  174</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/d31/classez_id_table_base.htm#af5190eea7e07b8b1e053f39b731ffdf9">ezIdTableBase&lt;IdType, ValueType&gt;::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keywordflow">return</span> m_Count == 0;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#af024397d0e055dabdc87f176a9e5b4d8">  180</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../da/d31/classez_id_table_base.htm#af024397d0e055dabdc87f176a9e5b4d8">ezIdTableBase&lt;IdType, ValueType&gt;::Clear</a>()</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keywordflow">for</span> (IndexType i = 0; i &lt; m_Capacity; ++i)</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  {</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    Entry&amp; entry = m_pEntries[i];</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">if</span> (entry.id.m_InstanceIndex == i)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;      <a class="code" href="../../dc/d4d/classez_memory_utils.htm#add65b87c39dade4ee7b0671c16b10a39">ezMemoryUtils::Destruct</a>(&amp;entry.value, 1);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      ++entry.id.m_Generation;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    entry.id.m_InstanceIndex = <span class="keyword">static_cast&lt;</span>decltype(entry.<span class="keywordtype">id</span>.m_InstanceIndex)<span class="keyword">&gt;</span>(i + 1);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  m_FreelistDequeue = 0;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  m_FreelistEnqueue = m_Capacity - 1;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  m_Count = 0;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;}</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#a0c1985636bde8f692bfb45bb8aec9635">  201</a></span>&#160;IdType <a class="code" href="../../da/d31/classez_id_table_base.htm#a0c1985636bde8f692bfb45bb8aec9635">ezIdTableBase&lt;IdType, ValueType&gt;::Insert</a>(<span class="keyword">const</span> ValueType&amp; value)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  <a class="code" href="../../da/d31/classez_id_table_base.htm#afcbeb04501c9d0ce6058daff0581b678">Reserve</a>(m_Count + 1);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keyword">const</span> IndexType uiNewIndex = m_FreelistDequeue;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  Entry&amp; entry = m_pEntries[uiNewIndex];</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  m_FreelistDequeue = entry.id.m_InstanceIndex;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  entry.id.m_InstanceIndex = <span class="keyword">static_cast&lt;</span>decltype(entry.<span class="keywordtype">id</span>.m_InstanceIndex)<span class="keyword">&gt;</span>(uiNewIndex);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a9a615b84872b968b7f8523c6f7b0a25b">ezMemoryUtils::CopyConstruct</a>(&amp;entry.value, value, 1);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  ++m_Count;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  <span class="keywordflow">return</span> entry.id;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#ab0d8e03acf0f8eb32c0760ea6a1950b9">  219</a></span>&#160;IdType <a class="code" href="../../da/d31/classez_id_table_base.htm#a0c1985636bde8f692bfb45bb8aec9635">ezIdTableBase&lt;IdType, ValueType&gt;::Insert</a>(ValueType&amp;&amp; value)</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;{</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <a class="code" href="../../da/d31/classez_id_table_base.htm#afcbeb04501c9d0ce6058daff0581b678">Reserve</a>(m_Count + 1);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="keyword">const</span> IndexType uiNewIndex = m_FreelistDequeue;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  Entry&amp; entry = m_pEntries[uiNewIndex];</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  m_FreelistDequeue = entry.id.m_InstanceIndex;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  entry.id.m_InstanceIndex = <span class="keyword">static_cast&lt;</span>decltype(entry.<span class="keywordtype">id</span>.m_InstanceIndex)<span class="keyword">&gt;</span>(uiNewIndex);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  ezMemoryUtils::MoveConstruct&lt;ValueType&gt;(&amp;entry.value, std::move(value));</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  ++m_Count;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  <span class="keywordflow">return</span> entry.id;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;}</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#a69aedf90afa4ee63dcf3f37fd31c50c3">  237</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../da/d31/classez_id_table_base.htm#a69aedf90afa4ee63dcf3f37fd31c50c3">ezIdTableBase&lt;IdType, ValueType&gt;::Remove</a>(<span class="keyword">const</span> IdType <span class="keywordtype">id</span>, ValueType* out_pOldValue <span class="comment">/*= nullptr*/</span>)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;{</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  <span class="keywordflow">if</span> (m_Capacity &lt;= <span class="keywordtype">id</span>.m_InstanceIndex)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; </div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  <span class="keyword">const</span> IndexType uiIndex = <span class="keywordtype">id</span>.m_InstanceIndex;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  Entry&amp; entry = m_pEntries[uiIndex];</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  <span class="keywordflow">if</span> (!entry.id.IsIndexAndGenerationEqual(<span class="keywordtype">id</span>))</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="keywordflow">if</span> (out_pOldValue != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    *out_pOldValue = std::move(m_pEntries[uiIndex].value);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#add65b87c39dade4ee7b0671c16b10a39">ezMemoryUtils::Destruct</a>(&amp;entry.value, 1);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  entry.id.m_InstanceIndex = m_pEntries[m_FreelistEnqueue].id.m_InstanceIndex;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  ++entry.id.m_Generation;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  <span class="comment">// at wrap around, prevent generation from becoming 0, to ensure that a zero initialized array could ever contain a valid ID</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  <span class="keywordflow">if</span> (entry.id.m_Generation == 0)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    entry.id.m_Generation = 1;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  m_pEntries[m_FreelistEnqueue].id.m_InstanceIndex = <span class="keyword">static_cast&lt;</span>decltype(entry.<span class="keywordtype">id</span>.m_InstanceIndex)<span class="keyword">&gt;</span>(uiIndex);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  m_FreelistEnqueue = uiIndex;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  --m_Count;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;}</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#a506c618f4381ebb9072bf144a64d2b5c">  267</a></span>&#160;EZ_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/d31/classez_id_table_base.htm#a506c618f4381ebb9072bf144a64d2b5c">ezIdTableBase&lt;IdType, ValueType&gt;::TryGetValue</a>(<span class="keyword">const</span> IdType <span class="keywordtype">id</span>, ValueType&amp; out_value)<span class="keyword"> const</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  <span class="keyword">const</span> IndexType index = <span class="keywordtype">id</span>.m_InstanceIndex;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  <span class="keywordflow">if</span> (index &lt; m_Capacity &amp;&amp; m_pEntries[index].<span class="keywordtype">id</span>.IsIndexAndGenerationEqual(<span class="keywordtype">id</span>))</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  {</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    out_value = m_pEntries[index].value;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;}</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#af10bedf20751d7fc6f5238a197e39430">  279</a></span>&#160;EZ_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/d31/classez_id_table_base.htm#a506c618f4381ebb9072bf144a64d2b5c">ezIdTableBase&lt;IdType, ValueType&gt;::TryGetValue</a>(<span class="keyword">const</span> IdType <span class="keywordtype">id</span>, ValueType*&amp; out_pValue)<span class="keyword"> const</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  <span class="keyword">const</span> IndexType index = <span class="keywordtype">id</span>.m_InstanceIndex;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="keywordflow">if</span> (index &lt; m_Capacity &amp;&amp; m_pEntries[index].<span class="keywordtype">id</span>.IsIndexAndGenerationEqual(<span class="keywordtype">id</span>))</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  {</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    out_pValue = &amp;m_pEntries[index].value;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#a12b5ae8a2b42dad8d51df54e3057d9d9">  291</a></span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> ValueType&amp; <a class="code" href="../../da/d31/classez_id_table_base.htm#a12b5ae8a2b42dad8d51df54e3057d9d9">ezIdTableBase&lt;IdType, ValueType&gt;::operator[]</a>(<span class="keyword">const</span> IdType <span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  EZ_ASSERT_DEV(<span class="keywordtype">id</span>.m_InstanceIndex &lt; m_Capacity, <span class="stringliteral">&quot;Out of bounds access. Table has {0} elements, trying to access element at index {1}.&quot;</span>,</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    m_Capacity, <span class="keywordtype">id</span>.m_InstanceIndex);</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="keyword">const</span> Entry&amp; entry = m_pEntries[<span class="keywordtype">id</span>.m_InstanceIndex];</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  EZ_ASSERT_DEV(entry.id.IsIndexAndGenerationEqual(<span class="keywordtype">id</span>),</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="stringliteral">&quot;Stale access. Trying to access a value (generation: {0}) that has been removed and replaced by a new value (generation: {1})&quot;</span>,</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    entry.id.m_Generation, <span class="keywordtype">id</span>.m_Generation);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  <span class="keywordflow">return</span> entry.value;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;}</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00304"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#ab6f051545fc2ede5f569441aeca8b2b4">  304</a></span>&#160;EZ_FORCE_INLINE ValueType&amp; <a class="code" href="../../da/d31/classez_id_table_base.htm#a12b5ae8a2b42dad8d51df54e3057d9d9">ezIdTableBase&lt;IdType, ValueType&gt;::operator[]</a>(<span class="keyword">const</span> IdType <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;{</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  EZ_ASSERT_DEV(<span class="keywordtype">id</span>.m_InstanceIndex &lt; m_Capacity, <span class="stringliteral">&quot;Out of bounds access. Table has {0} elements, trying to access element at index {1}.&quot;</span>,</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    m_Capacity, <span class="keywordtype">id</span>.m_InstanceIndex);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  Entry&amp; entry = m_pEntries[<span class="keywordtype">id</span>.m_InstanceIndex];</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  EZ_ASSERT_DEV(entry.id.IsIndexAndGenerationEqual(<span class="keywordtype">id</span>),</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="stringliteral">&quot;Stale access. Trying to access a value (generation: {0}) that has been removed and replaced by a new value (generation: {1})&quot;</span>,</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(entry.id.m_Generation), <span class="keywordtype">id</span>.m_Generation);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160; </div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  <span class="keywordflow">return</span> entry.value;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;}</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00317"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#a1180d6e2020092f74a4221aab823d66e">  317</a></span>&#160;EZ_FORCE_INLINE <span class="keyword">const</span> ValueType&amp; <a class="code" href="../../da/d31/classez_id_table_base.htm#a1180d6e2020092f74a4221aab823d66e">ezIdTableBase&lt;IdType, ValueType&gt;::GetValueUnchecked</a>(<span class="keyword">const</span> IndexType index)<span class="keyword"> const</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  EZ_ASSERT_DEV(index &lt; m_Capacity, <span class="stringliteral">&quot;Out of bounds access. Table has {0} elements, trying to access element at index {1}.&quot;</span>, m_Capacity, index);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  <span class="keywordflow">return</span> m_pEntries[index].value;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;}</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#aa31bbb9a3b8a41e06ec5cfb9a576e7fe">  324</a></span>&#160;EZ_FORCE_INLINE ValueType&amp; <a class="code" href="../../da/d31/classez_id_table_base.htm#a1180d6e2020092f74a4221aab823d66e">ezIdTableBase&lt;IdType, ValueType&gt;::GetValueUnchecked</a>(<span class="keyword">const</span> IndexType index)</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;{</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  EZ_ASSERT_DEV(index &lt; m_Capacity, <span class="stringliteral">&quot;Out of bounds access. Table has {0} elements, trying to access element at index {1}.&quot;</span>, m_Capacity, index);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  <span class="keywordflow">return</span> m_pEntries[index].value;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;}</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00331"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#a10645a54b5b48cdf7952a1be5c276095">  331</a></span>&#160;EZ_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/d31/classez_id_table_base.htm#a10645a54b5b48cdf7952a1be5c276095">ezIdTableBase&lt;IdType, ValueType&gt;::Contains</a>(<span class="keyword">const</span> IdType <span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  <span class="keyword">const</span> IndexType index = <span class="keywordtype">id</span>.m_InstanceIndex;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  <span class="keywordflow">return</span> index &lt; m_Capacity &amp;&amp; m_pEntries[index].id.IsIndexAndGenerationEqual(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;}</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00338"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#a5608309445e42f2d906df22168653034">  338</a></span>&#160;EZ_ALWAYS_INLINE <span class="keyword">typename</span> <a class="code" href="../../d7/d1b/structez_id_table_base_1_1_iterator.htm">ezIdTableBase&lt;IdType, ValueType&gt;::Iterator</a> <a class="code" href="../../da/d31/classez_id_table_base.htm#a5608309445e42f2d906df22168653034">ezIdTableBase&lt;IdType, ValueType&gt;::GetIterator</a>()</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;{</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  <span class="keywordflow">return</span> Iterator(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;}</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160; </div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;EZ_ALWAYS_INLINE <span class="keyword">typename</span> <a class="code" href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm">ezIdTableBase&lt;IdType, ValueType&gt;::ConstIterator</a> <a class="code" href="../../da/d31/classez_id_table_base.htm#a5608309445e42f2d906df22168653034">ezIdTableBase&lt;IdType, ValueType&gt;::GetIterator</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  <span class="keywordflow">return</span> ConstIterator(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;}</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00350"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#ae7f4e2aabb439e28afdaee3198256572">  350</a></span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* <a class="code" href="../../da/d31/classez_id_table_base.htm#ae7f4e2aabb439e28afdaee3198256572">ezIdTableBase&lt;IdType, ValueType&gt;::GetAllocator</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  <span class="keywordflow">return</span> m_pAllocator;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;}</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160; </div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00356"></a><span class="lineno"><a class="line" href="../../da/d31/classez_id_table_base.htm#a34ed0500452f2ca15fb18a45a8071d04">  356</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../da/d31/classez_id_table_base.htm#a34ed0500452f2ca15fb18a45a8071d04">ezIdTableBase&lt;IdType, ValueType&gt;::IsFreelistValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  <span class="keywordflow">if</span> (m_pEntries == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  IndexType uiIndex = m_FreelistDequeue;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  <span class="keyword">const</span> Entry* pEntry = m_pEntries + uiIndex;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  <span class="keywordflow">while</span> (pEntry-&gt;id.m_InstanceIndex &lt; m_Capacity)</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  {</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    uiIndex = pEntry-&gt;id.m_InstanceIndex;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    pEntry = m_pEntries + uiIndex;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  <span class="keywordflow">return</span> uiIndex == m_FreelistEnqueue;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;}</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160; </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160; </div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">// private methods</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../da/d31/classez_id_table_base.htm">ezIdTableBase&lt;IdType, ValueType&gt;::SetCapacity</a>(IndexType uiCapacity)</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;{</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  Entry* pNewEntries = EZ_NEW_RAW_BUFFER(m_pAllocator, Entry, (<span class="keywordtype">size_t</span>)uiCapacity);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  <span class="keywordflow">for</span> (IndexType i = 0; i &lt; m_Capacity; ++i)</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    pNewEntries[i].id = m_pEntries[i].id;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keywordflow">if</span> (m_pEntries[i].<span class="keywordtype">id</span>.m_InstanceIndex == i)</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;      <a class="code" href="../../dc/d4d/classez_memory_utils.htm#ae016ea37ee5fc0eb1d922d02f042746c">ezMemoryUtils::RelocateConstruct</a>(&amp;pNewEntries[i].value, &amp;m_pEntries[i].value, 1);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    }</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  }</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160; </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  EZ_DELETE_RAW_BUFFER(m_pAllocator, m_pEntries);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  m_pEntries = pNewEntries;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160; </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  InitializeFreelist(m_Capacity, uiCapacity);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  m_Capacity = uiCapacity;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;}</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160; </div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../da/d31/classez_id_table_base.htm">ezIdTableBase&lt;IdType, ValueType&gt;::InitializeFreelist</a>(IndexType uiStart, IndexType uiEnd)</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;{</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  <span class="keywordflow">for</span> (IndexType i = uiStart; i &lt; uiEnd; ++i)</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;  {</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    IdType&amp; <span class="keywordtype">id</span> = m_pEntries[i].id;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keywordtype">id</span> = IdType(i + 1, 1); <span class="comment">// initialize generation with 1, to prevent 0 from being a valid ID</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;  }</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160; </div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  m_FreelistEnqueue = uiEnd - 1;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;}</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160; </div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> V, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<a class="code" href="../../d8/ddb/classez_id_table.htm">ezIdTable&lt;IdType, V, A&gt;::ezIdTable</a>()</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  : <a class="code" href="../../da/d31/classez_id_table_base.htm">ezIdTableBase</a>&lt;IdType, V&gt;(A::<a class="code" href="../../da/d31/classez_id_table_base.htm#ae7f4e2aabb439e28afdaee3198256572">GetAllocator</a>())</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;{</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;}</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160; </div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> V, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<a class="code" href="../../d8/ddb/classez_id_table.htm">ezIdTable&lt;IdType, V, A&gt;::ezIdTable</a>(<a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;  : <a class="code" href="../../da/d31/classez_id_table_base.htm">ezIdTableBase</a>&lt;IdType, V&gt;(pAllocator)</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;{</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;}</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160; </div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> V, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<a class="code" href="../../d8/ddb/classez_id_table.htm">ezIdTable&lt;IdType, V, A&gt;::ezIdTable</a>(<span class="keyword">const</span> <a class="code" href="../../d8/ddb/classez_id_table.htm">ezIdTable&lt;IdType, V, A&gt;</a>&amp; other)</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;  : <a class="code" href="../../da/d31/classez_id_table_base.htm">ezIdTableBase</a>&lt;IdType, V&gt;(other, A::GetAllocator())</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;{</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;}</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160; </div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> V, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<a class="code" href="../../d8/ddb/classez_id_table.htm">ezIdTable&lt;IdType, V, A&gt;::ezIdTable</a>(<span class="keyword">const</span> <a class="code" href="../../da/d31/classez_id_table_base.htm">ezIdTableBase&lt;IdType, V&gt;</a>&amp; other)</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;  : <a class="code" href="../../da/d31/classez_id_table_base.htm">ezIdTableBase</a>&lt;IdType, V&gt;(other, A::GetAllocator())</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;{</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;}</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160; </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> V, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d8/ddb/classez_id_table.htm">ezIdTable&lt;IdType, V, A&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d8/ddb/classez_id_table.htm">ezIdTable&lt;IdType, V, A&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;{</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;  <a class="code" href="../../da/d31/classez_id_table_base.htm#a12f12c67dbc228b435139822e7d1af97">ezIdTableBase&lt;IdType, V&gt;::operator=</a>(rhs);</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;}</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160; </div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> V, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d8/ddb/classez_id_table.htm">ezIdTable&lt;IdType, V, A&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../da/d31/classez_id_table_base.htm">ezIdTableBase&lt;IdType, V&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;{</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;  <a class="code" href="../../da/d31/classez_id_table_base.htm#a12f12c67dbc228b435139822e7d1af97">ezIdTableBase&lt;IdType, V&gt;::operator=</a>(rhs);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassez_id_table_base_htm_ae7f4e2aabb439e28afdaee3198256572"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#ae7f4e2aabb439e28afdaee3198256572">ezIdTableBase::GetAllocator</a></div><div class="ttdeci">ezAllocatorBase * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:350</div></div>
<div class="ttc" id="aclassez_id_table_base_1_1_const_iterator_htm_a8a021d7a095d9ce1bdab46a1faf97e39"><div class="ttname"><a href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a8a021d7a095d9ce1bdab46a1faf97e39">ezIdTableBase::ConstIterator::operator==</a></div><div class="ttdeci">bool operator==(const typename ezIdTableBase&lt; IdType, ValueType &gt;::ConstIterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:26</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_af00fe7c45f08585d3e4d8a60d887f2d4"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#af00fe7c45f08585d3e4d8a60d887f2d4">ezIdTableBase::ezIdTableBase</a></div><div class="ttdeci">ezIdTableBase(ezAllocatorBase *pAllocator)</div><div class="ttdoc">Creates an empty id-table. Does not allocate any data yet.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:89</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_a4f3ebb3269b4fea7dd24342df3cd5bc8"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#a4f3ebb3269b4fea7dd24342df3cd5bc8">ezIdTableBase::GetCount</a></div><div class="ttdeci">IndexType GetCount() const</div><div class="ttdoc">Returns the number of active entries in the table.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:168</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_af5190eea7e07b8b1e053f39b731ffdf9"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#af5190eea7e07b8b1e053f39b731ffdf9">ezIdTableBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns true, if the table does not contain any elements.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:174</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_a10645a54b5b48cdf7952a1be5c276095"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#a10645a54b5b48cdf7952a1be5c276095">ezIdTableBase::Contains</a></div><div class="ttdeci">bool Contains(const IdType id) const</div><div class="ttdoc">Returns if the table contains an entry corresponding to the given id.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:331</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_a69aedf90afa4ee63dcf3f37fd31c50c3"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#a69aedf90afa4ee63dcf3f37fd31c50c3">ezIdTableBase::Remove</a></div><div class="ttdeci">bool Remove(const IdType id, ValueType *out_pOldValue=nullptr)</div><div class="ttdoc">Removes the entry with the given id. Returns if an entry was removed and optionally writes out the ol...</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:237</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_a34ed0500452f2ca15fb18a45a8071d04"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#a34ed0500452f2ca15fb18a45a8071d04">ezIdTableBase::IsFreelistValid</a></div><div class="ttdeci">bool IsFreelistValid() const</div><div class="ttdoc">Returns whether the internal free-list is valid. For testing purpose only.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:356</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_a1180d6e2020092f74a4221aab823d66e"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#a1180d6e2020092f74a4221aab823d66e">ezIdTableBase::GetValueUnchecked</a></div><div class="ttdeci">const ValueType &amp; GetValueUnchecked(const IndexType index) const</div><div class="ttdoc">Returns the value at the given index. Does bounds checks in debug builds but does not check for stale...</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:317</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_a12b5ae8a2b42dad8d51df54e3057d9d9"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#a12b5ae8a2b42dad8d51df54e3057d9d9">ezIdTableBase::operator[]</a></div><div class="ttdeci">const ValueType &amp; operator[](const IdType id) const</div><div class="ttdoc">Returns the value to the given id. Does bounds checks in debug builds.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:291</div></div>
<div class="ttc" id="astructez_id_table_base_1_1_iterator_htm"><div class="ttname"><a href="../../d7/d1b/structez_id_table_base_1_1_iterator.htm">ezIdTableBase::Iterator</a></div><div class="ttdoc">Iterator with write access.</div><div class="ttdef"><b>Definition:</b> IdTable.h:59</div></div>
<div class="ttc" id="aclassez_id_table_base_1_1_const_iterator_htm"><div class="ttname"><a href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm">ezIdTableBase::ConstIterator</a></div><div class="ttdoc">Const iterator.</div><div class="ttdef"><b>Definition:</b> IdTable.h:24</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a9a615b84872b968b7f8523c6f7b0a25b"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a9a615b84872b968b7f8523c6f7b0a25b">ezMemoryUtils::CopyConstruct</a></div><div class="ttdeci">static void CopyConstruct(Destination *pDestination, const Source &amp;copy, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination, by creating uiCount copies of c...</div></div>
<div class="ttc" id="aclassez_id_table_base_1_1_const_iterator_htm_a89a58213008f4482a294211fcdd13345"><div class="ttname"><a href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a89a58213008f4482a294211fcdd13345">ezIdTableBase::ConstIterator::Next</a></div><div class="ttdeci">void Next()</div><div class="ttdoc">Advances the iterator to the next element in the map. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:52</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_ae016ea37ee5fc0eb1d922d02f042746c"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#ae016ea37ee5fc0eb1d922d02f042746c">ezMemoryUtils::RelocateConstruct</a></div><div class="ttdeci">static void RelocateConstruct(T *pDestination, T *pSource, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination from an existing array of object...</div></div>
<div class="ttc" id="aclassez_id_table_base_1_1_const_iterator_htm_a4e8bcfa80bbb7e1196c4ef57127b7251"><div class="ttname"><a href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a4e8bcfa80bbb7e1196c4ef57127b7251">ezIdTableBase::ConstIterator::operator++</a></div><div class="ttdeci">void operator++()</div><div class="ttdoc">Shorthand for 'Next'.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:65</div></div>
<div class="ttc" id="aclassez_id_table_htm"><div class="ttname"><a href="../../d8/ddb/classez_id_table.htm">ezIdTable</a></div><div class="ttdef"><b>Definition:</b> IdTable.h:170</div></div>
<div class="ttc" id="aclassez_id_table_base_1_1_const_iterator_htm_a386382e8489925828ddc17deffff39fc"><div class="ttname"><a href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a386382e8489925828ddc17deffff39fc">ezIdTableBase::ConstIterator::Value</a></div><div class="ttdeci">const ValueType &amp; Value() const</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:46</div></div>
<div class="ttc" id="aclassez_id_table_base_htm"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm">ezIdTableBase</a></div><div class="ttdoc">Implementation of an id mapping table which stores id/value pairs.</div><div class="ttdef"><b>Definition:</b> IdTable.h:17</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_a5608309445e42f2d906df22168653034"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#a5608309445e42f2d906df22168653034">ezIdTableBase::GetIterator</a></div><div class="ttdeci">Iterator GetIterator()</div><div class="ttdoc">Returns an Iterator to the very first element.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:338</div></div>
<div class="ttc" id="aclassez_allocator_base_htm"><div class="ttname"><a href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> AllocatorBase.h:22</div></div>
<div class="ttc" id="aclassez_id_table_base_1_1_const_iterator_htm_a7460b6edb9271cc571d784748a0e4cf0"><div class="ttname"><a href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a7460b6edb9271cc571d784748a0e4cf0">ezIdTableBase::ConstIterator::Id</a></div><div class="ttdeci">IdType Id() const</div><div class="ttdoc">Returns the 'id' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:40</div></div>
<div class="ttc" id="aclassez_id_table_base_1_1_const_iterator_htm_adbb139112ee45ffd15cc26060dffbb39"><div class="ttname"><a href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#adbb139112ee45ffd15cc26060dffbb39">ezIdTableBase::ConstIterator::operator!=</a></div><div class="ttdeci">bool operator!=(const typename ezIdTableBase&lt; IdType, ValueType &gt;::ConstIterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:33</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_af024397d0e055dabdc87f176a9e5b4d8"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#af024397d0e055dabdc87f176a9e5b4d8">ezIdTableBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the table.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:180</div></div>
<div class="ttc" id="aclassez_id_table_base_1_1_const_iterator_htm_a2bd94e22d8781ee01d661f4fda849801"><div class="ttname"><a href="../../d8/d3d/classez_id_table_base_1_1_const_iterator.htm#a2bd94e22d8781ee01d661f4fda849801">ezIdTableBase::ConstIterator::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:20</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_a12f12c67dbc228b435139822e7d1af97"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#a12f12c67dbc228b435139822e7d1af97">ezIdTableBase::operator=</a></div><div class="ttdeci">void operator=(const ezIdTableBase&lt; IdType, ValueType &gt; &amp;rhs)</div><div class="ttdoc">Copies the data from another table into this one.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:128</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_add65b87c39dade4ee7b0671c16b10a39"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#add65b87c39dade4ee7b0671c16b10a39">ezMemoryUtils::Destruct</a></div><div class="ttdeci">static void Destruct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Destructs uiCount objects of type T at pDestination.</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_a8e8d83852a64760ee3226d70aded21e4"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#a8e8d83852a64760ee3226d70aded21e4">ezIdTableBase::~ezIdTableBase</a></div><div class="ttdeci">~ezIdTableBase()</div><div class="ttdoc">Destructor.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:113</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_a506c618f4381ebb9072bf144a64d2b5c"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#a506c618f4381ebb9072bf144a64d2b5c">ezIdTableBase::TryGetValue</a></div><div class="ttdeci">bool TryGetValue(const IdType id, ValueType &amp;out_value) const</div><div class="ttdoc">Returns if an entry with the given id was found and if found writes out the corresponding value to ou...</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:267</div></div>
<div class="ttc" id="astructez_id_table_base_1_1_iterator_htm_a44b14d225eb9a75cd6b915879cc974aa"><div class="ttname"><a href="../../d7/d1b/structez_id_table_base_1_1_iterator.htm#a44b14d225eb9a75cd6b915879cc974aa">ezIdTableBase::Iterator::Value</a></div><div class="ttdeci">ValueType &amp; Value()</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:80</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_afcbeb04501c9d0ce6058daff0581b678"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#afcbeb04501c9d0ce6058daff0581b678">ezIdTableBase::Reserve</a></div><div class="ttdeci">void Reserve(IndexType capacity)</div><div class="ttdoc">Expands the table so it can at least store the given capacity.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:149</div></div>
<div class="ttc" id="aclassez_id_table_base_htm_a0c1985636bde8f692bfb45bb8aec9635"><div class="ttname"><a href="../../da/d31/classez_id_table_base.htm#a0c1985636bde8f692bfb45bb8aec9635">ezIdTableBase::Insert</a></div><div class="ttdeci">IdType Insert(const ValueType &amp;value)</div><div class="ttdoc">Inserts the value into the table and returns the corresponding id.</div><div class="ttdef"><b>Definition:</b> IdTable_inl.h:201</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_6b567e6755824bd0b8ffd754b9d67ac0.htm">Containers</a></li><li class="navelem"><a class="el" href="../../dir_ab7c7fd106dde24a64865a60f78fe0d2.htm">Implementation</a></li><li class="navelem"><b>IdTable_inl.h</b></li>
    <li class="footer">Generated on Sat Mar 25 2023 19:21:54 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
