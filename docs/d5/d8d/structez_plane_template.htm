<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezPlaneTemplate&lt; Type &gt; Struct Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.10</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d5/d8d/structez_plane_template.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="../../dd/d84/structez_plane_template-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezPlaneTemplate&lt; Type &gt; Struct Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A class that represents a mathematical plane.  
 <a href="../../d5/d8d/structez_plane_template.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d6/dbf/_plane_8h_source.htm">Plane.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a4518fb96bf246f4e1b6fa75a865ff50c"><td class="memItemLeft" align="right" valign="top"><a id="a4518fb96bf246f4e1b6fa75a865ff50c"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ComponentType</b> = Type</td></tr>
<tr class="separator:a4518fb96bf246f4e1b6fa75a865ff50c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a8deb26d449187f2b93560cce0ca4a64f"><td class="memItemLeft" align="right" valign="top"><a id="a8deb26d449187f2b93560cce0ca4a64f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>EZ_DECLARE_POD_TYPE</b> ()</td></tr>
<tr class="separator:a8deb26d449187f2b93560cce0ca4a64f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1de3da403b933d43433a758289b7a858"><td class="memItemLeft" align="right" valign="top"><a id="a1de3da403b933d43433a758289b7a858"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a1de3da403b933d43433a758289b7a858">ezPlaneTemplate</a> ()</td></tr>
<tr class="memdesc:a1de3da403b933d43433a758289b7a858"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor. Does not initialize the plane. <br /></td></tr>
<tr class="separator:a1de3da403b933d43433a758289b7a858"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c2a86db56e09a89329ad6f777eebe2d"><td class="memItemLeft" align="right" valign="top"><a id="a8c2a86db56e09a89329ad6f777eebe2d"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a8c2a86db56e09a89329ad6f777eebe2d">ezPlaneTemplate</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vNormal, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vPointOnPlane)</td></tr>
<tr class="memdesc:a8c2a86db56e09a89329ad6f777eebe2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates the plane-equation from a normal and a point on the plane. <br /></td></tr>
<tr class="separator:a8c2a86db56e09a89329ad6f777eebe2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b1e06632e3e92e9fcf8fcda606c4513"><td class="memItemLeft" align="right" valign="top"><a id="a4b1e06632e3e92e9fcf8fcda606c4513"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a4b1e06632e3e92e9fcf8fcda606c4513">ezPlaneTemplate</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;v1, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;v2, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;v3)</td></tr>
<tr class="memdesc:a4b1e06632e3e92e9fcf8fcda606c4513"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates the plane-equation from three points on the plane. <br /></td></tr>
<tr class="separator:a4b1e06632e3e92e9fcf8fcda606c4513"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37837f02fa88017a5edc0ed5eaba63ec"><td class="memItemLeft" align="right" valign="top"><a id="a37837f02fa88017a5edc0ed5eaba63ec"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a37837f02fa88017a5edc0ed5eaba63ec">ezPlaneTemplate</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *const pVertices)</td></tr>
<tr class="memdesc:a37837f02fa88017a5edc0ed5eaba63ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates the plane-equation from three points on the plane, given as an array. <br /></td></tr>
<tr class="separator:a37837f02fa88017a5edc0ed5eaba63ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62f2f0f34cbc939e47f0537f01451875"><td class="memItemLeft" align="right" valign="top"><a id="a62f2f0f34cbc939e47f0537f01451875"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a62f2f0f34cbc939e47f0537f01451875">ezPlaneTemplate</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *const pVertices, ezUInt32 iMaxVertices)</td></tr>
<tr class="memdesc:a62f2f0f34cbc939e47f0537f01451875"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates the plane-equation from a set of unreliable points lying on the same plane. Some points might be equal or too close to each other for the typical algorithm. <br /></td></tr>
<tr class="separator:a62f2f0f34cbc939e47f0537f01451875"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4dfcf604b449b67d5d50f34fb5b204c"><td class="memItemLeft" align="right" valign="top"><a id="aa4dfcf604b449b67d5d50f34fb5b204c"></a>
<a class="el" href="../../da/dd2/classez_vec4_template.htm">ezVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#aa4dfcf604b449b67d5d50f34fb5b204c">GetAsVec4</a> () const</td></tr>
<tr class="memdesc:aa4dfcf604b449b67d5d50f34fb5b204c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an ezVec4 with the plane normal in x,y,z and the negative distance in w. <br /></td></tr>
<tr class="separator:aa4dfcf604b449b67d5d50f34fb5b204c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a261718ccc6a71577378fce22f4fb4d39"><td class="memItemLeft" align="right" valign="top"><a id="a261718ccc6a71577378fce22f4fb4d39"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a261718ccc6a71577378fce22f4fb4d39">SetFromNormalAndPoint</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vNormal, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vPointOnPlane)</td></tr>
<tr class="memdesc:a261718ccc6a71577378fce22f4fb4d39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates the plane-equation from a normal and a point on the plane. <br /></td></tr>
<tr class="separator:a261718ccc6a71577378fce22f4fb4d39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82c740662e228339a4b9ee28c9d4dce0"><td class="memItemLeft" align="right" valign="top"><a id="a82c740662e228339a4b9ee28c9d4dce0"></a>
<a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a82c740662e228339a4b9ee28c9d4dce0">SetFromPoints</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;v1, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;v2, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;v3)</td></tr>
<tr class="memdesc:a82c740662e228339a4b9ee28c9d4dce0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates the plane-equation from three points on the plane. <br /></td></tr>
<tr class="separator:a82c740662e228339a4b9ee28c9d4dce0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc55d0897f8c39dc8c07afbb0a484a81"><td class="memItemLeft" align="right" valign="top"><a id="adc55d0897f8c39dc8c07afbb0a484a81"></a>
<a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#adc55d0897f8c39dc8c07afbb0a484a81">SetFromPoints</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *const pVertices)</td></tr>
<tr class="memdesc:adc55d0897f8c39dc8c07afbb0a484a81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates the plane-equation from three points on the plane, given as an array. <br /></td></tr>
<tr class="separator:adc55d0897f8c39dc8c07afbb0a484a81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0dcf61b19ebe0244220bdbdec5c8735"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#aa0dcf61b19ebe0244220bdbdec5c8735">SetFromPoints</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *const pVertices, ezUInt32 iMaxVertices)</td></tr>
<tr class="memdesc:aa0dcf61b19ebe0244220bdbdec5c8735"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates the plane-equation from a set of unreliable points lying on the same plane. Some points might be equal or too close to each other for the typical algorithm. Returns false, if no reliable set of points could be found. Does try to create a plane anyway.  <a href="../../d5/d8d/structez_plane_template.htm#aa0dcf61b19ebe0244220bdbdec5c8735">More...</a><br /></td></tr>
<tr class="separator:aa0dcf61b19ebe0244220bdbdec5c8735"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87c0f6bc684fca6c1736ded74b185263"><td class="memItemLeft" align="right" valign="top"><a id="a87c0f6bc684fca6c1736ded74b185263"></a>
<a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a87c0f6bc684fca6c1736ded74b185263">SetFromDirections</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vTangent1, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vTangent2, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vPointOnPlane)</td></tr>
<tr class="memdesc:a87c0f6bc684fca6c1736ded74b185263"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a plane from two direction vectors that span the plane, and one point on it. <br /></td></tr>
<tr class="separator:a87c0f6bc684fca6c1736ded74b185263"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f3152bc7787959ff94d175b7b44953f"><td class="memItemLeft" align="right" valign="top"><a id="a3f3152bc7787959ff94d175b7b44953f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a3f3152bc7787959ff94d175b7b44953f">SetInvalid</a> ()</td></tr>
<tr class="memdesc:a3f3152bc7787959ff94d175b7b44953f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the plane to an invalid state (all zero). <br /></td></tr>
<tr class="separator:a3f3152bc7787959ff94d175b7b44953f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e8f1c0e5f0ec6d086026ac817d3a72e"><td class="memItemLeft" align="right" valign="top"><a id="a9e8f1c0e5f0ec6d086026ac817d3a72e"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a9e8f1c0e5f0ec6d086026ac817d3a72e">GetDistanceTo</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vPoint) const</td></tr>
<tr class="memdesc:a9e8f1c0e5f0ec6d086026ac817d3a72e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the distance of the point to the plane. <br /></td></tr>
<tr class="separator:a9e8f1c0e5f0ec6d086026ac817d3a72e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f31e60fb1708add1aebcbbabfcdaa69"><td class="memItemLeft" align="right" valign="top">Type&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a4f31e60fb1708add1aebcbbabfcdaa69">GetMinimumDistanceTo</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *pPoints, ezUInt32 uiNumPoints, ezUInt32 uiStride=sizeof(<a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;)) const</td></tr>
<tr class="memdesc:a4f31e60fb1708add1aebcbbabfcdaa69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the minimum distance that any of the given points had to the plane.  <a href="../../d5/d8d/structez_plane_template.htm#a4f31e60fb1708add1aebcbbabfcdaa69">More...</a><br /></td></tr>
<tr class="separator:a4f31e60fb1708add1aebcbbabfcdaa69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a777026308acdbf36bc9d15c920526613"><td class="memItemLeft" align="right" valign="top"><a id="a777026308acdbf36bc9d15c920526613"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a777026308acdbf36bc9d15c920526613">GetMinimumDistanceTo</a> (const <a class="el" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBoxTemplate</a>&lt; Type &gt; &amp;Box) const</td></tr>
<tr class="memdesc:a777026308acdbf36bc9d15c920526613"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the minimum distance between given box and a plane. <br /></td></tr>
<tr class="separator:a777026308acdbf36bc9d15c920526613"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb4e4f08d8024aac7fb06fbfad16cbef"><td class="memItemLeft" align="right" valign="top"><a id="adb4e4f08d8024aac7fb06fbfad16cbef"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#adb4e4f08d8024aac7fb06fbfad16cbef">GetMaximumDistanceTo</a> (const <a class="el" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBoxTemplate</a>&lt; Type &gt; &amp;Box) const</td></tr>
<tr class="memdesc:adb4e4f08d8024aac7fb06fbfad16cbef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the maximum distance between given box and a plane. <br /></td></tr>
<tr class="separator:adb4e4f08d8024aac7fb06fbfad16cbef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcf9fc9a41b04ab68a2f0dbe97096887"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#adcf9fc9a41b04ab68a2f0dbe97096887">GetMinMaxDistanceTo</a> (Type &amp;out_fMin, Type &amp;out_fMax, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *pPoints, ezUInt32 uiNumPoints, ezUInt32 uiStride=sizeof(<a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;)) const</td></tr>
<tr class="memdesc:adcf9fc9a41b04ab68a2f0dbe97096887"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the minimum and maximum distance that any of the given points had to the plane.  <a href="../../d5/d8d/structez_plane_template.htm#adcf9fc9a41b04ab68a2f0dbe97096887">More...</a><br /></td></tr>
<tr class="separator:adcf9fc9a41b04ab68a2f0dbe97096887"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea8e5e369188e2e5fd5ce172caeb5ec2"><td class="memItemLeft" align="right" valign="top"><a id="aea8e5e369188e2e5fd5ce172caeb5ec2"></a>
<a class="el" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493a">ezPositionOnPlane::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#aea8e5e369188e2e5fd5ce172caeb5ec2">GetPointPosition</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vPoint) const</td></tr>
<tr class="memdesc:aea8e5e369188e2e5fd5ce172caeb5ec2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns on which side of the plane the point lies. <br /></td></tr>
<tr class="separator:aea8e5e369188e2e5fd5ce172caeb5ec2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab23434808842d9cf8743e170a59279b4"><td class="memItemLeft" align="right" valign="top"><a id="ab23434808842d9cf8743e170a59279b4"></a>
<a class="el" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493a">ezPositionOnPlane::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#ab23434808842d9cf8743e170a59279b4">GetPointPosition</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vPoint, Type fPlaneHalfWidth) const</td></tr>
<tr class="memdesc:ab23434808842d9cf8743e170a59279b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns on which side of the plane the point lies. <br /></td></tr>
<tr class="separator:ab23434808842d9cf8743e170a59279b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54551cbcbc7e3002ccd8fdad3df62db0"><td class="memItemLeft" align="right" valign="top"><a id="a54551cbcbc7e3002ccd8fdad3df62db0"></a>
<a class="el" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493a">ezPositionOnPlane::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a54551cbcbc7e3002ccd8fdad3df62db0">GetObjectPosition</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *const vPoints, ezUInt32 iVertices) const</td></tr>
<tr class="memdesc:a54551cbcbc7e3002ccd8fdad3df62db0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns on which side of the plane the set of points lies. Might be on both sides. <br /></td></tr>
<tr class="separator:a54551cbcbc7e3002ccd8fdad3df62db0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a9056a600b5fd129b6cde5ad2246560"><td class="memItemLeft" align="right" valign="top"><a id="a1a9056a600b5fd129b6cde5ad2246560"></a>
<a class="el" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493a">ezPositionOnPlane::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a1a9056a600b5fd129b6cde5ad2246560">GetObjectPosition</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *const vPoints, ezUInt32 iVertices, Type fPlaneHalfWidth) const</td></tr>
<tr class="memdesc:a1a9056a600b5fd129b6cde5ad2246560"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns on which side of the plane the set of points lies. Might be on both sides. <br /></td></tr>
<tr class="separator:a1a9056a600b5fd129b6cde5ad2246560"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae056da27e3586549061d60efa401f9b7"><td class="memItemLeft" align="right" valign="top"><a id="ae056da27e3586549061d60efa401f9b7"></a>
<a class="el" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493a">ezPositionOnPlane::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#ae056da27e3586549061d60efa401f9b7">GetObjectPosition</a> (const <a class="el" href="../../d2/d50/classez_bounding_sphere_template.htm">ezBoundingSphereTemplate</a>&lt; Type &gt; &amp;Sphere) const</td></tr>
<tr class="memdesc:ae056da27e3586549061d60efa401f9b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns on which side of the plane the sphere is located. <br /></td></tr>
<tr class="separator:ae056da27e3586549061d60efa401f9b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6eed29e1468aefd5821cd6592555a6eb"><td class="memItemLeft" align="right" valign="top"><a id="a6eed29e1468aefd5821cd6592555a6eb"></a>
<a class="el" href="../../db/d9e/structez_position_on_plane.htm#a377e6d93106db3d72713f119abba493a">ezPositionOnPlane::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a6eed29e1468aefd5821cd6592555a6eb">GetObjectPosition</a> (const <a class="el" href="../../d6/d25/classez_bounding_box_template.htm">ezBoundingBoxTemplate</a>&lt; Type &gt; &amp;Box) const</td></tr>
<tr class="memdesc:a6eed29e1468aefd5821cd6592555a6eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns on which side of the plane the box is located. <br /></td></tr>
<tr class="separator:a6eed29e1468aefd5821cd6592555a6eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af96ba78aa55f0a7b1d4fc7f60f588319"><td class="memItemLeft" align="right" valign="top"><a id="af96ba78aa55f0a7b1d4fc7f60f588319"></a>
const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#af96ba78aa55f0a7b1d4fc7f60f588319">ProjectOntoPlane</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vPoint) const</td></tr>
<tr class="memdesc:af96ba78aa55f0a7b1d4fc7f60f588319"><td class="mdescLeft">&#160;</td><td class="mdescRight">Projects a point onto a plane (along the planes normal). <br /></td></tr>
<tr class="separator:af96ba78aa55f0a7b1d4fc7f60f588319"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa1fc827595fcd488d6165f54baba75d"><td class="memItemLeft" align="right" valign="top"><a id="aaa1fc827595fcd488d6165f54baba75d"></a>
const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#aaa1fc827595fcd488d6165f54baba75d">Mirror</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vPoint) const</td></tr>
<tr class="memdesc:aaa1fc827595fcd488d6165f54baba75d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the mirrored point. E.g. on the other side of the plane, at the same distance. <br /></td></tr>
<tr class="separator:aaa1fc827595fcd488d6165f54baba75d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ed189801d0cbdc6563cb6b3efd80169"><td class="memItemLeft" align="right" valign="top"><a id="a3ed189801d0cbdc6563cb6b3efd80169"></a>
const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a3ed189801d0cbdc6563cb6b3efd80169">GetCoplanarDirection</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vDirection) const</td></tr>
<tr class="memdesc:a3ed189801d0cbdc6563cb6b3efd80169"><td class="mdescLeft">&#160;</td><td class="mdescRight">Take the given direction vector and returns a modified one that is coplanar to the plane. <br /></td></tr>
<tr class="separator:a3ed189801d0cbdc6563cb6b3efd80169"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28ed715903e01728f3c7d414019a5aa4"><td class="memItemLeft" align="right" valign="top"><a id="a28ed715903e01728f3c7d414019a5aa4"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a28ed715903e01728f3c7d414019a5aa4">IsIdentical</a> (const <a class="el" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a28ed715903e01728f3c7d414019a5aa4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether this plane and the other are identical. <br /></td></tr>
<tr class="separator:a28ed715903e01728f3c7d414019a5aa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac09e6e736ffe4763aaf75c13bc7ad87b"><td class="memItemLeft" align="right" valign="top"><a id="ac09e6e736ffe4763aaf75c13bc7ad87b"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#ac09e6e736ffe4763aaf75c13bc7ad87b">IsEqual</a> (const <a class="el" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a>&lt; Type &gt; &amp;rhs, Type fEpsilon=ezMath::DefaultEpsilon&lt; Type &gt;()) const</td></tr>
<tr class="memdesc:ac09e6e736ffe4763aaf75c13bc7ad87b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether this plane and the other are equal within some threshold. <br /></td></tr>
<tr class="separator:ac09e6e736ffe4763aaf75c13bc7ad87b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c1a787b6d5994e283150fb7c98fb27a"><td class="memItemLeft" align="right" valign="top"><a id="a6c1a787b6d5994e283150fb7c98fb27a"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a6c1a787b6d5994e283150fb7c98fb27a">IsValid</a> () const</td></tr>
<tr class="memdesc:a6c1a787b6d5994e283150fb7c98fb27a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the plane has valid values (not NaN, or infinite, normalized normal). <br /></td></tr>
<tr class="separator:a6c1a787b6d5994e283150fb7c98fb27a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab552082d9b537a4d3f52f12cec194cc0"><td class="memItemLeft" align="right" valign="top"><a id="ab552082d9b537a4d3f52f12cec194cc0"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#ab552082d9b537a4d3f52f12cec194cc0">IsNaN</a> () const</td></tr>
<tr class="memdesc:ab552082d9b537a4d3f52f12cec194cc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether any component is NaN. <br /></td></tr>
<tr class="separator:ab552082d9b537a4d3f52f12cec194cc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add9700307efa3f30fbd89feb7904b86f"><td class="memItemLeft" align="right" valign="top"><a id="add9700307efa3f30fbd89feb7904b86f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#add9700307efa3f30fbd89feb7904b86f">Transform</a> (const <a class="el" href="../../db/daf/classez_mat3_template.htm">ezMat3Template</a>&lt; Type &gt; &amp;m)</td></tr>
<tr class="memdesc:add9700307efa3f30fbd89feb7904b86f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms the plane with the given matrix. <br /></td></tr>
<tr class="separator:add9700307efa3f30fbd89feb7904b86f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2a5beb707c03659bc2e8f66aa9e1e2e"><td class="memItemLeft" align="right" valign="top"><a id="aa2a5beb707c03659bc2e8f66aa9e1e2e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#aa2a5beb707c03659bc2e8f66aa9e1e2e">Transform</a> (const <a class="el" href="../../d7/d9b/classez_mat4_template.htm">ezMat4Template</a>&lt; Type &gt; &amp;m)</td></tr>
<tr class="memdesc:aa2a5beb707c03659bc2e8f66aa9e1e2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms the plane with the given matrix. <br /></td></tr>
<tr class="separator:aa2a5beb707c03659bc2e8f66aa9e1e2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0a1a557cb5f996bfda7d145acd23e88"><td class="memItemLeft" align="right" valign="top"><a id="ac0a1a557cb5f996bfda7d145acd23e88"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#ac0a1a557cb5f996bfda7d145acd23e88">Flip</a> ()</td></tr>
<tr class="memdesc:ac0a1a557cb5f996bfda7d145acd23e88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Negates Normal/Distance to switch which side of the plane is front and back. <br /></td></tr>
<tr class="separator:ac0a1a557cb5f996bfda7d145acd23e88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a433d69109382ca8fb062bb678dae5a9e"><td class="memItemLeft" align="right" valign="top"><a id="a433d69109382ca8fb062bb678dae5a9e"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a433d69109382ca8fb062bb678dae5a9e">FlipIfNecessary</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vPoint, bool bPlaneShouldFacePoint=true)</td></tr>
<tr class="memdesc:a433d69109382ca8fb062bb678dae5a9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Negates Normal/Distance to switch which side of the plane is front and back. Returns true, if the plane had to be flipped. <br /></td></tr>
<tr class="separator:a433d69109382ca8fb062bb678dae5a9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69ff59bb630412f17ae9905cda71c196"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a69ff59bb630412f17ae9905cda71c196">GetRayIntersection</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vRayStartPos, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vRayDir, Type *out_fIntersection=nullptr, <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *out_vIntersection=nullptr) const</td></tr>
<tr class="memdesc:a69ff59bb630412f17ae9905cda71c196"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the ray hit the plane. The intersection time describes at which multiple of the ray direction the ray hit the plane.  <a href="../../d5/d8d/structez_plane_template.htm#a69ff59bb630412f17ae9905cda71c196">More...</a><br /></td></tr>
<tr class="separator:a69ff59bb630412f17ae9905cda71c196"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36f46b295d2ffbd14f4735fd2c244635"><td class="memItemLeft" align="right" valign="top"><a id="a36f46b295d2ffbd14f4735fd2c244635"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a36f46b295d2ffbd14f4735fd2c244635">GetRayIntersectionBiDirectional</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vRayStartPos, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vRayDir, Type *out_fIntersection=nullptr, <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *out_vIntersection=nullptr) const</td></tr>
<tr class="memdesc:a36f46b295d2ffbd14f4735fd2c244635"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the ray intersects the plane. Intersection time and point are stored in the out-parameters. Allows for intersections at negative times (shooting into the opposite direction). <br /></td></tr>
<tr class="separator:a36f46b295d2ffbd14f4735fd2c244635"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9475e8c27e7029cf1623d1628891274"><td class="memItemLeft" align="right" valign="top"><a id="ac9475e8c27e7029cf1623d1628891274"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#ac9475e8c27e7029cf1623d1628891274">GetLineSegmentIntersection</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vLineStartPos, const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;vLineEndPos, Type *out_fHitFraction=nullptr, <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *out_vIntersection=nullptr) const</td></tr>
<tr class="memdesc:ac9475e8c27e7029cf1623d1628891274"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there is any intersection with the plane between the line's start and end position. Returns the fraction along the line and the actual intersection point. <br /></td></tr>
<tr class="separator:ac9475e8c27e7029cf1623d1628891274"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a9afb0705753316740acbce6157e3ef2f"><td class="memItemLeft" align="right" valign="top"><a id="a9afb0705753316740acbce6157e3ef2f"></a>
static <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#a9afb0705753316740acbce6157e3ef2f">GetPlanesIntersectionPoint</a> (const <a class="el" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a>&lt; Type &gt; &amp;p0, const <a class="el" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a>&lt; Type &gt; &amp;p1, const <a class="el" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a>&lt; Type &gt; &amp;p2, <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;out_Result)</td></tr>
<tr class="memdesc:a9afb0705753316740acbce6157e3ef2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the one point where all three planes intersect. Returns EZ_FAILURE if no such point exists. <br /></td></tr>
<tr class="separator:a9afb0705753316740acbce6157e3ef2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac32add0a6ba5b6181cadc8a0b8712eb7"><td class="memItemLeft" align="right" valign="top"><a id="ac32add0a6ba5b6181cadc8a0b8712eb7"></a>
static <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d8d/structez_plane_template.htm#ac32add0a6ba5b6181cadc8a0b8712eb7">FindSupportPoints</a> (const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *const pVertices, ezInt32 iMaxVertices, ezInt32 &amp;out_v1, ezInt32 &amp;out_v2, ezInt32 &amp;out_v3)</td></tr>
<tr class="memdesc:ac32add0a6ba5b6181cadc8a0b8712eb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns three points from an unreliable set of points, that reliably form a plane. Returns false, if there are none. <br /></td></tr>
<tr class="separator:ac32add0a6ba5b6181cadc8a0b8712eb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a205434377f0dfb1822cf315937c1eeb2"><td class="memItemLeft" align="right" valign="top"><a id="a205434377f0dfb1822cf315937c1eeb2"></a>
<a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>m_vNormal</b></td></tr>
<tr class="separator:a205434377f0dfb1822cf315937c1eeb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0900152016a94750fe2b794352484cea"><td class="memItemLeft" align="right" valign="top"><a id="a0900152016a94750fe2b794352484cea"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>m_fNegDistance</b></td></tr>
<tr class="separator:a0900152016a94750fe2b794352484cea"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename Type&gt;<br />
struct ezPlaneTemplate&lt; Type &gt;</h3>

<p>A class that represents a mathematical plane. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a4f31e60fb1708add1aebcbbabfcdaa69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f31e60fb1708add1aebcbbabfcdaa69">&#9670;&nbsp;</a></span>GetMinimumDistanceTo()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Type <a class="el" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a>&lt; Type &gt;::GetMinimumDistanceTo </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *&#160;</td>
          <td class="paramname"><em>pPoints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumPoints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiStride</em> = <code>sizeof(<a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt;Type&gt;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the minimum distance that any of the given points had to the plane. </p>
<p>'Minimum' means the (non-absolute) distance of a point to the plane. So a point behind the plane will always have a 'lower distance' than a point in front of the plane, even if that is closer to the plane's surface. </p>

</div>
</div>
<a id="adcf9fc9a41b04ab68a2f0dbe97096887"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcf9fc9a41b04ab68a2f0dbe97096887">&#9670;&nbsp;</a></span>GetMinMaxDistanceTo()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a>&lt; Type &gt;::GetMinMaxDistanceTo </td>
          <td>(</td>
          <td class="paramtype">Type &amp;&#160;</td>
          <td class="paramname"><em>out_fMin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type &amp;&#160;</td>
          <td class="paramname"><em>out_fMax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *&#160;</td>
          <td class="paramname"><em>pPoints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiNumPoints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiStride</em> = <code>sizeof(<a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt;Type&gt;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the minimum and maximum distance that any of the given points had to the plane. </p>
<p>'Minimum' (and 'maximum') means the (non-absolute) distance of a point to the plane. So a point behind the plane will always have a 'lower distance' than a point in front of the plane, even if that is closer to the plane's surface. </p>

</div>
</div>
<a id="a69ff59bb630412f17ae9905cda71c196"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69ff59bb630412f17ae9905cda71c196">&#9670;&nbsp;</a></span>GetRayIntersection()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a>&lt; Type &gt;::GetRayIntersection </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;&#160;</td>
          <td class="paramname"><em>vRayStartPos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; &amp;&#160;</td>
          <td class="paramname"><em>vRayDir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type *&#160;</td>
          <td class="paramname"><em>out_fIntersection</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *&#160;</td>
          <td class="paramname"><em>out_vIntersection</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true, if the ray hit the plane. The intersection time describes at which multiple of the ray direction the ray hit the plane. </p>
<p>An intersection will be reported regardless of whether the ray starts 'behind' or 'in front of' the plane, as long as it points at it. <em>vRayDir</em> does not need to be normalized.<br  />
out_vIntersection = vRayStartPos + out_fIntersection * vRayDir</p>
<p>Intersections with <em>out_fIntersection</em> less than zero will be discarded and not reported as intersections. If such intersections are desired, use GetRayIntersectionBiDirectional instead. </p>

</div>
</div>
<a id="aa0dcf61b19ebe0244220bdbdec5c8735"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0dcf61b19ebe0244220bdbdec5c8735">&#9670;&nbsp;</a></span>SetFromPoints()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> <a class="el" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a>&lt; Type &gt;::SetFromPoints </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dbd/structez_vec3_template.htm">ezVec3Template</a>&lt; Type &gt; *const&#160;</td>
          <td class="paramname"><em>pVertices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>iMaxVertices</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates the plane-equation from a set of unreliable points lying on the same plane. Some points might be equal or too close to each other for the typical algorithm. Returns false, if no reliable set of points could be found. Does try to create a plane anyway. </p>
<p>The given vertices can be partially equal or lie on the same line. The algorithm will try to find 3 vertices, that form a plane, and deduce the normal from them. This algorithm is much slower, than all the other methods, so only use it, when you know, that your data can contain such configurations. </p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/<a class="el" href="../../d4/dbc/_engine_2_foundation_2_math_2_declarations_8h_source.htm">Declarations.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/<a class="el" href="../../d6/dbf/_plane_8h_source.htm">Plane.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/Implementation/<a class="el" href="../../da/d5c/_all_classes__inl_8h_source.htm">AllClasses_inl.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Math/Implementation/<a class="el" href="../../d3/d1f/_plane__inl_8h_source.htm">Plane_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d5/d8d/structez_plane_template.htm">ezPlaneTemplate</a></li>
    <li class="footer">Generated on Mon Oct 18 2021 15:33:38 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
