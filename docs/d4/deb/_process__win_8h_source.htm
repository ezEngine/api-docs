<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/System/Implementation/Win/Process_win.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.10</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d4/deb/_process__win_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Process_win.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &lt;Foundation/FoundationInternal.h&gt;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;EZ_FOUNDATION_INTERNAL_HEADER</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;Foundation/Logging/Log.h&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/System/Process.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;future&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno"><a class="line" href="../../d8/d7c/structez_pipe_win.htm">    8</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d8/d7c/structez_pipe_win.htm">ezPipeWin</a></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;{</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  HANDLE m_pipeRead = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  HANDLE m_pipeWrite = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  std::thread m_readThread;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  std::atomic&lt;bool&gt; m_running = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160; </div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  <span class="keywordtype">bool</span> IsRunning()<span class="keyword"> const</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <span class="keywordflow">return</span> m_running;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  }</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  <span class="keywordtype">void</span> Create()</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  {</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    SECURITY_ATTRIBUTES saAttr;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="comment">// Set the bInheritHandle flag so pipe handles are inherited.</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    saAttr.nLength = <span class="keyword">sizeof</span>(SECURITY_ATTRIBUTES);</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    saAttr.bInheritHandle = TRUE;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    saAttr.lpSecurityDescriptor = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="comment">// Create a pipe for the child process.</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">if</span> (!CreatePipe(&amp;m_pipeRead, &amp;m_pipeWrite, &amp;saAttr, 0))</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;      <a class="code" href="../../dc/d9e/classez_log.htm#ae5b1ee0c969668bdac113be5f4b15fa3">ezLog::Error</a>(<span class="stringliteral">&quot;ezPipeWin: CreatePipe failed&quot;</span>);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="comment">// Ensure the read handle to the pipe is not inherited.</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">if</span> (!SetHandleInformation(m_pipeRead, HANDLE_FLAG_INHERIT, 0))</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;      <a class="code" href="../../dc/d9e/classez_log.htm#ae5b1ee0c969668bdac113be5f4b15fa3">ezLog::Error</a>(<span class="stringliteral">&quot;Stdout SetHandleInformation&quot;</span>);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  }</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keywordtype">void</span> Close()</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  {</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">if</span> (m_pipeWrite)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;      CloseHandle(m_pipeWrite);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      m_pipeWrite = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      <span class="keywordflow">if</span> (m_readThread.joinable())</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        m_readThread.join();</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;      }</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      CloseHandle(m_pipeRead);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      m_pipeRead = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  }</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  <span class="keywordtype">void</span> StartRead(<a class="code" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>&lt;<span class="keywordtype">void</span>(<a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a>)&gt;&amp; onStdOut)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">if</span> (m_pipeWrite)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      m_running = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      m_readThread = std::thread([&amp;]() {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> overflowBuffer;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        constexpr <span class="keywordtype">int</span> BUFSIZE = 512;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordtype">char</span> chBuf[BUFSIZE];</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">while</span> (<span class="keyword">true</span>)</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;          DWORD bytesRead = 0;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;          <span class="keywordtype">bool</span> res = ReadFile(m_pipeRead, chBuf, BUFSIZE, &amp;bytesRead, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;          <span class="keywordflow">if</span> (!res || bytesRead == 0)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;          {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">if</span> (!overflowBuffer.<a class="code" href="../../dd/d69/structez_string_base.htm#a3b169646f62ef8a8d33b63e2b8731afb">IsEmpty</a>())</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;              onStdOut(overflowBuffer);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;          }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">char</span>* szCurrentPos = chBuf;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">char</span>* szEndPos = chBuf + bytesRead;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;          <span class="keywordflow">while</span> (szCurrentPos &lt; szEndPos)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;          {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">char</span>* szFound = <a class="code" href="../../de/df8/classez_string_utils.htm#a4e7bb80c9b5b1bc468d88e70379895ff">ezStringUtils::FindSubString</a>(szCurrentPos, <span class="stringliteral">&quot;\n&quot;</span>, szEndPos);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">if</span> (szFound)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;              <span class="keywordflow">if</span> (overflowBuffer.<a class="code" href="../../dd/d69/structez_string_base.htm#a3b169646f62ef8a8d33b63e2b8731afb">IsEmpty</a>())</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;              {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="comment">// If there is nothing in the overflow buffer this is a complete line and can be fired as is.</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                onStdOut(<a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a>(szCurrentPos, szFound + 1));</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;              }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;              <span class="keywordflow">else</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;              {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="comment">// We have data in the overflow buffer so this is the final part of a partial line so we need to complete and fire the overflow buffer.</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                overflowBuffer.<a class="code" href="../../d3/d88/classez_string_builder.htm#a605f325ea4c9c3242454a16657e24ef7">Append</a>(<a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a>(szCurrentPos, szFound + 1));</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                onStdOut(overflowBuffer);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                overflowBuffer.<a class="code" href="../../d3/d88/classez_string_builder.htm#a162e5eb18bb60fd044c2fbbcdfa79228">Clear</a>();</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;              }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;              szCurrentPos = szFound + 1;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;              <span class="comment">// This is either the start or a middle segment of a line, append to overflow buffer.</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;              overflowBuffer.<a class="code" href="../../d3/d88/classez_string_builder.htm#a605f325ea4c9c3242454a16657e24ef7">Append</a>(<a class="code" href="../../de/db8/structez_string_view.htm">ezStringView</a>(szCurrentPos, szEndPos));</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;              szCurrentPos = szEndPos;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;          } </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        m_running = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      });</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;};</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">struct </span><a class="code" href="../../dd/dd3/structez_process_impl.htm">ezProcessImpl</a></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  ezOsProcessHandle m_ProcessHandle = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  ezOsProcessHandle m_MainThreadHandle = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  ezOsProcessID m_ProcessID = 0;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  <a class="code" href="../../d8/d7c/structez_pipe_win.htm">ezPipeWin</a> m_pipeStdOut;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <a class="code" href="../../d8/d7c/structez_pipe_win.htm">ezPipeWin</a> m_pipeStdErr;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  ~<a class="code" href="../../dd/dd3/structez_process_impl.htm">ezProcessImpl</a>() { Close(); }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keywordtype">void</span> Close()</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">if</span> (m_MainThreadHandle != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      CloseHandle(m_MainThreadHandle);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;      m_MainThreadHandle = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">if</span> (m_ProcessHandle != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;      CloseHandle(m_ProcessHandle);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      m_ProcessHandle = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    m_pipeStdOut.Close();</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    m_pipeStdErr.Close();</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;};</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;ezProcess::ezProcess()</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  m_impl = EZ_DEFAULT_NEW(<a class="code" href="../../dd/dd3/structez_process_impl.htm">ezProcessImpl</a>);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;ezProcess::~ezProcess()</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  <span class="keywordflow">if</span> (GetState() == ezProcessState::Running)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="../../dc/d9e/classez_log.htm#afbe4730716fa79b0f35f2ceacbdff862">ezLog::Dev</a>(<span class="stringliteral">&quot;Process still running - terminating &#39;{}&#39;&quot;</span>, m_sProcess);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    Terminate().IgnoreResult();</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="comment">// Explicitly clear the implementation here so that member</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <span class="comment">// state (e.g. delegates) used by the impl survives the implementation.</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  m_impl.Clear();</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;ezOsProcessHandle ezProcess::GetProcessHandle()<span class="keyword"> const</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keywordflow">return</span> m_impl-&gt;m_ProcessHandle;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;}</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;ezOsProcessID ezProcess::GetProcessID()<span class="keyword"> const</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="keywordflow">return</span> m_impl-&gt;m_ProcessID;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;ezOsProcessID ezProcess::GetCurrentProcessID()</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;{</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  <span class="keyword">const</span> ezOsProcessID processID = GetCurrentProcessId();</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <span class="keywordflow">return</span> processID;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">// Taken from &quot;Programmatically controlling which handles are inherited by new processes in Win32&quot; by Raymond Chen</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">// https://devblogs.microsoft.com/oldnewthing/20111216-00/?p=8873</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">static</span> BOOL CreateProcessWithExplicitHandles(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes,</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory,</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation,</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="comment">// here is the new stuff</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  DWORD cHandlesToInherit, HANDLE* rgHandlesToInherit)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  BOOL fSuccess;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  BOOL fInitialized = FALSE;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  SIZE_T size = 0;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  fSuccess = cHandlesToInherit &lt; 0xFFFFFFFF / <span class="keyword">sizeof</span>(HANDLE) &amp;&amp; lpStartupInfo-&gt;cb == <span class="keyword">sizeof</span>(*lpStartupInfo);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  <span class="keywordflow">if</span> (!fSuccess)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    SetLastError(ERROR_INVALID_PARAMETER);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keywordflow">if</span> (cHandlesToInherit &gt; 0)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">if</span> (fSuccess)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      fSuccess = InitializeProcThreadAttributeList(<span class="keyword">nullptr</span>, 1, 0, &amp;size) || GetLastError() == ERROR_INSUFFICIENT_BUFFER;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">if</span> (fSuccess)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;      lpAttributeList = <span class="keyword">reinterpret_cast&lt;</span>LPPROC_THREAD_ATTRIBUTE_LIST<span class="keyword">&gt;</span>(HeapAlloc(GetProcessHeap(), 0, size));</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;      fSuccess = lpAttributeList != <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">if</span> (fSuccess)</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;      fSuccess = InitializeProcThreadAttributeList(lpAttributeList, 1, 0, &amp;size);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">if</span> (fSuccess)</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      fInitialized = TRUE;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      fSuccess = UpdateProcThreadAttribute(</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        lpAttributeList, 0, PROC_THREAD_ATTRIBUTE_HANDLE_LIST, rgHandlesToInherit, cHandlesToInherit * <span class="keyword">sizeof</span>(HANDLE), <span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <span class="keywordflow">if</span> (fSuccess)</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    STARTUPINFOEXW info;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    ZeroMemory(&amp;info, <span class="keyword">sizeof</span>(info));</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    info.StartupInfo = *lpStartupInfo;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    info.StartupInfo.cb = <span class="keyword">sizeof</span>(info);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    info.lpAttributeList = lpAttributeList;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="comment">// it is both possible to pass in (STARTUPINFOW*)&amp;info OR info.StartupInfo ...</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    fSuccess = CreateProcessW(lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles,</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;      dwCreationFlags | EXTENDED_STARTUPINFO_PRESENT, lpEnvironment, lpCurrentDirectory, &amp;info.StartupInfo, lpProcessInformation);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  <span class="keywordflow">if</span> (fInitialized)</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    DeleteProcThreadAttributeList(lpAttributeList);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  <span class="keywordflow">if</span> (lpAttributeList)</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    HeapFree(GetProcessHeap(), 0, lpAttributeList);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  <span class="keywordflow">return</span> fSuccess;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<a class="code" href="../../d4/da9/structez_result.htm">ezResult</a> ezProcess::Launch(<span class="keyword">const</span> ezProcessOptions&amp; opt, <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ezProcessLaunchFlags&gt;</a> launchFlags <span class="comment">/*= ezAsyncProcessFlags::None*/</span>)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;{</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  EZ_ASSERT_DEV(m_impl-&gt;m_ProcessHandle == <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Cannot reuse an instance of ezProcess&quot;</span>);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  EZ_ASSERT_DEV(m_impl-&gt;m_ProcessID == 0, <span class="stringliteral">&quot;Cannot reuse an instance of ezProcess&quot;</span>);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  <a class="code" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> sProcess = opt.m_sProcess;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  sProcess.<a class="code" href="../../d3/d88/classez_string_builder.htm#acb4e8da454e08207f376cb95ec372878">MakeCleanPath</a>();</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  sProcess.<a class="code" href="../../d3/d88/classez_string_builder.htm#ab00bf8210b069a78433b7561fd78a6e4">ReplaceAll</a>(<span class="stringliteral">&quot;/&quot;</span>, <span class="stringliteral">&quot;\\&quot;</span>);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  m_sProcess = sProcess;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  m_onStdOut = opt.m_onStdOut;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  m_onStdError = opt.m_onStdError;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  STARTUPINFOW si;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aed226ed6447ce30053c0b5b990b978ff">ezMemoryUtils::ZeroFill</a>(&amp;si, 1);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  si.cb = <span class="keyword">sizeof</span>(si);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  si.dwFlags = STARTF_FORCEOFFFEEDBACK; <span class="comment">// do not show a wait cursor while launching the process</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  <span class="comment">// attention: passing in even a single null handle will fail the handle inheritance entirely,</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  <span class="comment">// but CreateProcess will still return success</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  <span class="comment">// therefore we must ensure to only pass non-null handles to inherit</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  HANDLE HandlesToInherit[2];</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  ezUInt32 uiNumHandlesToInherit = 0;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  <span class="keywordflow">if</span> (m_onStdOut.IsValid())</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  {</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    m_impl-&gt;m_pipeStdOut.Create();</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    si.hStdOutput = m_impl-&gt;m_pipeStdOut.m_pipeWrite;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    si.dwFlags |= STARTF_USESTDHANDLES;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    HandlesToInherit[uiNumHandlesToInherit++] = m_impl-&gt;m_pipeStdOut.m_pipeWrite;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  <span class="keywordflow">if</span> (m_onStdError.IsValid())</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    m_impl-&gt;m_pipeStdErr.Create();</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    si.hStdError = m_impl-&gt;m_pipeStdErr.m_pipeWrite;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    si.dwFlags |= STARTF_USESTDHANDLES;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    HandlesToInherit[uiNumHandlesToInherit++] = m_impl-&gt;m_pipeStdErr.m_pipeWrite;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  }</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160; </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  PROCESS_INFORMATION pi;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aed226ed6447ce30053c0b5b990b978ff">ezMemoryUtils::ZeroFill</a>(&amp;pi, 1);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  <a class="code" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> sCmdLine;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  BuildFullCommandLineString(opt, sProcess, sCmdLine);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  DWORD dwCreationFlags = NORMAL_PRIORITY_CLASS | CREATE_UNICODE_ENVIRONMENT;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="keywordflow">if</span> (opt.m_bHideConsoleWindow)</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    dwCreationFlags |= CREATE_NO_WINDOW;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160; </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="keywordflow">if</span> (launchFlags.<a class="code" href="../../d1/dec/structez_bitflags.htm#a0f23fb5379d0fa6c092c565e44830cbe">IsSet</a>(ezProcessLaunchFlags::Suspended))</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  {</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    dwCreationFlags |= CREATE_SUSPENDED;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <span class="comment">// We pass nullptr as lpApplicationName as setting it would prevent OpenProcess to run system apps or apps in PATH.</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <span class="comment">// Instead, the module name is pre-pended to lpCommandLine in BuildFullCommandLineString.</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  <span class="keywordflow">if</span> (!CreateProcessWithExplicitHandles(<span class="keyword">nullptr</span>, <span class="keyword">const_cast&lt;</span><span class="keywordtype">wchar_t</span>*<span class="keyword">&gt;</span>(<a class="code" href="../../df/d6c/classez_string_w_char.htm">ezStringWChar</a>(sCmdLine).GetData()),</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="keyword">nullptr</span>,                                  <span class="comment">// lpProcessAttributes</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keyword">nullptr</span>,                                  <span class="comment">// lpThreadAttributes</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        uiNumHandlesToInherit &gt; 0 ? TRUE : FALSE, <span class="comment">// bInheritHandles</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        dwCreationFlags,</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keyword">nullptr</span>, <span class="comment">// lpEnvironment</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        opt.m_sWorkingDirectory.IsEmpty() ? <span class="keyword">nullptr</span> : <a class="code" href="../../df/d6c/classez_string_w_char.htm">ezStringWChar</a>(opt.m_sWorkingDirectory).GetData(),</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        &amp;si,                   <span class="comment">// lpStartupInfo</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        &amp;pi,                   <span class="comment">// lpProcessInformation</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        uiNumHandlesToInherit, <span class="comment">// cHandlesToInherit</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        HandlesToInherit       <span class="comment">// rgHandlesToInherit</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        ))</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    m_impl-&gt;m_pipeStdOut.Close();</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    m_impl-&gt;m_pipeStdErr.Close();</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <a class="code" href="../../dc/d9e/classez_log.htm#ae5b1ee0c969668bdac113be5f4b15fa3">ezLog::Error</a>(<span class="stringliteral">&quot;Failed to launch &#39;{} {}&#39; - {}&quot;</span>, sProcess, <a class="code" href="../../d1/d10/structez_arg_sensitive.htm">ezArgSensitive</a>(sCmdLine, <span class="stringliteral">&quot;CommandLine&quot;</span>), ezArgErrorCode(GetLastError()));</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;  }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  m_impl-&gt;m_pipeStdOut.StartRead(m_onStdOut);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  m_impl-&gt;m_pipeStdErr.StartRead(m_onStdError);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160; </div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  m_impl-&gt;m_ProcessHandle = pi.hProcess;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  m_impl-&gt;m_ProcessID = pi.dwProcessId;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  <span class="keywordflow">if</span> (launchFlags.<a class="code" href="../../d1/dec/structez_bitflags.htm#a0f23fb5379d0fa6c092c565e44830cbe">IsSet</a>(ezProcessLaunchFlags::Suspended))</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="comment">// store the main thread handle for ResumeSuspended() later</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    m_impl-&gt;m_MainThreadHandle = pi.hThread;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    CloseHandle(pi.hThread);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  }</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  <span class="keywordflow">if</span> (launchFlags.<a class="code" href="../../d1/dec/structez_bitflags.htm#a0f23fb5379d0fa6c092c565e44830cbe">IsSet</a>(ezProcessLaunchFlags::Detached))</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    Detach();</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  }</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;}</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160; </div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<a class="code" href="../../d4/da9/structez_result.htm">ezResult</a> ezProcess::ResumeSuspended()</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;{</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  <span class="keywordflow">if</span> (m_impl-&gt;m_ProcessHandle == <span class="keyword">nullptr</span> || m_impl-&gt;m_MainThreadHandle == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160; </div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  ResumeThread(m_impl-&gt;m_MainThreadHandle);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  <span class="comment">// invalidate the thread handle, so that we cannot resume the process twice</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  CloseHandle(m_impl-&gt;m_MainThreadHandle);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  m_impl-&gt;m_MainThreadHandle = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;}</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<a class="code" href="../../d4/da9/structez_result.htm">ezResult</a> ezProcess::WaitToFinish(<a class="code" href="../../d3/d90/structez_time.htm">ezTime</a> timeout <span class="comment">/*= ezTime::Zero()*/</span>)</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;{</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  EZ_ASSERT_DEV(m_impl-&gt;m_ProcessHandle != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Launch a process before waiting on it&quot;</span>);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  EZ_ASSERT_DEV(m_impl-&gt;m_ProcessID != 0, <span class="stringliteral">&quot;Launch a process before waiting on it&quot;</span>);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160; </div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  DWORD dwTimeout = INFINITE;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  <span class="keywordflow">if</span> (timeout.<a class="code" href="../../d3/d90/structez_time.htm#a24c57e5346cae282ed2666a7e68bfa58">IsPositive</a>())</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    dwTimeout = (DWORD)timeout.<a class="code" href="../../d3/d90/structez_time.htm#adba42cadff3de8e7ab52fbf800aa7356">GetMilliseconds</a>();</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    dwTimeout = INFINITE;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  <span class="keyword">const</span> DWORD res = WaitForSingleObject(m_impl-&gt;m_ProcessHandle, dwTimeout);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  <span class="keywordflow">if</span> (res == WAIT_TIMEOUT)</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  {</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="comment">// the process is not yet finished, the timeout was reached</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  }</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160; </div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  <span class="keywordflow">if</span> (res == WAIT_FAILED)</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  {</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <a class="code" href="../../dc/d9e/classez_log.htm#ae5b1ee0c969668bdac113be5f4b15fa3">ezLog::Error</a>(<span class="stringliteral">&quot;Failed to wait for &#39;{}&#39; - {}&quot;</span>, m_sProcess, ezArgErrorCode(GetLastError()));</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  }</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  <span class="comment">// the process has finished</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160; </div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  m_impl-&gt;m_pipeStdOut.Close();</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  m_impl-&gt;m_pipeStdErr.Close();</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;  GetExitCodeProcess(m_impl-&gt;m_ProcessHandle, <span class="keyword">reinterpret_cast&lt;</span>DWORD*<span class="keyword">&gt;</span>(&amp;m_iExitCode));</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;}</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160; </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<a class="code" href="../../d4/da9/structez_result.htm">ezResult</a> ezProcess::Execute(<span class="keyword">const</span> ezProcessOptions&amp; opt, ezInt32* out_iExitCode <span class="comment">/*= nullptr*/</span>)</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;{</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  ezProcess proc;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160; </div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  EZ_SUCCEED_OR_RETURN(proc.Launch(opt));</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  EZ_SUCCEED_OR_RETURN(proc.WaitToFinish());</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160; </div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;  <span class="keywordflow">if</span> (out_iExitCode != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  {</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    *out_iExitCode = proc.GetExitCode();</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;}</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<a class="code" href="../../d4/da9/structez_result.htm">ezResult</a> ezProcess::Terminate()</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;{</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;  EZ_ASSERT_DEV(m_impl-&gt;m_ProcessHandle != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Launch a process before terminating it&quot;</span>);</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;  EZ_ASSERT_DEV(m_impl-&gt;m_ProcessID != 0, <span class="stringliteral">&quot;Launch a process before terminating it&quot;</span>);</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160; </div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  <span class="keywordflow">if</span> (TerminateProcess(m_impl-&gt;m_ProcessHandle, 0xFFFFFFFF) == FALSE)</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  {</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <a class="code" href="../../dc/d9e/classez_log.htm#ae5b1ee0c969668bdac113be5f4b15fa3">ezLog::Error</a>(<span class="stringliteral">&quot;Failed to terminate process &#39;{}&#39; - {}&quot;</span>, m_sProcess, ezArgErrorCode(GetLastError()));</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keywordflow">return</span> EZ_FAILURE;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;  }</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160; </div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;  EZ_SUCCEED_OR_RETURN(WaitToFinish());</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;  <span class="keywordflow">return</span> EZ_SUCCESS;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;}</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160; </div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;ezProcessState ezProcess::GetState()<span class="keyword"> const</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;  <span class="keywordflow">if</span> (m_impl-&gt;m_ProcessHandle == 0)</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordflow">return</span> ezProcessState::NotStarted;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160; </div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;  DWORD exitCode = 0;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;  <span class="keywordflow">if</span> (GetExitCodeProcess(m_impl-&gt;m_ProcessHandle, &amp;exitCode) == FALSE)</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;  {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <a class="code" href="../../dc/d9e/classez_log.htm#ae5b1ee0c969668bdac113be5f4b15fa3">ezLog::Error</a>(<span class="stringliteral">&quot;Failed to retrieve exit code for process &#39;{}&#39; - {}&quot;</span>, m_sProcess, ezArgErrorCode(GetLastError()));</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160; </div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="comment">// not sure what kind of errors can happen (probably access denied and such)</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="comment">// have to return something, so lets claim the process is finished</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keywordflow">return</span> ezProcessState::Finished;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;  }</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160; </div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  <span class="keywordflow">if</span> (exitCode == STILL_ACTIVE)</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keywordflow">return</span> ezProcessState::Running;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160; </div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;  <span class="comment">// Do not consider a process finished if the pipe threads have not exited yet.</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  <span class="keywordflow">if</span> (m_impl-&gt;m_pipeStdOut.IsRunning() || m_impl-&gt;m_pipeStdErr.IsRunning())</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keywordflow">return</span> ezProcessState::Running;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160; </div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;  m_iExitCode = (ezInt32)exitCode;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;  <span class="keywordflow">return</span> ezProcessState::Finished;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;}</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160; </div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="keywordtype">void</span> ezProcess::Detach()</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;{</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;  <span class="comment">// throw away the previous ezProcessImpl and create a blank one</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;  m_impl = EZ_DEFAULT_NEW(<a class="code" href="../../dd/dd3/structez_process_impl.htm">ezProcessImpl</a>);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160; </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;  <span class="comment">// reset the exit code to the default</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;  m_iExitCode = -0xFFFF;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassez_log_htm_ae5b1ee0c969668bdac113be5f4b15fa3"><div class="ttname"><a href="../../dc/d9e/classez_log.htm#ae5b1ee0c969668bdac113be5f4b15fa3">ezLog::Error</a></div><div class="ttdeci">static void Error(ezLogInterface *pInterface, const ezFormatString &amp;string)</div><div class="ttdoc">An error that needs to be fixed as soon as possible.</div><div class="ttdef"><b>Definition:</b> Log.cpp:362</div></div>
<div class="ttc" id="astructez_bitflags_htm"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm">ezBitflags</a></div><div class="ttdoc">The ezBitflags class allows you to work with type-safe bitflags.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:80</div></div>
<div class="ttc" id="astructez_result_htm"><div class="ttname"><a href="../../d4/da9/structez_result.htm">ezResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition:</b> Types.h:50</div></div>
<div class="ttc" id="astructez_time_htm"><div class="ttname"><a href="../../d3/d90/structez_time.htm">ezTime</a></div><div class="ttdoc">The time class encapsulates a double value storing the time in seconds.</div><div class="ttdef"><b>Definition:</b> Time.h:11</div></div>
<div class="ttc" id="aclassez_log_htm_afbe4730716fa79b0f35f2ceacbdff862"><div class="ttname"><a href="../../dc/d9e/classez_log.htm#afbe4730716fa79b0f35f2ceacbdff862">ezLog::Dev</a></div><div class="ttdeci">static void Dev(ezLogInterface *pInterface, const ezFormatString &amp;string)</div><div class="ttdoc">Status information that is nice to have during development.</div></div>
<div class="ttc" id="aclassez_string_builder_htm_acb4e8da454e08207f376cb95ec372878"><div class="ttname"><a href="../../d3/d88/classez_string_builder.htm#acb4e8da454e08207f376cb95ec372878">ezStringBuilder::MakeCleanPath</a></div><div class="ttdeci">void MakeCleanPath()</div><div class="ttdoc">Removes &quot;../&quot; where possible, replaces all path separators with /, removes double slashes.</div><div class="ttdef"><b>Definition:</b> StringBuilder.cpp:639</div></div>
<div class="ttc" id="astructez_arg_sensitive_htm"><div class="ttname"><a href="../../d1/d10/structez_arg_sensitive.htm">ezArgSensitive</a></div><div class="ttdoc">Wraps a string that may contain sensitive information, such as user file paths.</div><div class="ttdef"><b>Definition:</b> FormatStringArgs.h:157</div></div>
<div class="ttc" id="astructez_time_htm_a24c57e5346cae282ed2666a7e68bfa58"><div class="ttname"><a href="../../d3/d90/structez_time.htm#a24c57e5346cae282ed2666a7e68bfa58">ezTime::IsPositive</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE bool IsPositive() const</div><div class="ttdoc">Checks for a positive time value. This does not include zero.</div><div class="ttdef"><b>Definition:</b> Time.h:56</div></div>
<div class="ttc" id="aclassez_string_w_char_htm"><div class="ttname"><a href="../../df/d6c/classez_string_w_char.htm">ezStringWChar</a></div><div class="ttdoc">A very simple string class that should only be used to temporarily convert text to the OSes native wc...</div><div class="ttdef"><b>Definition:</b> StringConversion.h:19</div></div>
<div class="ttc" id="aclassez_string_builder_htm_a162e5eb18bb60fd044c2fbbcdfa79228"><div class="ttname"><a href="../../d3/d88/classez_string_builder.htm#a162e5eb18bb60fd044c2fbbcdfa79228">ezStringBuilder::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Resets this string to be empty. Does not deallocate any previously allocated data,...</div><div class="ttdef"><b>Definition:</b> StringBuilder_inl.h:107</div></div>
<div class="ttc" id="astructez_time_htm_adba42cadff3de8e7ab52fbf800aa7356"><div class="ttname"><a href="../../d3/d90/structez_time.htm#adba42cadff3de8e7ab52fbf800aa7356">ezTime::GetMilliseconds</a></div><div class="ttdeci">constexpr double GetMilliseconds() const</div><div class="ttdoc">Returns the milliseconds value.</div><div class="ttdef"><b>Definition:</b> Time_inl.h:30</div></div>
<div class="ttc" id="aclassez_string_builder_htm_ab00bf8210b069a78433b7561fd78a6e4"><div class="ttname"><a href="../../d3/d88/classez_string_builder.htm#ab00bf8210b069a78433b7561fd78a6e4">ezStringBuilder::ReplaceAll</a></div><div class="ttdeci">ezUInt32 ReplaceAll(ezStringView sSearchFor, ezStringView sReplacement)</div><div class="ttdoc">Replaces all occurrences of szSearchFor by szReplacement. Returns the number of replacements.</div><div class="ttdef"><b>Definition:</b> StringBuilder.cpp:420</div></div>
<div class="ttc" id="astructez_delegate_htm"><div class="ttname"><a href="../../d5/d68/structez_delegate.htm">ezDelegate</a></div><div class="ttdoc">A generic delegate class which supports static functions and member functions.</div><div class="ttdef"><b>Definition:</b> Delegate.h:75</div></div>
<div class="ttc" id="aclassez_string_builder_htm_a605f325ea4c9c3242454a16657e24ef7"><div class="ttname"><a href="../../d3/d88/classez_string_builder.htm#a605f325ea4c9c3242454a16657e24ef7">ezStringBuilder::Append</a></div><div class="ttdeci">void Append(ezUInt32 uiChar)</div><div class="ttdoc">Appends a single Utf32 character.</div><div class="ttdef"><b>Definition:</b> StringBuilder_inl.h:114</div></div>
<div class="ttc" id="astructez_string_base_htm_a3b169646f62ef8a8d33b63e2b8731afb"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a3b169646f62ef8a8d33b63e2b8731afb">ezStringBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns whether the string is an empty string.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:25</div></div>
<div class="ttc" id="astructez_process_impl_htm"><div class="ttname"><a href="../../dd/dd3/structez_process_impl.htm">ezProcessImpl</a></div><div class="ttdef"><b>Definition:</b> Process_posix.h:32</div></div>
<div class="ttc" id="astructez_string_view_htm"><div class="ttname"><a href="../../de/db8/structez_string_view.htm">ezStringView</a></div><div class="ttdoc">ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition:</b> StringView.h:22</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a4e7bb80c9b5b1bc468d88e70379895ff"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a4e7bb80c9b5b1bc468d88e70379895ff">ezStringUtils::FindSubString</a></div><div class="ttdeci">static const char * FindSubString(const char *szSource, const char *szStringToFind, const char *pSourceEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStringToFindEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the first occurrence of szStringToFind in szSource.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:604</div></div>
<div class="ttc" id="aclassez_string_builder_htm"><div class="ttname"><a href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a></div><div class="ttdoc">ezStringBuilder is a class that is meant for creating and modifying strings.</div><div class="ttdef"><b>Definition:</b> StringBuilder.h:34</div></div>
<div class="ttc" id="astructez_bitflags_htm_a0f23fb5379d0fa6c092c565e44830cbe"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#a0f23fb5379d0fa6c092c565e44830cbe">ezBitflags::IsSet</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsSet(Enum flag) const</div><div class="ttdoc">Checks if certain flags are set within the bitfield.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:124</div></div>
<div class="ttc" id="astructez_pipe_win_htm"><div class="ttname"><a href="../../d8/d7c/structez_pipe_win.htm">ezPipeWin</a></div><div class="ttdef"><b>Definition:</b> Process_win.h:8</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_aed226ed6447ce30053c0b5b990b978ff"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#aed226ed6447ce30053c0b5b990b978ff">ezMemoryUtils::ZeroFill</a></div><div class="ttdeci">static void ZeroFill(T *pDestination, size_t uiCount)</div><div class="ttdoc">Zeros every byte in the provided memory buffer.</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_755fdcfb6b850fe41cc906fd4ef666a8.htm">System</a></li><li class="navelem"><a class="el" href="../../dir_8580235f0f8f387a258dcf4b47a3ab70.htm">Implementation</a></li><li class="navelem"><a class="el" href="../../dir_10157c49fda0276b550836e7c5b9a31b.htm">Win</a></li><li class="navelem"><b>Process_win.h</b></li>
    <li class="footer">Generated on Sun Oct 9 2022 14:44:56 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
