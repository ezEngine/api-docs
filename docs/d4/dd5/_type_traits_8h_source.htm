<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Types/TypeTraits.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 25.03</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d4/dd5/_type_traits_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">TypeTraits.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#ifndef EZ_INCLUDING_BASICS_H</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#  error &quot;Please don&#39;t include TypeTraits.h directly, but instead include Foundation/Basics.h&quot;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">int</span> v&gt;</div>
<div class="line"><a name="l00011"></a><span class="lineno"><a class="line" href="../../d6/d09/structez_trait_int.htm">   11</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;{</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="keyword">static</span> constexpr <span class="keywordtype">int</span> value = v;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;};</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">using</span> <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsMemRelocatable</a> = <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt&lt;2&gt;</a>;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">using</span> <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a> = <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt&lt;1&gt;</a>;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">using</span> <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a> = <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt&lt;0&gt;</a>;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">using</span> ezCompileTimeTrueType = char;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">using</span> ezCompileTimeFalseType = int;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> cond&gt;</div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="../../d2/d03/structez_condition_to_compile_time_bool.htm">   25</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d2/d03/structez_condition_to_compile_time_bool.htm">ezConditionToCompileTimeBool</a></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  <span class="keyword">using</span> type = ezCompileTimeFalseType;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;};</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="../../d6/d1d/structez_condition_to_compile_time_bool_3_01true_01_4.htm">   31</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d2/d03/structez_condition_to_compile_time_bool.htm">ezConditionToCompileTimeBool</a>&lt;true&gt;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  <span class="keyword">using</span> type = ezCompileTimeTrueType;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;};</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;ezCompileTimeFalseType operator%(<span class="keyword">const</span> T&amp;, <span class="keyword">const</span> <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>&amp;);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="../../dc/dbe/structez_is_pod_type.htm">   42</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType</a> : <span class="keyword">public</span> <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a>&lt;(sizeof(*((T*)0) % *((const ezTypeIsPod*)0)) == sizeof(ezCompileTimeTrueType)) ? 1 : 0&gt;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;};</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="../../d6/d65/structez_is_pod_type_3_01_t_01_5_01_4.htm">   48</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType</a>&lt;T*&gt; : <span class="keyword">public</span> <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;};</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">int</span> N&gt;</div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="../../d1/d13/structez_is_pod_type_3_01_t_0f_n_0e_4.htm">   54</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType</a>&lt;T[N]&gt; : <span class="keyword">public</span> <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;};</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;ezCompileTimeFalseType operator%(<span class="keyword">const</span> T&amp;, <span class="keyword">const</span> <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTypeIsMemRelocatable</a>&amp;);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="../../d5/d86/structez_get_type_class.htm">   65</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d5/d86/structez_get_type_class.htm">ezGetTypeClass</a></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  : <span class="keyword">public</span> <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a>&lt;(sizeof(*((T*)0) % *((const ezTypeIsMemRelocatable*)0)) == sizeof(ezCompileTimeTrueType)) ? 2 : ezIsPodType&lt;T&gt;::value&gt;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;};</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> From, <span class="keyword">typename</span> To&gt;</div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="../../de/dc1/structez_conversion_test.htm">   72</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../de/dc1/structez_conversion_test.htm">ezConversionTest</a></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <span class="keyword">static</span> ezCompileTimeTrueType Test(<span class="keyword">const</span> To&amp;);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keyword">static</span> ezCompileTimeFalseType Test(...);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keyword">static</span> From MakeFrom();</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="keyword">enum</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    exists = <span class="keyword">sizeof</span>(Test(MakeFrom())) == <span class="keyword">sizeof</span>(ezCompileTimeTrueType),</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    sameType = 0</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  };</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;};</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="../../df/d50/structez_conversion_test_3_01_t_00_01_t_01_4.htm">   87</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../de/dc1/structez_conversion_test.htm">ezConversionTest</a>&lt;T, T&gt;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <span class="keyword">enum</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    exists = 1,</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    sameType = 1</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  };</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;};</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">// remapping of the 0 (not special) type to 3</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</div>
<div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="../../d6/dd0/structez_get_strongest_type_class.htm">   98</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d6/dd0/structez_get_strongest_type_class.htm">ezGetStrongestTypeClass</a> : <span class="keyword">public</span> <a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a>&lt;(T1::value == 0 || T2::value == 0) ? 0 : EZ_COMPILE_TIME_MAX(T1::value, T2::value)&gt;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;};</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">#ifdef __INTELLISENSE__</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">#  define EZ_DECLARE_POD_TYPE()</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">#  define EZ_DECLARE_MEM_RELOCATABLE_TYPE()</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">#  define EZ_DECLARE_MEM_RELOCATABLE_TYPE_CONDITIONAL(T)</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">// \brief embed this into a class to automatically detect which type class it belongs to</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">// This macro is only guaranteed to work for classes / structs which don&#39;t have any constructor / destructor / assignment operator!</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">// As arguments you have to list the types of all the members of the class / struct.</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">#  define EZ_DETECT_TYPE_CLASS(...)</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">#  define EZ_DECLARE_POD_TYPE()                               \</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor">    ezCompileTimeTrueType operator%(const ezTypeIsPod&amp;) const \</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">    {                                                         \</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor">      return {};                                              \</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor">#  define EZ_DECLARE_MEM_RELOCATABLE_TYPE()                              \</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">    ezCompileTimeTrueType operator%(const ezTypeIsMemRelocatable&amp;) const \</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">    {                                                                    \</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">      return {};                                                         \</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor">#  define EZ_DECLARE_MEM_RELOCATABLE_TYPE_CONDITIONAL(T)                                                                                       \</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="preprocessor">    typename ezConditionToCompileTimeBool&lt;ezGetTypeClass&lt;T&gt;::value == ezTypeIsMemRelocatable::value || ezIsPodType&lt;T&gt;::value&gt;::type operator%( \</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor">      const ezTypeIsMemRelocatable&amp;) const                                                                                                     \</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="preprocessor">    {                                                                                                                                          \</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">      return {};                                                                                                                               \</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">#  define EZ_DETECT_TYPE_CLASS_1(T1) ezGetTypeClass&lt;T1&gt;</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor">#  define EZ_DETECT_TYPE_CLASS_2(T1, T2) ezGetStrongestTypeClass&lt;EZ_DETECT_TYPE_CLASS_1(T1), EZ_DETECT_TYPE_CLASS_1(T2)&gt;</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor">#  define EZ_DETECT_TYPE_CLASS_3(T1, T2, T3) ezGetStrongestTypeClass&lt;EZ_DETECT_TYPE_CLASS_2(T1, T2), EZ_DETECT_TYPE_CLASS_1(T3)&gt;</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="preprocessor">#  define EZ_DETECT_TYPE_CLASS_4(T1, T2, T3, T4) ezGetStrongestTypeClass&lt;EZ_DETECT_TYPE_CLASS_2(T1, T2), EZ_DETECT_TYPE_CLASS_2(T3, T4)&gt;</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#  define EZ_DETECT_TYPE_CLASS_5(T1, T2, T3, T4, T5) ezGetStrongestTypeClass&lt;EZ_DETECT_TYPE_CLASS_4(T1, T2, T3, T4), EZ_DETECT_TYPE_CLASS_1(T5)&gt;</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="preprocessor">#  define EZ_DETECT_TYPE_CLASS_6(T1, T2, T3, T4, T5, T6) \</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="preprocessor">    ezGetStrongestTypeClass&lt;EZ_DETECT_TYPE_CLASS_4(T1, T2, T3, T4), EZ_DETECT_TYPE_CLASS_2(T5, T6)&gt;</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">// \brief embed this into a class to automatically detect which type class it belongs to</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">// This macro is only guaranteed to work for classes / structs which don&#39;t have any constructor / destructor / assignment operator!</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">// As arguments you have to list the types of all the members of the class / struct.</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="preprocessor">#  define EZ_DETECT_TYPE_CLASS(...)                                                                                                   \</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="preprocessor">    ezCompileTimeTrueType operator%(                                                                                                  \</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor">      const ezTraitInt&lt;EZ_CALL_MACRO(EZ_PP_CONCAT(EZ_DETECT_TYPE_CLASS_, EZ_VA_NUM_ARGS(__VA_ARGS__)), (__VA_ARGS__))::value&gt;&amp;) const \</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="preprocessor">    {                                                                                                                                 \</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="preprocessor">      return {};                                                                                                                      \</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="preprocessor">#define EZ_DEFINE_AS_POD_TYPE(T)             \</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor">  template &lt;&gt;                                \</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">  struct ezIsPodType&lt;T&gt; : public ezTypeIsPod \</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">  {                                          \</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">  }</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;EZ_DEFINE_AS_POD_TYPE(<span class="keywordtype">bool</span>);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;EZ_DEFINE_AS_POD_TYPE(<span class="keywordtype">float</span>);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;EZ_DEFINE_AS_POD_TYPE(<span class="keywordtype">double</span>);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;EZ_DEFINE_AS_POD_TYPE(<span class="keywordtype">char</span>);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;EZ_DEFINE_AS_POD_TYPE(ezInt8);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;EZ_DEFINE_AS_POD_TYPE(ezInt16);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;EZ_DEFINE_AS_POD_TYPE(ezInt32);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;EZ_DEFINE_AS_POD_TYPE(ezInt64);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;EZ_DEFINE_AS_POD_TYPE(ezUInt8);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;EZ_DEFINE_AS_POD_TYPE(ezUInt16);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;EZ_DEFINE_AS_POD_TYPE(ezUInt32);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;EZ_DEFINE_AS_POD_TYPE(ezUInt64);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;EZ_DEFINE_AS_POD_TYPE(<span class="keywordtype">wchar_t</span>);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;EZ_DEFINE_AS_POD_TYPE(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;EZ_DEFINE_AS_POD_TYPE(<span class="keywordtype">long</span>);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;EZ_DEFINE_AS_POD_TYPE(std::byte);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="preprocessor">#define EZ_IS_DERIVED_FROM_STATIC(BaseClass, DerivedClass) \</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="preprocessor">  (ezConversionTest&lt;const DerivedClass*, const BaseClass*&gt;::exists &amp;&amp; !ezConversionTest&lt;const BaseClass*, const void*&gt;::sameType)</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="preprocessor">#define EZ_IS_SAME_TYPE(TypeA, TypeB) ezConversionTest&lt;TypeA, TypeB&gt;::sameType</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="../../d1/d32/structez_type_traits.htm">  206</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d1/d32/structez_type_traits.htm">ezTypeTraits</a></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;{</div>
<div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="../../d1/d32/structez_type_traits.htm#a4e377295b9ab7e2c78b1c82f92e63517">  209</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#a4e377295b9ab7e2c78b1c82f92e63517">NonConstType</a> = <span class="keyword">typename</span> std::remove_const&lt;T&gt;::type;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="../../d1/d32/structez_type_traits.htm#a4c2f89ab5e7c70494f16e20300d0ac1c">  212</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#a4c2f89ab5e7c70494f16e20300d0ac1c">NonReferenceType</a> = <span class="keyword">typename</span> std::remove_reference&lt;T&gt;::type;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno"><a class="line" href="../../d1/d32/structez_type_traits.htm#aab7bc6560987fdafa07e22956337989c">  215</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#aab7bc6560987fdafa07e22956337989c">NonPointerType</a> = <span class="keyword">typename</span> std::remove_pointer&lt;T&gt;::type;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">  218</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">NonConstReferenceType</a> = <span class="keyword">typename</span> std::remove_const&lt;typename std::remove_reference&lt;T&gt;::type&gt;::type;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno"><a class="line" href="../../d1/d32/structez_type_traits.htm#a1da2a2361a3c9ab3a1e8287bc3cf7176">  221</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#a1da2a2361a3c9ab3a1e8287bc3cf7176">NonReferencePointerType</a> = <span class="keyword">typename</span> std::remove_pointer&lt;typename std::remove_reference&lt;T&gt;::type&gt;::type;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="../../d1/d32/structez_type_traits.htm#a9dcee6bb8dad253cbdc804cd45ce22f1">  225</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#a9dcee6bb8dad253cbdc804cd45ce22f1">NonConstReferencePointerType</a> = <span class="keyword">typename</span> std::remove_const&lt;typename std::remove_reference&lt;typename std::remove_pointer&lt;T&gt;::type&gt;::type&gt;::type;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;};</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="preprocessor">#define EZ_MAKE_MEMBERFUNCTION_CHECKER(functionName, checkerName)                \</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="preprocessor">  template &lt;typename T, typename Signature&gt;                                      \</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="preprocessor">  struct checkerName                                                             \</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="preprocessor">  {                                                                              \</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor">    template &lt;typename U, U&gt;                                                     \</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="preprocessor">    struct type_check;                                                           \</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="preprocessor">    template &lt;typename O&gt;                                                        \</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor">    static ezCompileTimeTrueType&amp; chk(type_check&lt;Signature, &amp;O::functionName&gt;*); \</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor">    template &lt;typename&gt;                                                          \</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="preprocessor">    static ezCompileTimeFalseType&amp; chk(...);                                     \</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor">    enum                                                                         \</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="preprocessor">    {                                                                            \</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="preprocessor">      value = (sizeof(chk&lt;T&gt;(0)) == sizeof(ezCompileTimeTrueType)) ? 1 : 0       \</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="preprocessor">    };                                                                           \</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="preprocessor">  }</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructez_type_traits_htm_af2051eb05a731b9618b107540f8f46f8"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits::NonConstReferenceType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type NonConstReferenceType</div><div class="ttdoc">removes reference and const qualifier</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:218</div></div>
<div class="ttc" id="astructez_type_traits_htm"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm">ezTypeTraits</a></div><div class="ttdef"><b>Definition:</b> TypeTraits.h:206</div></div>
<div class="ttc" id="astructez_get_strongest_type_class_htm"><div class="ttname"><a href="../../d6/dd0/structez_get_strongest_type_class.htm">ezGetStrongestTypeClass</a></div><div class="ttdef"><b>Definition:</b> TypeTraits.h:98</div></div>
<div class="ttc" id="astructez_type_traits_htm_a4e377295b9ab7e2c78b1c82f92e63517"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#a4e377295b9ab7e2c78b1c82f92e63517">ezTypeTraits::NonConstType</a></div><div class="ttdeci">typename std::remove_const&lt; T &gt;::type NonConstType</div><div class="ttdoc">removes const qualifier</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:209</div></div>
<div class="ttc" id="astructez_get_type_class_htm"><div class="ttname"><a href="../../d5/d86/structez_get_type_class.htm">ezGetTypeClass</a></div><div class="ttdoc">If there is an % operator which takes a ezTypeIsMemRelocatable and returns a CompileTimeTrueType T is...</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:65</div></div>
<div class="ttc" id="astructez_type_traits_htm_aab7bc6560987fdafa07e22956337989c"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#aab7bc6560987fdafa07e22956337989c">ezTypeTraits::NonPointerType</a></div><div class="ttdeci">typename std::remove_pointer&lt; T &gt;::type NonPointerType</div><div class="ttdoc">removes pointer</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:215</div></div>
<div class="ttc" id="astructez_condition_to_compile_time_bool_htm"><div class="ttname"><a href="../../d2/d03/structez_condition_to_compile_time_bool.htm">ezConditionToCompileTimeBool</a></div><div class="ttdoc">Converts a bool condition to CompileTimeTrue/FalseType.</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:25</div></div>
<div class="ttc" id="astructez_type_traits_htm_a9dcee6bb8dad253cbdc804cd45ce22f1"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#a9dcee6bb8dad253cbdc804cd45ce22f1">ezTypeTraits::NonConstReferencePointerType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; typename std::remove_pointer&lt; T &gt;::type &gt;::type &gt;::type NonConstReferencePointerType</div><div class="ttdoc">removes reference, const and pointer qualifier Note that this removes the const and reference of the ...</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:225</div></div>
<div class="ttc" id="astructez_type_traits_htm_a1da2a2361a3c9ab3a1e8287bc3cf7176"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#a1da2a2361a3c9ab3a1e8287bc3cf7176">ezTypeTraits::NonReferencePointerType</a></div><div class="ttdeci">typename std::remove_pointer&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type NonReferencePointerType</div><div class="ttdoc">removes reference and pointer qualifier</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:221</div></div>
<div class="ttc" id="astructez_type_traits_htm_a4c2f89ab5e7c70494f16e20300d0ac1c"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#a4c2f89ab5e7c70494f16e20300d0ac1c">ezTypeTraits::NonReferenceType</a></div><div class="ttdeci">typename std::remove_reference&lt; T &gt;::type NonReferenceType</div><div class="ttdoc">removes reference</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:212</div></div>
<div class="ttc" id="astructez_is_pod_type_htm"><div class="ttname"><a href="../../dc/dbe/structez_is_pod_type.htm">ezIsPodType</a></div><div class="ttdoc">If there is an % operator which takes a TypeIsPod and returns a CompileTimeTrueType T is Pod....</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:42</div></div>
<div class="ttc" id="astructez_trait_int_htm"><div class="ttname"><a href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a></div><div class="ttdoc">Type traits.</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:11</div></div>
<div class="ttc" id="astructez_conversion_test_htm"><div class="ttname"><a href="../../de/dc1/structez_conversion_test.htm">ezConversionTest</a></div><div class="ttdoc">Static Conversion Test.</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:72</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_f95f7c440efc771b227d40e9293549bd.htm">Types</a></li><li class="navelem"><b>TypeTraits.h</b></li>
    <li class="footer">Generated on Mon Mar 3 2025 17:23:46 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
