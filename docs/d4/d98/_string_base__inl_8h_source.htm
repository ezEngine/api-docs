<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: Code/Engine/Foundation/Strings/Implementation/StringBase_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search','.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d4/d98/_string_base__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">StringBase_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;EZ_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;Derived&gt;::InternalGetData</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;  <span class="keyword">const</span> Derived* pDerived = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Derived*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  <span class="keywordflow">return</span> pDerived-&gt;GetData();</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;}</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;EZ_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;Derived&gt;::InternalGetDataEnd</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="keyword">const</span> Derived* pDerived = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Derived*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  <span class="keywordflow">return</span> pDerived-&gt;GetData() + pDerived-&gt;GetElementCount();</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;}</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;EZ_ALWAYS_INLINE ezUInt32 <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;Derived&gt;::InternalGetElementCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  <span class="keyword">const</span> Derived* pDerived = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Derived*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  <span class="keywordflow">return</span> pDerived-&gt;GetElementCount();</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;}</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a3b169646f62ef8a8d33b63e2b8731afb">   25</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dd/d69/structez_string_base.htm#a3b169646f62ef8a8d33b63e2b8731afb">ezStringBase&lt;Derived&gt;::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a3b169646f62ef8a8d33b63e2b8731afb">   27</a></span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a63980b08e0aa463640f7e93786cf46da">ezStringUtils::IsNullOrEmpty</a>(InternalGetData()) || (InternalGetData() == InternalGetDataEnd());</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;}</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a40370a42191c470e969d0693385db3f3">   30</a></span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a40370a42191c470e969d0693385db3f3">   31</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d69/structez_string_base.htm#a40370a42191c470e969d0693385db3f3">ezStringBase&lt;Derived&gt;::StartsWith</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szStartsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#acb6973bde9b2b2b6773b69035c97e8ba">   33</a></span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a7b418cc21bcbebde0942157e9026d2a4">ezStringUtils::StartsWith</a>(InternalGetData(), szStartsWith, InternalGetDataEnd());</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#afb83fb2fc2655dfdfea37ef6ae13ef30">   36</a></span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#acb6973bde9b2b2b6773b69035c97e8ba">   37</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d69/structez_string_base.htm#acb6973bde9b2b2b6773b69035c97e8ba">ezStringBase&lt;Derived&gt;::StartsWith_NoCase</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szStartsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a1d4ac2126f45dcb7c567dee949cc68ab">   39</a></span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a9a76bb518ebebf3971f367a478a387c3">ezStringUtils::StartsWith_NoCase</a>(InternalGetData(), szStartsWith, InternalGetDataEnd());</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#afb83fb2fc2655dfdfea37ef6ae13ef30">   43</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d69/structez_string_base.htm#afb83fb2fc2655dfdfea37ef6ae13ef30">ezStringBase&lt;Derived&gt;::EndsWith</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szEndsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a347b438581d998a7ae158c57ceca1adf">ezStringUtils::EndsWith</a>(InternalGetData(), szEndsWith, InternalGetDataEnd());</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;}</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a139af1709f27a801b784a3f4bd2c12ed">   47</a></span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a1d4ac2126f45dcb7c567dee949cc68ab">   49</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d69/structez_string_base.htm#a1d4ac2126f45dcb7c567dee949cc68ab">ezStringBase&lt;Derived&gt;::EndsWith_NoCase</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szEndsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a44351ea491df5b7db1095dde6e6299c5">   51</a></span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a22bea564b8ddd615f8b24886ae566397">ezStringUtils::EndsWith_NoCase</a>(InternalGetData(), szEndsWith, InternalGetDataEnd());</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a0c0563a267bee66f3a1f76cf08af153f">   55</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../dd/d69/structez_string_base.htm#af672ce6437cd3c9d17b3267cfa834b48">ezStringBase&lt;Derived&gt;::FindSubString</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    szStartSearchAt = InternalGetData();</div>
<div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a7990e9f9c36231cd41af33a25f96dbc6">   59</a></span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  EZ_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()),</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a6b40e1a14058c184d69c1b25d9543a13">ezStringUtils::FindSubString</a>(szStartSearchAt, szStringToFind, InternalGetDataEnd());</div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a696c890e2e534cfc0af94091f0f0a5f6">   64</a></span>&#160;}</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a139af1709f27a801b784a3f4bd2c12ed">   67</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../dd/d69/structez_string_base.htm#a139af1709f27a801b784a3f4bd2c12ed">ezStringBase&lt;Derived&gt;::FindSubString_NoCase</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">   68</a></span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    szStartSearchAt = InternalGetData();</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a5fcc6b07403fe714f7823f06e51ed419">   72</a></span>&#160;  EZ_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()),</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a48e98ad28e9cc6c0a3d436b802149443">   75</a></span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a48041d5126a0c6c397062a47fa83b068">ezStringUtils::FindSubString_NoCase</a>(szStartSearchAt, szStringToFind, InternalGetDataEnd());</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#af924cf1e0bc6a35338229a7e9ad505a8">   79</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../dd/d69/structez_string_base.htm#a44351ea491df5b7db1095dde6e6299c5">ezStringBase&lt;Derived&gt;::FindLastSubString</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">   82</a></span>&#160;    szStartSearchAt = InternalGetDataEnd();</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  EZ_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()),</div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a77bcaa8c3cc64c21d1311e45033ffae3">   85</a></span>&#160;    <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a04c0d10e611473fe22f500cbfafa0488">ezStringUtils::FindLastSubString</a>(InternalGetData(), szStringToFind, szStartSearchAt, InternalGetDataEnd());</div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#aba99a929eb858f565e1fa332b6b03723">   88</a></span>&#160;}</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a0c0563a267bee66f3a1f76cf08af153f">   91</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../dd/d69/structez_string_base.htm#a0c0563a267bee66f3a1f76cf08af153f">ezStringBase&lt;Derived&gt;::FindLastSubString_NoCase</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a05bec3cf5581b35aa18849239b2471c6">   94</a></span>&#160;    szStartSearchAt = InternalGetDataEnd();</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  EZ_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()),</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a643bba9f880ec942d42b34e07e3d8623">ezStringUtils::FindLastSubString_NoCase</a>(InternalGetData(), szStringToFind, szStartSearchAt, InternalGetDataEnd());</div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">  100</a></span>&#160;}</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a7990e9f9c36231cd41af33a25f96dbc6">  103</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../dd/d69/structez_string_base.htm#a7990e9f9c36231cd41af33a25f96dbc6">ezStringBase&lt;Derived&gt;::FindWholeWord</a>(</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* szSearchFor, <a class="code" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> IsDelimiterCB, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">  106</a></span>&#160;  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    szStartSearchAt = InternalGetData();</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  EZ_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()),</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#ad0719f9e3c4489652aa7d94ed08accce">ezStringUtils::FindWholeWord</a>(szStartSearchAt, szSearchFor, IsDelimiterCB, InternalGetDataEnd());</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a696c890e2e534cfc0af94091f0f0a5f6">  116</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../dd/d69/structez_string_base.htm#a696c890e2e534cfc0af94091f0f0a5f6">ezStringBase&lt;Derived&gt;::FindWholeWord_NoCase</a>(</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* szSearchFor, <a class="code" href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a> IsDelimiterCB, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    szStartSearchAt = InternalGetData();</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  EZ_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()),</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a4229ff45b413b9221fb12d377f353be5">ezStringUtils::FindWholeWord_NoCase</a>(szStartSearchAt, szSearchFor, IsDelimiterCB, InternalGetDataEnd());</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">  129</a></span>&#160;ezInt32 <a class="code" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">ezStringBase&lt;Derived&gt;::Compare</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString2)<span class="keyword"> const</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#acdb19aa3ae5704df01d8f7b3649ec8d7">ezStringUtils::Compare</a>(InternalGetData(), pString2, InternalGetDataEnd());</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a5fcc6b07403fe714f7823f06e51ed419">  135</a></span>&#160;ezInt32 <a class="code" href="../../dd/d69/structez_string_base.htm#a5fcc6b07403fe714f7823f06e51ed419">ezStringBase&lt;Derived&gt;::CompareN</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString2, ezUInt32 uiCharsToCompare)<span class="keyword"> const</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#aa71830c3928036550dbbcf63cb57b737">ezStringUtils::CompareN</a>(InternalGetData(), pString2, uiCharsToCompare, InternalGetDataEnd());</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a48e98ad28e9cc6c0a3d436b802149443">  141</a></span>&#160;ezInt32 <a class="code" href="../../dd/d69/structez_string_base.htm#a48e98ad28e9cc6c0a3d436b802149443">ezStringBase&lt;Derived&gt;::Compare_NoCase</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString2)<span class="keyword"> const</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a4411d4f7971834bd9ce1fe0cb39b2c39">ezStringUtils::Compare_NoCase</a>(InternalGetData(), pString2, InternalGetDataEnd());</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#af924cf1e0bc6a35338229a7e9ad505a8">  147</a></span>&#160;ezInt32 <a class="code" href="../../dd/d69/structez_string_base.htm#af924cf1e0bc6a35338229a7e9ad505a8">ezStringBase&lt;Derived&gt;::CompareN_NoCase</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString2, ezUInt32 uiCharsToCompare)<span class="keyword"> const</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a4e734c728f3ac39fc9f2629dafab2fc6">ezStringUtils::CompareN_NoCase</a>(InternalGetData(), pString2, uiCharsToCompare, InternalGetDataEnd());</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">  153</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">ezStringBase&lt;Derived&gt;::IsEqual</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString2)<span class="keyword"> const</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#aa1b8c125ced33a6a904f741597ecc673">ezStringUtils::IsEqual</a>(InternalGetData(), pString2, InternalGetDataEnd());</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a77bcaa8c3cc64c21d1311e45033ffae3">  159</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d69/structez_string_base.htm#a77bcaa8c3cc64c21d1311e45033ffae3">ezStringBase&lt;Derived&gt;::IsEqualN</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString2, ezUInt32 uiCharsToCompare)<span class="keyword"> const</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a57f8ad413aa294bd530ff0d4dde00654">ezStringUtils::IsEqualN</a>(InternalGetData(), pString2, uiCharsToCompare, InternalGetDataEnd());</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#aba99a929eb858f565e1fa332b6b03723">  165</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d69/structez_string_base.htm#aba99a929eb858f565e1fa332b6b03723">ezStringBase&lt;Derived&gt;::IsEqual_NoCase</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString2)<span class="keyword"> const</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a5a375be30fe22c27368c0b2801e6c0b0">ezStringUtils::IsEqual_NoCase</a>(InternalGetData(), pString2, InternalGetDataEnd());</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#ada89e0455b0a9bc13e76af36abb3cf8b">  171</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d69/structez_string_base.htm#ada89e0455b0a9bc13e76af36abb3cf8b">ezStringBase&lt;Derived&gt;::IsEqualN_NoCase</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString2, ezUInt32 uiCharsToCompare)<span class="keyword"> const</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a5f5d6b2aad39e0309d957899b11056e4">ezStringUtils::IsEqualN_NoCase</a>(InternalGetData(), pString2, uiCharsToCompare, InternalGetDataEnd());</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a05bec3cf5581b35aa18849239b2471c6">  177</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../dd/d69/structez_string_base.htm#a05bec3cf5581b35aa18849239b2471c6">ezStringBase&lt;Derived&gt;::ComputeCharacterPosition</a>(ezUInt32 uiCharacterIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* pos = InternalGetData();</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <a class="code" href="../../d9/d32/classez_unicode_utils.htm#ada79ec35f647076df77c48e049b5a376">ezUnicodeUtils::MoveToNextUtf8</a>(pos, uiCharacterIndex);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  <span class="keywordflow">return</span> pos;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">  185</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d4/ddc/structez_string_iterator.htm">ezStringBase&lt;Derived&gt;::iterator</a> <a class="code" href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">ezStringBase&lt;Derived&gt;::GetIteratorFront</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  <span class="keywordflow">return</span> begin(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">  191</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringBase&lt;Derived&gt;::reverse_iterator</a> <a class="code" href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">ezStringBase&lt;Derived&gt;::GetIteratorBack</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keywordflow">return</span> rbegin(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;{</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#aa1b8c125ced33a6a904f741597ecc673">ezStringUtils::IsEqual</a>(lhs.InternalGetData(), rhs.InternalGetData(), lhs.InternalGetDataEnd(), rhs.InternalGetDataEnd());</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;}</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;{</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keywordflow">return</span> rhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">IsEqual</a>(lhs);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;}</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">IsEqual</a>(rhs);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;{</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  <span class="keywordflow">return</span> !<a class="code" href="../../de/df8/classez_string_utils.htm#aa1b8c125ced33a6a904f741597ecc673">ezStringUtils::IsEqual</a>(lhs.InternalGetData(), rhs.InternalGetData(), lhs.InternalGetDataEnd(), rhs.InternalGetDataEnd());</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;}</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;{</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="keywordflow">return</span> !rhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">IsEqual</a>(lhs);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;{</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  <span class="keywordflow">return</span> !lhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">IsEqual</a>(rhs);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;}</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#acdb19aa3ae5704df01d8f7b3649ec8d7">ezStringUtils::Compare</a>(lhs.InternalGetData(), rhs.InternalGetData(), lhs.InternalGetDataEnd(), rhs.InternalGetDataEnd()) &lt; 0;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;{</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  <span class="keywordflow">return</span> rhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">Compare</a>(lhs) &gt; 0;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;{</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">Compare</a>(rhs) &lt; 0;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#acdb19aa3ae5704df01d8f7b3649ec8d7">ezStringUtils::Compare</a>(lhs.InternalGetData(), rhs.InternalGetData(), lhs.InternalGetDataEnd(), rhs.InternalGetDataEnd()) &gt; 0;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;{</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  <span class="keywordflow">return</span> rhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">Compare</a>(lhs) &lt; 0;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">Compare</a>(rhs) &gt; 0;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;=(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#acdb19aa3ae5704df01d8f7b3649ec8d7">ezStringUtils::Compare</a>(lhs.InternalGetData(), rhs.InternalGetData(), lhs.InternalGetDataEnd(), rhs.InternalGetDataEnd()) &lt;= 0;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;=(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  <span class="keywordflow">return</span> rhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">Compare</a>(lhs) &gt;= 0;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;=(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;{</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">Compare</a>(rhs) &lt;= 0;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;}</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;=(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;{</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#acdb19aa3ae5704df01d8f7b3649ec8d7">ezStringUtils::Compare</a>(lhs.InternalGetData(), rhs.InternalGetData(), lhs.InternalGetDataEnd(), rhs.InternalGetDataEnd()) &gt;= 0;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;}</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;=(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;{</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="keywordflow">return</span> rhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">Compare</a>(lhs) &lt;= 0;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;=(<span class="keyword">const</span> <a class="code" href="../../dd/d69/structez_string_base.htm">ezStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;{</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">Compare</a>(rhs) &gt;= 0;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;}</div>
<div class="ttc" id="aclassez_string_utils_htm_a04c0d10e611473fe22f500cbfafa0488"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a04c0d10e611473fe22f500cbfafa0488">ezStringUtils::FindLastSubString</a></div><div class="ttdeci">static const char * FindLastSubString(const char *szSource, const char *szStringToFind, const char *szStartSearchAt=nullptr, const char *pSourceEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the last occurrence of szStringToFind in szSource before szStartSearchAt.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:643</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a22bea564b8ddd615f8b24886ae566397"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a22bea564b8ddd615f8b24886ae566397">ezStringUtils::EndsWith_NoCase</a></div><div class="ttdeci">static bool EndsWith_NoCase(const char *szString, const char *szEndsWith, const char *pStringEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szEndsWithEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString ends with the string given in szEndsWith. Ignores case.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:571</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a30a256e58c74618a988775c15bdd3d8e"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a30a256e58c74618a988775c15bdd3d8e">ezStringUtils::EZ_CHARACTER_FILTER</a></div><div class="ttdeci">bool(*)(ezUInt32 uiChar) EZ_CHARACTER_FILTER</div><div class="ttdoc">Function Definition for a function that determines whether a (Utf32) character belongs to a certain c...</div><div class="ttdef"><b>Definition:</b> StringUtils.h:220</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a347b438581d998a7ae158c57ceca1adf"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a347b438581d998a7ae158c57ceca1adf">ezStringUtils::EndsWith</a></div><div class="ttdeci">static bool EndsWith(const char *szString, const char *szEndsWith, const char *pStringEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szEndsWithEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString ends with the string given in szEndsWith.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:555</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a4229ff45b413b9221fb12d377f353be5"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a4229ff45b413b9221fb12d377f353be5">ezStringUtils::FindWholeWord_NoCase</a></div><div class="ttdeci">static const char * FindWholeWord_NoCase(const char *szString, const char *szSearchFor, EZ_CHARACTER_FILTER IsDelimiterCB, const char *pStringEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches szString for the word szSearchFor. If IsDelimiterCB returns true for both characters in fron...</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:717</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a4411d4f7971834bd9ce1fe0cb39b2c39"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a4411d4f7971834bd9ce1fe0cb39b2c39">ezStringUtils::Compare_NoCase</a></div><div class="ttdeci">static ezInt32 Compare_NoCase(const char *pString1, const char *pString2, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Compares two strings for equality, case-insensitive.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:331</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a48041d5126a0c6c397062a47fa83b068"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a48041d5126a0c6c397062a47fa83b068">ezStringUtils::FindSubString_NoCase</a></div><div class="ttdeci">static const char * FindSubString_NoCase(const char *szSource, const char *szStringToFind, const char *pSourceEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the first occurrence of szStringToFind in szSource. Ignores case.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:623</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a4e734c728f3ac39fc9f2629dafab2fc6"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a4e734c728f3ac39fc9f2629dafab2fc6">ezStringUtils::CompareN_NoCase</a></div><div class="ttdeci">static ezInt32 CompareN_NoCase(const char *pString1, const char *pString2, ezUInt32 uiCharsToCompare, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Compares the first uiCharsToCompare characters of the two strings for equality, case-insensitive.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:365</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a57f8ad413aa294bd530ff0d4dde00654"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a57f8ad413aa294bd530ff0d4dde00654">ezStringUtils::IsEqualN</a></div><div class="ttdeci">static bool IsEqualN(const char *pString1, const char *pString2, ezUInt32 uiCharsToCompare, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (bitwise) up to the n-th character.</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:114</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a5a375be30fe22c27368c0b2801e6c0b0"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a5a375be30fe22c27368c0b2801e6c0b0">ezStringUtils::IsEqual_NoCase</a></div><div class="ttdeci">static bool IsEqual_NoCase(const char *pString1, const char *pString2, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (case-insensitive).</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:120</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a5f5d6b2aad39e0309d957899b11056e4"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a5f5d6b2aad39e0309d957899b11056e4">ezStringUtils::IsEqualN_NoCase</a></div><div class="ttdeci">static bool IsEqualN_NoCase(const char *pString1, const char *pString2, ezUInt32 uiCharsToCompare, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (case-insensitive) up to the n-th character.</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:125</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a63980b08e0aa463640f7e93786cf46da"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a63980b08e0aa463640f7e93786cf46da">ezStringUtils::IsNullOrEmpty</a></div><div class="ttdeci">static bool IsNullOrEmpty(const T *pString)</div><div class="ttdoc">Returns true, if the given string is a nullptr pointer or a string that immediately terminates with a...</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a643bba9f880ec942d42b34e07e3d8623"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a643bba9f880ec942d42b34e07e3d8623">ezStringUtils::FindLastSubString_NoCase</a></div><div class="ttdeci">static const char * FindLastSubString_NoCase(const char *szSource, const char *szStringToFind, const char *szStartSearchAt=nullptr, const char *pSourceEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the last occurrence of szStringToFind in szSource before szStartSearchAt....</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:665</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a6b40e1a14058c184d69c1b25d9543a13"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a6b40e1a14058c184d69c1b25d9543a13">ezStringUtils::FindSubString</a></div><div class="ttdeci">static const char * FindSubString(const char *szSource, const char *szStringToFind, const char *pSourceEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the first occurrence of szStringToFind in szSource.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:604</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a7b418cc21bcbebde0942157e9026d2a4"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a7b418cc21bcbebde0942157e9026d2a4">ezStringUtils::StartsWith</a></div><div class="ttdeci">static bool StartsWith(const char *szString, const char *szStartsWith, const char *pStringEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStartsWithEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString starts with the string given in szStartsWith.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:507</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a9a76bb518ebebf3971f367a478a387c3"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a9a76bb518ebebf3971f367a478a387c3">ezStringUtils::StartsWith_NoCase</a></div><div class="ttdeci">static bool StartsWith_NoCase(const char *szString, const char *szStartsWith, const char *pStringEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStartsWithEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString starts with the string given in szStartsWith. Ignores case.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:531</div></div>
<div class="ttc" id="aclassez_string_utils_htm_aa1b8c125ced33a6a904f741597ecc673"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#aa1b8c125ced33a6a904f741597ecc673">ezStringUtils::IsEqual</a></div><div class="ttdeci">static bool IsEqual(const char *pString1, const char *pString2, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (bitwise).</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:109</div></div>
<div class="ttc" id="aclassez_string_utils_htm_aa71830c3928036550dbbcf63cb57b737"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#aa71830c3928036550dbbcf63cb57b737">ezStringUtils::CompareN</a></div><div class="ttdeci">static ezInt32 CompareN(const char *pString1, const char *pString2, ezUInt32 uiCharsToCompare, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Compares the first uiCharsToCompare characters of the two strings for equality.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:292</div></div>
<div class="ttc" id="aclassez_string_utils_htm_acdb19aa3ae5704df01d8f7b3649ec8d7"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#acdb19aa3ae5704df01d8f7b3649ec8d7">ezStringUtils::Compare</a></div><div class="ttdeci">static ezInt32 Compare(const char *pString1, const char *pString2, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Compares two strings for equality.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:263</div></div>
<div class="ttc" id="aclassez_string_utils_htm_ad0719f9e3c4489652aa7d94ed08accce"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#ad0719f9e3c4489652aa7d94ed08accce">ezStringUtils::FindWholeWord</a></div><div class="ttdeci">static const char * FindWholeWord(const char *szString, const char *szSearchFor, EZ_CHARACTER_FILTER IsDelimiterCB, const char *pStringEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches szString for the word szSearchFor. If IsDelimiterCB returns true for both characters in fron...</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:687</div></div>
<div class="ttc" id="aclassez_unicode_utils_htm_ada79ec35f647076df77c48e049b5a376"><div class="ttname"><a href="../../d9/d32/classez_unicode_utils.htm#ada79ec35f647076df77c48e049b5a376">ezUnicodeUtils::MoveToNextUtf8</a></div><div class="ttdeci">static void MoveToNextUtf8(const char *&amp;szUtf8, ezUInt32 uiNumCharacters=1)</div><div class="ttdoc">Moves the given string pointer ahead to the next Utf8 character sequence.</div><div class="ttdef"><b>Definition:</b> UnicodeUtils_inl.h:197</div></div>
<div class="ttc" id="astructez_string_base_htm"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm">ezStringBase</a></div><div class="ttdoc">Base class for strings, which implements all read-only string functions.</div><div class="ttdef"><b>Definition:</b> StringBase.h:19</div></div>
<div class="ttc" id="astructez_string_base_htm_a05bec3cf5581b35aa18849239b2471c6"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a05bec3cf5581b35aa18849239b2471c6">ezStringBase::ComputeCharacterPosition</a></div><div class="ttdeci">const char * ComputeCharacterPosition(ezUInt32 uiCharacterIndex) const</div><div class="ttdoc">Computes the pointer to the n-th character in the string. This is a linear search from the start.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:177</div></div>
<div class="ttc" id="astructez_string_base_htm_a0c0563a267bee66f3a1f76cf08af153f"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a0c0563a267bee66f3a1f76cf08af153f">ezStringBase::FindLastSubString_NoCase</a></div><div class="ttdeci">const char * FindLastSubString_NoCase(const char *szStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:91</div></div>
<div class="ttc" id="astructez_string_base_htm_a139af1709f27a801b784a3f4bd2c12ed"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a139af1709f27a801b784a3f4bd2c12ed">ezStringBase::FindSubString_NoCase</a></div><div class="ttdeci">const char * FindSubString_NoCase(const char *szStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:67</div></div>
<div class="ttc" id="astructez_string_base_htm_a1d4ac2126f45dcb7c567dee949cc68ab"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a1d4ac2126f45dcb7c567dee949cc68ab">ezStringBase::EndsWith_NoCase</a></div><div class="ttdeci">bool EndsWith_NoCase(const char *szEndsWith) const</div><div class="ttdoc">Returns true, if this string ends with the given string. Case insensitive.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:49</div></div>
<div class="ttc" id="astructez_string_base_htm_a3821af6b610f6c40a46336f7accc0c7e"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a3821af6b610f6c40a46336f7accc0c7e">ezStringBase::GetIteratorBack</a></div><div class="ttdeci">reverse_iterator GetIteratorBack() const</div><div class="ttdoc">Returns an iterator to this string, which points to the very last character (NOT the end).</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:191</div></div>
<div class="ttc" id="astructez_string_base_htm_a3b169646f62ef8a8d33b63e2b8731afb"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a3b169646f62ef8a8d33b63e2b8731afb">ezStringBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns whether the string is an empty string.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:25</div></div>
<div class="ttc" id="astructez_string_base_htm_a40370a42191c470e969d0693385db3f3"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a40370a42191c470e969d0693385db3f3">ezStringBase::StartsWith</a></div><div class="ttdeci">bool StartsWith(const char *szStartsWith) const</div><div class="ttdoc">Returns true, if this string starts with the given string.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:31</div></div>
<div class="ttc" id="astructez_string_base_htm_a44351ea491df5b7db1095dde6e6299c5"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a44351ea491df5b7db1095dde6e6299c5">ezStringBase::FindLastSubString</a></div><div class="ttdeci">const char * FindLastSubString(const char *szStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:79</div></div>
<div class="ttc" id="astructez_string_base_htm_a48e98ad28e9cc6c0a3d436b802149443"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a48e98ad28e9cc6c0a3d436b802149443">ezStringBase::Compare_NoCase</a></div><div class="ttdeci">ezInt32 Compare_NoCase(const char *pString2) const</div><div class="ttdoc">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller',...</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:141</div></div>
<div class="ttc" id="astructez_string_base_htm_a5fcc6b07403fe714f7823f06e51ed419"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a5fcc6b07403fe714f7823f06e51ed419">ezStringBase::CompareN</a></div><div class="ttdeci">ezInt32 CompareN(const char *pString2, ezUInt32 uiCharsToCompare) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:135</div></div>
<div class="ttc" id="astructez_string_base_htm_a630aa4b168172aef7b32f8085148ed8e"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a630aa4b168172aef7b32f8085148ed8e">ezStringBase::GetIteratorFront</a></div><div class="ttdeci">iterator GetIteratorFront() const</div><div class="ttdoc">Returns an iterator to this string, which points to the very first character.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:185</div></div>
<div class="ttc" id="astructez_string_base_htm_a6517806293ce84badc8da6c5d01c67cf"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a6517806293ce84badc8da6c5d01c67cf">ezStringBase::IsEqual</a></div><div class="ttdeci">bool IsEqual(const char *pString2) const</div><div class="ttdoc">Compares this string with the other string for equality.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:153</div></div>
<div class="ttc" id="astructez_string_base_htm_a696c890e2e534cfc0af94091f0f0a5f6"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a696c890e2e534cfc0af94091f0f0a5f6">ezStringBase::FindWholeWord_NoCase</a></div><div class="ttdeci">const char * FindWholeWord_NoCase(const char *szSearchFor, ezStringUtils::EZ_CHARACTER_FILTER IsDelimiterCB, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:116</div></div>
<div class="ttc" id="astructez_string_base_htm_a77bcaa8c3cc64c21d1311e45033ffae3"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a77bcaa8c3cc64c21d1311e45033ffae3">ezStringBase::IsEqualN</a></div><div class="ttdeci">bool IsEqualN(const char *pString2, ezUInt32 uiCharsToCompare) const</div><div class="ttdoc">Compares up to a given number of characters of this string with the other string for equality....</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:159</div></div>
<div class="ttc" id="astructez_string_base_htm_a7990e9f9c36231cd41af33a25f96dbc6"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a7990e9f9c36231cd41af33a25f96dbc6">ezStringBase::FindWholeWord</a></div><div class="ttdeci">const char * FindWholeWord(const char *szSearchFor, ezStringUtils::EZ_CHARACTER_FILTER IsDelimiterCB, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:103</div></div>
<div class="ttc" id="astructez_string_base_htm_a8db4d1eaa1ad5ad01395f3d08eb1a0c2"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#a8db4d1eaa1ad5ad01395f3d08eb1a0c2">ezStringBase::Compare</a></div><div class="ttdeci">ezInt32 Compare(const char *pString2) const</div><div class="ttdoc">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller',...</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:129</div></div>
<div class="ttc" id="astructez_string_base_htm_aba99a929eb858f565e1fa332b6b03723"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#aba99a929eb858f565e1fa332b6b03723">ezStringBase::IsEqual_NoCase</a></div><div class="ttdeci">bool IsEqual_NoCase(const char *pString2) const</div><div class="ttdoc">Compares this string with the other string for equality.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:165</div></div>
<div class="ttc" id="astructez_string_base_htm_acb6973bde9b2b2b6773b69035c97e8ba"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#acb6973bde9b2b2b6773b69035c97e8ba">ezStringBase::StartsWith_NoCase</a></div><div class="ttdeci">bool StartsWith_NoCase(const char *szStartsWith) const</div><div class="ttdoc">Returns true, if this string starts with the given string. Case insensitive.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:37</div></div>
<div class="ttc" id="astructez_string_base_htm_ada89e0455b0a9bc13e76af36abb3cf8b"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#ada89e0455b0a9bc13e76af36abb3cf8b">ezStringBase::IsEqualN_NoCase</a></div><div class="ttdeci">bool IsEqualN_NoCase(const char *pString2, ezUInt32 uiCharsToCompare) const</div><div class="ttdoc">Compares up to a given number of characters of this string with the other string for equality....</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:171</div></div>
<div class="ttc" id="astructez_string_base_htm_af672ce6437cd3c9d17b3267cfa834b48"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#af672ce6437cd3c9d17b3267cfa834b48">ezStringBase::FindSubString</a></div><div class="ttdeci">const char * FindSubString(const char *szStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:55</div></div>
<div class="ttc" id="astructez_string_base_htm_af924cf1e0bc6a35338229a7e9ad505a8"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#af924cf1e0bc6a35338229a7e9ad505a8">ezStringBase::CompareN_NoCase</a></div><div class="ttdeci">ezInt32 CompareN_NoCase(const char *pString2, ezUInt32 uiCharsToCompare) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:147</div></div>
<div class="ttc" id="astructez_string_base_htm_afb83fb2fc2655dfdfea37ef6ae13ef30"><div class="ttname"><a href="../../dd/d69/structez_string_base.htm#afb83fb2fc2655dfdfea37ef6ae13ef30">ezStringBase::EndsWith</a></div><div class="ttdeci">bool EndsWith(const char *szEndsWith) const</div><div class="ttdoc">Returns true, if this string ends with the given string.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:43</div></div>
<div class="ttc" id="astructez_string_iterator_htm"><div class="ttname"><a href="../../d4/ddc/structez_string_iterator.htm">ezStringIterator</a></div><div class="ttdoc">STL forward iterator used by all string classes. Iterates over unicode characters....</div><div class="ttdef"><b>Definition:</b> StringIterator.h:12</div></div>
<div class="ttc" id="astructez_string_reverse_iterator_htm"><div class="ttname"><a href="../../d6/d6b/structez_string_reverse_iterator.htm">ezStringReverseIterator</a></div><div class="ttdoc">STL reverse iterator used by all string classes. Iterates over unicode characters....</div><div class="ttdef"><b>Definition:</b> StringIterator.h:187</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_93f3a51c0220f51fc2c286c08d531e1e.htm">Strings</a></li><li class="navelem"><a class="el" href="../../dir_fec2b21556ce2cf7e27237dfb4edc8a6.htm">Implementation</a></li><li class="navelem"><b>StringBase_inl.h</b></li>
    <li class="footer">Generated on Tue Jun 8 2021 14:33:54 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
