<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Containers/Set.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.10</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('dc/d09/_set_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Set.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;Foundation/Containers/Deque.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00012"></a><span class="lineno"><a class="line" href="../../dc/d4b/classez_set_base.htm">   12</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase</a></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;{</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  <span class="keyword">struct </span>Node;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  <span class="keyword">struct </span>NilNode</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  {</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    NilNode();</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    ezUInt16 m_uiLevel;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    Node* m_pParent;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    Node* m_pLink[2];</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  };</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  <span class="keyword">struct </span>Node : <span class="keyword">public</span> NilNode</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  {</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    KeyType m_Key;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  };</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="../../de/d30/structez_set_base_1_1_iterator.htm">   35</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">Iterator</a></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  {</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keyword">using</span> iterator_category = std::forward_iterator_tag;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">using</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">value_type</a> = <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#a9381413926d58c061cb49631429bd3d0">Iterator</a>;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">using</span> difference_type = ptrdiff_t;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">using</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">pointer</a> = <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">Iterator</a>*;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">using</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">reference</a> = <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">Iterator</a>&amp;;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    EZ_DECLARE_POD_TYPE();</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="../../de/d30/structez_set_base_1_1_iterator.htm#a9381413926d58c061cb49631429bd3d0">   46</a></span>&#160;    EZ_ALWAYS_INLINE <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#a9381413926d58c061cb49631429bd3d0">Iterator</a>()</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      : m_pElement(nullptr)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="../../de/d30/structez_set_base_1_1_iterator.htm#a2dc5d013fad7ea17c1e00eeb96f852a2">   52</a></span>&#160;    EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#a2dc5d013fad7ea17c1e00eeb96f852a2">IsValid</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement != <span class="keyword">nullptr</span>); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="../../de/d30/structez_set_base_1_1_iterator.htm#a5a21fe44c638269a5dd50bc978fe667d">   55</a></span>&#160;    EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#a5a21fe44c638269a5dd50bc978fe667d">operator==</a>(<span class="keyword">const</span> <span class="keyword">typename</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">ezSetBase&lt;KeyType, Comparer&gt;::Iterator</a>&amp; it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement == it2.m_pElement); }</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="../../de/d30/structez_set_base_1_1_iterator.htm#a4810b1adf7e4a988ab6930a925b779f0">   58</a></span>&#160;    EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#a4810b1adf7e4a988ab6930a925b779f0">operator!=</a>(<span class="keyword">const</span> <span class="keyword">typename</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">ezSetBase&lt;KeyType, Comparer&gt;::Iterator</a>&amp; it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement != it2.m_pElement); }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="../../de/d30/structez_set_base_1_1_iterator.htm#a6da669b314f6771911a884cba9435699">   61</a></span>&#160;    EZ_FORCE_INLINE <span class="keyword">const</span> KeyType&amp; <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#a6da669b314f6771911a884cba9435699">Key</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      EZ_ASSERT_DEBUG(<a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#a2dc5d013fad7ea17c1e00eeb96f852a2">IsValid</a>(), <span class="stringliteral">&quot;Cannot access the &#39;key&#39; of an invalid iterator.&quot;</span>);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      <span class="keywordflow">return</span> m_pElement-&gt;m_Key;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="../../de/d30/structez_set_base_1_1_iterator.htm#a0a62628c02a94ab88e2b480e55cd039c">   68</a></span>&#160;    EZ_ALWAYS_INLINE <span class="keyword">const</span> KeyType&amp; <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#a0a62628c02a94ab88e2b480e55cd039c">operator*</a>() { <span class="keywordflow">return</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#a6da669b314f6771911a884cba9435699">Key</a>(); }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#a7b8a8a9642c51efbd772ce07ca37f1b4">Next</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#acd8cdb2c128ed7d1562fe9fac3eeb8e7">Prev</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="../../de/d30/structez_set_base_1_1_iterator.htm#a7a570abd5ad88e5d5740fa86995b0bc3">   77</a></span>&#160;    EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#a7a570abd5ad88e5d5740fa86995b0bc3">operator++</a>() { <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#a7b8a8a9642c51efbd772ce07ca37f1b4">Next</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="../../de/d30/structez_set_base_1_1_iterator.htm#a6298b9f5bc8a67d235dd6d4bd3c4845a">   80</a></span>&#160;    EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#a6298b9f5bc8a67d235dd6d4bd3c4845a">operator--</a>() { <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#acd8cdb2c128ed7d1562fe9fac3eeb8e7">Prev</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase</a>&lt;KeyType, Comparer&gt;;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    EZ_ALWAYS_INLINE <span class="keyword">explicit</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm#a9381413926d58c061cb49631429bd3d0">Iterator</a>(Node* pInit)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      : m_pElement(pInit)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    Node* m_pElement;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  };</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  <a class="code" href="../../dc/d4b/classez_set_base.htm#a213ce7620045405f3fdb703d415753a5">ezSetBase</a>(<span class="keyword">const</span> Comparer&amp; comparer, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <a class="code" href="../../dc/d4b/classez_set_base.htm#a213ce7620045405f3fdb703d415753a5">ezSetBase</a>(<span class="keyword">const</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; cc, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <a class="code" href="../../dc/d4b/classez_set_base.htm#a79935f77e8e9e1f058537d4e1f396b3c">~ezSetBase</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../dc/d4b/classez_set_base.htm#a31c031cf509d78327fec1c4f23b775f6">operator=</a>(<span class="keyword">const</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../dc/d4b/classez_set_base.htm#a28aa829398bac4738375d27ec5b26d67">IsEmpty</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  ezUInt32 <a class="code" href="../../dc/d4b/classez_set_base.htm#af8d413bb3bbec419cfbaaab5b48bca62">GetCount</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../dc/d4b/classez_set_base.htm#aaf9b11b02b7dc68cd4a4d95f2e678ce5">Clear</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  Iterator <a class="code" href="../../dc/d4b/classez_set_base.htm#a9a0df40f4bd4f84e5c6ca4e908daad44">GetIterator</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  Iterator <a class="code" href="../../dc/d4b/classez_set_base.htm#a7b13983d1806d4ef48f927f4e735482b">GetLastIterator</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  Iterator <a class="code" href="../../dc/d4b/classez_set_base.htm#a48fcf3d5be80596908f4daebfe984bf4">Insert</a>(CompatibleKeyType&amp;&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../dc/d4b/classez_set_base.htm#a8873ec8c8c39b9ee1735ab9f4d026cd8">Remove</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  Iterator <a class="code" href="../../dc/d4b/classez_set_base.htm#a8873ec8c8c39b9ee1735ab9f4d026cd8">Remove</a>(<span class="keyword">const</span> Iterator&amp; pos); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  Iterator <a class="code" href="../../dc/d4b/classez_set_base.htm#a51740c019dcc0da6afa1bad6b970486a">Find</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../dc/d4b/classez_set_base.htm#a29e6ff286c2883e3f3a2c647d7a225db">Contains</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../dc/d4b/classez_set_base.htm#a7e3d6dec6e73f77bd804ccd051b12e4c">ContainsSet</a>(<span class="keyword">const</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; operand) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  Iterator <a class="code" href="../../dc/d4b/classez_set_base.htm#a5ae601269a798870895be7818e07d0cb">LowerBound</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  Iterator <a class="code" href="../../dc/d4b/classez_set_base.htm#a165e4059d89375b118570be343a704de">UpperBound</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../dc/d4b/classez_set_base.htm#aee636569824a7ccbae563839dd50ec57">Union</a>(<span class="keyword">const</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; operand); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../dc/d4b/classez_set_base.htm#a6cd727af03c407c8807c19b2b2ace759">Difference</a>(<span class="keyword">const</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; operand); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../dc/d4b/classez_set_base.htm#a463675853c88dd0a90d44bba4dd95b3e">Intersection</a>(<span class="keyword">const</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; operand); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="../../dc/d4b/classez_set_base.htm#ae888f004a865399917e6684fa7ec6be9">  164</a></span>&#160;  <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* <a class="code" href="../../dc/d4b/classez_set_base.htm#ae888f004a865399917e6684fa7ec6be9">GetAllocator</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Elements.<a class="code" href="../../d7/d68/classez_deque_base.htm#a995fef1ffcc8fb253c4fc23710f4d6c2">GetAllocator</a>(); }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../dc/d4b/classez_set_base.htm#a9c086e931d3c985838274f22f3fcd466">operator==</a>(<span class="keyword">const</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../dc/d4b/classez_set_base.htm#a4a25bbb212171837df6af427c3b03475">operator!=</a>(<span class="keyword">const</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="../../dc/d4b/classez_set_base.htm#a32d1b5c5da96fcdb49b20d719ed2af17">  173</a></span>&#160;  ezUInt64 <a class="code" href="../../dc/d4b/classez_set_base.htm#a32d1b5c5da96fcdb49b20d719ed2af17">GetHeapMemoryUsage</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Elements.<a class="code" href="../../d7/d68/classez_deque_base.htm#a4bb01ad03a63c829a87eef8685e4a318">GetHeapMemoryUsage</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../dc/d4b/classez_set_base.htm#a9fddb61a95208ee0431f553e512959bd">Swap</a>(<a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; other); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  Node* Internal_Find(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  Node* Internal_LowerBound(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  Node* Internal_UpperBound(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  <span class="keywordtype">void</span> Constructor();</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  Node* AcquireNode(CompatibleKeyType&amp;&amp; key, ezUInt16 uiLevel, Node* pParent);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <span class="keywordtype">void</span> ReleaseNode(Node* pNode);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  Node* SkewNode(Node* root);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  Node* SplitNode(Node* root);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  Node* <a class="code" href="../../dc/d4b/classez_set_base.htm#a48fcf3d5be80596908f4daebfe984bf4">Insert</a>(Node* root, CompatibleKeyType&amp;&amp; key, Node*&amp; pInsertedNode);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  Node* <a class="code" href="../../dc/d4b/classez_set_base.htm#a8873ec8c8c39b9ee1735ab9f4d026cd8">Remove</a>(Node* root, <span class="keyword">const</span> CompatibleKeyType&amp; key, <span class="keywordtype">bool</span>&amp; bRemoved);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  Node* GetLeftMost() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  Node* GetRightMost() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="keywordtype">void</span> SwapNilNode(Node*&amp; pCurNode, NilNode* pOld, NilNode* pNew);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  Node* m_pRoot;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  NilNode m_NilNode;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  ezUInt32 m_uiCount;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  <a class="code" href="../../d9/dfe/classez_deque.htm">ezDeque&lt;Node, ezNullAllocatorWrapper, false&gt;</a> m_Elements;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  Node* m_pFreeElementStack;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  Comparer m_Comparer;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;};</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer = ezCompareHelper&lt;KeyType&gt;, <span class="keyword">typename</span> AllocatorWrapper = ezDefaultAllocatorWrapper&gt;</div>
<div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="../../d0/d90/classez_set.htm">  237</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d0/d90/classez_set.htm">ezSet</a> : <span class="keyword">public</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase</a>&lt;KeyType, Comparer&gt;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;{</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <a class="code" href="../../d0/d90/classez_set.htm">ezSet</a>();</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  <span class="keyword">explicit</span> <a class="code" href="../../d0/d90/classez_set.htm">ezSet</a>(<a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  <a class="code" href="../../d0/d90/classez_set.htm">ezSet</a>(<span class="keyword">const</span> Comparer&amp; comparer, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  <a class="code" href="../../d0/d90/classez_set.htm">ezSet</a>(<span class="keyword">const</span> <a class="code" href="../../d0/d90/classez_set.htm">ezSet&lt;KeyType, Comparer, AllocatorWrapper&gt;</a>&amp; other);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  <a class="code" href="../../d0/d90/classez_set.htm">ezSet</a>(<span class="keyword">const</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; other);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../d0/d90/classez_set.htm">ezSet&lt;KeyType, Comparer, AllocatorWrapper&gt;</a>&amp; rhs);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; rhs);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;};</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">ezSetBase&lt;KeyType, Comparer&gt;::Iterator</a> begin(<a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../dc/d4b/classez_set_base.htm#a9a0df40f4bd4f84e5c6ca4e908daad44">GetIterator</a>();</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">ezSetBase&lt;KeyType, Comparer&gt;::Iterator</a> begin(<span class="keyword">const</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;{</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../dc/d4b/classez_set_base.htm#a9a0df40f4bd4f84e5c6ca4e908daad44">GetIterator</a>();</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;}</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">ezSetBase&lt;KeyType, Comparer&gt;::Iterator</a> cbegin(<span class="keyword">const</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;{</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../dc/d4b/classez_set_base.htm#a9a0df40f4bd4f84e5c6ca4e908daad44">GetIterator</a>();</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;}</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">ezSetBase&lt;KeyType, Comparer&gt;::Iterator</a> end(<a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;{</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">ezSetBase&lt;KeyType, Comparer&gt;::Iterator</a>();</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;}</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160; </div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">ezSetBase&lt;KeyType, Comparer&gt;::Iterator</a> end(<span class="keyword">const</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;{</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">ezSetBase&lt;KeyType, Comparer&gt;::Iterator</a>();</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;}</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">ezSetBase&lt;KeyType, Comparer&gt;::Iterator</a> cend(<span class="keyword">const</span> <a class="code" href="../../dc/d4b/classez_set_base.htm">ezSetBase&lt;KeyType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;{</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../de/d30/structez_set_base_1_1_iterator.htm">ezSetBase&lt;KeyType, Comparer&gt;::Iterator</a>();</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;}</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160; </div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="preprocessor">#include &lt;Foundation/Containers/Implementation/Set_inl.h&gt;</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructez_set_base_1_1_iterator_htm"><div class="ttname"><a href="../../de/d30/structez_set_base_1_1_iterator.htm">ezSetBase::Iterator</a></div><div class="ttdoc">Base class for all iterators.</div><div class="ttdef"><b>Definition:</b> Set.h:35</div></div>
<div class="ttc" id="astructez_set_base_1_1_iterator_htm_a4810b1adf7e4a988ab6930a925b779f0"><div class="ttname"><a href="../../de/d30/structez_set_base_1_1_iterator.htm#a4810b1adf7e4a988ab6930a925b779f0">ezSetBase::Iterator::operator!=</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator!=(const typename ezSetBase&lt; KeyType, Comparer &gt;::Iterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> Set.h:58</div></div>
<div class="ttc" id="aclassez_set_htm"><div class="ttname"><a href="../../d0/d90/classez_set.htm">ezSet</a></div><div class="ttdef"><b>Definition:</b> Set.h:237</div></div>
<div class="ttc" id="aclassez_set_base_htm_a9c086e931d3c985838274f22f3fcd466"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a9c086e931d3c985838274f22f3fcd466">ezSetBase::operator==</a></div><div class="ttdeci">bool operator==(const ezSetBase&lt; KeyType, Comparer &gt; &amp;rhs) const</div><div class="ttdoc">Comparison operator.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:720</div></div>
<div class="ttc" id="astructez_set_base_1_1_iterator_htm_a7b8a8a9642c51efbd772ce07ca37f1b4"><div class="ttname"><a href="../../de/d30/structez_set_base_1_1_iterator.htm#a7b8a8a9642c51efbd772ce07ca37f1b4">ezSetBase::Iterator::Next</a></div><div class="ttdeci">void Next()</div><div class="ttdoc">Advances the iterator to the next element in the set. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition:</b> Set_inl.h:10</div></div>
<div class="ttc" id="aclassez_set_base_htm_a6cd727af03c407c8807c19b2b2ace759"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a6cd727af03c407c8807c19b2b2ace759">ezSetBase::Difference</a></div><div class="ttdeci">void Difference(const ezSetBase&lt; KeyType, Comparer &gt; &amp;operand)</div><div class="ttdoc">Makes this set the difference of itself and the operand, i.e. subtracts operand.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:365</div></div>
<div class="ttc" id="aclassez_deque_htm"><div class="ttname"><a href="../../d9/dfe/classez_deque.htm">ezDeque&lt; Node, ezNullAllocatorWrapper, false &gt;</a></div></div>
<div class="ttc" id="aclassez_set_base_htm_a79935f77e8e9e1f058537d4e1f396b3c"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a79935f77e8e9e1f058537d4e1f396b3c">ezSetBase::~ezSetBase</a></div><div class="ttdeci">~ezSetBase()</div><div class="ttdoc">Destroys all elements in the set.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:154</div></div>
<div class="ttc" id="aclassez_set_base_htm_a51740c019dcc0da6afa1bad6b970486a"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a51740c019dcc0da6afa1bad6b970486a">ezSetBase::Find</a></div><div class="ttdeci">Iterator Find(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Searches for key, returns an Iterator to it or an invalid iterator, if no such key is found....</div></div>
<div class="ttc" id="aclassez_set_base_htm_aaf9b11b02b7dc68cd4a4d95f2e678ce5"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#aaf9b11b02b7dc68cd4a4d95f2e678ce5">ezSetBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Destroys all elements in the set and resets its size to zero.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:169</div></div>
<div class="ttc" id="aclassez_set_base_htm_a7e3d6dec6e73f77bd804ccd051b12e4c"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a7e3d6dec6e73f77bd804ccd051b12e4c">ezSetBase::ContainsSet</a></div><div class="ttdeci">bool ContainsSet(const ezSetBase&lt; KeyType, Comparer &gt; &amp;operand) const</div><div class="ttdoc">Checks whether all keys of the given set are in the container.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:278</div></div>
<div class="ttc" id="aclassez_set_base_htm_a32d1b5c5da96fcdb49b20d719ed2af17"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a32d1b5c5da96fcdb49b20d719ed2af17">ezSetBase::GetHeapMemoryUsage</a></div><div class="ttdeci">ezUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition:</b> Set.h:173</div></div>
<div class="ttc" id="astructez_set_base_1_1_iterator_htm_a6298b9f5bc8a67d235dd6d4bd3c4845a"><div class="ttname"><a href="../../de/d30/structez_set_base_1_1_iterator.htm#a6298b9f5bc8a67d235dd6d4bd3c4845a">ezSetBase::Iterator::operator--</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void operator--()</div><div class="ttdoc">Shorthand for 'Prev'.</div><div class="ttdef"><b>Definition:</b> Set.h:80</div></div>
<div class="ttc" id="astructez_set_base_1_1_iterator_htm_a5a21fe44c638269a5dd50bc978fe667d"><div class="ttname"><a href="../../de/d30/structez_set_base_1_1_iterator.htm#a5a21fe44c638269a5dd50bc978fe667d">ezSetBase::Iterator::operator==</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator==(const typename ezSetBase&lt; KeyType, Comparer &gt;::Iterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> Set.h:55</div></div>
<div class="ttc" id="aclassez_set_base_htm_a5ae601269a798870895be7818e07d0cb"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a5ae601269a798870895be7818e07d0cb">ezSetBase::LowerBound</a></div><div class="ttdeci">Iterator LowerBound(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Returns an Iterator to the element with a key equal or larger than the given key. Returns an invalid ...</div></div>
<div class="ttc" id="aclassez_allocator_base_htm"><div class="ttname"><a href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> AllocatorBase.h:22</div></div>
<div class="ttc" id="aclassez_set_base_htm_a4a25bbb212171837df6af427c3b03475"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a4a25bbb212171837df6af427c3b03475">ezSetBase::operator!=</a></div><div class="ttdeci">bool operator!=(const ezSetBase&lt; KeyType, Comparer &gt; &amp;rhs) const</div><div class="ttdoc">Comparison operator.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:741</div></div>
<div class="ttc" id="astructez_set_base_1_1_iterator_htm_a6da669b314f6771911a884cba9435699"><div class="ttname"><a href="../../de/d30/structez_set_base_1_1_iterator.htm#a6da669b314f6771911a884cba9435699">ezSetBase::Iterator::Key</a></div><div class="ttdeci">const EZ_FORCE_INLINE KeyType &amp; Key() const</div><div class="ttdoc">Returns the 'key' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> Set.h:61</div></div>
<div class="ttc" id="astructez_set_base_1_1_iterator_htm_a2dc5d013fad7ea17c1e00eeb96f852a2"><div class="ttname"><a href="../../de/d30/structez_set_base_1_1_iterator.htm#a2dc5d013fad7ea17c1e00eeb96f852a2">ezSetBase::Iterator::IsValid</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition:</b> Set.h:52</div></div>
<div class="ttc" id="aclassez_set_base_htm_a7b13983d1806d4ef48f927f4e735482b"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a7b13983d1806d4ef48f927f4e735482b">ezSetBase::GetLastIterator</a></div><div class="ttdeci">Iterator GetLastIterator() const</div><div class="ttdoc">Returns a constant Iterator to the very last element. For reverse traversal.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:207</div></div>
<div class="ttc" id="aclassez_set_base_htm_a165e4059d89375b118570be343a704de"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a165e4059d89375b118570be343a704de">ezSetBase::UpperBound</a></div><div class="ttdeci">Iterator UpperBound(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Returns an Iterator to the element with a key that is LARGER than the given key. Returns an invalid i...</div></div>
<div class="ttc" id="aclassez_deque_base_htm_a995fef1ffcc8fb253c4fc23710f4d6c2"><div class="ttname"><a href="../../d7/d68/classez_deque_base.htm#a995fef1ffcc8fb253c4fc23710f4d6c2">ezDequeBase::GetAllocator</a></div><div class="ttdeci">ezAllocatorBase * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition:</b> Deque.h:167</div></div>
<div class="ttc" id="aclassez_set_base_htm_a463675853c88dd0a90d44bba4dd95b3e"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a463675853c88dd0a90d44bba4dd95b3e">ezSetBase::Intersection</a></div><div class="ttdeci">void Intersection(const ezSetBase&lt; KeyType, Comparer &gt; &amp;operand)</div><div class="ttdoc">Makes this set the intersection of itself and the operand.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:374</div></div>
<div class="ttc" id="aclassez_set_base_htm_a9a0df40f4bd4f84e5c6ca4e908daad44"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a9a0df40f4bd4f84e5c6ca4e908daad44">ezSetBase::GetIterator</a></div><div class="ttdeci">Iterator GetIterator() const</div><div class="ttdoc">Returns a constant Iterator to the very first element.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:201</div></div>
<div class="ttc" id="aclassez_set_base_htm_a28aa829398bac4738375d27ec5b26d67"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a28aa829398bac4738375d27ec5b26d67">ezSetBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns whether there are no elements in the set. O(1) operation.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:188</div></div>
<div class="ttc" id="astructez_set_base_1_1_iterator_htm_a7a570abd5ad88e5d5740fa86995b0bc3"><div class="ttname"><a href="../../de/d30/structez_set_base_1_1_iterator.htm#a7a570abd5ad88e5d5740fa86995b0bc3">ezSetBase::Iterator::operator++</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void operator++()</div><div class="ttdoc">Shorthand for 'Next'.</div><div class="ttdef"><b>Definition:</b> Set.h:77</div></div>
<div class="ttc" id="aclassez_set_base_htm_a8873ec8c8c39b9ee1735ab9f4d026cd8"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a8873ec8c8c39b9ee1735ab9f4d026cd8">ezSetBase::Remove</a></div><div class="ttdeci">bool Remove(const CompatibleKeyType &amp;key)</div><div class="ttdoc">Erases the element with the given key, if it exists. O(log n) operation.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:400</div></div>
<div class="ttc" id="aclassez_set_base_htm_af8d413bb3bbec419cfbaaab5b48bca62"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#af8d413bb3bbec419cfbaaab5b48bca62">ezSetBase::GetCount</a></div><div class="ttdeci">ezUInt32 GetCount() const</div><div class="ttdoc">Returns the number of elements currently stored in the set. O(1) operation.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:194</div></div>
<div class="ttc" id="astructez_set_base_1_1_iterator_htm_a9381413926d58c061cb49631429bd3d0"><div class="ttname"><a href="../../de/d30/structez_set_base_1_1_iterator.htm#a9381413926d58c061cb49631429bd3d0">ezSetBase::Iterator::Iterator</a></div><div class="ttdeci">EZ_ALWAYS_INLINE Iterator()</div><div class="ttdoc">Constructs an invalid iterator.</div><div class="ttdef"><b>Definition:</b> Set.h:46</div></div>
<div class="ttc" id="aclassez_set_base_htm_a29e6ff286c2883e3f3a2c647d7a225db"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a29e6ff286c2883e3f3a2c647d7a225db">ezSetBase::Contains</a></div><div class="ttdeci">bool Contains(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Checks whether the given key is in the container.</div></div>
<div class="ttc" id="aclassez_set_base_htm_a48fcf3d5be80596908f4daebfe984bf4"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a48fcf3d5be80596908f4daebfe984bf4">ezSetBase::Insert</a></div><div class="ttdeci">Iterator Insert(CompatibleKeyType &amp;&amp;key)</div><div class="ttdoc">Inserts the key into the tree and returns an Iterator to it. O(log n) operation.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:387</div></div>
<div class="ttc" id="aclassez_set_base_htm"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm">ezSetBase</a></div><div class="ttdoc">A set container that only stores whether an element resides in it or not. Similar to STL::set.</div><div class="ttdef"><b>Definition:</b> Set.h:12</div></div>
<div class="ttc" id="aclassez_set_base_htm_aee636569824a7ccbae563839dd50ec57"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#aee636569824a7ccbae563839dd50ec57">ezSetBase::Union</a></div><div class="ttdeci">void Union(const ezSetBase&lt; KeyType, Comparer &gt; &amp;operand)</div><div class="ttdoc">Makes this set the union of itself and the operand.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:356</div></div>
<div class="ttc" id="aclassez_set_base_htm_a213ce7620045405f3fdb703d415753a5"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a213ce7620045405f3fdb703d415753a5">ezSetBase::ezSetBase</a></div><div class="ttdeci">ezSetBase(const Comparer &amp;comparer, ezAllocatorBase *pAllocator)</div><div class="ttdoc">Initializes the set to be empty.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:137</div></div>
<div class="ttc" id="aclassez_deque_base_htm_a4bb01ad03a63c829a87eef8685e4a318"><div class="ttname"><a href="../../d7/d68/classez_deque_base.htm#a4bb01ad03a63c829a87eef8685e4a318">ezDequeBase::GetHeapMemoryUsage</a></div><div class="ttdeci">ezUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:964</div></div>
<div class="ttc" id="aclassez_set_base_htm_ae888f004a865399917e6684fa7ec6be9"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#ae888f004a865399917e6684fa7ec6be9">ezSetBase::GetAllocator</a></div><div class="ttdeci">ezAllocatorBase * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition:</b> Set.h:164</div></div>
<div class="ttc" id="astructez_set_base_1_1_iterator_htm_acd8cdb2c128ed7d1562fe9fac3eeb8e7"><div class="ttname"><a href="../../de/d30/structez_set_base_1_1_iterator.htm#acd8cdb2c128ed7d1562fe9fac3eeb8e7">ezSetBase::Iterator::Prev</a></div><div class="ttdeci">void Prev()</div><div class="ttdoc">Advances the iterator to the previous element in the set. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition:</b> Set_inl.h:61</div></div>
<div class="ttc" id="aclassez_set_base_htm_a31c031cf509d78327fec1c4f23b775f6"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a31c031cf509d78327fec1c4f23b775f6">ezSetBase::operator=</a></div><div class="ttdeci">void operator=(const ezSetBase&lt; KeyType, Comparer &gt; &amp;rhs)</div><div class="ttdoc">Copies all keys from the given set into this one.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:160</div></div>
<div class="ttc" id="aclassez_set_base_htm_a9fddb61a95208ee0431f553e512959bd"><div class="ttname"><a href="../../dc/d4b/classez_set_base.htm#a9fddb61a95208ee0431f553e512959bd">ezSetBase::Swap</a></div><div class="ttdeci">void Swap(ezSetBase&lt; KeyType, Comparer &gt; &amp;other)</div><div class="ttdoc">Swaps this map with the other one.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:793</div></div>
<div class="ttc" id="astructez_set_base_1_1_iterator_htm_a0a62628c02a94ab88e2b480e55cd039c"><div class="ttname"><a href="../../de/d30/structez_set_base_1_1_iterator.htm#a0a62628c02a94ab88e2b480e55cd039c">ezSetBase::Iterator::operator*</a></div><div class="ttdeci">const EZ_ALWAYS_INLINE KeyType &amp; operator*()</div><div class="ttdoc">Returns the 'key' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> Set.h:68</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_6b567e6755824bd0b8ffd754b9d67ac0.htm">Containers</a></li><li class="navelem"><b>Set.h</b></li>
    <li class="footer">Generated on Sun Oct 9 2022 14:44:53 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
