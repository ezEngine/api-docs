<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezMemoryUtils Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.10</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('dc/d4d/classez_memory_utils.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="../../d2/de6/classez_memory_utils-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezMemoryUtils Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This class provides functions to work on raw memory.  
 <a href="../../dc/d4d/classez_memory_utils.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../da/d0b/_memory_utils_8h_source.htm">MemoryUtils.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a825a3e5751a8442607b6ebe4283b85d0"><td class="memItemLeft" align="right" valign="top"><a id="a825a3e5751a8442607b6ebe4283b85d0"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ConstructorFunction</b> = void(*)(void *pDestination)</td></tr>
<tr class="separator:a825a3e5751a8442607b6ebe4283b85d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ecc957e75f3451f1d8ecd2eb161113b"><td class="memItemLeft" align="right" valign="top"><a id="a5ecc957e75f3451f1d8ecd2eb161113b"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>CopyConstructorFunction</b> = void(*)(void *pDestination, const void *pSource)</td></tr>
<tr class="separator:a5ecc957e75f3451f1d8ecd2eb161113b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af58a24fc498b28ed6c43bb3632d67568"><td class="memItemLeft" align="right" valign="top"><a id="af58a24fc498b28ed6c43bb3632d67568"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>DestructorFunction</b> = void(*)(void *pDestination)</td></tr>
<tr class="separator:af58a24fc498b28ed6c43bb3632d67568"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a3e6a7bb82c3eff82140afecdec212ebe"><td class="memTemplParams" colspan="2"><a id="a3e6a7bb82c3eff82140afecdec212ebe"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3e6a7bb82c3eff82140afecdec212ebe"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Construct</b> (T *pDestination, size_t uiCount)</td></tr>
<tr class="separator:a3e6a7bb82c3eff82140afecdec212ebe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34cdc84b1eb53aa558e9fc56d3d62443"><td class="memTemplParams" colspan="2"><a id="a34cdc84b1eb53aa558e9fc56d3d62443"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a34cdc84b1eb53aa558e9fc56d3d62443"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezMemoryUtils::ConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeConstructorFunction</b> ()</td></tr>
<tr class="separator:a34cdc84b1eb53aa558e9fc56d3d62443"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a957d9677be61c67e125df8557d0fd0d3"><td class="memTemplParams" colspan="2"><a id="a957d9677be61c67e125df8557d0fd0d3"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a957d9677be61c67e125df8557d0fd0d3"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>DefaultConstruct</b> (T *pDestination, size_t uiCount)</td></tr>
<tr class="separator:a957d9677be61c67e125df8557d0fd0d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97835a1457b32d18417de1d2774de9f3"><td class="memTemplParams" colspan="2"><a id="a97835a1457b32d18417de1d2774de9f3"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a97835a1457b32d18417de1d2774de9f3"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezMemoryUtils::ConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeDefaultConstructorFunction</b> ()</td></tr>
<tr class="separator:a97835a1457b32d18417de1d2774de9f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a983ee34c000c31e152ff920303682a6f"><td class="memTemplParams" colspan="2"><a id="a983ee34c000c31e152ff920303682a6f"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:a983ee34c000c31e152ff920303682a6f"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyConstruct</b> (Destination *pDestination, const Source &amp;copy, size_t uiCount)</td></tr>
<tr class="separator:a983ee34c000c31e152ff920303682a6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d6a0dae0bbea88e866bb3a9b18e5f13"><td class="memTemplParams" colspan="2"><a id="a4d6a0dae0bbea88e866bb3a9b18e5f13"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4d6a0dae0bbea88e866bb3a9b18e5f13"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyConstructArray</b> (T *pDestination, const T *pSource, size_t uiCount)</td></tr>
<tr class="separator:a4d6a0dae0bbea88e866bb3a9b18e5f13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1249990701c62b6c3e01f2ce38e8dc87"><td class="memTemplParams" colspan="2"><a id="a1249990701c62b6c3e01f2ce38e8dc87"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1249990701c62b6c3e01f2ce38e8dc87"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezMemoryUtils::CopyConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeCopyConstructorFunction</b> ()</td></tr>
<tr class="separator:a1249990701c62b6c3e01f2ce38e8dc87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae4743330a565736926cfe872e2c199a"><td class="memTemplParams" colspan="2"><a id="aae4743330a565736926cfe872e2c199a"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aae4743330a565736926cfe872e2c199a"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MoveConstruct</b> (T *pDestination, T &amp;&amp;source)</td></tr>
<tr class="separator:aae4743330a565736926cfe872e2c199a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1801f554c8a944d7863ad102a95d916"><td class="memTemplParams" colspan="2"><a id="aa1801f554c8a944d7863ad102a95d916"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa1801f554c8a944d7863ad102a95d916"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MoveConstruct</b> (T *pDestination, T *pSource, size_t uiCount)</td></tr>
<tr class="separator:aa1801f554c8a944d7863ad102a95d916"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3fb91f4d503c5f439efc69887cd695a"><td class="memTemplParams" colspan="2"><a id="ac3fb91f4d503c5f439efc69887cd695a"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:ac3fb91f4d503c5f439efc69887cd695a"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyOrMoveConstruct</b> (Destination *pDestination, Source &amp;&amp;source)</td></tr>
<tr class="separator:ac3fb91f4d503c5f439efc69887cd695a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08356d5abc69a005e42367b86b7c7efc"><td class="memTemplParams" colspan="2"><a id="a08356d5abc69a005e42367b86b7c7efc"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a08356d5abc69a005e42367b86b7c7efc"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>RelocateConstruct</b> (T *pDestination, T *pSource, size_t uiCount)</td></tr>
<tr class="separator:a08356d5abc69a005e42367b86b7c7efc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36bdd2d12a6c062084376d893a8e8aa4"><td class="memTemplParams" colspan="2"><a id="a36bdd2d12a6c062084376d893a8e8aa4"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a36bdd2d12a6c062084376d893a8e8aa4"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Destruct</b> (T *pDestination, size_t uiCount)</td></tr>
<tr class="separator:a36bdd2d12a6c062084376d893a8e8aa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa1d773c662be0bb29e737ca3577b225"><td class="memTemplParams" colspan="2"><a id="afa1d773c662be0bb29e737ca3577b225"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:afa1d773c662be0bb29e737ca3577b225"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezMemoryUtils::DestructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeDestructorFunction</b> ()</td></tr>
<tr class="separator:afa1d773c662be0bb29e737ca3577b225"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5115dc4725ab2a600f2b57157470a34"><td class="memTemplParams" colspan="2"><a id="af5115dc4725ab2a600f2b57157470a34"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:af5115dc4725ab2a600f2b57157470a34"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Copy</b> (T *pDestination, const T *pSource, size_t uiCount)</td></tr>
<tr class="separator:af5115dc4725ab2a600f2b57157470a34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab64912d78d76e6f3348ce5df89a3750d"><td class="memTemplParams" colspan="2"><a id="ab64912d78d76e6f3348ce5df89a3750d"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab64912d78d76e6f3348ce5df89a3750d"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyOverlapped</b> (T *pDestination, const T *pSource, size_t uiCount)</td></tr>
<tr class="separator:ab64912d78d76e6f3348ce5df89a3750d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad06a48664781e65cc3ae27a6307fd77f"><td class="memTemplParams" colspan="2"><a id="ad06a48664781e65cc3ae27a6307fd77f"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad06a48664781e65cc3ae27a6307fd77f"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Relocate</b> (T *pDestination, T *pSource, size_t uiCount)</td></tr>
<tr class="separator:ad06a48664781e65cc3ae27a6307fd77f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa26942e131582d1f3e7f283ab02e04a0"><td class="memTemplParams" colspan="2"><a id="aa26942e131582d1f3e7f283ab02e04a0"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa26942e131582d1f3e7f283ab02e04a0"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>RelocateOverlapped</b> (T *pDestination, T *pSource, size_t uiCount)</td></tr>
<tr class="separator:aa26942e131582d1f3e7f283ab02e04a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa21deda3eddb119e647e166166c96703"><td class="memTemplParams" colspan="2"><a id="aa21deda3eddb119e647e166166c96703"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa21deda3eddb119e647e166166c96703"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, const T &amp;source, size_t uiCount)</td></tr>
<tr class="separator:aa21deda3eddb119e647e166166c96703"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28cf595988e5e1538f1ae7f0cd5db5a2"><td class="memTemplParams" colspan="2"><a id="a28cf595988e5e1538f1ae7f0cd5db5a2"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a28cf595988e5e1538f1ae7f0cd5db5a2"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, T &amp;&amp;source, size_t uiCount)</td></tr>
<tr class="separator:a28cf595988e5e1538f1ae7f0cd5db5a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e4122f629445ce9d349a9b72c749bd5"><td class="memTemplParams" colspan="2"><a id="a6e4122f629445ce9d349a9b72c749bd5"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6e4122f629445ce9d349a9b72c749bd5"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, const T *source, size_t uiSourceCount, size_t uiCount)</td></tr>
<tr class="separator:a6e4122f629445ce9d349a9b72c749bd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29897f123a3a22bf584236e0392fa18d"><td class="memTemplParams" colspan="2"><a id="a29897f123a3a22bf584236e0392fa18d"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a29897f123a3a22bf584236e0392fa18d"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsEqual</b> (const T *a, const T *b, size_t uiCount)</td></tr>
<tr class="separator:a29897f123a3a22bf584236e0392fa18d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa0272085074fb00b0a757369629abec"><td class="memTemplParams" colspan="2"><a id="aaa0272085074fb00b0a757369629abec"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aaa0272085074fb00b0a757369629abec"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ZeroFill</b> (T *pDestination, size_t uiCount)</td></tr>
<tr class="separator:aaa0272085074fb00b0a757369629abec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67dee8cec815fb42b721585fc574a8c0"><td class="memTemplParams" colspan="2"><a id="a67dee8cec815fb42b721585fc574a8c0"></a>
template&lt;typename T , size_t N&gt; </td></tr>
<tr class="memitem:a67dee8cec815fb42b721585fc574a8c0"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ZeroFill</b> (T(&amp;destination)[N])</td></tr>
<tr class="separator:a67dee8cec815fb42b721585fc574a8c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa17cfed5aef9397959780283fc253849"><td class="memTemplParams" colspan="2"><a id="aa17cfed5aef9397959780283fc253849"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa17cfed5aef9397959780283fc253849"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>PatternFill</b> (T *pDestination, ezUInt8 uiBytePattern, size_t uiCount)</td></tr>
<tr class="separator:aa17cfed5aef9397959780283fc253849"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad67bbc2442de4b21cf59aa0c06b9af1b"><td class="memTemplParams" colspan="2"><a id="ad67bbc2442de4b21cf59aa0c06b9af1b"></a>
template&lt;typename T , size_t N&gt; </td></tr>
<tr class="memitem:ad67bbc2442de4b21cf59aa0c06b9af1b"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>PatternFill</b> (T(&amp;destination)[N], ezUInt8 uiBytePattern)</td></tr>
<tr class="separator:ad67bbc2442de4b21cf59aa0c06b9af1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a424bdfd1b893ac7bafb56eb7b6aa4b26"><td class="memTemplParams" colspan="2"><a id="a424bdfd1b893ac7bafb56eb7b6aa4b26"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a424bdfd1b893ac7bafb56eb7b6aa4b26"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Compare</b> (const T *a, const T *b, size_t uiCount)</td></tr>
<tr class="separator:a424bdfd1b893ac7bafb56eb7b6aa4b26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a250e4ce552963870488339c28aed6bfa"><td class="memTemplParams" colspan="2"><a id="a250e4ce552963870488339c28aed6bfa"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a250e4ce552963870488339c28aed6bfa"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE T *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>AddByteOffset</b> (T *ptr, ptrdiff_t iOffset)</td></tr>
<tr class="separator:a250e4ce552963870488339c28aed6bfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c4dbaa1b507e91c28e275dc2836c7d6"><td class="memTemplParams" colspan="2"><a id="a9c4dbaa1b507e91c28e275dc2836c7d6"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9c4dbaa1b507e91c28e275dc2836c7d6"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE T *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>AlignBackwards</b> (T *ptr, size_t uiAlignment)</td></tr>
<tr class="separator:a9c4dbaa1b507e91c28e275dc2836c7d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade74a6cc4c8a6e884983ba54b80b0cdd"><td class="memTemplParams" colspan="2"><a id="ade74a6cc4c8a6e884983ba54b80b0cdd"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ade74a6cc4c8a6e884983ba54b80b0cdd"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE T *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>AlignForwards</b> (T *ptr, size_t uiAlignment)</td></tr>
<tr class="separator:ade74a6cc4c8a6e884983ba54b80b0cdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acba8322711628cbac5a4415bbf292330"><td class="memTemplParams" colspan="2"><a id="acba8322711628cbac5a4415bbf292330"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:acba8322711628cbac5a4415bbf292330"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>AlignSize</b> (T uiSize, T uiAlignment)</td></tr>
<tr class="separator:acba8322711628cbac5a4415bbf292330"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1c7b3f34964f3421032578d8baa5c4f"><td class="memTemplParams" colspan="2"><a id="ab1c7b3f34964f3421032578d8baa5c4f"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab1c7b3f34964f3421032578d8baa5c4f"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsAligned</b> (const T *ptr, size_t uiAlignment)</td></tr>
<tr class="separator:ab1c7b3f34964f3421032578d8baa5c4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab20c03a4df8f2ed69c8cb70c7f493c1"><td class="memTemplParams" colspan="2"><a id="aab20c03a4df8f2ed69c8cb70c7f493c1"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aab20c03a4df8f2ed69c8cb70c7f493c1"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsSizeAligned</b> (T uiSize, T uiAlignment)</td></tr>
<tr class="separator:aab20c03a4df8f2ed69c8cb70c7f493c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a255679b52c92ba3583e055eeeb7ada4d"><td class="memTemplParams" colspan="2"><a id="a255679b52c92ba3583e055eeeb7ada4d"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a255679b52c92ba3583e055eeeb7ada4d"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Construct</b> (T *pDestination, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:a255679b52c92ba3583e055eeeb7ada4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4cbddfb71e2aeac857424af885ff20d"><td class="memTemplParams" colspan="2"><a id="ae4cbddfb71e2aeac857424af885ff20d"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae4cbddfb71e2aeac857424af885ff20d"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Construct</b> (T *pDestination, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</td></tr>
<tr class="separator:ae4cbddfb71e2aeac857424af885ff20d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88ed7cb2290501d096c299218351dbda"><td class="memTemplParams" colspan="2"><a id="a88ed7cb2290501d096c299218351dbda"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a88ed7cb2290501d096c299218351dbda"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezMemoryUtils::ConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeConstructorFunction</b> (<a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:a88ed7cb2290501d096c299218351dbda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae0a894e4142dbfff5aabb96b46d86d3"><td class="memTemplParams" colspan="2"><a id="aae0a894e4142dbfff5aabb96b46d86d3"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aae0a894e4142dbfff5aabb96b46d86d3"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezMemoryUtils::ConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeConstructorFunction</b> (<a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</td></tr>
<tr class="separator:aae0a894e4142dbfff5aabb96b46d86d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada3c76717e2f89296c6d9212f4ae7344"><td class="memTemplParams" colspan="2"><a id="ada3c76717e2f89296c6d9212f4ae7344"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:ada3c76717e2f89296c6d9212f4ae7344"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyConstruct</b> (Destination *pDestination, const Source &amp;copy, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:ada3c76717e2f89296c6d9212f4ae7344"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7e43f3311aef9afc4cc17e6e8850f4a"><td class="memTemplParams" colspan="2"><a id="ae7e43f3311aef9afc4cc17e6e8850f4a"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:ae7e43f3311aef9afc4cc17e6e8850f4a"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyConstruct</b> (Destination *pDestination, const Source &amp;copy, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</td></tr>
<tr class="separator:ae7e43f3311aef9afc4cc17e6e8850f4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a029bd56ca0a6f7a039a85cb4cd2b632a"><td class="memTemplParams" colspan="2"><a id="a029bd56ca0a6f7a039a85cb4cd2b632a"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a029bd56ca0a6f7a039a85cb4cd2b632a"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyConstructArray</b> (T *pDestination, const T *pSource, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:a029bd56ca0a6f7a039a85cb4cd2b632a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0439b36293d13e2157b7d6fb9e75113d"><td class="memTemplParams" colspan="2"><a id="a0439b36293d13e2157b7d6fb9e75113d"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0439b36293d13e2157b7d6fb9e75113d"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyConstructArray</b> (T *pDestination, const T *pSource, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</td></tr>
<tr class="separator:a0439b36293d13e2157b7d6fb9e75113d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0187ba4b82860ce30ab627541e4f5cd5"><td class="memTemplParams" colspan="2"><a id="a0187ba4b82860ce30ab627541e4f5cd5"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:a0187ba4b82860ce30ab627541e4f5cd5"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyOrMoveConstruct</b> (Destination *pDestination, const Source &amp;source, NotRValueReference)</td></tr>
<tr class="separator:a0187ba4b82860ce30ab627541e4f5cd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6653007d12cda0efcad0414f420b91d2"><td class="memTemplParams" colspan="2"><a id="a6653007d12cda0efcad0414f420b91d2"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:a6653007d12cda0efcad0414f420b91d2"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyOrMoveConstruct</b> (Destination *pDestination, Source &amp;&amp;source, IsRValueReference)</td></tr>
<tr class="separator:a6653007d12cda0efcad0414f420b91d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50e9adb38739f74db837c70cfb2be355"><td class="memTemplParams" colspan="2"><a id="a50e9adb38739f74db837c70cfb2be355"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a50e9adb38739f74db837c70cfb2be355"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>RelocateConstruct</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:a50e9adb38739f74db837c70cfb2be355"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38e605e712683ac991e15ce847115026"><td class="memTemplParams" colspan="2"><a id="a38e605e712683ac991e15ce847115026"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a38e605e712683ac991e15ce847115026"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>RelocateConstruct</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsMemRelocatable</a>)</td></tr>
<tr class="separator:a38e605e712683ac991e15ce847115026"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17c2b1a2c80a46cd8b9e98c9b992df8b"><td class="memTemplParams" colspan="2"><a id="a17c2b1a2c80a46cd8b9e98c9b992df8b"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a17c2b1a2c80a46cd8b9e98c9b992df8b"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>RelocateConstruct</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</td></tr>
<tr class="separator:a17c2b1a2c80a46cd8b9e98c9b992df8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7b904dcd5216e694d2cfd73150d8dd8"><td class="memTemplParams" colspan="2"><a id="aa7b904dcd5216e694d2cfd73150d8dd8"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa7b904dcd5216e694d2cfd73150d8dd8"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Destruct</b> (T *pDestination, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:aa7b904dcd5216e694d2cfd73150d8dd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08cf959e24d57897780281feb7c33550"><td class="memTemplParams" colspan="2"><a id="a08cf959e24d57897780281feb7c33550"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a08cf959e24d57897780281feb7c33550"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Destruct</b> (T *pDestination, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</td></tr>
<tr class="separator:a08cf959e24d57897780281feb7c33550"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3584f598bfd8ad6dec7761935209e241"><td class="memTemplParams" colspan="2"><a id="a3584f598bfd8ad6dec7761935209e241"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3584f598bfd8ad6dec7761935209e241"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezMemoryUtils::DestructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeDestructorFunction</b> (<a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:a3584f598bfd8ad6dec7761935209e241"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6e99dbf68bf5808840f7974ecf3c8a2"><td class="memTemplParams" colspan="2"><a id="af6e99dbf68bf5808840f7974ecf3c8a2"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:af6e99dbf68bf5808840f7974ecf3c8a2"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE ezMemoryUtils::DestructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeDestructorFunction</b> (<a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</td></tr>
<tr class="separator:af6e99dbf68bf5808840f7974ecf3c8a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab94af8ec09125601ee59e2c5a0db3051"><td class="memTemplParams" colspan="2"><a id="ab94af8ec09125601ee59e2c5a0db3051"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab94af8ec09125601ee59e2c5a0db3051"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Copy</b> (T *pDestination, const T *pSource, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:ab94af8ec09125601ee59e2c5a0db3051"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fb0d39060faeae3f11b84b4518d1545"><td class="memTemplParams" colspan="2"><a id="a2fb0d39060faeae3f11b84b4518d1545"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a2fb0d39060faeae3f11b84b4518d1545"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Copy</b> (T *pDestination, const T *pSource, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</td></tr>
<tr class="separator:a2fb0d39060faeae3f11b84b4518d1545"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93ccf029a281c9701e1568e00a648591"><td class="memTemplParams" colspan="2"><a id="a93ccf029a281c9701e1568e00a648591"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a93ccf029a281c9701e1568e00a648591"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyOverlapped</b> (T *pDestination, const T *pSource, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:a93ccf029a281c9701e1568e00a648591"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38250a2cae921e87486839f5c3b6c0ed"><td class="memTemplParams" colspan="2"><a id="a38250a2cae921e87486839f5c3b6c0ed"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a38250a2cae921e87486839f5c3b6c0ed"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Relocate</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:a38250a2cae921e87486839f5c3b6c0ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3093aa2b16bff31dfbf4711989903bbf"><td class="memTemplParams" colspan="2"><a id="a3093aa2b16bff31dfbf4711989903bbf"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3093aa2b16bff31dfbf4711989903bbf"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Relocate</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsMemRelocatable</a>)</td></tr>
<tr class="separator:a3093aa2b16bff31dfbf4711989903bbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8970a43d30201775a958d6c77eda88e"><td class="memTemplParams" colspan="2"><a id="ab8970a43d30201775a958d6c77eda88e"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab8970a43d30201775a958d6c77eda88e"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Relocate</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</td></tr>
<tr class="separator:ab8970a43d30201775a958d6c77eda88e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16213c487937ff00a51cbb046831e6aa"><td class="memTemplParams" colspan="2"><a id="a16213c487937ff00a51cbb046831e6aa"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a16213c487937ff00a51cbb046831e6aa"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>RelocateOverlapped</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:a16213c487937ff00a51cbb046831e6aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a522196d11425de3ed1d97fb167766a21"><td class="memTemplParams" colspan="2"><a id="a522196d11425de3ed1d97fb167766a21"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a522196d11425de3ed1d97fb167766a21"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>RelocateOverlapped</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsMemRelocatable</a>)</td></tr>
<tr class="separator:a522196d11425de3ed1d97fb167766a21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1afd18599a980a195a5be08955eb5c5e"><td class="memTemplParams" colspan="2"><a id="a1afd18599a980a195a5be08955eb5c5e"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1afd18599a980a195a5be08955eb5c5e"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, const T &amp;source, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:a1afd18599a980a195a5be08955eb5c5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf3e9d086461de046a90f32a411b536f"><td class="memTemplParams" colspan="2"><a id="aaf3e9d086461de046a90f32a411b536f"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aaf3e9d086461de046a90f32a411b536f"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, const T &amp;source, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsMemRelocatable</a>)</td></tr>
<tr class="separator:aaf3e9d086461de046a90f32a411b536f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ab74e15aa835583c125b3e9a41b4e1c"><td class="memTemplParams" colspan="2"><a id="a6ab74e15aa835583c125b3e9a41b4e1c"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6ab74e15aa835583c125b3e9a41b4e1c"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, T &amp;&amp;source, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:a6ab74e15aa835583c125b3e9a41b4e1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a5d961d31b93eaac364c8e162b2c398"><td class="memTemplParams" colspan="2"><a id="a4a5d961d31b93eaac364c8e162b2c398"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4a5d961d31b93eaac364c8e162b2c398"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, T &amp;&amp;source, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsMemRelocatable</a>)</td></tr>
<tr class="separator:a4a5d961d31b93eaac364c8e162b2c398"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d7f006fa9b037bd988c315ff2779220"><td class="memTemplParams" colspan="2"><a id="a5d7f006fa9b037bd988c315ff2779220"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5d7f006fa9b037bd988c315ff2779220"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, const T *pSource, size_t uiSourceCount, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:a5d7f006fa9b037bd988c315ff2779220"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af104e00303c086d61155d3497758a5eb"><td class="memTemplParams" colspan="2"><a id="af104e00303c086d61155d3497758a5eb"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:af104e00303c086d61155d3497758a5eb"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, const T *pSource, size_t uiSourceCount, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsMemRelocatable</a>)</td></tr>
<tr class="separator:af104e00303c086d61155d3497758a5eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8801a0ab5632d6aa24cbcb8f0b528ee9"><td class="memTemplParams" colspan="2"><a id="a8801a0ab5632d6aa24cbcb8f0b528ee9"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8801a0ab5632d6aa24cbcb8f0b528ee9"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsEqual</b> (const T *a, const T *b, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsPod</a>)</td></tr>
<tr class="separator:a8801a0ab5632d6aa24cbcb8f0b528ee9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74fce2b5100ab25406a747eb1f67b523"><td class="memTemplParams" colspan="2"><a id="a74fce2b5100ab25406a747eb1f67b523"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a74fce2b5100ab25406a747eb1f67b523"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsEqual</b> (const T *a, const T *b, size_t uiCount, <a class="el" href="../../d6/d09/structez_trait_int.htm">ezTypeIsClass</a>)</td></tr>
<tr class="separator:a74fce2b5100ab25406a747eb1f67b523"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a2944b511c0f4181b4b6a96b472df703f"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a2944b511c0f4181b4b6a96b472df703f"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a2944b511c0f4181b4b6a96b472df703f">Construct</a> (T *pDestination, size_t uiCount)</td></tr>
<tr class="memdesc:a2944b511c0f4181b4b6a96b472df703f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs <em>uiCount</em> objects of type T in a raw buffer at <em>pDestination</em>.  <a href="../../dc/d4d/classez_memory_utils.htm#a2944b511c0f4181b4b6a96b472df703f">More...</a><br /></td></tr>
<tr class="separator:a2944b511c0f4181b4b6a96b472df703f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a784da93eacf66f6fd369f5c93426f407"><td class="memTemplParams" colspan="2"><a id="a784da93eacf66f6fd369f5c93426f407"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a784da93eacf66f6fd369f5c93426f407"><td class="memTemplItemLeft" align="right" valign="top">static ConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a784da93eacf66f6fd369f5c93426f407">MakeConstructorFunction</a> ()</td></tr>
<tr class="memdesc:a784da93eacf66f6fd369f5c93426f407"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a function pointer to construct an instance of T. Returns nullptr for trivial types. <br /></td></tr>
<tr class="separator:a784da93eacf66f6fd369f5c93426f407"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8fa5b7a4d059fb8c423be8ff75cfcf8"><td class="memTemplParams" colspan="2"><a id="ac8fa5b7a4d059fb8c423be8ff75cfcf8"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac8fa5b7a4d059fb8c423be8ff75cfcf8"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#ac8fa5b7a4d059fb8c423be8ff75cfcf8">DefaultConstruct</a> (T *pDestination, size_t uiCount)</td></tr>
<tr class="memdesc:ac8fa5b7a4d059fb8c423be8ff75cfcf8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructs <em>uiCount</em> objects of type T in a raw buffer at <em>pDestination</em> regardless of T being a class, POD or trivial. <br /></td></tr>
<tr class="separator:ac8fa5b7a4d059fb8c423be8ff75cfcf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a974eaaa7df95b7d10480cfa7f2f41992"><td class="memTemplParams" colspan="2"><a id="a974eaaa7df95b7d10480cfa7f2f41992"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a974eaaa7df95b7d10480cfa7f2f41992"><td class="memTemplItemLeft" align="right" valign="top">static ConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a974eaaa7df95b7d10480cfa7f2f41992">MakeDefaultConstructorFunction</a> ()</td></tr>
<tr class="memdesc:a974eaaa7df95b7d10480cfa7f2f41992"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a function pointer to construct an instance of T. Always returns a constructor function regardless of T being a class, POD or trivial. <br /></td></tr>
<tr class="separator:a974eaaa7df95b7d10480cfa7f2f41992"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab768b24491ab1feb611b5036d37e39f2"><td class="memTemplParams" colspan="2"><a id="ab768b24491ab1feb611b5036d37e39f2"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:ab768b24491ab1feb611b5036d37e39f2"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#ab768b24491ab1feb611b5036d37e39f2">CopyConstruct</a> (Destination *pDestination, const Source &amp;copy, size_t uiCount)</td></tr>
<tr class="memdesc:ab768b24491ab1feb611b5036d37e39f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs <em>uiCount</em> objects of type T in a raw buffer at <em>pDestination</em>, by creating <em>uiCount</em> copies of <em>copy</em>. <br /></td></tr>
<tr class="separator:ab768b24491ab1feb611b5036d37e39f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c12c5af647ec366b7a99b15cca9386b"><td class="memTemplParams" colspan="2"><a id="a4c12c5af647ec366b7a99b15cca9386b"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4c12c5af647ec366b7a99b15cca9386b"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a4c12c5af647ec366b7a99b15cca9386b">CopyConstructArray</a> (T *pDestination, const T *pSource, size_t uiCount)</td></tr>
<tr class="memdesc:a4c12c5af647ec366b7a99b15cca9386b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs <em>uiCount</em> objects of type T in a raw buffer at <em>pDestination</em> from an existing array of objects at <em>pSource</em> by using copy construction. <br /></td></tr>
<tr class="separator:a4c12c5af647ec366b7a99b15cca9386b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa87226b4362949aa02ffbbea97bf14d0"><td class="memTemplParams" colspan="2"><a id="aa87226b4362949aa02ffbbea97bf14d0"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa87226b4362949aa02ffbbea97bf14d0"><td class="memTemplItemLeft" align="right" valign="top">static CopyConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#aa87226b4362949aa02ffbbea97bf14d0">MakeCopyConstructorFunction</a> ()</td></tr>
<tr class="memdesc:aa87226b4362949aa02ffbbea97bf14d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a function pointer to copy construct an instance of T. <br /></td></tr>
<tr class="separator:aa87226b4362949aa02ffbbea97bf14d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a945a697e081b8f264a7b9d4ec8f66ffe"><td class="memTemplParams" colspan="2"><a id="a945a697e081b8f264a7b9d4ec8f66ffe"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a945a697e081b8f264a7b9d4ec8f66ffe"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a945a697e081b8f264a7b9d4ec8f66ffe">MoveConstruct</a> (T *pDestination, T &amp;&amp;source)</td></tr>
<tr class="memdesc:a945a697e081b8f264a7b9d4ec8f66ffe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs an object of type T in a raw buffer at <em>pDestination</em>, by using move construction from <em>source</em>. <br /></td></tr>
<tr class="separator:a945a697e081b8f264a7b9d4ec8f66ffe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88a1580378fdbff9128e4760063f199c"><td class="memTemplParams" colspan="2"><a id="a88a1580378fdbff9128e4760063f199c"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a88a1580378fdbff9128e4760063f199c"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a88a1580378fdbff9128e4760063f199c">MoveConstruct</a> (T *pDestination, T *pSource, size_t uiCount)</td></tr>
<tr class="memdesc:a88a1580378fdbff9128e4760063f199c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs <em>uiCount</em> objects of type T in a raw buffer at <em>pDestination</em> from an existing array of objects at <em>pSource</em> by using move construction. <br /></td></tr>
<tr class="separator:a88a1580378fdbff9128e4760063f199c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a8156e3c8c1686be6a27ddac6e5772f"><td class="memTemplParams" colspan="2"><a id="a0a8156e3c8c1686be6a27ddac6e5772f"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:a0a8156e3c8c1686be6a27ddac6e5772f"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a0a8156e3c8c1686be6a27ddac6e5772f">CopyOrMoveConstruct</a> (Destination *pDestination, Source &amp;&amp;source)</td></tr>
<tr class="memdesc:a0a8156e3c8c1686be6a27ddac6e5772f"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function will either move call MoveConstruct or CopyConstruct for a single element <em>source</em>, depending on whether it was called with a rvalue reference or a const reference to <em>source</em>. <br /></td></tr>
<tr class="separator:a0a8156e3c8c1686be6a27ddac6e5772f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43ee17f152fe10a7e2cea71bdbf68521"><td class="memTemplParams" colspan="2"><a id="a43ee17f152fe10a7e2cea71bdbf68521"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a43ee17f152fe10a7e2cea71bdbf68521"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a43ee17f152fe10a7e2cea71bdbf68521">RelocateConstruct</a> (T *pDestination, T *pSource, size_t uiCount)</td></tr>
<tr class="memdesc:a43ee17f152fe10a7e2cea71bdbf68521"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs <em>uiCount</em> objects of type T in a raw buffer at <em>pDestination</em> from an existing array of objects at <em>pSource</em> by using move construction if availble, otherwise by copy construction. Calls destructor of source elements in any case (if it is a non primitive or memrelocatable type). <br /></td></tr>
<tr class="separator:a43ee17f152fe10a7e2cea71bdbf68521"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea6c4d3ce40c31abd9cc00fd94759c64"><td class="memTemplParams" colspan="2"><a id="aea6c4d3ce40c31abd9cc00fd94759c64"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aea6c4d3ce40c31abd9cc00fd94759c64"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#aea6c4d3ce40c31abd9cc00fd94759c64">Destruct</a> (T *pDestination, size_t uiCount)</td></tr>
<tr class="memdesc:aea6c4d3ce40c31abd9cc00fd94759c64"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructs <em>uiCount</em> objects of type T at <em>pDestination</em>. <br /></td></tr>
<tr class="separator:aea6c4d3ce40c31abd9cc00fd94759c64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30225d2e06fd8980244a0bc8a07b66bc"><td class="memTemplParams" colspan="2"><a id="a30225d2e06fd8980244a0bc8a07b66bc"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a30225d2e06fd8980244a0bc8a07b66bc"><td class="memTemplItemLeft" align="right" valign="top">static DestructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a30225d2e06fd8980244a0bc8a07b66bc">MakeDestructorFunction</a> ()</td></tr>
<tr class="memdesc:a30225d2e06fd8980244a0bc8a07b66bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a function pointer to destruct an instance of T. Returns nullptr for POD-types. <br /></td></tr>
<tr class="separator:a30225d2e06fd8980244a0bc8a07b66bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15ff9286bc6efd02271c6d61578b5c02"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a15ff9286bc6efd02271c6d61578b5c02"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a15ff9286bc6efd02271c6d61578b5c02">Copy</a> (T *pDestination, const T *pSource, size_t uiCount)</td></tr>
<tr class="memdesc:a15ff9286bc6efd02271c6d61578b5c02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies objects of type T from <em>pSource</em> to <em>pDestination</em>.  <a href="../../dc/d4d/classez_memory_utils.htm#a15ff9286bc6efd02271c6d61578b5c02">More...</a><br /></td></tr>
<tr class="separator:a15ff9286bc6efd02271c6d61578b5c02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f9eefe70348ce0b05f0bb5a884c9eae"><td class="memItemLeft" align="right" valign="top"><a id="a8f9eefe70348ce0b05f0bb5a884c9eae"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a8f9eefe70348ce0b05f0bb5a884c9eae">RawByteCopy</a> (void *pDestination, const void *pSource, size_t uiNumBytesToCopy)</td></tr>
<tr class="memdesc:a8f9eefe70348ce0b05f0bb5a884c9eae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies exactly <em>uiNumBytesToCopy</em> from <em>pSource</em> to <em>pDestination</em>, independent of the involved types and their sizes. <br /></td></tr>
<tr class="separator:a8f9eefe70348ce0b05f0bb5a884c9eae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3dcba6aa092c250b6569eed266df9184"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3dcba6aa092c250b6569eed266df9184"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a3dcba6aa092c250b6569eed266df9184">CopyOverlapped</a> (T *pDestination, const T *pSource, size_t uiCount)</td></tr>
<tr class="memdesc:a3dcba6aa092c250b6569eed266df9184"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies objects of type T from <em>pSource</em> to <em>pDestination</em>.  <a href="../../dc/d4d/classez_memory_utils.htm#a3dcba6aa092c250b6569eed266df9184">More...</a><br /></td></tr>
<tr class="separator:a3dcba6aa092c250b6569eed266df9184"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b91f2f466d6009ce02116e3397dfbfb"><td class="memTemplParams" colspan="2"><a id="a5b91f2f466d6009ce02116e3397dfbfb"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5b91f2f466d6009ce02116e3397dfbfb"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a5b91f2f466d6009ce02116e3397dfbfb">Relocate</a> (T *pDestination, T *pSource, size_t uiCount)</td></tr>
<tr class="memdesc:a5b91f2f466d6009ce02116e3397dfbfb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves objects of type T from <em>pSource</em> to <em>pDestination</em>. <br /></td></tr>
<tr class="separator:a5b91f2f466d6009ce02116e3397dfbfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adce58a6d9b1e90c6c4f59e1bb9004c61"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:adce58a6d9b1e90c6c4f59e1bb9004c61"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#adce58a6d9b1e90c6c4f59e1bb9004c61">RelocateOverlapped</a> (T *pDestination, T *pSource, size_t uiCount)</td></tr>
<tr class="memdesc:adce58a6d9b1e90c6c4f59e1bb9004c61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves objects of type T from <em>pSource</em> to <em>pDestination</em>.  <a href="../../dc/d4d/classez_memory_utils.htm#adce58a6d9b1e90c6c4f59e1bb9004c61">More...</a><br /></td></tr>
<tr class="separator:adce58a6d9b1e90c6c4f59e1bb9004c61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fd0a49960e146262101081c5ae0feeb"><td class="memTemplParams" colspan="2"><a id="a9fd0a49960e146262101081c5ae0feeb"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9fd0a49960e146262101081c5ae0feeb"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a9fd0a49960e146262101081c5ae0feeb">Prepend</a> (T *pDestination, const T &amp;source, size_t uiCount)</td></tr>
<tr class="memdesc:a9fd0a49960e146262101081c5ae0feeb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves <em>uiCount</em> objects in <em>pDestination</em> by one object and copies <em>source</em> to the free space. <br /></td></tr>
<tr class="separator:a9fd0a49960e146262101081c5ae0feeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20752ba67ef47931de0f45c28ff4f3d4"><td class="memTemplParams" colspan="2"><a id="a20752ba67ef47931de0f45c28ff4f3d4"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a20752ba67ef47931de0f45c28ff4f3d4"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a20752ba67ef47931de0f45c28ff4f3d4">Prepend</a> (T *pDestination, T &amp;&amp;source, size_t uiCount)</td></tr>
<tr class="memdesc:a20752ba67ef47931de0f45c28ff4f3d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves <em>uiCount</em> objects in <em>pDestination</em> by one object and moves <em>source</em> to the free space. <br /></td></tr>
<tr class="separator:a20752ba67ef47931de0f45c28ff4f3d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb4bea7569853312e31e724762866f13"><td class="memTemplParams" colspan="2"><a id="abb4bea7569853312e31e724762866f13"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:abb4bea7569853312e31e724762866f13"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#abb4bea7569853312e31e724762866f13">Prepend</a> (T *pDestination, const T *source, size_t uiSourceCount, size_t uiCount)</td></tr>
<tr class="memdesc:abb4bea7569853312e31e724762866f13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves <em>uiCount</em> objects in <em>pDestination</em> by <em>uiSourceCount</em> objects and copies <em>source</em> to the free space. <br /></td></tr>
<tr class="separator:abb4bea7569853312e31e724762866f13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a744d60b4b000c61f2dd3819a12410595"><td class="memTemplParams" colspan="2"><a id="a744d60b4b000c61f2dd3819a12410595"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a744d60b4b000c61f2dd3819a12410595"><td class="memTemplItemLeft" align="right" valign="top">static bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a744d60b4b000c61f2dd3819a12410595">IsEqual</a> (const T *a, const T *b, size_t uiCount=1)</td></tr>
<tr class="memdesc:a744d60b4b000c61f2dd3819a12410595"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests if objects of type T from <em>pSource</em> and <em>pDestination</em> are equal. <br /></td></tr>
<tr class="separator:a744d60b4b000c61f2dd3819a12410595"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed226ed6447ce30053c0b5b990b978ff"><td class="memTemplParams" colspan="2"><a id="aed226ed6447ce30053c0b5b990b978ff"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aed226ed6447ce30053c0b5b990b978ff"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#aed226ed6447ce30053c0b5b990b978ff">ZeroFill</a> (T *pDestination, size_t uiCount)</td></tr>
<tr class="memdesc:aed226ed6447ce30053c0b5b990b978ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Zeros every byte in the provided memory buffer. <br /></td></tr>
<tr class="separator:aed226ed6447ce30053c0b5b990b978ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7a052899edbbacaf789d6a80b52e7c9"><td class="memTemplParams" colspan="2"><a id="af7a052899edbbacaf789d6a80b52e7c9"></a>
template&lt;typename T , size_t N&gt; </td></tr>
<tr class="memitem:af7a052899edbbacaf789d6a80b52e7c9"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#af7a052899edbbacaf789d6a80b52e7c9">ZeroFill</a> (T(&amp;destination)[N])</td></tr>
<tr class="memdesc:af7a052899edbbacaf789d6a80b52e7c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Zeros every byte in the provided memory buffer. <br /></td></tr>
<tr class="separator:af7a052899edbbacaf789d6a80b52e7c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8357dd1b098551c03e6faa59f64968ae"><td class="memTemplParams" colspan="2"><a id="a8357dd1b098551c03e6faa59f64968ae"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8357dd1b098551c03e6faa59f64968ae"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a8357dd1b098551c03e6faa59f64968ae">PatternFill</a> (T *pDestination, ezUInt8 uiBytePattern, size_t uiCount)</td></tr>
<tr class="memdesc:a8357dd1b098551c03e6faa59f64968ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills every byte of the provided buffer with the given value. <br /></td></tr>
<tr class="separator:a8357dd1b098551c03e6faa59f64968ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e06de203e72ea6b65b376c3dcfeb494"><td class="memTemplParams" colspan="2"><a id="a5e06de203e72ea6b65b376c3dcfeb494"></a>
template&lt;typename T , size_t N&gt; </td></tr>
<tr class="memitem:a5e06de203e72ea6b65b376c3dcfeb494"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a5e06de203e72ea6b65b376c3dcfeb494">PatternFill</a> (T(&amp;destination)[N], ezUInt8 uiBytePattern)</td></tr>
<tr class="memdesc:a5e06de203e72ea6b65b376c3dcfeb494"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills every byte of the provided buffer with the given value. <br /></td></tr>
<tr class="separator:a5e06de203e72ea6b65b376c3dcfeb494"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7671e5bce6bc9fd9636ab50206b0f033"><td class="memTemplParams" colspan="2"><a id="a7671e5bce6bc9fd9636ab50206b0f033"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7671e5bce6bc9fd9636ab50206b0f033"><td class="memTemplItemLeft" align="right" valign="top">static ezInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a7671e5bce6bc9fd9636ab50206b0f033">Compare</a> (const T *a, const T *b, size_t uiCount=1)</td></tr>
<tr class="memdesc:a7671e5bce6bc9fd9636ab50206b0f033"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares two buffers of raw memory byte wise. <br /></td></tr>
<tr class="separator:a7671e5bce6bc9fd9636ab50206b0f033"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e6294897c28081e935147d72340788d"><td class="memItemLeft" align="right" valign="top"><a id="a9e6294897c28081e935147d72340788d"></a>
static ezInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a9e6294897c28081e935147d72340788d">RawByteCompare</a> (const void *a, const void *b, size_t uiNumBytesToCompare)</td></tr>
<tr class="memdesc:a9e6294897c28081e935147d72340788d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares exactly <em>uiNumBytesToCompare</em> from <em>a</em> and <em>b</em>, independent of the involved types and their sizes. <br /></td></tr>
<tr class="separator:a9e6294897c28081e935147d72340788d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a154a2ccb52b2abdfdbe6d068948bc6b4"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a154a2ccb52b2abdfdbe6d068948bc6b4"><td class="memTemplItemLeft" align="right" valign="top">static T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a154a2ccb52b2abdfdbe6d068948bc6b4">AddByteOffset</a> (T *ptr, ptrdiff_t iOffset)</td></tr>
<tr class="memdesc:a154a2ccb52b2abdfdbe6d068948bc6b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the address stored in <em>ptr</em> plus the given byte offset <em>iOffset</em>, cast to type <em>T</em>.  <a href="../../dc/d4d/classez_memory_utils.htm#a154a2ccb52b2abdfdbe6d068948bc6b4">More...</a><br /></td></tr>
<tr class="separator:a154a2ccb52b2abdfdbe6d068948bc6b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f5327cc82286e4d378b8101478c0eab"><td class="memTemplParams" colspan="2"><a id="a7f5327cc82286e4d378b8101478c0eab"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7f5327cc82286e4d378b8101478c0eab"><td class="memTemplItemLeft" align="right" valign="top">static T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a7f5327cc82286e4d378b8101478c0eab">AlignBackwards</a> (T *ptr, size_t uiAlignment)</td></tr>
<tr class="memdesc:a7f5327cc82286e4d378b8101478c0eab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Aligns the pointer <em>ptr</em> by moving its address backwards to the previous multiple of <em>uiAlignment</em>. <br /></td></tr>
<tr class="separator:a7f5327cc82286e4d378b8101478c0eab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a6c549d62f7a9de30863c9ef22ed0f6"><td class="memTemplParams" colspan="2"><a id="a5a6c549d62f7a9de30863c9ef22ed0f6"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5a6c549d62f7a9de30863c9ef22ed0f6"><td class="memTemplItemLeft" align="right" valign="top">static T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a5a6c549d62f7a9de30863c9ef22ed0f6">AlignForwards</a> (T *ptr, size_t uiAlignment)</td></tr>
<tr class="memdesc:a5a6c549d62f7a9de30863c9ef22ed0f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Aligns the pointer <em>ptr</em> by moving its address forwards to the next multiple of <em>uiAlignment</em>. <br /></td></tr>
<tr class="separator:a5a6c549d62f7a9de30863c9ef22ed0f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2583fd48644a0a7b3eb72797c7c65a34"><td class="memTemplParams" colspan="2"><a id="a2583fd48644a0a7b3eb72797c7c65a34"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a2583fd48644a0a7b3eb72797c7c65a34"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a2583fd48644a0a7b3eb72797c7c65a34">AlignSize</a> (T uiSize, T uiAlignment)</td></tr>
<tr class="memdesc:a2583fd48644a0a7b3eb72797c7c65a34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Aligns the given size <em>uiSize</em> by rounding up to the next multiple of the size. <br /></td></tr>
<tr class="separator:a2583fd48644a0a7b3eb72797c7c65a34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7c2521406e21cf4c64519a4a460dffe"><td class="memTemplParams" colspan="2"><a id="aa7c2521406e21cf4c64519a4a460dffe"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa7c2521406e21cf4c64519a4a460dffe"><td class="memTemplItemLeft" align="right" valign="top">static bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#aa7c2521406e21cf4c64519a4a460dffe">IsAligned</a> (const T *ptr, size_t uiAlignment)</td></tr>
<tr class="memdesc:aa7c2521406e21cf4c64519a4a460dffe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether <em>ptr</em> is aligned to a memory address that is a multiple of <em>uiAlignment</em>. <br /></td></tr>
<tr class="separator:aa7c2521406e21cf4c64519a4a460dffe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fffe2aadea9b3876e558e8cc8a6a45b"><td class="memTemplParams" colspan="2"><a id="a9fffe2aadea9b3876e558e8cc8a6a45b"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9fffe2aadea9b3876e558e8cc8a6a45b"><td class="memTemplItemLeft" align="right" valign="top">static bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a9fffe2aadea9b3876e558e8cc8a6a45b">IsSizeAligned</a> (T uiSize, T uiAlignment)</td></tr>
<tr class="memdesc:a9fffe2aadea9b3876e558e8cc8a6a45b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given size is aligned. <br /></td></tr>
<tr class="separator:a9fffe2aadea9b3876e558e8cc8a6a45b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c202a89351b70fe9701684071b47003"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/d4d/classez_memory_utils.htm#a5c202a89351b70fe9701684071b47003">ReserveLower4GBAddressSpace</a> ()</td></tr>
<tr class="memdesc:a5c202a89351b70fe9701684071b47003"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reserves the lower 4GB of address space in 64-bit builds to ensure all allocations start above 4GB.  <a href="../../dc/d4d/classez_memory_utils.htm#a5c202a89351b70fe9701684071b47003">More...</a><br /></td></tr>
<tr class="separator:a5c202a89351b70fe9701684071b47003"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class provides functions to work on raw memory. </p>
<p>The following concepts are realized: Copy: Copying a object from a to b means that two equivalent objects will exists in both a and b. Move: Moving an object from a to b means that the object will exist in b afterwards but a will be empty afterwards, but not destructed. This strictly requires an available move constructor (compile error otherwise). Relocate: Relocating an object from a to b means that the object will exist in b afterwards but will no longer exist in a, which means a will be moved if available or copied, but destructed afterwards in any case. Construct: Constructing assumes that the destination does not contain a valid object. Overlapped: The source and destination range may overlap for the operation to be performed. The above mentioned concepts can be combined, e.g. RelocateConstruct for relocating to an uninitialized buffer. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a154a2ccb52b2abdfdbe6d068948bc6b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a154a2ccb52b2abdfdbe6d068948bc6b4">&#9670;&nbsp;</a></span>AddByteOffset()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T* ezMemoryUtils::AddByteOffset </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ptrdiff_t&#160;</td>
          <td class="paramname"><em>iOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the address stored in <em>ptr</em> plus the given byte offset <em>iOffset</em>, cast to type <em>T</em>. </p>
<p>This is useful when working with raw memory, to safely modify a pointer without having to take care of the details of pointer arithmetic. </p>

</div>
</div>
<a id="a2944b511c0f4181b4b6a96b472df703f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2944b511c0f4181b4b6a96b472df703f">&#9670;&nbsp;</a></span>Construct()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ezMemoryUtils::Construct </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>pDestination</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>uiCount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs <em>uiCount</em> objects of type T in a raw buffer at <em>pDestination</em>. </p>
<p>You should use 'DefaultConstruct' instead if default construction is needed for trivial types as well. </p>

</div>
</div>
<a id="a15ff9286bc6efd02271c6d61578b5c02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15ff9286bc6efd02271c6d61578b5c02">&#9670;&nbsp;</a></span>Copy()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ezMemoryUtils::Copy </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>pDestination</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>pSource</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>uiCount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copies objects of type T from <em>pSource</em> to <em>pDestination</em>. </p>
<p>If the two buffers overlap use CopyOverlapped instead. </p>

</div>
</div>
<a id="a3dcba6aa092c250b6569eed266df9184"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3dcba6aa092c250b6569eed266df9184">&#9670;&nbsp;</a></span>CopyOverlapped()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ezMemoryUtils::CopyOverlapped </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>pDestination</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>pSource</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>uiCount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copies objects of type T from <em>pSource</em> to <em>pDestination</em>. </p>
<p>The two buffers may overlap when using this method. </p>

</div>
</div>
<a id="adce58a6d9b1e90c6c4f59e1bb9004c61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adce58a6d9b1e90c6c4f59e1bb9004c61">&#9670;&nbsp;</a></span>RelocateOverlapped()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ezMemoryUtils::RelocateOverlapped </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>pDestination</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>pSource</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>uiCount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Moves objects of type T from <em>pSource</em> to <em>pDestination</em>. </p>
<p>The two buffers may overlap when using this method. </p>

</div>
</div>
<a id="a5c202a89351b70fe9701684071b47003"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c202a89351b70fe9701684071b47003">&#9670;&nbsp;</a></span>ReserveLower4GBAddressSpace()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezMemoryUtils::ReserveLower4GBAddressSpace </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reserves the lower 4GB of address space in 64-bit builds to ensure all allocations start above 4GB. </p>
<dl class="section note"><dt>Note</dt><dd>Note that this does NOT reserve 4GB of RAM, only address space. This can help to detect pointer truncation. In 32-bit builds it does nothing.</dd></dl>
<p>Currently only implemented on Windows. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Memory/<a class="el" href="../../da/d0b/_memory_utils_8h_source.htm">MemoryUtils.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Memory/Implementation/MemoryUtils.cpp</li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Memory/Implementation/<a class="el" href="../../d3/de9/_memory_utils__inl_8h_source.htm">MemoryUtils_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dc/d4d/classez_memory_utils.htm">ezMemoryUtils</a></li>
    <li class="footer">Generated on Sun Oct 9 2022 14:45:05 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
