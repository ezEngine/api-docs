<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezArrayPtr&lt; T &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('dc/dae/classez_array_ptr.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../d3/de8/classez_array_ptr-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">ezArrayPtr&lt; T &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>This class encapsulates an array and it's size. It is recommended to use this class instead of plain C arrays.  
 <a href="../../dc/dae/classez_array_ptr.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d0/d20/_array_ptr_8h_source.htm">ArrayPtr.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a34dbd7ab482843858ab7ca4f3dd66d42" id="r_a34dbd7ab482843858ab7ca4f3dd66d42"><td class="memItemLeft" align="right" valign="top"><a id="a34dbd7ab482843858ab7ca4f3dd66d42" name="a34dbd7ab482843858ab7ca4f3dd66d42"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ByteType</b> = typename <a class="el" href="../../d6/dbd/structez_array_ptr_detail_1_1_byte_type_helper.htm">ezArrayPtrDetail::ByteTypeHelper</a>&lt; T &gt;::type</td></tr>
<tr class="separator:a34dbd7ab482843858ab7ca4f3dd66d42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae92aa05eb8ad57b560af521e471313b1" id="r_ae92aa05eb8ad57b560af521e471313b1"><td class="memItemLeft" align="right" valign="top"><a id="ae92aa05eb8ad57b560af521e471313b1" name="ae92aa05eb8ad57b560af521e471313b1"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ValueType</b> = T</td></tr>
<tr class="separator:ae92aa05eb8ad57b560af521e471313b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b81b0a4f1ef9676b1ad8ff6fedb73a4" id="r_a1b81b0a4f1ef9676b1ad8ff6fedb73a4"><td class="memItemLeft" align="right" valign="top"><a id="a1b81b0a4f1ef9676b1ad8ff6fedb73a4" name="a1b81b0a4f1ef9676b1ad8ff6fedb73a4"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>PointerType</b> = T *</td></tr>
<tr class="separator:a1b81b0a4f1ef9676b1ad8ff6fedb73a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93b4547c27edb58ae8ec9f90fdd79ad3" id="r_a93b4547c27edb58ae8ec9f90fdd79ad3"><td class="memItemLeft" align="right" valign="top"><a id="a93b4547c27edb58ae8ec9f90fdd79ad3" name="a93b4547c27edb58ae8ec9f90fdd79ad3"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_iterator</b> = const T *</td></tr>
<tr class="separator:a93b4547c27edb58ae8ec9f90fdd79ad3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0e87e44005402a85747769dc6362f90" id="r_aa0e87e44005402a85747769dc6362f90"><td class="memItemLeft" align="right" valign="top"><a id="aa0e87e44005402a85747769dc6362f90" name="aa0e87e44005402a85747769dc6362f90"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_reverse_iterator</b> = <a class="el" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">const_reverse_pointer_iterator</a>&lt; T &gt;</td></tr>
<tr class="separator:aa0e87e44005402a85747769dc6362f90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfa1ba48e0ac74aff2faf7736940c28d" id="r_abfa1ba48e0ac74aff2faf7736940c28d"><td class="memItemLeft" align="right" valign="top"><a id="abfa1ba48e0ac74aff2faf7736940c28d" name="abfa1ba48e0ac74aff2faf7736940c28d"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>iterator</b> = T *</td></tr>
<tr class="separator:abfa1ba48e0ac74aff2faf7736940c28d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace27056f9fb4be9208655ae760ef4b68" id="r_ace27056f9fb4be9208655ae760ef4b68"><td class="memItemLeft" align="right" valign="top"><a id="ace27056f9fb4be9208655ae760ef4b68" name="ace27056f9fb4be9208655ae760ef4b68"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>reverse_iterator</b> = <a class="el" href="../../d3/df2/structreverse__pointer__iterator.htm">reverse_pointer_iterator</a>&lt; T &gt;</td></tr>
<tr class="separator:ace27056f9fb4be9208655ae760ef4b68"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ac4ba15e07f4b9176f37782ee0f464a51" id="r_ac4ba15e07f4b9176f37782ee0f464a51"><td class="memItemLeft" align="right" valign="top"><a id="ac4ba15e07f4b9176f37782ee0f464a51" name="ac4ba15e07f4b9176f37782ee0f464a51"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>EZ_DECLARE_POD_TYPE</b> ()</td></tr>
<tr class="separator:ac4ba15e07f4b9176f37782ee0f464a51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fda1bd42cdec0e38ae46d99c9d0d0e4" id="r_a7fda1bd42cdec0e38ae46d99c9d0d0e4"><td class="memItemLeft" align="right" valign="top"><a id="a7fda1bd42cdec0e38ae46d99c9d0d0e4" name="a7fda1bd42cdec0e38ae46d99c9d0d0e4"></a>
EZ_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><b>ezArrayPtr</b> ()</td></tr>
<tr class="memdesc:a7fda1bd42cdec0e38ae46d99c9d0d0e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the <a class="el" href="../../dc/dae/classez_array_ptr.htm" title="This class encapsulates an array and it&#39;s size. It is recommended to use this class instead of plain ...">ezArrayPtr</a> to be empty. <br /></td></tr>
<tr class="separator:a7fda1bd42cdec0e38ae46d99c9d0d0e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee1fa89ad26b5a256d428fba6ef04d30" id="r_aee1fa89ad26b5a256d428fba6ef04d30"><td class="memItemLeft" align="right" valign="top"><a id="aee1fa89ad26b5a256d428fba6ef04d30" name="aee1fa89ad26b5a256d428fba6ef04d30"></a>
EZ_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><b>ezArrayPtr</b> (const <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; T &gt; &amp;other)</td></tr>
<tr class="memdesc:aee1fa89ad26b5a256d428fba6ef04d30"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the pointer and size of /a other. Does not allocate any data. <br /></td></tr>
<tr class="separator:aee1fa89ad26b5a256d428fba6ef04d30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae86bcb67eb6955c4bcb78a0f5296afa5" id="r_ae86bcb67eb6955c4bcb78a0f5296afa5"><td class="memItemLeft" align="right" valign="top"><a id="ae86bcb67eb6955c4bcb78a0f5296afa5" name="ae86bcb67eb6955c4bcb78a0f5296afa5"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>ezArrayPtr</b> (T *pPtr, ezUInt32 uiCount)</td></tr>
<tr class="memdesc:ae86bcb67eb6955c4bcb78a0f5296afa5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the <a class="el" href="../../dc/dae/classez_array_ptr.htm" title="This class encapsulates an array and it&#39;s size. It is recommended to use this class instead of plain ...">ezArrayPtr</a> with the given pointer and number of elements. No memory is allocated or copied. <br /></td></tr>
<tr class="separator:ae86bcb67eb6955c4bcb78a0f5296afa5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72340e400182aa95d15bd67fa8a5e3cd" id="r_a72340e400182aa95d15bd67fa8a5e3cd"><td class="memTemplParams" colspan="2"><a id="a72340e400182aa95d15bd67fa8a5e3cd" name="a72340e400182aa95d15bd67fa8a5e3cd"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a72340e400182aa95d15bd67fa8a5e3cd"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ezArrayPtr</b> (T(&amp;staticArray)[N])</td></tr>
<tr class="memdesc:a72340e400182aa95d15bd67fa8a5e3cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the <a class="el" href="../../dc/dae/classez_array_ptr.htm" title="This class encapsulates an array and it&#39;s size. It is recommended to use this class instead of plain ...">ezArrayPtr</a> to encapsulate the given array. <br /></td></tr>
<tr class="separator:a72340e400182aa95d15bd67fa8a5e3cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a60e59db75a5101abb471a146c340db" id="r_a2a60e59db75a5101abb471a146c340db"><td class="memTemplParams" colspan="2"><a id="a2a60e59db75a5101abb471a146c340db" name="a2a60e59db75a5101abb471a146c340db"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a2a60e59db75a5101abb471a146c340db"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ezArrayPtr</b> (const <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; U &gt; &amp;other)</td></tr>
<tr class="memdesc:a2a60e59db75a5101abb471a146c340db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the <a class="el" href="../../dc/dae/classez_array_ptr.htm" title="This class encapsulates an array and it&#39;s size. It is recommended to use this class instead of plain ...">ezArrayPtr</a> to be a copy of <em>other</em>. No memory is allocated or copied. <br /></td></tr>
<tr class="separator:a2a60e59db75a5101abb471a146c340db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf661424131b05cb44aad430236c5041" id="r_acf661424131b05cb44aad430236c5041"><td class="memItemLeft" align="right" valign="top"><a id="acf661424131b05cb44aad430236c5041" name="acf661424131b05cb44aad430236c5041"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>operator ezArrayPtr&lt; const T &gt;</b> () const</td></tr>
<tr class="memdesc:acf661424131b05cb44aad430236c5041"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert to const version. <br /></td></tr>
<tr class="separator:acf661424131b05cb44aad430236c5041"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7011299cdaa4c40c9af60ff0c605d16" id="r_ae7011299cdaa4c40c9af60ff0c605d16"><td class="memItemLeft" align="right" valign="top"><a id="ae7011299cdaa4c40c9af60ff0c605d16" name="ae7011299cdaa4c40c9af60ff0c605d16"></a>
EZ_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; T &gt; &amp;other)</td></tr>
<tr class="memdesc:ae7011299cdaa4c40c9af60ff0c605d16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the pointer and size of /a other. Does not allocate any data. <br /></td></tr>
<tr class="separator:ae7011299cdaa4c40c9af60ff0c605d16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa30da6efd86b458a82760b8a775abd4" id="r_aaa30da6efd86b458a82760b8a775abd4"><td class="memItemLeft" align="right" valign="top"><a id="aaa30da6efd86b458a82760b8a775abd4" name="aaa30da6efd86b458a82760b8a775abd4"></a>
EZ_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> ()</td></tr>
<tr class="memdesc:aaa30da6efd86b458a82760b8a775abd4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the array. <br /></td></tr>
<tr class="separator:aaa30da6efd86b458a82760b8a775abd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03f74ba7645e24527c88f9ed84c12688" id="r_a03f74ba7645e24527c88f9ed84c12688"><td class="memItemLeft" align="right" valign="top"><a id="a03f74ba7645e24527c88f9ed84c12688" name="a03f74ba7645e24527c88f9ed84c12688"></a>
EZ_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (std::nullptr_t)</td></tr>
<tr class="separator:a03f74ba7645e24527c88f9ed84c12688"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba4e7585190f337c6428f2fe25828b8a" id="r_aba4e7585190f337c6428f2fe25828b8a"><td class="memItemLeft" align="right" valign="top"><a id="aba4e7585190f337c6428f2fe25828b8a" name="aba4e7585190f337c6428f2fe25828b8a"></a>
EZ_ALWAYS_INLINE PointerType&#160;</td><td class="memItemRight" valign="bottom"><b>GetPtr</b> () const</td></tr>
<tr class="memdesc:aba4e7585190f337c6428f2fe25828b8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the pointer to the array. <br /></td></tr>
<tr class="separator:aba4e7585190f337c6428f2fe25828b8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77b8c958db61eb57fa9b7d1478588dc9" id="r_a77b8c958db61eb57fa9b7d1478588dc9"><td class="memItemLeft" align="right" valign="top"><a id="a77b8c958db61eb57fa9b7d1478588dc9" name="a77b8c958db61eb57fa9b7d1478588dc9"></a>
EZ_ALWAYS_INLINE PointerType&#160;</td><td class="memItemRight" valign="bottom"><b>GetPtr</b> ()</td></tr>
<tr class="memdesc:a77b8c958db61eb57fa9b7d1478588dc9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the pointer to the array. <br /></td></tr>
<tr class="separator:a77b8c958db61eb57fa9b7d1478588dc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac55bb208683087dce2b5b00ea7ffd9ff" id="r_ac55bb208683087dce2b5b00ea7ffd9ff"><td class="memItemLeft" align="right" valign="top"><a id="ac55bb208683087dce2b5b00ea7ffd9ff" name="ac55bb208683087dce2b5b00ea7ffd9ff"></a>
EZ_ALWAYS_INLINE PointerType&#160;</td><td class="memItemRight" valign="bottom"><b>GetEndPtr</b> ()</td></tr>
<tr class="memdesc:ac55bb208683087dce2b5b00ea7ffd9ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the pointer behind the last element of the array. <br /></td></tr>
<tr class="separator:ac55bb208683087dce2b5b00ea7ffd9ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d370cc1835edb7de263534115bf0972" id="r_a4d370cc1835edb7de263534115bf0972"><td class="memItemLeft" align="right" valign="top"><a id="a4d370cc1835edb7de263534115bf0972" name="a4d370cc1835edb7de263534115bf0972"></a>
EZ_ALWAYS_INLINE PointerType&#160;</td><td class="memItemRight" valign="bottom"><b>GetEndPtr</b> () const</td></tr>
<tr class="memdesc:a4d370cc1835edb7de263534115bf0972"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the pointer behind the last element of the array. <br /></td></tr>
<tr class="separator:a4d370cc1835edb7de263534115bf0972"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c22c58557948f308334f512fda9e0d8" id="r_a0c22c58557948f308334f512fda9e0d8"><td class="memItemLeft" align="right" valign="top"><a id="a0c22c58557948f308334f512fda9e0d8" name="a0c22c58557948f308334f512fda9e0d8"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEmpty</b> () const</td></tr>
<tr class="memdesc:a0c22c58557948f308334f512fda9e0d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the array is empty. <br /></td></tr>
<tr class="separator:a0c22c58557948f308334f512fda9e0d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f222695f57e4cf200e07135dbbd7edd" id="r_a9f222695f57e4cf200e07135dbbd7edd"><td class="memItemLeft" align="right" valign="top"><a id="a9f222695f57e4cf200e07135dbbd7edd" name="a9f222695f57e4cf200e07135dbbd7edd"></a>
EZ_ALWAYS_INLINE ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetCount</b> () const</td></tr>
<tr class="memdesc:a9f222695f57e4cf200e07135dbbd7edd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of elements in the array. <br /></td></tr>
<tr class="separator:a9f222695f57e4cf200e07135dbbd7edd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a839c0c038a82368f263414ac040f647f" id="r_a839c0c038a82368f263414ac040f647f"><td class="memItemLeft" align="right" valign="top"><a id="a839c0c038a82368f263414ac040f647f" name="a839c0c038a82368f263414ac040f647f"></a>
EZ_FORCE_INLINE <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>GetSubArray</b> (ezUInt32 uiStart, ezUInt32 uiCount) const</td></tr>
<tr class="memdesc:a839c0c038a82368f263414ac040f647f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a sub-array from this array. <br /></td></tr>
<tr class="separator:a839c0c038a82368f263414ac040f647f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a908aab214cf50364fe5705a37ca6f127" id="r_a908aab214cf50364fe5705a37ca6f127"><td class="memItemLeft" align="right" valign="top">EZ_FORCE_INLINE <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/dae/classez_array_ptr.htm#a908aab214cf50364fe5705a37ca6f127">GetSubArray</a> (ezUInt32 uiStart) const</td></tr>
<tr class="memdesc:a908aab214cf50364fe5705a37ca6f127"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a sub-array from this array.  <br /></td></tr>
<tr class="separator:a908aab214cf50364fe5705a37ca6f127"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a269689cbd5471d18dc7b23d450701a10" id="r_a269689cbd5471d18dc7b23d450701a10"><td class="memItemLeft" align="right" valign="top"><a id="a269689cbd5471d18dc7b23d450701a10" name="a269689cbd5471d18dc7b23d450701a10"></a>
EZ_ALWAYS_INLINE <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; const ByteType &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ToByteArray</b> () const</td></tr>
<tr class="memdesc:a269689cbd5471d18dc7b23d450701a10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reinterprets this array as a byte array. <br /></td></tr>
<tr class="separator:a269689cbd5471d18dc7b23d450701a10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a529e706877f2481e6ec6a90a5b0ebd0d" id="r_a529e706877f2481e6ec6a90a5b0ebd0d"><td class="memItemLeft" align="right" valign="top"><a id="a529e706877f2481e6ec6a90a5b0ebd0d" name="a529e706877f2481e6ec6a90a5b0ebd0d"></a>
EZ_ALWAYS_INLINE <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; ByteType &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ToByteArray</b> ()</td></tr>
<tr class="memdesc:a529e706877f2481e6ec6a90a5b0ebd0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reinterprets this array as a byte array. <br /></td></tr>
<tr class="separator:a529e706877f2481e6ec6a90a5b0ebd0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ef40b2cc4506522ef994ba7aa290f4a" id="r_a1ef40b2cc4506522ef994ba7aa290f4a"><td class="memTemplParams" colspan="2"><a id="a1ef40b2cc4506522ef994ba7aa290f4a" name="a1ef40b2cc4506522ef994ba7aa290f4a"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a1ef40b2cc4506522ef994ba7aa290f4a"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; U &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Cast</b> ()</td></tr>
<tr class="memdesc:a1ef40b2cc4506522ef994ba7aa290f4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cast an ArrayPtr to an ArrayPtr to a different, but same size, type. <br /></td></tr>
<tr class="separator:a1ef40b2cc4506522ef994ba7aa290f4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92aa806acaac29171ea8dc0404306f12" id="r_a92aa806acaac29171ea8dc0404306f12"><td class="memTemplParams" colspan="2"><a id="a92aa806acaac29171ea8dc0404306f12" name="a92aa806acaac29171ea8dc0404306f12"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a92aa806acaac29171ea8dc0404306f12"><td class="memTemplItemLeft" align="right" valign="top">EZ_ALWAYS_INLINE <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; const U &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Cast</b> () const</td></tr>
<tr class="memdesc:a92aa806acaac29171ea8dc0404306f12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cast an ArrayPtr to an ArrayPtr to a different, but same size, type. <br /></td></tr>
<tr class="separator:a92aa806acaac29171ea8dc0404306f12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cea97c00a9c6c8d43690ddf596f72fa" id="r_a8cea97c00a9c6c8d43690ddf596f72fa"><td class="memItemLeft" align="right" valign="top"><a id="a8cea97c00a9c6c8d43690ddf596f72fa" name="a8cea97c00a9c6c8d43690ddf596f72fa"></a>
EZ_FORCE_INLINE const ValueType &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator[]</b> (ezUInt32 uiIndex) const</td></tr>
<tr class="memdesc:a8cea97c00a9c6c8d43690ddf596f72fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Index access. <br /></td></tr>
<tr class="separator:a8cea97c00a9c6c8d43690ddf596f72fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd79e6696c2f1ef806a36b51507c7bc0" id="r_afd79e6696c2f1ef806a36b51507c7bc0"><td class="memItemLeft" align="right" valign="top"><a id="afd79e6696c2f1ef806a36b51507c7bc0" name="afd79e6696c2f1ef806a36b51507c7bc0"></a>
EZ_FORCE_INLINE ValueType &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator[]</b> (ezUInt32 uiIndex)</td></tr>
<tr class="memdesc:afd79e6696c2f1ef806a36b51507c7bc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Index access. <br /></td></tr>
<tr class="separator:afd79e6696c2f1ef806a36b51507c7bc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb9c3c11f987d32596525d427d77da51" id="r_adb9c3c11f987d32596525d427d77da51"><td class="memTemplParams" colspan="2"><a id="adb9c3c11f987d32596525d427d77da51" name="adb9c3c11f987d32596525d427d77da51"></a>
template&lt;typename  = typename std::enable_if&lt;std::is_const&lt;T&gt;::value == false&gt;&gt; </td></tr>
<tr class="memitem:adb9c3c11f987d32596525d427d77da51"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; const T &gt; &amp;other) const</td></tr>
<tr class="memdesc:adb9c3c11f987d32596525d427d77da51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the two arrays for equality. <br /></td></tr>
<tr class="separator:adb9c3c11f987d32596525d427d77da51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20fd4a63ebe29d4b53bee74dbab9818b" id="r_a20fd4a63ebe29d4b53bee74dbab9818b"><td class="memItemLeft" align="right" valign="top"><a id="a20fd4a63ebe29d4b53bee74dbab9818b" name="a20fd4a63ebe29d4b53bee74dbab9818b"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; T &gt; &amp;other) const</td></tr>
<tr class="memdesc:a20fd4a63ebe29d4b53bee74dbab9818b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the two arrays for equality. <br /></td></tr>
<tr class="separator:a20fd4a63ebe29d4b53bee74dbab9818b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3f22648c7b1b5c06ea82e18ef7a26dc" id="r_ad3f22648c7b1b5c06ea82e18ef7a26dc"><td class="memItemLeft" align="right" valign="top"><a id="ad3f22648c7b1b5c06ea82e18ef7a26dc" name="ad3f22648c7b1b5c06ea82e18ef7a26dc"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>EZ_ADD_DEFAULT_OPERATOR_NOTEQUAL</b> (const <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; T &gt; &amp;)</td></tr>
<tr class="separator:ad3f22648c7b1b5c06ea82e18ef7a26dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6966f3eb34ead18fa2c57528fd7308bf" id="r_a6966f3eb34ead18fa2c57528fd7308bf"><td class="memItemLeft" align="right" valign="top"><a id="a6966f3eb34ead18fa2c57528fd7308bf" name="a6966f3eb34ead18fa2c57528fd7308bf"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;</b> (const <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; const T &gt; &amp;other) const</td></tr>
<tr class="memdesc:a6966f3eb34ead18fa2c57528fd7308bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the two arrays for less. <br /></td></tr>
<tr class="separator:a6966f3eb34ead18fa2c57528fd7308bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f9c67ad2a0f43986e8bbc35dc5f2ab3" id="r_a6f9c67ad2a0f43986e8bbc35dc5f2ab3"><td class="memItemLeft" align="right" valign="top"><a id="a6f9c67ad2a0f43986e8bbc35dc5f2ab3" name="a6f9c67ad2a0f43986e8bbc35dc5f2ab3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>CopyFrom</b> (const <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; const T &gt; &amp;other)</td></tr>
<tr class="memdesc:a6f9c67ad2a0f43986e8bbc35dc5f2ab3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>other</em> into this array. The arrays must have the exact same size. <br /></td></tr>
<tr class="separator:a6f9c67ad2a0f43986e8bbc35dc5f2ab3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48d2a99ec6b59d294c52caea064d5b9d" id="r_a48d2a99ec6b59d294c52caea064d5b9d"><td class="memItemLeft" align="right" valign="top"><a id="a48d2a99ec6b59d294c52caea064d5b9d" name="a48d2a99ec6b59d294c52caea064d5b9d"></a>
EZ_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><b>Swap</b> (<a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; T &gt; &amp;other)</td></tr>
<tr class="separator:a48d2a99ec6b59d294c52caea064d5b9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a821667d4a33df54cd05e328df2a822e1" id="r_a821667d4a33df54cd05e328df2a822e1"><td class="memItemLeft" align="right" valign="top"><a id="a821667d4a33df54cd05e328df2a822e1" name="a821667d4a33df54cd05e328df2a822e1"></a>
EZ_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>Contains</b> (const T &amp;value) const</td></tr>
<tr class="memdesc:a821667d4a33df54cd05e328df2a822e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given value can be found in the array. O(n) complexity. <br /></td></tr>
<tr class="separator:a821667d4a33df54cd05e328df2a822e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68cc9ff010e3fa4ced3a59ab76f3f460" id="r_a68cc9ff010e3fa4ced3a59ab76f3f460"><td class="memItemLeft" align="right" valign="top"><a id="a68cc9ff010e3fa4ced3a59ab76f3f460" name="a68cc9ff010e3fa4ced3a59ab76f3f460"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>IndexOf</b> (const T &amp;value, ezUInt32 uiStartIndex=0) const</td></tr>
<tr class="memdesc:a68cc9ff010e3fa4ced3a59ab76f3f460"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for the first occurrence of the given value and returns its index or ezInvalidIndex if not found. <br /></td></tr>
<tr class="separator:a68cc9ff010e3fa4ced3a59ab76f3f460"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a655dfb1bf410d067ee9410d6986012fe" id="r_a655dfb1bf410d067ee9410d6986012fe"><td class="memItemLeft" align="right" valign="top"><a id="a655dfb1bf410d067ee9410d6986012fe" name="a655dfb1bf410d067ee9410d6986012fe"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>LastIndexOf</b> (const T &amp;value, ezUInt32 uiStartIndex=ezInvalidIndex) const</td></tr>
<tr class="memdesc:a655dfb1bf410d067ee9410d6986012fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for the last occurrence of the given value and returns its index or ezInvalidIndex if not found. <br /></td></tr>
<tr class="separator:a655dfb1bf410d067ee9410d6986012fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename T&gt;<br />
class ezArrayPtr&lt; T &gt;</div><p>This class encapsulates an array and it's size. It is recommended to use this class instead of plain C arrays. </p>
<p>No data is deallocated at destruction, the <a class="el" href="../../dc/dae/classez_array_ptr.htm" title="This class encapsulates an array and it&#39;s size. It is recommended to use this class instead of plain ...">ezArrayPtr</a> only allows for easier access. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a908aab214cf50364fe5705a37ca6f127" name="a908aab214cf50364fe5705a37ca6f127"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a908aab214cf50364fe5705a37ca6f127">&#9670;&#160;</a></span>GetSubArray()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">EZ_FORCE_INLINE <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; T &gt; <a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a>&lt; T &gt;::GetSubArray </td>
          <td>(</td>
          <td class="paramtype">ezUInt32&#160;</td>
          <td class="paramname"><em>uiStart</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a sub-array from this array. </p>
<dl class="section note"><dt>Note</dt><dd><div class="fragment"><div class="line">ap.GetSubArray(i) </div>
</div><!-- fragment --> is equivalent to <div class="fragment"><div class="line">ap.GetSubArray(i, ap.GetCount() - i) </div>
</div><!-- fragment -->. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Types/<a class="el" href="../../d0/d20/_array_ptr_8h_source.htm">ArrayPtr.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:17:57 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
