<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezDataDirectoryType Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('dc/de0/classez_data_directory_type.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../da/da5/classez_data_directory_type-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezDataDirectoryType Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>The base class for all data directory types.  
 <a href="../../dc/de0/classez_data_directory_type.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d7/db1/_data_dir_type_8h_source.htm">DataDirType.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ezDataDirectoryType:</div>
<div class="dyncontent">
<div class="center"><img src="../../d6/d92/classez_data_directory_type__inherit__graph.png" border="0" usemap="#ez_data_directory_type_inherit__map" alt="Inheritance graph"/></div>
<map name="ez_data_directory_type_inherit__map" id="ez_data_directory_type_inherit__map">
<area shape="rect" title="The base class for all data directory types." alt="" coords="151,5,309,32"/>
<area shape="rect" href="../../d1/d49/classez_data_directory_1_1_archive_type.htm" title=" " alt="" coords="5,80,220,107"/>
<area shape="rect" href="../../de/d23/classez_data_directory_1_1_folder_type.htm" title="A data directory type to handle access to ordinary files." alt="" coords="245,80,450,107"/>
<area shape="rect" href="../../df/d4e/classez_data_directory_1_1_fileserve_type.htm" title="A data directory type to handle access to files that are served from a network host." alt="" coords="235,155,459,181"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a238e7c9cc655598aa4328318c104ff40"><td class="memItemLeft" align="right" valign="top"><a id="a238e7c9cc655598aa4328318c104ff40"></a>
const <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezString128</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de0/classez_data_directory_type.htm#a238e7c9cc655598aa4328318c104ff40">GetDataDirectoryPath</a> () const</td></tr>
<tr class="memdesc:a238e7c9cc655598aa4328318c104ff40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the absolute path to the data directory. <br /></td></tr>
<tr class="separator:a238e7c9cc655598aa4328318c104ff40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac84c1865cf2f0893567027229009a5b5"><td class="memItemLeft" align="right" valign="top"><a id="ac84c1865cf2f0893567027229009a5b5"></a>
virtual const <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezString128</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de0/classez_data_directory_type.htm#ac84c1865cf2f0893567027229009a5b5">GetRedirectedDataDirectoryPath</a> () const</td></tr>
<tr class="memdesc:ac84c1865cf2f0893567027229009a5b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">By default this is the same as <a class="el" href="../../dc/de0/classez_data_directory_type.htm#a238e7c9cc655598aa4328318c104ff40" title="Returns the absolute path to the data directory.">GetDataDirectoryPath()</a>, but derived implementations may use a different location where they actually get the files from. <br /></td></tr>
<tr class="separator:ac84c1865cf2f0893567027229009a5b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1ac774a55be232c5f35cb78ff8e258d"><td class="memItemLeft" align="right" valign="top"><a id="aa1ac774a55be232c5f35cb78ff8e258d"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de0/classez_data_directory_type.htm#aa1ac774a55be232c5f35cb78ff8e258d">ReloadExternalConfigs</a> ()</td></tr>
<tr class="memdesc:aa1ac774a55be232c5f35cb78ff8e258d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Some data directory types may use external configuration files (e.g. asset lookup tables) that may get updated, while the directory is mounted. This function allows each directory type to implement reloading and reapplying of configurations, without dismounting and remounting the data directory. <br /></td></tr>
<tr class="separator:aa1ac774a55be232c5f35cb78ff8e258d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a17b44ad6347b4674820bbf3187b8e506"><td class="memItemLeft" align="right" valign="top"><a id="a17b44ad6347b4674820bbf3187b8e506"></a>
<a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de0/classez_data_directory_type.htm#a17b44ad6347b4674820bbf3187b8e506">InitializeDataDirectory</a> (const char *szDataDirPath)</td></tr>
<tr class="memdesc:a17b44ad6347b4674820bbf3187b8e506"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to setup the data directory. Can fail, if the type is incorrect (e.g. a ZIP file data directory type cannot handle a simple folder and vice versa) <br /></td></tr>
<tr class="separator:a17b44ad6347b4674820bbf3187b8e506"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9f676a4d7d2fc3d6380eb1f98267d1a"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d9/de4/classez_data_directory_reader.htm">ezDataDirectoryReader</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de0/classez_data_directory_type.htm#aa9f676a4d7d2fc3d6380eb1f98267d1a">OpenFileToRead</a> (const char *szFile, <a class="el" href="../../d1/dc7/structez_file_share_mode.htm#ac456d922b1a94be53ae1fdd50916739c">ezFileShareMode::Enum</a> FileShareMode, bool bSpecificallyThisDataDir)=0</td></tr>
<tr class="memdesc:aa9f676a4d7d2fc3d6380eb1f98267d1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Must be implemented to create a <a class="el" href="../../d9/de4/classez_data_directory_reader.htm" title="A base class for readers that handle reading from a (virtual) file inside a data directory.">ezDataDirectoryReader</a> for accessing the given file. Returns nullptr if the file could not be opened.  <a href="../../dc/de0/classez_data_directory_type.htm#aa9f676a4d7d2fc3d6380eb1f98267d1a">More...</a><br /></td></tr>
<tr class="separator:aa9f676a4d7d2fc3d6380eb1f98267d1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a516273e2a17f1a7d0420c9d54de7df30"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d1/dd8/classez_data_directory_writer.htm">ezDataDirectoryWriter</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de0/classez_data_directory_type.htm#a516273e2a17f1a7d0420c9d54de7df30">OpenFileToWrite</a> (const char *szFile, <a class="el" href="../../d1/dc7/structez_file_share_mode.htm#ac456d922b1a94be53ae1fdd50916739c">ezFileShareMode::Enum</a> FileShareMode)</td></tr>
<tr class="memdesc:a516273e2a17f1a7d0420c9d54de7df30"><td class="mdescLeft">&#160;</td><td class="mdescRight">Must be implemented to create a <a class="el" href="../../d1/dd8/classez_data_directory_writer.htm" title="A base class for writers that handle writing to a (virtual) file inside a data directory.">ezDataDirectoryWriter</a> for accessing the given file. Returns nullptr if the file could not be opened.  <a href="../../dc/de0/classez_data_directory_type.htm#a516273e2a17f1a7d0420c9d54de7df30">More...</a><br /></td></tr>
<tr class="separator:a516273e2a17f1a7d0420c9d54de7df30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1469afee9a85fdb00add7d4914030602"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de0/classez_data_directory_type.htm#a1469afee9a85fdb00add7d4914030602">RemoveDataDirectory</a> ()=0</td></tr>
<tr class="memdesc:a1469afee9a85fdb00add7d4914030602"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is called by the filesystem when a data directory is removed.  <a href="../../dc/de0/classez_data_directory_type.htm#a1469afee9a85fdb00add7d4914030602">More...</a><br /></td></tr>
<tr class="separator:a1469afee9a85fdb00add7d4914030602"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ceb2f3ba7e47538fc5c1a645da87a83"><td class="memItemLeft" align="right" valign="top"><a id="a8ceb2f3ba7e47538fc5c1a645da87a83"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de0/classez_data_directory_type.htm#a8ceb2f3ba7e47538fc5c1a645da87a83">DeleteFile</a> (const char *szFile)</td></tr>
<tr class="memdesc:a8ceb2f3ba7e47538fc5c1a645da87a83"><td class="mdescLeft">&#160;</td><td class="mdescRight">If a Data Directory Type supports it, this function will remove the given file from it. <br /></td></tr>
<tr class="separator:a8ceb2f3ba7e47538fc5c1a645da87a83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa33d97c126668cd4901d8e73942b8f08"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de0/classez_data_directory_type.htm#aa33d97c126668cd4901d8e73942b8f08">ExistsFile</a> (const char *szFile, bool bOneSpecificDataDir)</td></tr>
<tr class="memdesc:aa33d97c126668cd4901d8e73942b8f08"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function checks whether the given file exists in this data directory.  <a href="../../dc/de0/classez_data_directory_type.htm#aa33d97c126668cd4901d8e73942b8f08">More...</a><br /></td></tr>
<tr class="separator:aa33d97c126668cd4901d8e73942b8f08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2b8da562af0ba5248bb0c2bf2c805bd"><td class="memItemLeft" align="right" valign="top"><a id="ac2b8da562af0ba5248bb0c2bf2c805bd"></a>
virtual <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de0/classez_data_directory_type.htm#ac2b8da562af0ba5248bb0c2bf2c805bd">GetFileStats</a> (const char *szFileOrFolder, bool bOneSpecificDataDir, <a class="el" href="../../de/d41/structez_file_stats.htm">ezFileStats</a> &amp;out_Stats)=0</td></tr>
<tr class="memdesc:ac2b8da562af0ba5248bb0c2bf2c805bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Upon success returns the <a class="el" href="../../de/d41/structez_file_stats.htm" title="Holds the stats for a file.">ezFileStats</a> for a file in this data directory. <br /></td></tr>
<tr class="separator:ac2b8da562af0ba5248bb0c2bf2c805bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a943842bc4e35cdcd4e33712f329551a4"><td class="memItemLeft" align="right" valign="top"><a id="a943842bc4e35cdcd4e33712f329551a4"></a>
virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de0/classez_data_directory_type.htm#a943842bc4e35cdcd4e33712f329551a4">ResolveAssetRedirection</a> (const char *szPathOrAssetGuid, <a class="el" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> &amp;out_sRedirection)</td></tr>
<tr class="memdesc:a943842bc4e35cdcd4e33712f329551a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">If this data directory knows how to redirect the given path, it should do so and return true. Called by <a class="el" href="../../d4/d6b/classez_file_system.htm#a11f1bee4526ba7f123652d00d68d1ed6" title="Returns true, if any data directory knows how to redirect the given path. Otherwise the original stri...">ezFileSystem::ResolveAssetRedirection</a>. <br /></td></tr>
<tr class="separator:a943842bc4e35cdcd4e33712f329551a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a84f2247f65fc90191b777fe8211901"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de0/classez_data_directory_type.htm#a1a84f2247f65fc90191b777fe8211901">OnReaderWriterClose</a> (<a class="el" href="../../d2/d00/classez_data_directory_reader_writer_base.htm">ezDataDirectoryReaderWriterBase</a> *pClosed)</td></tr>
<tr class="memdesc:a1a84f2247f65fc90191b777fe8211901"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is automatically called whenever a <a class="el" href="../../d2/d00/classez_data_directory_reader_writer_base.htm" title="This is the base class for all data directory readers/writers.">ezDataDirectoryReaderWriterBase</a> that was opened by this type is being closed.  <a href="../../dc/de0/classez_data_directory_type.htm#a1a84f2247f65fc90191b777fe8211901">More...</a><br /></td></tr>
<tr class="separator:a1a84f2247f65fc90191b777fe8211901"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4b8e93e77bf9ec3a64cef999e3e65a5"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de0/classez_data_directory_type.htm#aa4b8e93e77bf9ec3a64cef999e3e65a5">InternalInitializeDataDirectory</a> (const char *szDirectory)=0</td></tr>
<tr class="memdesc:aa4b8e93e77bf9ec3a64cef999e3e65a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function should only be used by a Factory (which should be a static function in the respective <a class="el" href="../../dc/de0/classez_data_directory_type.htm" title="The base class for all data directory types.">ezDataDirectoryType</a>).  <a href="../../dc/de0/classez_data_directory_type.htm#aa4b8e93e77bf9ec3a64cef999e3e65a5">More...</a><br /></td></tr>
<tr class="separator:aa4b8e93e77bf9ec3a64cef999e3e65a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:afce8a1facddf2be0eb2761a051f330e8"><td class="memItemLeft" align="right" valign="top"><a id="afce8a1facddf2be0eb2761a051f330e8"></a>
<a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezString128</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de0/classez_data_directory_type.htm#afce8a1facddf2be0eb2761a051f330e8">m_sDataDirectoryPath</a></td></tr>
<tr class="memdesc:afce8a1facddf2be0eb2761a051f330e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Derived classes can use 'GetDataDirectoryPath' to access this data. <br /></td></tr>
<tr class="separator:afce8a1facddf2be0eb2761a051f330e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a5f233dfa2d231fa5d152946b6291d3a4"><td class="memItemLeft" align="right" valign="top"><a id="a5f233dfa2d231fa5d152946b6291d3a4"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>ezFileSystem</b></td></tr>
<tr class="separator:a5f233dfa2d231fa5d152946b6291d3a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed1bd187024d6a990a59b3c70b883344"><td class="memItemLeft" align="right" valign="top"><a id="aed1bd187024d6a990a59b3c70b883344"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>ezDataDirectoryReaderWriterBase</b></td></tr>
<tr class="separator:aed1bd187024d6a990a59b3c70b883344"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The base class for all data directory types. </p>
<p>There are different data directory types, such as a simple folder, a ZIP file or some kind of library (e.g. image files from procedural data). Even a HTTP server that actually transmits files over a network can provided by implementing it as a data directory type. Data directories are added through <a class="el" href="../../d4/d6b/classez_file_system.htm" title="The ezFileSystem provides high-level functionality to manage files in a virtual file system.">ezFileSystem</a>, which uses factories to decide which <a class="el" href="../../dc/de0/classez_data_directory_type.htm" title="The base class for all data directory types.">ezDataDirectoryType</a> to use for handling which data directory. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="aa33d97c126668cd4901d8e73942b8f08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa33d97c126668cd4901d8e73942b8f08">&#9670;&nbsp;</a></span>ExistsFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ezDataDirectoryType::ExistsFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szFile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bOneSpecificDataDir</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This function checks whether the given file exists in this data directory. </p>
<p>The default implementation simply calls <a class="el" href="../../db/d00/classez_o_s_file.htm#a5e5e7411d47ffde7ef30c8e9550e364c" title="Checks whether the given file exists.">ezOSFile::ExistsFile</a> An optimized implementation might look this information up in some hash-map. </p>

<p>Reimplemented in <a class="el" href="../../de/d23/classez_data_directory_1_1_folder_type.htm#adf243fb85f8cc1ac433e27a3e87989ba">ezDataDirectory::FolderType</a>, <a class="el" href="../../df/d4e/classez_data_directory_1_1_fileserve_type.htm#a862a906ea12410e0d09027c041692a15">ezDataDirectory::FileserveType</a>, and <a class="el" href="../../d1/d49/classez_data_directory_1_1_archive_type.htm#a97ec3e942abc22b4013203647aaea473">ezDataDirectory::ArchiveType</a>.</p>

</div>
</div>
<a id="aa4b8e93e77bf9ec3a64cef999e3e65a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4b8e93e77bf9ec3a64cef999e3e65a5">&#9670;&nbsp;</a></span>InternalInitializeDataDirectory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d4/da9/structez_result.htm">ezResult</a> ezDataDirectoryType::InternalInitializeDataDirectory </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szDirectory</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This function should only be used by a Factory (which should be a static function in the respective <a class="el" href="../../dc/de0/classez_data_directory_type.htm" title="The base class for all data directory types.">ezDataDirectoryType</a>). </p>
<p>It is used to initialize the data directory. If this <a class="el" href="../../dc/de0/classez_data_directory_type.htm" title="The base class for all data directory types.">ezDataDirectoryType</a> cannot handle the given type, it must return EZ_FAILURE and the Factory needs to clean it up properly. </p>

<p>Implemented in <a class="el" href="../../de/d23/classez_data_directory_1_1_folder_type.htm#abde2206958f5e281ee2540571ec90fce">ezDataDirectory::FolderType</a>, <a class="el" href="../../df/d4e/classez_data_directory_1_1_fileserve_type.htm#aa284733a8f0843d113683a37f9590167">ezDataDirectory::FileserveType</a>, and <a class="el" href="../../d1/d49/classez_data_directory_1_1_archive_type.htm#aa1782286dc7df15a044d3250f3eb697d">ezDataDirectory::ArchiveType</a>.</p>

</div>
</div>
<a id="a1a84f2247f65fc90191b777fe8211901"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a84f2247f65fc90191b777fe8211901">&#9670;&nbsp;</a></span>OnReaderWriterClose()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void ezDataDirectoryType::OnReaderWriterClose </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d2/d00/classez_data_directory_reader_writer_base.htm">ezDataDirectoryReaderWriterBase</a> *&#160;</td>
          <td class="paramname"><em>pClosed</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This is automatically called whenever a <a class="el" href="../../d2/d00/classez_data_directory_reader_writer_base.htm" title="This is the base class for all data directory readers/writers.">ezDataDirectoryReaderWriterBase</a> that was opened by this type is being closed. </p>
<p>It allows the <a class="el" href="../../dc/de0/classez_data_directory_type.htm" title="The base class for all data directory types.">ezDataDirectoryType</a> to return the reader/writer to a pool of reusable objects, or to destroy it using the proper allocator. </p>

<p>Reimplemented in <a class="el" href="../../de/d23/classez_data_directory_1_1_folder_type.htm#ad186635f31be6ae5c88b07543f901e34">ezDataDirectory::FolderType</a>, and <a class="el" href="../../d1/d49/classez_data_directory_1_1_archive_type.htm#aabf5a82dc6b75690334671f360f0a726">ezDataDirectory::ArchiveType</a>.</p>

</div>
</div>
<a id="aa9f676a4d7d2fc3d6380eb1f98267d1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9f676a4d7d2fc3d6380eb1f98267d1a">&#9670;&nbsp;</a></span>OpenFileToRead()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d9/de4/classez_data_directory_reader.htm">ezDataDirectoryReader</a>* ezDataDirectoryType::OpenFileToRead </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szFile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d1/dc7/structez_file_share_mode.htm#ac456d922b1a94be53ae1fdd50916739c">ezFileShareMode::Enum</a>&#160;</td>
          <td class="paramname"><em>FileShareMode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bSpecificallyThisDataDir</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Must be implemented to create a <a class="el" href="../../d9/de4/classez_data_directory_reader.htm" title="A base class for readers that handle reading from a (virtual) file inside a data directory.">ezDataDirectoryReader</a> for accessing the given file. Returns nullptr if the file could not be opened. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">szFile</td><td>is given as a path relative to the data directory's path. So unless the data directory path is empty, this will never be an absolute path. If a rooted path was given, the root name is also removed and only the relative part is passed along. </td></tr>
    <tr><td class="paramname">bSpecificallyThisDataDir</td><td>This is true when the original path specified to open the file through exactly this data directory, by using a rooted path. If an absolute path is used, which incidentally matches the prefix of this data directory, bSpecificallyThisDataDir is NOT set to true, as there might be other data directories that also match. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="../../de/d23/classez_data_directory_1_1_folder_type.htm#ac796c014e9227ec28d39f591aa10bb98">ezDataDirectory::FolderType</a>, <a class="el" href="../../df/d4e/classez_data_directory_1_1_fileserve_type.htm#ad2bbd86973630b3f92beefff1886b701">ezDataDirectory::FileserveType</a>, and <a class="el" href="../../d1/d49/classez_data_directory_1_1_archive_type.htm#a3ee38e8dee27543cc3f9d88dc2b53c22">ezDataDirectory::ArchiveType</a>.</p>

</div>
</div>
<a id="a516273e2a17f1a7d0420c9d54de7df30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a516273e2a17f1a7d0420c9d54de7df30">&#9670;&nbsp;</a></span>OpenFileToWrite()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d1/dd8/classez_data_directory_writer.htm">ezDataDirectoryWriter</a>* ezDataDirectoryType::OpenFileToWrite </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szFile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d1/dc7/structez_file_share_mode.htm#ac456d922b1a94be53ae1fdd50916739c">ezFileShareMode::Enum</a>&#160;</td>
          <td class="paramname"><em>FileShareMode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Must be implemented to create a <a class="el" href="../../d1/dd8/classez_data_directory_writer.htm" title="A base class for writers that handle writing to a (virtual) file inside a data directory.">ezDataDirectoryWriter</a> for accessing the given file. Returns nullptr if the file could not be opened. </p>
<p>If it always returns nullptr (default) the data directory is read-only (at least through this type). </p>

<p>Reimplemented in <a class="el" href="../../de/d23/classez_data_directory_1_1_folder_type.htm#aa8c35b0f8e99937959a758495952beb6">ezDataDirectory::FolderType</a>, and <a class="el" href="../../df/d4e/classez_data_directory_1_1_fileserve_type.htm#ae474029932f1a8e8ec9960daefc5ea9a">ezDataDirectory::FileserveType</a>.</p>

</div>
</div>
<a id="a1469afee9a85fdb00add7d4914030602"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1469afee9a85fdb00add7d4914030602">&#9670;&nbsp;</a></span>RemoveDataDirectory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void ezDataDirectoryType::RemoveDataDirectory </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This function is called by the filesystem when a data directory is removed. </p>
<p>It should delete itself using the proper allocator. </p>

<p>Implemented in <a class="el" href="../../de/d23/classez_data_directory_1_1_folder_type.htm#a3ed22de1f9a4273933d46fe7b1227270">ezDataDirectory::FolderType</a>, <a class="el" href="../../df/d4e/classez_data_directory_1_1_fileserve_type.htm#a95f81ce5c03b3909a6d071ffd7f89367">ezDataDirectory::FileserveType</a>, and <a class="el" href="../../d1/d49/classez_data_directory_1_1_archive_type.htm#ad1fd9b1f9062aef136f8f8861835eb37">ezDataDirectory::ArchiveType</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/IO/FileSystem/Implementation/<a class="el" href="../../d7/db1/_data_dir_type_8h_source.htm">DataDirType.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/IO/FileSystem/Implementation/DataDirType.cpp</li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dc/de0/classez_data_directory_type.htm">ezDataDirectoryType</a></li>
    <li class="footer">Generated on Fri Nov 18 2022 14:48:06 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
