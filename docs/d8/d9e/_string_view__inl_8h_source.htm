<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Strings/Implementation/StringView_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 25.03</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d8/d9e/_string_view__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">StringView_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;EZ_ALWAYS_INLINE constexpr <a class="code" href="../../d9/d18/classez_string_view.htm#aef334b813854953301fac01f9bb528e4">ezStringView::ezStringView</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#a0de54eddfae21b40f1155002e92706df">    5</a></span>&#160;EZ_ALWAYS_INLINE <a class="code" href="../../d9/d18/classez_string_view.htm#aef334b813854953301fac01f9bb528e4">ezStringView::ezStringView</a>(<span class="keywordtype">char</span>* pStart)</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;  : m_pStart(pStart)</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  , m_uiElementCount(<a class="code" href="../../de/df8/classez_string_utils.htm">ezStringUtils</a>::GetStringElementCount(pStart))</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;{</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;}</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;constexpr EZ_ALWAYS_INLINE <a class="code" href="../../d9/d18/classez_string_view.htm#aef334b813854953301fac01f9bb528e4">ezStringView::ezStringView</a>(T pStart, <span class="keyword">typename</span> std::enable_if&lt;std::is_same&lt;T, const char*&gt;::value, <span class="keywordtype">int</span>&gt;::type*)</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  : m_pStart(pStart)</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  , m_uiElementCount(<a class="code" href="../../de/df8/classez_string_utils.htm">ezStringUtils</a>::GetStringElementCount(pStart))</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;}</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#a08b2104d7b880c1572d458e61c0b71c9">   19</a></span>&#160;constexpr EZ_ALWAYS_INLINE <a class="code" href="../../d9/d18/classez_string_view.htm#aef334b813854953301fac01f9bb528e4">ezStringView::ezStringView</a>(<span class="keyword">const</span> T&amp;&amp; str, <span class="keyword">typename</span> std::enable_if&lt;std::is_same&lt;T, const char*&gt;::value == <span class="keyword">false</span> &amp;&amp; std::is_convertible&lt;T, const char*&gt;::value, <span class="keywordtype">int</span>&gt;::type*)</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  m_pStart = str;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  m_uiElementCount = <a class="code" href="../../de/df8/classez_string_utils.htm#ac50e765fba05ee2f920e3334982eb352">ezStringUtils::GetStringElementCount</a>(m_pStart);</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;}</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#ad7e389fec92760c0c9bed56b3251092e">   25</a></span>&#160;constexpr EZ_ALWAYS_INLINE <a class="code" href="../../d9/d18/classez_string_view.htm#aef334b813854953301fac01f9bb528e4">ezStringView::ezStringView</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pStart, <span class="keyword">const</span> <span class="keywordtype">char</span>* pEnd)</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  EZ_ASSERT_DEBUG(pStart &lt;= pEnd, <span class="stringliteral">&quot;Invalid pointers to construct a string view from.&quot;</span>);</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  m_pStart = pStart;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  m_uiElementCount = <span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(pEnd - pStart);</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#ac93f33353779647f2bdcb98a417031ed">   33</a></span>&#160;constexpr EZ_ALWAYS_INLINE <a class="code" href="../../d9/d18/classez_string_view.htm#aef334b813854953301fac01f9bb528e4">ezStringView::ezStringView</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pStart, ezUInt32 uiLength)</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  : m_pStart(pStart)</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  , m_uiElementCount(uiLength)</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;constexpr EZ_ALWAYS_INLINE <a class="code" href="../../d9/d18/classez_string_view.htm#aef334b813854953301fac01f9bb528e4">ezStringView::ezStringView</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> (&amp;str)[N])</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  : m_pStart(str)</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  , m_uiElementCount(N - 1)</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  static_assert(N &gt; 0, <span class="stringliteral">&quot;Not a string literal&quot;</span>);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;constexpr EZ_ALWAYS_INLINE <a class="code" href="../../d9/d18/classez_string_view.htm#aef334b813854953301fac01f9bb528e4">ezStringView::ezStringView</a>(<span class="keywordtype">char</span> (&amp;str)[N])</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  m_pStart = str;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  m_uiElementCount = <a class="code" href="../../de/df8/classez_string_utils.htm#ac50e765fba05ee2f920e3334982eb352">ezStringUtils::GetStringElementCount</a>(str, str + N);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#a4ea95748db7896f83f8ad99860dd986c">   54</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d9/d18/classez_string_view.htm#a4ea95748db7896f83f8ad99860dd986c">ezStringView::operator++</a>()</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="keywordflow">if</span> (!<a class="code" href="../../d9/d18/classez_string_view.htm#aa4d5392f5b01ae3fb1946a135e022730">IsValid</a>())</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* pEnd = m_pStart + m_uiElementCount;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <a class="code" href="../../d9/d32/classez_unicode_utils.htm#ac5acb55d1f2131f2e2578512c6f7c1ed">ezUnicodeUtils::MoveToNextUtf8</a>(m_pStart, pEnd).<a class="code" href="../../d4/da9/structez_result.htm#acb0bb72646ee6d5966edd5b4108fb670">IgnoreResult</a>(); <span class="comment">// if it fails, the string is just empty</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  m_uiElementCount = <span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(pEnd - m_pStart);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#a50e2a948b2ed8ff6a5f05599852d9454">   64</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d9/d18/classez_string_view.htm#a50e2a948b2ed8ff6a5f05599852d9454">ezStringView::operator+=</a>(ezUInt32 d)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* pEnd = m_pStart + m_uiElementCount;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <a class="code" href="../../d9/d32/classez_unicode_utils.htm#ac5acb55d1f2131f2e2578512c6f7c1ed">ezUnicodeUtils::MoveToNextUtf8</a>(m_pStart, pEnd, d).<a class="code" href="../../d4/da9/structez_result.htm#acb0bb72646ee6d5966edd5b4108fb670">IgnoreResult</a>(); <span class="comment">// if it fails, the string is just empty</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  m_uiElementCount = <span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(pEnd - m_pStart);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#aa4d5392f5b01ae3fb1946a135e022730">   71</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d9/d18/classez_string_view.htm#aa4d5392f5b01ae3fb1946a135e022730">ezStringView::IsValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keywordflow">return</span> (m_pStart != <span class="keyword">nullptr</span>) &amp;&amp; (m_uiElementCount &gt; 0);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#a4be27a339b6312054be93ea72da17148">   76</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d9/d18/classez_string_view.htm#a4be27a339b6312054be93ea72da17148">ezStringView::SetStartPosition</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szCurPos)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  EZ_ASSERT_DEV((szCurPos &gt;= m_pStart) &amp;&amp; (szCurPos &lt;= m_pStart + m_uiElementCount), <span class="stringliteral">&quot;New start position must still be inside the view&#39;s range.&quot;</span>);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* pEnd = m_pStart + m_uiElementCount;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  m_pStart = szCurPos;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  m_uiElementCount = <span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(pEnd - m_pStart);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#aef316bf81fe0a6e03731aef7a47c7dd4">   85</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d9/d18/classez_string_view.htm#aef316bf81fe0a6e03731aef7a47c7dd4">ezStringView::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordflow">return</span> m_uiElementCount == 0;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#ac5bbc247c663689d4bacd1278db889ed">   90</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d9/d18/classez_string_view.htm#ac5bbc247c663689d4bacd1278db889ed">ezStringView::IsEqual</a>(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther)<span class="keyword"> const</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#aa1b8c125ced33a6a904f741597ecc673">ezStringUtils::IsEqual</a>(m_pStart, sOther.<a class="code" href="../../d9/d18/classez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">GetStartPointer</a>(), m_pStart + m_uiElementCount, sOther.<a class="code" href="../../d9/d18/classez_string_view.htm#aeb4fee979aa7e71f8c3596fb342ad2bc">GetEndPointer</a>());</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#a16a8c4afbb2f05aa5d912924b18aa572">   95</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d9/d18/classez_string_view.htm#a16a8c4afbb2f05aa5d912924b18aa572">ezStringView::IsEqual_NoCase</a>(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sOther)<span class="keyword"> const</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a5a375be30fe22c27368c0b2801e6c0b0">ezStringUtils::IsEqual_NoCase</a>(m_pStart, sOther.<a class="code" href="../../d9/d18/classez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">GetStartPointer</a>(), m_pStart + m_uiElementCount, sOther.<a class="code" href="../../d9/d18/classez_string_view.htm#aeb4fee979aa7e71f8c3596fb342ad2bc">GetEndPointer</a>());</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#a62c28cee3c7cefb5dc5237151a46091e">  100</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d9/d18/classez_string_view.htm#a62c28cee3c7cefb5dc5237151a46091e">ezStringView::StartsWith</a>(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sStartsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a7b418cc21bcbebde0942157e9026d2a4">ezStringUtils::StartsWith</a>(m_pStart, sStartsWith.<a class="code" href="../../d9/d18/classez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">GetStartPointer</a>(), m_pStart + m_uiElementCount, sStartsWith.<a class="code" href="../../d9/d18/classez_string_view.htm#aeb4fee979aa7e71f8c3596fb342ad2bc">GetEndPointer</a>());</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#a6d9972bb83ef029b5232d478d478ff70">  105</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d9/d18/classez_string_view.htm#a6d9972bb83ef029b5232d478d478ff70">ezStringView::StartsWith_NoCase</a>(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sStartsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a9a76bb518ebebf3971f367a478a387c3">ezStringUtils::StartsWith_NoCase</a>(m_pStart, sStartsWith.<a class="code" href="../../d9/d18/classez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">GetStartPointer</a>(), m_pStart + m_uiElementCount, sStartsWith.<a class="code" href="../../d9/d18/classez_string_view.htm#aeb4fee979aa7e71f8c3596fb342ad2bc">GetEndPointer</a>());</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#a4a89055f6790317ba22262b4eea73bc0">  110</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d9/d18/classez_string_view.htm#a4a89055f6790317ba22262b4eea73bc0">ezStringView::EndsWith</a>(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sEndsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a347b438581d998a7ae158c57ceca1adf">ezStringUtils::EndsWith</a>(m_pStart, sEndsWith.<a class="code" href="../../d9/d18/classez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">GetStartPointer</a>(), m_pStart + m_uiElementCount, sEndsWith.<a class="code" href="../../d9/d18/classez_string_view.htm#aeb4fee979aa7e71f8c3596fb342ad2bc">GetEndPointer</a>());</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#a1663ad728003e533bd8d70f11fc4e12d">  115</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d9/d18/classez_string_view.htm#a1663ad728003e533bd8d70f11fc4e12d">ezStringView::EndsWith_NoCase</a>(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> sEndsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../de/df8/classez_string_utils.htm#a22bea564b8ddd615f8b24886ae566397">ezStringUtils::EndsWith_NoCase</a>(m_pStart, sEndsWith.<a class="code" href="../../d9/d18/classez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">GetStartPointer</a>(), m_pStart + m_uiElementCount, sEndsWith.<a class="code" href="../../d9/d18/classez_string_view.htm#aeb4fee979aa7e71f8c3596fb342ad2bc">GetEndPointer</a>());</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#aace5e02ef31cba6e51bb6e88bd8e7393">  120</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d9/d18/classez_string_view.htm#aace5e02ef31cba6e51bb6e88bd8e7393">ezStringView::Trim</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szTrimChars)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d9/d18/classez_string_view.htm#aace5e02ef31cba6e51bb6e88bd8e7393">Trim</a>(szTrimChars, szTrimChars);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#af7921e770e8ca3ee0205a4d8e4bf6400">  125</a></span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d9/d18/classez_string_view.htm#aace5e02ef31cba6e51bb6e88bd8e7393">ezStringView::Trim</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szTrimCharsStart, <span class="keyword">const</span> <span class="keywordtype">char</span>* szTrimCharsEnd)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../d9/d18/classez_string_view.htm#aa4d5392f5b01ae3fb1946a135e022730">IsValid</a>())</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* pEnd = m_pStart + m_uiElementCount;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="../../de/df8/classez_string_utils.htm#accbc0437beaf0f2ee1907522caf628e4">ezStringUtils::Trim</a>(m_pStart, pEnd, szTrimCharsStart, szTrimCharsEnd);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    m_uiElementCount = <span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(pEnd - m_pStart);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;constexpr EZ_ALWAYS_INLINE <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _ezsv(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString, <span class="keywordtype">size_t</span> uiLen)</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;{</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a>(pString, <span class="keyword">static_cast&lt;</span>ezUInt32<span class="keyword">&gt;</span>(uiLen));</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_string_view.htm#a71ee9cb36548392c2f6998d1ced4c34f">  141</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d9/d18/classez_string_view.htm#a71ee9cb36548392c2f6998d1ced4c34f">ezStringView::Split</a>(<span class="keywordtype">bool</span> bReturnEmptyStrings, Container&amp; ref_output, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator1, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator2 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator3 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator4 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator5 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator6 <span class="comment">/*= nullptr*/</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  ref_output.Clear();</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../d9/d18/classez_string_view.htm#aef316bf81fe0a6e03731aef7a47c7dd4">IsEmpty</a>())</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  <span class="keyword">const</span> ezUInt32 uiParams = 6;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> seps[uiParams] = {szSeparator1, szSeparator2, szSeparator3, szSeparator4, szSeparator5, szSeparator6};</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* szReadPos = <a class="code" href="../../d9/d18/classez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">GetStartPointer</a>();</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  <span class="keywordflow">while</span> (<span class="keyword">true</span>)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* szFoundPos = ezUnicodeUtils::GetMaxStringEnd&lt;char&gt;();</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    ezUInt32 uiFoundSeparator = 0;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; uiParams; ++i)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">char</span>* szFound = <a class="code" href="../../de/df8/classez_string_utils.htm#a4e7bb80c9b5b1bc468d88e70379895ff">ezStringUtils::FindSubString</a>(szReadPos, seps[i].<a class="code" href="../../d9/d18/classez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">GetStartPointer</a>(), <a class="code" href="../../d9/d18/classez_string_view.htm#aeb4fee979aa7e71f8c3596fb342ad2bc">GetEndPointer</a>(), seps[i].<a class="code" href="../../d9/d18/classez_string_view.htm#aeb4fee979aa7e71f8c3596fb342ad2bc">GetEndPointer</a>());</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      <span class="keywordflow">if</span> ((szFound != <span class="keyword">nullptr</span>) &amp;&amp; (szFound &lt; szFoundPos))</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        szFoundPos = szFound;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        uiFoundSeparator = i;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="comment">// nothing found</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">if</span> (szFoundPos == ezUnicodeUtils::GetMaxStringEnd&lt;char&gt;())</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      <span class="keyword">const</span> ezUInt32 uiLen = <a class="code" href="../../de/df8/classez_string_utils.htm#ac50e765fba05ee2f920e3334982eb352">ezStringUtils::GetStringElementCount</a>(szReadPos, <a class="code" href="../../d9/d18/classez_string_view.htm#aeb4fee979aa7e71f8c3596fb342ad2bc">GetEndPointer</a>());</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;      <span class="keywordflow">if</span> (bReturnEmptyStrings || (uiLen &gt; 0))</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        ref_output.PushBack(<a class="code" href="../../d9/d18/classez_string_view.htm#aef334b813854953301fac01f9bb528e4">ezStringView</a>(szReadPos, szReadPos + uiLen));</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">if</span> (bReturnEmptyStrings || (szFoundPos &gt; szReadPos))</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;      ref_output.PushBack(<a class="code" href="../../d9/d18/classez_string_view.htm#aef334b813854953301fac01f9bb528e4">ezStringView</a>(szReadPos, szFoundPos));</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    szReadPos = szFoundPos + seps[uiFoundSeparator].<a class="code" href="../../d9/d18/classez_string_view.htm#a64dec920b26c9df50ea139826fcdd448">GetElementCount</a>();</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;}</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> lhs, <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> rhs)</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;{</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../d9/d18/classez_string_view.htm#ac5bbc247c663689d4bacd1278db889ed">IsEqual</a>(rhs);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="preprocessor">#if EZ_DISABLED(EZ_USE_CPP20_OPERATORS)</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> lhs, <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> rhs)</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;{</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  <span class="keywordflow">return</span> !lhs.<a class="code" href="../../d9/d18/classez_string_view.htm#ac5bbc247c663689d4bacd1278db889ed">IsEqual</a>(rhs);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;}</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_USE_CPP20_OPERATORS)</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;EZ_ALWAYS_INLINE std::strong_ordering operator&lt;=&gt;(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> lhs, <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> rhs)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;{</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../d9/d18/classez_string_view.htm#a10c06c013c9ac651e4927e52e6ab9662">Compare</a>(rhs) &lt;=&gt; 0;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;}</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> lhs, <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> rhs)</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;{</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../d9/d18/classez_string_view.htm#a10c06c013c9ac651e4927e52e6ab9662">Compare</a>(rhs) &lt; 0;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;=(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> lhs, <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> rhs)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;{</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../d9/d18/classez_string_view.htm#a10c06c013c9ac651e4927e52e6ab9662">Compare</a>(rhs) &lt;= 0;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;}</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> lhs, <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> rhs)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;{</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../d9/d18/classez_string_view.htm#a10c06c013c9ac651e4927e52e6ab9662">Compare</a>(rhs) &gt; 0;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;=(<a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> lhs, <a class="code" href="../../d9/d18/classez_string_view.htm">ezStringView</a> rhs)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;{</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../d9/d18/classez_string_view.htm#a10c06c013c9ac651e4927e52e6ab9662">Compare</a>(rhs) &gt;= 0;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassez_string_utils_htm_accbc0437beaf0f2ee1907522caf628e4"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#accbc0437beaf0f2ee1907522caf628e4">ezStringUtils::Trim</a></div><div class="ttdeci">static void Trim(const char *&amp;ref_pString, const char *&amp;ref_pStringEnd, const char *szTrimCharsStart, const char *szTrimCharsEnd)</div><div class="ttdoc">Removes all characters at the start and end of the string that match the respective characters and up...</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:794</div></div>
<div class="ttc" id="aclassez_string_utils_htm_aa1b8c125ced33a6a904f741597ecc673"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#aa1b8c125ced33a6a904f741597ecc673">ezStringUtils::IsEqual</a></div><div class="ttdeci">static bool IsEqual(const char *pString1, const char *pString2, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (bitwise).</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:125</div></div>
<div class="ttc" id="aclassez_string_utils_htm_ac50e765fba05ee2f920e3334982eb352"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#ac50e765fba05ee2f920e3334982eb352">ezStringUtils::GetStringElementCount</a></div><div class="ttdeci">static constexpr ezUInt32 GetStringElementCount(const T *pString)</div><div class="ttdoc">Returns the number of elements of type T that the string contains, until it hits an element that is z...</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:45</div></div>
<div class="ttc" id="aclassez_string_view_htm_a16a8c4afbb2f05aa5d912924b18aa572"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#a16a8c4afbb2f05aa5d912924b18aa572">ezStringView::IsEqual_NoCase</a></div><div class="ttdeci">bool IsEqual_NoCase(ezStringView sOther) const</div><div class="ttdoc">Compares this string view with the other string view for equality.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:95</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a9a76bb518ebebf3971f367a478a387c3"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a9a76bb518ebebf3971f367a478a387c3">ezStringUtils::StartsWith_NoCase</a></div><div class="ttdeci">static bool StartsWith_NoCase(const char *szString, const char *szStartsWith, const char *pStringEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStartsWithEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString starts with the string given in szStartsWith. Ignores case.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:477</div></div>
<div class="ttc" id="aclassez_string_view_htm_aef334b813854953301fac01f9bb528e4"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#aef334b813854953301fac01f9bb528e4">ezStringView::ezStringView</a></div><div class="ttdeci">constexpr ezStringView()</div><div class="ttdoc">Default constructor creates an invalid view.</div></div>
<div class="ttc" id="astructez_result_htm_acb0bb72646ee6d5966edd5b4108fb670"><div class="ttname"><a href="../../d4/da9/structez_result.htm#acb0bb72646ee6d5966edd5b4108fb670">ezResult::IgnoreResult</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void IgnoreResult()</div><div class="ttdoc">Used to silence compiler warnings, when success or failure doesn't matter.</div><div class="ttdef"><b>Definition:</b> Types.h:69</div></div>
<div class="ttc" id="aclassez_string_view_htm_aeb4fee979aa7e71f8c3596fb342ad2bc"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#aeb4fee979aa7e71f8c3596fb342ad2bc">ezStringView::GetEndPointer</a></div><div class="ttdeci">const char * GetEndPointer() const</div><div class="ttdoc">Returns the end of the view range. This will point to the byte AFTER the last character.</div><div class="ttdef"><b>Definition:</b> StringView.h:108</div></div>
<div class="ttc" id="aclassez_string_view_htm_a4ea95748db7896f83f8ad99860dd986c"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#a4ea95748db7896f83f8ad99860dd986c">ezStringView::operator++</a></div><div class="ttdeci">void operator++()</div><div class="ttdoc">Advances the start to the next character, unless the end of the range was reached.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:54</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a347b438581d998a7ae158c57ceca1adf"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a347b438581d998a7ae158c57ceca1adf">ezStringUtils::EndsWith</a></div><div class="ttdeci">static bool EndsWith(const char *szString, const char *szEndsWith, const char *pStringEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szEndsWithEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString ends with the string given in szEndsWith.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:501</div></div>
<div class="ttc" id="aclassez_string_view_htm_a6d9972bb83ef029b5232d478d478ff70"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#a6d9972bb83ef029b5232d478d478ff70">ezStringView::StartsWith_NoCase</a></div><div class="ttdeci">bool StartsWith_NoCase(ezStringView sStartsWith) const</div><div class="ttdoc">Returns true, if this string starts with the given string. Case insensitive.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:105</div></div>
<div class="ttc" id="aclassez_string_utils_htm"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm">ezStringUtils</a></div><div class="ttdoc">Helper functions to work with UTF-8 strings (which include pure ASCII strings)</div><div class="ttdef"><b>Definition:</b> StringUtils.h:10</div></div>
<div class="ttc" id="aclassez_string_view_htm_aa4d5392f5b01ae3fb1946a135e022730"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#aa4d5392f5b01ae3fb1946a135e022730">ezStringView::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Returns true, if the current string pointed to is non empty.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:71</div></div>
<div class="ttc" id="aclassez_string_view_htm_ac5bbc247c663689d4bacd1278db889ed"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#ac5bbc247c663689d4bacd1278db889ed">ezStringView::IsEqual</a></div><div class="ttdeci">bool IsEqual(ezStringView sOther) const</div><div class="ttdoc">Compares this string view with the other string view for equality.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:90</div></div>
<div class="ttc" id="aclassez_string_view_htm_a10c06c013c9ac651e4927e52e6ab9662"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#a10c06c013c9ac651e4927e52e6ab9662">ezStringView::Compare</a></div><div class="ttdeci">ezInt32 Compare(ezStringView sOther) const</div><div class="ttdoc">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller',...</div><div class="ttdef"><b>Definition:</b> StringView.cpp:31</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a5a375be30fe22c27368c0b2801e6c0b0"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a5a375be30fe22c27368c0b2801e6c0b0">ezStringUtils::IsEqual_NoCase</a></div><div class="ttdeci">static bool IsEqual_NoCase(const char *pString1, const char *pString2, const char *pString1End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (case-insensitive).</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:136</div></div>
<div class="ttc" id="aclassez_string_view_htm_a64dec920b26c9df50ea139826fcdd448"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#a64dec920b26c9df50ea139826fcdd448">ezStringView::GetElementCount</a></div><div class="ttdeci">ezUInt32 GetElementCount() const</div><div class="ttdoc">Returns the number of bytes from the start position up to its end.</div><div class="ttdef"><b>Definition:</b> StringView.h:93</div></div>
<div class="ttc" id="aclassez_string_view_htm_a62c28cee3c7cefb5dc5237151a46091e"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#a62c28cee3c7cefb5dc5237151a46091e">ezStringView::StartsWith</a></div><div class="ttdeci">bool StartsWith(ezStringView sStartsWith) const</div><div class="ttdoc">Returns true, if this string starts with the given string.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:100</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a4e7bb80c9b5b1bc468d88e70379895ff"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a4e7bb80c9b5b1bc468d88e70379895ff">ezStringUtils::FindSubString</a></div><div class="ttdeci">static const char * FindSubString(const char *szSource, const char *szStringToFind, const char *pSourceEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStringToFindEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the first occurrence of szStringToFind in szSource.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:550</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a7b418cc21bcbebde0942157e9026d2a4"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a7b418cc21bcbebde0942157e9026d2a4">ezStringUtils::StartsWith</a></div><div class="ttdeci">static bool StartsWith(const char *szString, const char *szStartsWith, const char *pStringEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStartsWithEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString starts with the string given in szStartsWith.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:453</div></div>
<div class="ttc" id="aclassez_string_view_htm_aace5e02ef31cba6e51bb6e88bd8e7393"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#aace5e02ef31cba6e51bb6e88bd8e7393">ezStringView::Trim</a></div><div class="ttdeci">void Trim(const char *szTrimChars=&quot; \f\n\r\t\v&quot;)</div><div class="ttdoc">Removes all characters from the start and end that appear in the given strings by adjusting the begin...</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:120</div></div>
<div class="ttc" id="aclassez_unicode_utils_htm_ac5acb55d1f2131f2e2578512c6f7c1ed"><div class="ttname"><a href="../../d9/d32/classez_unicode_utils.htm#ac5acb55d1f2131f2e2578512c6f7c1ed">ezUnicodeUtils::MoveToNextUtf8</a></div><div class="ttdeci">static ezResult MoveToNextUtf8(const char *&amp;ref_szUtf8, ezUInt32 uiNumCharacters=1)</div><div class="ttdoc">Moves the given string pointer ahead to the next Utf8 character sequence.</div><div class="ttdef"><b>Definition:</b> UnicodeUtils_inl.h:203</div></div>
<div class="ttc" id="aclassez_string_view_htm_a7e6ab4aebc721857871d822321935d5f"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#a7e6ab4aebc721857871d822321935d5f">ezStringView::GetStartPointer</a></div><div class="ttdeci">const char * GetStartPointer() const</div><div class="ttdoc">Returns the start of the view range.</div><div class="ttdef"><b>Definition:</b> StringView.h:102</div></div>
<div class="ttc" id="aclassez_string_view_htm_a1663ad728003e533bd8d70f11fc4e12d"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#a1663ad728003e533bd8d70f11fc4e12d">ezStringView::EndsWith_NoCase</a></div><div class="ttdeci">bool EndsWith_NoCase(ezStringView sEndsWith) const</div><div class="ttdoc">Returns true, if this string ends with the given string. Case insensitive.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:115</div></div>
<div class="ttc" id="aclassez_string_view_htm_a50e2a948b2ed8ff6a5f05599852d9454"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#a50e2a948b2ed8ff6a5f05599852d9454">ezStringView::operator+=</a></div><div class="ttdeci">void operator+=(ezUInt32 d)</div><div class="ttdoc">Advances the start forwards by d characters. Does not move it beyond the range's end.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:64</div></div>
<div class="ttc" id="aclassez_string_utils_htm_a22bea564b8ddd615f8b24886ae566397"><div class="ttname"><a href="../../de/df8/classez_string_utils.htm#a22bea564b8ddd615f8b24886ae566397">ezStringUtils::EndsWith_NoCase</a></div><div class="ttdeci">static bool EndsWith_NoCase(const char *szString, const char *szEndsWith, const char *pStringEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szEndsWithEnd=ezUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString ends with the string given in szEndsWith. Ignores case.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:517</div></div>
<div class="ttc" id="aclassez_string_view_htm"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm">ezStringView</a></div><div class="ttdoc">ezStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition:</b> StringView.h:33</div></div>
<div class="ttc" id="aclassez_string_view_htm_aef316bf81fe0a6e03731aef7a47c7dd4"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#aef316bf81fe0a6e03731aef7a47c7dd4">ezStringView::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns whether the string is an empty string.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:85</div></div>
<div class="ttc" id="aclassez_string_view_htm_a71ee9cb36548392c2f6998d1ced4c34f"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#a71ee9cb36548392c2f6998d1ced4c34f">ezStringView::Split</a></div><div class="ttdeci">void Split(bool bReturnEmptyStrings, Container &amp;ref_output, const char *szSeparator1, const char *szSeparator2=nullptr, const char *szSeparator3=nullptr, const char *szSeparator4=nullptr, const char *szSeparator5=nullptr, const char *szSeparator6=nullptr) const</div><div class="ttdoc">Fills the given container with ezStringView's which represent each found substring....</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:141</div></div>
<div class="ttc" id="aclassez_string_view_htm_a4a89055f6790317ba22262b4eea73bc0"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#a4a89055f6790317ba22262b4eea73bc0">ezStringView::EndsWith</a></div><div class="ttdeci">bool EndsWith(ezStringView sEndsWith) const</div><div class="ttdoc">Returns true, if this string ends with the given string.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:110</div></div>
<div class="ttc" id="aclassez_string_view_htm_a4be27a339b6312054be93ea72da17148"><div class="ttname"><a href="../../d9/d18/classez_string_view.htm#a4be27a339b6312054be93ea72da17148">ezStringView::SetStartPosition</a></div><div class="ttdeci">void SetStartPosition(const char *szCurPos)</div><div class="ttdoc">Allows to set the start position to a different value.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:76</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_b52479c911fe9a42767226b3387b3a02.htm">Strings</a></li><li class="navelem"><a class="el" href="../../dir_067384bf2c73f8a8078edb859c0ba426.htm">Implementation</a></li><li class="navelem"><b>StringView_inl.h</b></li>
    <li class="footer">Generated on Mon Mar 3 2025 17:23:45 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
