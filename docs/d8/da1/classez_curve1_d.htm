<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezCurve1D Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">ezEngine<span id="projectnumber">&#160;Release 25.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('d8/da1/classez_curve1_d.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../d8/d5d/classez_curve1_d-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">ezCurve1D Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>A 1D curve for animating a single value over time.  
 <a href="../../d8/da1/classez_curve1_d.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../db/dd2/_curve1_d_8h_source.htm">Curve1D.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d82/structez_curve1_d_1_1_control_point.htm">ControlPoint</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores position and tangents to control spline interpolation.  <a href="../../de/d82/structez_curve1_d_1_1_control_point.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1a90a89be7360734c38bad7687bcf5ad" id="r_a1a90a89be7360734c38bad7687bcf5ad"><td class="memItemLeft" align="right" valign="top"><a id="a1a90a89be7360734c38bad7687bcf5ad" name="a1a90a89be7360734c38bad7687bcf5ad"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> ()</td></tr>
<tr class="memdesc:a1a90a89be7360734c38bad7687bcf5ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all control points. <br /></td></tr>
<tr class="separator:a1a90a89be7360734c38bad7687bcf5ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c3bbfbf25953d602e00fa4b03ffb8bd" id="r_a6c3bbfbf25953d602e00fa4b03ffb8bd"><td class="memItemLeft" align="right" valign="top"><a id="a6c3bbfbf25953d602e00fa4b03ffb8bd" name="a6c3bbfbf25953d602e00fa4b03ffb8bd"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEmpty</b> () const</td></tr>
<tr class="memdesc:a6c3bbfbf25953d602e00fa4b03ffb8bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the curve has any control point. <br /></td></tr>
<tr class="separator:a6c3bbfbf25953d602e00fa4b03ffb8bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69218202f7b6b24428aaefecd5026151" id="r_a69218202f7b6b24428aaefecd5026151"><td class="memItemLeft" align="right" valign="top"><a id="a69218202f7b6b24428aaefecd5026151" name="a69218202f7b6b24428aaefecd5026151"></a>
<a class="el" href="../../de/d82/structez_curve1_d_1_1_control_point.htm">ControlPoint</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>AddControlPoint</b> (double fPos)</td></tr>
<tr class="memdesc:a69218202f7b6b24428aaefecd5026151"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a control point. <a class="el" href="../../d8/da1/classez_curve1_d.htm#adb2341d2a88fe32c6db40e469818a527" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> must be called to before evaluating the curve. <br /></td></tr>
<tr class="separator:a69218202f7b6b24428aaefecd5026151"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11f5d0b302608f198b48079446818e42" id="r_a11f5d0b302608f198b48079446818e42"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/da1/classez_curve1_d.htm#a11f5d0b302608f198b48079446818e42">RecomputeExtents</a> ()</td></tr>
<tr class="memdesc:a11f5d0b302608f198b48079446818e42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the min/max X value that can be retrieved through GetExtents().  <br /></td></tr>
<tr class="separator:a11f5d0b302608f198b48079446818e42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d9c560f69342c1d5b06c5c80291e0ef" id="r_a5d9c560f69342c1d5b06c5c80291e0ef"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/da1/classez_curve1_d.htm#a5d9c560f69342c1d5b06c5c80291e0ef">QueryExtents</a> (double &amp;ref_fMinx, double &amp;ref_fMaxx) const</td></tr>
<tr class="memdesc:a5d9c560f69342c1d5b06c5c80291e0ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the min and max position value across all control points.  <br /></td></tr>
<tr class="separator:a5d9c560f69342c1d5b06c5c80291e0ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee4fe6e14c6f89f66204ee482d7183bc" id="r_aee4fe6e14c6f89f66204ee482d7183bc"><td class="memItemLeft" align="right" valign="top"><a id="aee4fe6e14c6f89f66204ee482d7183bc" name="aee4fe6e14c6f89f66204ee482d7183bc"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>QueryExtremeValues</b> (double &amp;ref_fMinVal, double &amp;ref_fMaxVal) const</td></tr>
<tr class="memdesc:aee4fe6e14c6f89f66204ee482d7183bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the min and max Y value across the curve. For this information to be available, the linear approximation of the curve must have been computed, otherwise stale values will be returned. <br /></td></tr>
<tr class="separator:aee4fe6e14c6f89f66204ee482d7183bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24bcf8694378957adab98e1b17b409a9" id="r_a24bcf8694378957adab98e1b17b409a9"><td class="memItemLeft" align="right" valign="top"><a id="a24bcf8694378957adab98e1b17b409a9" name="a24bcf8694378957adab98e1b17b409a9"></a>
ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetNumControlPoints</b> () const</td></tr>
<tr class="memdesc:a24bcf8694378957adab98e1b17b409a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of control points. <br /></td></tr>
<tr class="separator:a24bcf8694378957adab98e1b17b409a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa19f59391dd08543de6a6621b134eab" id="r_afa19f59391dd08543de6a6621b134eab"><td class="memItemLeft" align="right" valign="top"><a id="afa19f59391dd08543de6a6621b134eab" name="afa19f59391dd08543de6a6621b134eab"></a>
const <a class="el" href="../../de/d82/structez_curve1_d_1_1_control_point.htm">ControlPoint</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>GetControlPoint</b> (ezUInt32 uiIdx) const</td></tr>
<tr class="memdesc:afa19f59391dd08543de6a6621b134eab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Const access to a control point. <br /></td></tr>
<tr class="separator:afa19f59391dd08543de6a6621b134eab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a130dec65b1037218448c30a8901d2896" id="r_a130dec65b1037218448c30a8901d2896"><td class="memItemLeft" align="right" valign="top"><a id="a130dec65b1037218448c30a8901d2896" name="a130dec65b1037218448c30a8901d2896"></a>
<a class="el" href="../../de/d82/structez_curve1_d_1_1_control_point.htm">ControlPoint</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>ModifyControlPoint</b> (ezUInt32 uiIdx)</td></tr>
<tr class="memdesc:a130dec65b1037218448c30a8901d2896"><td class="mdescLeft">&#160;</td><td class="mdescRight">Non-const access to a control point. If you modify the position, <a class="el" href="../../d8/da1/classez_curve1_d.htm#adb2341d2a88fe32c6db40e469818a527" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> has to be called before evaluating the curve. <br /></td></tr>
<tr class="separator:a130dec65b1037218448c30a8901d2896"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb2341d2a88fe32c6db40e469818a527" id="r_adb2341d2a88fe32c6db40e469818a527"><td class="memItemLeft" align="right" valign="top"><a id="adb2341d2a88fe32c6db40e469818a527" name="adb2341d2a88fe32c6db40e469818a527"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SortControlPoints</b> ()</td></tr>
<tr class="memdesc:adb2341d2a88fe32c6db40e469818a527"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sorts the control point arrays by their position. The CPs have to be sorted before calling <a class="el" href="../../d8/da1/classez_curve1_d.htm#a49242373313545284d1030851680fafa" title="Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point.">Evaluate()</a>, otherwise the result will be wrong. <br /></td></tr>
<tr class="separator:adb2341d2a88fe32c6db40e469818a527"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49242373313545284d1030851680fafa" id="r_a49242373313545284d1030851680fafa"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/da1/classez_curve1_d.htm#a49242373313545284d1030851680fafa">Evaluate</a> (double fPosition) const</td></tr>
<tr class="memdesc:a49242373313545284d1030851680fafa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point.  <br /></td></tr>
<tr class="separator:a49242373313545284d1030851680fafa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78696232251632a45e6c9d80e0ab02a0" id="r_a78696232251632a45e6c9d80e0ab02a0"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/da1/classez_curve1_d.htm#a78696232251632a45e6c9d80e0ab02a0">ConvertNormalizedPos</a> (double fPos) const</td></tr>
<tr class="memdesc:a78696232251632a45e6c9d80e0ab02a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes the normalized x coordinate [0;1] and converts it into a valid position on the curve.  <br /></td></tr>
<tr class="separator:a78696232251632a45e6c9d80e0ab02a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6e4965d516bae6774acb0223d219fed" id="r_ab6e4965d516bae6774acb0223d219fed"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/da1/classez_curve1_d.htm#ab6e4965d516bae6774acb0223d219fed">NormalizeValue</a> (double value) const</td></tr>
<tr class="memdesc:ab6e4965d516bae6774acb0223d219fed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes a value (typically returned by <a class="el" href="../../d8/da1/classez_curve1_d.htm#a49242373313545284d1030851680fafa" title="Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point.">Evaluate()</a>) and normalizes it into [0;1] range.  <br /></td></tr>
<tr class="separator:ab6e4965d516bae6774acb0223d219fed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae10b1b78c51744bb200eca566add0a4b" id="r_ae10b1b78c51744bb200eca566add0a4b"><td class="memItemLeft" align="right" valign="top"><a id="ae10b1b78c51744bb200eca566add0a4b" name="ae10b1b78c51744bb200eca566add0a4b"></a>
ezUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>GetHeapMemoryUsage</b> () const</td></tr>
<tr class="memdesc:ae10b1b78c51744bb200eca566add0a4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">How much heap memory the curve uses. <br /></td></tr>
<tr class="separator:ae10b1b78c51744bb200eca566add0a4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4483ba5dc37ab8211b8ca611948532b" id="r_ab4483ba5dc37ab8211b8ca611948532b"><td class="memItemLeft" align="right" valign="top"><a id="ab4483ba5dc37ab8211b8ca611948532b" name="ab4483ba5dc37ab8211b8ca611948532b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Save</b> (<a class="el" href="../../d6/dcc/classez_stream_writer.htm">ezStreamWriter</a> &amp;inout_stream) const</td></tr>
<tr class="memdesc:ab4483ba5dc37ab8211b8ca611948532b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores the current state in a stream. <br /></td></tr>
<tr class="separator:ab4483ba5dc37ab8211b8ca611948532b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5078d9c3ac152e42dd2d7b39f333117" id="r_ad5078d9c3ac152e42dd2d7b39f333117"><td class="memItemLeft" align="right" valign="top"><a id="ad5078d9c3ac152e42dd2d7b39f333117" name="ad5078d9c3ac152e42dd2d7b39f333117"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Load</b> (<a class="el" href="../../d2/d19/classez_stream_reader.htm">ezStreamReader</a> &amp;inout_stream)</td></tr>
<tr class="memdesc:ad5078d9c3ac152e42dd2d7b39f333117"><td class="mdescLeft">&#160;</td><td class="mdescRight">Restores the state from a stream. <br /></td></tr>
<tr class="separator:ad5078d9c3ac152e42dd2d7b39f333117"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa21ecd3248b47183bdde92c83191db32" id="r_aa21ecd3248b47183bdde92c83191db32"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/da1/classez_curve1_d.htm#aa21ecd3248b47183bdde92c83191db32">CreateLinearApproximation</a> (double fMaxError=0.01, ezUInt8 uiMaxSubDivs=8)</td></tr>
<tr class="memdesc:aa21ecd3248b47183bdde92c83191db32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pre-computes sample points for linear interpolation that approximate the curve within the allowed error threshold.  <br /></td></tr>
<tr class="separator:aa21ecd3248b47183bdde92c83191db32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11efa3c064974a8dabf2819ecc72a6bb" id="r_a11efa3c064974a8dabf2819ecc72a6bb"><td class="memItemLeft" align="right" valign="top"><a id="a11efa3c064974a8dabf2819ecc72a6bb" name="a11efa3c064974a8dabf2819ecc72a6bb"></a>
const <a class="el" href="../../d8/deb/classez_hybrid_array.htm">ezHybridArray</a>&lt; <a class="el" href="../../d1/df8/classez_vec2_template.htm">ezVec2d</a>, 24 &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>GetLinearApproximation</b> () const</td></tr>
<tr class="separator:a11efa3c064974a8dabf2819ecc72a6bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c90a621b5234fd862eb73f99dbcd6c4" id="r_a3c90a621b5234fd862eb73f99dbcd6c4"><td class="memItemLeft" align="right" valign="top"><a id="a3c90a621b5234fd862eb73f99dbcd6c4" name="a3c90a621b5234fd862eb73f99dbcd6c4"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ClampTangents</b> ()</td></tr>
<tr class="memdesc:a3c90a621b5234fd862eb73f99dbcd6c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjusts the tangents such that the curve cannot make loopings. <br /></td></tr>
<tr class="separator:a3c90a621b5234fd862eb73f99dbcd6c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66993008704d44f84f507971ebb2471b" id="r_a66993008704d44f84f507971ebb2471b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/da1/classez_curve1_d.htm#a66993008704d44f84f507971ebb2471b">ApplyTangentModes</a> ()</td></tr>
<tr class="memdesc:a66993008704d44f84f507971ebb2471b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjusts the tangents in accordance to the specified tangent modes at each control point.  <br /></td></tr>
<tr class="separator:a66993008704d44f84f507971ebb2471b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab87e07b83d6959c9bf4d546a7b9378f7" id="r_ab87e07b83d6959c9bf4d546a7b9378f7"><td class="memItemLeft" align="right" valign="top"><a id="ab87e07b83d6959c9bf4d546a7b9378f7" name="ab87e07b83d6959c9bf4d546a7b9378f7"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MakeFixedLengthTangentLeft</b> (ezUInt32 uiCpIdx)</td></tr>
<tr class="memdesc:ab87e07b83d6959c9bf4d546a7b9378f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typically called by <a class="el" href="../../d8/da1/classez_curve1_d.htm#a66993008704d44f84f507971ebb2471b" title="Adjusts the tangents in accordance to the specified tangent modes at each control point.">ApplyTangentModes()</a> for specific control points. Control points must be in sorted order. <br /></td></tr>
<tr class="separator:ab87e07b83d6959c9bf4d546a7b9378f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cb16f60da90b8b14b3b24f7fb46ee6f" id="r_a1cb16f60da90b8b14b3b24f7fb46ee6f"><td class="memItemLeft" align="right" valign="top"><a id="a1cb16f60da90b8b14b3b24f7fb46ee6f" name="a1cb16f60da90b8b14b3b24f7fb46ee6f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MakeFixedLengthTangentRight</b> (ezUInt32 uiCpIdx)</td></tr>
<tr class="memdesc:a1cb16f60da90b8b14b3b24f7fb46ee6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typically called by <a class="el" href="../../d8/da1/classez_curve1_d.htm#a66993008704d44f84f507971ebb2471b" title="Adjusts the tangents in accordance to the specified tangent modes at each control point.">ApplyTangentModes()</a> for specific control points. Control points must be in sorted order. <br /></td></tr>
<tr class="separator:a1cb16f60da90b8b14b3b24f7fb46ee6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2abb1597384312795206d1df10ddb699" id="r_a2abb1597384312795206d1df10ddb699"><td class="memItemLeft" align="right" valign="top"><a id="a2abb1597384312795206d1df10ddb699" name="a2abb1597384312795206d1df10ddb699"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MakeLinearTangentLeft</b> (ezUInt32 uiCpIdx)</td></tr>
<tr class="memdesc:a2abb1597384312795206d1df10ddb699"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typically called by <a class="el" href="../../d8/da1/classez_curve1_d.htm#a66993008704d44f84f507971ebb2471b" title="Adjusts the tangents in accordance to the specified tangent modes at each control point.">ApplyTangentModes()</a> for specific control points. Control points must be in sorted order. <br /></td></tr>
<tr class="separator:a2abb1597384312795206d1df10ddb699"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad97a2371e1b891b6d6c0619e00bc5bd1" id="r_ad97a2371e1b891b6d6c0619e00bc5bd1"><td class="memItemLeft" align="right" valign="top"><a id="ad97a2371e1b891b6d6c0619e00bc5bd1" name="ad97a2371e1b891b6d6c0619e00bc5bd1"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MakeLinearTangentRight</b> (ezUInt32 uiCpIdx)</td></tr>
<tr class="memdesc:ad97a2371e1b891b6d6c0619e00bc5bd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typically called by <a class="el" href="../../d8/da1/classez_curve1_d.htm#a66993008704d44f84f507971ebb2471b" title="Adjusts the tangents in accordance to the specified tangent modes at each control point.">ApplyTangentModes()</a> for specific control points. Control points must be in sorted order. <br /></td></tr>
<tr class="separator:ad97a2371e1b891b6d6c0619e00bc5bd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab26d24953ddbf5e816d23aefee9cb7df" id="r_ab26d24953ddbf5e816d23aefee9cb7df"><td class="memItemLeft" align="right" valign="top"><a id="ab26d24953ddbf5e816d23aefee9cb7df" name="ab26d24953ddbf5e816d23aefee9cb7df"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MakeAutoTangentLeft</b> (ezUInt32 uiCpIdx)</td></tr>
<tr class="separator:ab26d24953ddbf5e816d23aefee9cb7df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a803583a83ed3896f14a1e74d64d41c0c" id="r_a803583a83ed3896f14a1e74d64d41c0c"><td class="memItemLeft" align="right" valign="top"><a id="a803583a83ed3896f14a1e74d64d41c0c" name="a803583a83ed3896f14a1e74d64d41c0c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MakeAutoTangentRight</b> (ezUInt32 uiCpIdx)</td></tr>
<tr class="separator:a803583a83ed3896f14a1e74d64d41c0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A 1D curve for animating a single value over time. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a66993008704d44f84f507971ebb2471b" name="a66993008704d44f84f507971ebb2471b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66993008704d44f84f507971ebb2471b">&#9670;&#160;</a></span>ApplyTangentModes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezCurve1D::ApplyTangentModes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adjusts the tangents in accordance to the specified tangent modes at each control point. </p>
<dl class="section note"><dt>Note</dt><dd>All control points must already be in sorted order, so call <a class="el" href="../../d8/da1/classez_curve1_d.htm#adb2341d2a88fe32c6db40e469818a527" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> first if necessary. </dd></dl>

</div>
</div>
<a id="a78696232251632a45e6c9d80e0ab02a0" name="a78696232251632a45e6c9d80e0ab02a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78696232251632a45e6c9d80e0ab02a0">&#9670;&#160;</a></span>ConvertNormalizedPos()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double ezCurve1D::ConvertNormalizedPos </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fPos</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Takes the normalized x coordinate [0;1] and converts it into a valid position on the curve. </p>
<dl class="section note"><dt>Note</dt><dd>This only works when the curve extents are available. See <a class="el" href="../../d8/da1/classez_curve1_d.htm#a5d9c560f69342c1d5b06c5c80291e0ef" title="returns the min and max position value across all control points.">QueryExtents()</a> and <a class="el" href="../../d8/da1/classez_curve1_d.htm#a11f5d0b302608f198b48079446818e42" title="Updates the min/max X value that can be retrieved through GetExtents().">RecomputeExtents()</a>.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d8/da1/classez_curve1_d.htm#a11f5d0b302608f198b48079446818e42" title="Updates the min/max X value that can be retrieved through GetExtents().">RecomputeExtents</a> </dd>
<dd>
<a class="el" href="../../d8/da1/classez_curve1_d.htm#a5d9c560f69342c1d5b06c5c80291e0ef" title="returns the min and max position value across all control points.">QueryExtents</a> </dd></dl>

</div>
</div>
<a id="aa21ecd3248b47183bdde92c83191db32" name="aa21ecd3248b47183bdde92c83191db32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa21ecd3248b47183bdde92c83191db32">&#9670;&#160;</a></span>CreateLinearApproximation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezCurve1D::CreateLinearApproximation </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fMaxError</em> = <code>0.01</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezUInt8&#160;</td>
          <td class="paramname"><em>uiMaxSubDivs</em> = <code>8</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Pre-computes sample points for linear interpolation that approximate the curve within the allowed error threshold. </p>
<dl class="section note"><dt>Note</dt><dd>All control points must already be in sorted order, so call <a class="el" href="../../d8/da1/classez_curve1_d.htm#adb2341d2a88fe32c6db40e469818a527" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> first if necessary. </dd></dl>
<dl class="todo"><dt><b><a class="el" href="../../dd/da0/todo.htm#_todo000054">Todo:</a></b></dt><dd>Since we do this, we actually don't need the linear approximation anymore and could just evaluate the full curve </dd></dl>

</div>
</div>
<a id="a49242373313545284d1030851680fafa" name="a49242373313545284d1030851680fafa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49242373313545284d1030851680fafa">&#9670;&#160;</a></span>Evaluate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double ezCurve1D::Evaluate </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fPosition</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point. </p>
<p>This uses the linear approximation of the curve, so <a class="el" href="../../d8/da1/classez_curve1_d.htm#aa21ecd3248b47183bdde92c83191db32" title="Pre-computes sample points for linear interpolation that approximate the curve within the allowed err...">CreateLinearApproximation()</a> must have been called first.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d8/da1/classez_curve1_d.htm#aa21ecd3248b47183bdde92c83191db32" title="Pre-computes sample points for linear interpolation that approximate the curve within the allowed err...">CreateLinearApproximation</a> </dd></dl>

</div>
</div>
<a id="ab6e4965d516bae6774acb0223d219fed" name="ab6e4965d516bae6774acb0223d219fed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6e4965d516bae6774acb0223d219fed">&#9670;&#160;</a></span>NormalizeValue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double ezCurve1D::NormalizeValue </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Takes a value (typically returned by <a class="el" href="../../d8/da1/classez_curve1_d.htm#a49242373313545284d1030851680fafa" title="Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point.">Evaluate()</a>) and normalizes it into [0;1] range. </p>
<dl class="section note"><dt>Note</dt><dd>This only works when the linear approximation of the curve has been computed first. </dd></dl>

</div>
</div>
<a id="a5d9c560f69342c1d5b06c5c80291e0ef" name="a5d9c560f69342c1d5b06c5c80291e0ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d9c560f69342c1d5b06c5c80291e0ef">&#9670;&#160;</a></span>QueryExtents()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezCurve1D::QueryExtents </td>
          <td>(</td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>ref_fMinx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>ref_fMaxx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>returns the min and max position value across all control points. </p>
<p>The returned values are only up to date if either <a class="el" href="../../d8/da1/classez_curve1_d.htm#adb2341d2a88fe32c6db40e469818a527" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> or <a class="el" href="../../d8/da1/classez_curve1_d.htm#a11f5d0b302608f198b48079446818e42" title="Updates the min/max X value that can be retrieved through GetExtents().">RecomputeExtents()</a> was called before. Otherwise they will contain stale values. </p>

</div>
</div>
<a id="a11f5d0b302608f198b48079446818e42" name="a11f5d0b302608f198b48079446818e42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11f5d0b302608f198b48079446818e42">&#9670;&#160;</a></span>RecomputeExtents()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezCurve1D::RecomputeExtents </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Updates the min/max X value that can be retrieved through GetExtents(). </p>
<p>This is automatically done when <a class="el" href="../../d8/da1/classez_curve1_d.htm#adb2341d2a88fe32c6db40e469818a527" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> is called. It can be called manually, if the information is required without sorting. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Tracks/<a class="el" href="../../db/dd2/_curve1_d_8h_source.htm">Curve1D.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Tracks/Implementation/<b>Curve1D.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d8/da1/classez_curve1_d.htm">ezCurve1D</a></li>
    <li class="footer">Generated on Fri Jul 11 2025 12:17:57 for ezEngine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8 </li>
  </ul>
</div>
</body>
</html>
