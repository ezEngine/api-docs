<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: ezInputManager Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.10</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d8/d45/classez_input_manager.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../d7/d1a/classez_input_manager-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ezInputManager Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The central class to set up and query the state of all input.  
 <a href="../../d8/d45/classez_input_manager.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../da/d09/_input_manager_8h_source.htm">InputManager.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dde/structez_input_manager_1_1_input_event_data.htm">InputEventData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The data that is broadcast when certain events occur.  <a href="../../db/dde/structez_input_manager_1_1_input_event_data.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ac0acb769435970f90a82dd97b373cd5f"><td class="memItemLeft" align="right" valign="top"><a id="ac0acb769435970f90a82dd97b373cd5f"></a>
typedef <a class="el" href="../../d0/daf/classez_event.htm">ezEvent</a>&lt; const <a class="el" href="../../db/dde/structez_input_manager_1_1_input_event_data.htm">InputEventData</a> &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ezEventInput</b></td></tr>
<tr class="separator:ac0acb769435970f90a82dd97b373cd5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:aeabab35c354ecb105150be7a40339ba0"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#aeabab35c354ecb105150be7a40339ba0">Update</a> (<a class="el" href="../../d3/d90/structez_time.htm">ezTime</a> tTimeDifference)</td></tr>
<tr class="memdesc:aeabab35c354ecb105150be7a40339ba0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the state of the input manager. This should be called exactly once each frame.  <a href="../../d8/d45/classez_input_manager.htm#aeabab35c354ecb105150be7a40339ba0">More...</a><br /></td></tr>
<tr class="separator:aeabab35c354ecb105150be7a40339ba0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a550c3f97b9f748d5e4e2383f44afe3c3"><td class="memItemLeft" align="right" valign="top"><a id="a550c3f97b9f748d5e4e2383f44afe3c3"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a550c3f97b9f748d5e4e2383f44afe3c3">SetInputSlotDisplayName</a> (const char *szInputSlot, const char *szDefaultDisplayName)</td></tr>
<tr class="memdesc:a550c3f97b9f748d5e4e2383f44afe3c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the display name of an input slot. <br /></td></tr>
<tr class="separator:a550c3f97b9f748d5e4e2383f44afe3c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1db60b0442ed86f03de2588de318565"><td class="memItemLeft" align="right" valign="top"><a id="ab1db60b0442ed86f03de2588de318565"></a>
static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#ab1db60b0442ed86f03de2588de318565">GetInputSlotDisplayName</a> (const char *szInputSlot)</td></tr>
<tr class="memdesc:ab1db60b0442ed86f03de2588de318565"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the display name that was assigned to the given input slot. <br /></td></tr>
<tr class="separator:ab1db60b0442ed86f03de2588de318565"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadab2f0160b138aee910a5ff4d759de6"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#aadab2f0160b138aee910a5ff4d759de6">GetInputSlotDisplayName</a> (const char *szInputSet, const char *szAction, ezInt32 iTrigger=-1)</td></tr>
<tr class="memdesc:aadab2f0160b138aee910a5ff4d759de6"><td class="mdescLeft">&#160;</td><td class="mdescRight">A shortcut to get the display name of the input slot bound to a given action.  <a href="../../d8/d45/classez_input_manager.htm#aadab2f0160b138aee910a5ff4d759de6">More...</a><br /></td></tr>
<tr class="separator:aadab2f0160b138aee910a5ff4d759de6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53be1dbc3b5edb210a89027ba1c26d5c"><td class="memItemLeft" align="right" valign="top"><a id="a53be1dbc3b5edb210a89027ba1c26d5c"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a53be1dbc3b5edb210a89027ba1c26d5c">SetInputSlotDeadZone</a> (const char *szInputSlot, float fDeadZone)</td></tr>
<tr class="memdesc:a53be1dbc3b5edb210a89027ba1c26d5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the dead zone for the given input slot. As long as the hardware reports values lower than this, the input slot will report a value of zero. <br /></td></tr>
<tr class="separator:a53be1dbc3b5edb210a89027ba1c26d5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e0775ab2d78b2931bb9da5281aba6c2"><td class="memItemLeft" align="right" valign="top"><a id="a0e0775ab2d78b2931bb9da5281aba6c2"></a>
static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a0e0775ab2d78b2931bb9da5281aba6c2">GetInputSlotDeadZone</a> (const char *szInputSlot)</td></tr>
<tr class="memdesc:a0e0775ab2d78b2931bb9da5281aba6c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the dead zone value for the given input slot. <br /></td></tr>
<tr class="separator:a0e0775ab2d78b2931bb9da5281aba6c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab88ea3b7483d6e91b9e94558e4e7f8e0"><td class="memItemLeft" align="right" valign="top"><a id="ab88ea3b7483d6e91b9e94558e4e7f8e0"></a>
static <a class="el" href="../../d1/dec/structez_bitflags.htm">ezBitflags</a>&lt; <a class="el" href="../../df/d72/structez_input_slot_flags.htm">ezInputSlotFlags</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#ab88ea3b7483d6e91b9e94558e4e7f8e0">GetInputSlotFlags</a> (const char *szInputSlot)</td></tr>
<tr class="memdesc:ab88ea3b7483d6e91b9e94558e4e7f8e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the flags for the given input slot. <br /></td></tr>
<tr class="separator:ab88ea3b7483d6e91b9e94558e4e7f8e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f1ae016bd1b09e8c489c87d8cc2a8f8"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d6/d99/structez_key_state.htm#ae137489e8c29bbebaf694daa5cfe874f">ezKeyState::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a7f1ae016bd1b09e8c489c87d8cc2a8f8">GetInputSlotState</a> (const char *szInputSlot, float *pValue=nullptr)</td></tr>
<tr class="memdesc:a7f1ae016bd1b09e8c489c87d8cc2a8f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the current key state of the given input slot and optionally also returns its full value.  <a href="../../d8/d45/classez_input_manager.htm#a7f1ae016bd1b09e8c489c87d8cc2a8f8">More...</a><br /></td></tr>
<tr class="separator:a7f1ae016bd1b09e8c489c87d8cc2a8f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b866f5eee5591a9f33aa4e7f8c4eae4"><td class="memItemLeft" align="right" valign="top"><a id="a2b866f5eee5591a9f33aa4e7f8c4eae4"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a2b866f5eee5591a9f33aa4e7f8c4eae4">RetrieveAllKnownInputSlots</a> (<a class="el" href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray</a>&lt; const char * &gt; &amp;out_InputSlots)</td></tr>
<tr class="memdesc:a2b866f5eee5591a9f33aa4e7f8c4eae4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an array that contains all the names of all currently known input slots. <br /></td></tr>
<tr class="separator:a2b866f5eee5591a9f33aa4e7f8c4eae4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12f8944bb110173b7b3c152e1bbe4978"><td class="memItemLeft" align="right" valign="top">static ezUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a12f8944bb110173b7b3c152e1bbe4978">RetrieveLastCharacter</a> (bool bResetCurrent=true)</td></tr>
<tr class="memdesc:a12f8944bb110173b7b3c152e1bbe4978"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the last typed character as the OS has reported it. Thus supports Unicode etc.  <a href="../../d8/d45/classez_input_manager.htm#a12f8944bb110173b7b3c152e1bbe4978">More...</a><br /></td></tr>
<tr class="separator:a12f8944bb110173b7b3c152e1bbe4978"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5da4de03391ce691ec6aa07514f01b99"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a5da4de03391ce691ec6aa07514f01b99">PollHardware</a> ()</td></tr>
<tr class="memdesc:a5da4de03391ce691ec6aa07514f01b99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Makes sure that hardware input is processed at this moment, which allows to do this more often than <a class="el" href="../../d8/d45/classez_input_manager.htm#aeabab35c354ecb105150be7a40339ba0" title="Updates the state of the input manager. This should be called exactly once each frame.">Update()</a> is called.  <a href="../../d8/d45/classez_input_manager.htm#a5da4de03391ce691ec6aa07514f01b99">More...</a><br /></td></tr>
<tr class="separator:a5da4de03391ce691ec6aa07514f01b99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eae60ac11a8c9978141d6a24ff75687"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a4eae60ac11a8c9978141d6a24ff75687">ClearInputMapping</a> (const char *szInputSet, const char *szInputSlot)</td></tr>
<tr class="memdesc:a4eae60ac11a8c9978141d6a24ff75687"><td class="mdescLeft">&#160;</td><td class="mdescRight">If <em>szInputSlot</em> is used in any action in <em>szInputSet</em>, it will be removed from all of them.  <a href="../../d8/d45/classez_input_manager.htm#a4eae60ac11a8c9978141d6a24ff75687">More...</a><br /></td></tr>
<tr class="separator:a4eae60ac11a8c9978141d6a24ff75687"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7aa9cd4190b9a313152fb2a7ae1b7620"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a7aa9cd4190b9a313152fb2a7ae1b7620">SetInputActionConfig</a> (const char *szInputSet, const char *szAction, const <a class="el" href="../../d2/dee/structez_input_action_config.htm">ezInputActionConfig</a> &amp;Config, bool bClearPreviousInputMappings)</td></tr>
<tr class="memdesc:a7aa9cd4190b9a313152fb2a7ae1b7620"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the one function to set up which input actions are available and by which input slots (keys) they are triggered.  <a href="../../d8/d45/classez_input_manager.htm#a7aa9cd4190b9a313152fb2a7ae1b7620">More...</a><br /></td></tr>
<tr class="separator:a7aa9cd4190b9a313152fb2a7ae1b7620"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7735c1e166fde3f6db15baee171c12b"><td class="memItemLeft" align="right" valign="top"><a id="af7735c1e166fde3f6db15baee171c12b"></a>
static <a class="el" href="../../d2/dee/structez_input_action_config.htm">ezInputActionConfig</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#af7735c1e166fde3f6db15baee171c12b">GetInputActionConfig</a> (const char *szInputSet, const char *szAction)</td></tr>
<tr class="memdesc:af7735c1e166fde3f6db15baee171c12b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the configuration for the given input action in the given input set. Returns a default configuration, if the action does not exist. <br /></td></tr>
<tr class="separator:af7735c1e166fde3f6db15baee171c12b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a552f59505e133a242f812ee46202ea25"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a552f59505e133a242f812ee46202ea25">RemoveInputAction</a> (const char *szInputSet, const char *szAction)</td></tr>
<tr class="memdesc:a552f59505e133a242f812ee46202ea25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deletes all state associated with the given input action.  <a href="../../d8/d45/classez_input_manager.htm#a552f59505e133a242f812ee46202ea25">More...</a><br /></td></tr>
<tr class="separator:a552f59505e133a242f812ee46202ea25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b5bd19450532c9c468f5700be890efd"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d6/d99/structez_key_state.htm#ae137489e8c29bbebaf694daa5cfe874f">ezKeyState::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a7b5bd19450532c9c468f5700be890efd">GetInputActionState</a> (const char *szInputSet, const char *szAction, float *pValue=nullptr, ezInt8 *iTriggeredSlot=nullptr)</td></tr>
<tr class="memdesc:a7b5bd19450532c9c468f5700be890efd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the current state and value of the given input action.  <a href="../../d8/d45/classez_input_manager.htm#a7b5bd19450532c9c468f5700be890efd">More...</a><br /></td></tr>
<tr class="separator:a7b5bd19450532c9c468f5700be890efd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac25ad7303a823af5f7ea8d17cd390eee"><td class="memItemLeft" align="right" valign="top"><a id="ac25ad7303a823af5f7ea8d17cd390eee"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#ac25ad7303a823af5f7ea8d17cd390eee">SetActionDisplayName</a> (const char *szAction, const char *szDisplayName)</td></tr>
<tr class="memdesc:ac25ad7303a823af5f7ea8d17cd390eee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the display name for the given action. <br /></td></tr>
<tr class="separator:ac25ad7303a823af5f7ea8d17cd390eee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7544807471e5a3db721ca79c6d1661ed"><td class="memItemLeft" align="right" valign="top"><a id="a7544807471e5a3db721ca79c6d1661ed"></a>
static const <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezString</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a7544807471e5a3db721ca79c6d1661ed">GetActionDisplayName</a> (const char *szAction)</td></tr>
<tr class="memdesc:a7544807471e5a3db721ca79c6d1661ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the display name for the given action, or the action name itself, if no special display name was specified yet. <br /></td></tr>
<tr class="separator:a7544807471e5a3db721ca79c6d1661ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a429501e3c44af9a6d26b7ea4f3355821"><td class="memItemLeft" align="right" valign="top"><a id="a429501e3c44af9a6d26b7ea4f3355821"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a429501e3c44af9a6d26b7ea4f3355821">GetAllInputSets</a> (<a class="el" href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray</a>&lt; <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezString</a> &gt; &amp;out_InputSetNames)</td></tr>
<tr class="memdesc:a429501e3c44af9a6d26b7ea4f3355821"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the names of all currently registered input sets. <br /></td></tr>
<tr class="separator:a429501e3c44af9a6d26b7ea4f3355821"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52bec2a22309e27009591acf7df85d38"><td class="memItemLeft" align="right" valign="top"><a id="a52bec2a22309e27009591acf7df85d38"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a52bec2a22309e27009591acf7df85d38">GetAllInputActions</a> (const char *szInputSetName, <a class="el" href="../../d2/d4f/classez_dynamic_array.htm">ezDynamicArray</a>&lt; <a class="el" href="../../d4/d53/structez_hybrid_string.htm">ezString</a> &gt; &amp;out_InputActions)</td></tr>
<tr class="memdesc:a52bec2a22309e27009591acf7df85d38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the names of all input actions in the given input set. <br /></td></tr>
<tr class="separator:a52bec2a22309e27009591acf7df85d38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a802384c0a53ad9d972795a8b02178287"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a802384c0a53ad9d972795a8b02178287">SetExclusiveInputSet</a> (const char *szExclusiveSet)</td></tr>
<tr class="memdesc:a802384c0a53ad9d972795a8b02178287"><td class="mdescLeft">&#160;</td><td class="mdescRight">This can be used to pass input exclusively to this input set and no others.  <a href="../../d8/d45/classez_input_manager.htm#a802384c0a53ad9d972795a8b02178287">More...</a><br /></td></tr>
<tr class="separator:a802384c0a53ad9d972795a8b02178287"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf89f8726d9b2164fce50ac5d16ac7ec"><td class="memItemLeft" align="right" valign="top"><a id="adf89f8726d9b2164fce50ac5d16ac7ec"></a>
static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#adf89f8726d9b2164fce50ac5d16ac7ec">GetExclusiveInputSet</a> ()</td></tr>
<tr class="memdesc:adf89f8726d9b2164fce50ac5d16ac7ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether any input set gets input exclusively. <br /></td></tr>
<tr class="separator:adf89f8726d9b2164fce50ac5d16ac7ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a31f149158af36741ac389134a87542"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a9a31f149158af36741ac389134a87542">InjectInputSlotValue</a> (const char *szInputSlot, float fValue)</td></tr>
<tr class="memdesc:a9a31f149158af36741ac389134a87542"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function allows to 'inject' input state for one frame.  <a href="../../d8/d45/classez_input_manager.htm#a9a31f149158af36741ac389134a87542">More...</a><br /></td></tr>
<tr class="separator:a9a31f149158af36741ac389134a87542"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4274b2c7498c1bfe7e46a3702498247"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#aa4274b2c7498c1bfe7e46a3702498247">GetPressedInputSlot</a> (<a class="el" href="../../df/d72/structez_input_slot_flags.htm#a48934806cc8163cb09b11179db8c3808">ezInputSlotFlags::Enum</a> MustHaveFlags, <a class="el" href="../../df/d72/structez_input_slot_flags.htm#a48934806cc8163cb09b11179db8c3808">ezInputSlotFlags::Enum</a> MustNotHaveFlags)</td></tr>
<tr class="memdesc:aa4274b2c7498c1bfe7e46a3702498247"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether any input slot has been triggered in this frame, which has all <em>MustHaveFlags</em> and has none of the <em>MustNotHaveFlags</em>.  <a href="../../d8/d45/classez_input_manager.htm#aa4274b2c7498c1bfe7e46a3702498247">More...</a><br /></td></tr>
<tr class="separator:aa4274b2c7498c1bfe7e46a3702498247"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58dc71caccb2b99e4d0fa54d068f460a"><td class="memItemLeft" align="right" valign="top"><a id="a58dc71caccb2b99e4d0fa54d068f460a"></a>
static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a58dc71caccb2b99e4d0fa54d068f460a">ConvertScanCodeToEngineName</a> (ezUInt8 uiScanCode, bool bIsExtendedKey)</td></tr>
<tr class="memdesc:a58dc71caccb2b99e4d0fa54d068f460a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mostly for internal use. Converts a scan-code value to the string that is used inside the engine for that key. <br /></td></tr>
<tr class="separator:a58dc71caccb2b99e4d0fa54d068f460a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7442d527154c7cbf556033309cd86311"><td class="memItemLeft" align="right" valign="top"><a id="a7442d527154c7cbf556033309cd86311"></a>
static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a7442d527154c7cbf556033309cd86311">GetInputSlotTouchPoint</a> (unsigned int index)</td></tr>
<tr class="memdesc:a7442d527154c7cbf556033309cd86311"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper for retrieving the input slot string for touch point with a given index. <br /></td></tr>
<tr class="separator:a7442d527154c7cbf556033309cd86311"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26e33a8953f02c6e2e26df3559997961"><td class="memItemLeft" align="right" valign="top"><a id="a26e33a8953f02c6e2e26df3559997961"></a>
static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a26e33a8953f02c6e2e26df3559997961">GetInputSlotTouchPointPositionX</a> (unsigned int index)</td></tr>
<tr class="memdesc:a26e33a8953f02c6e2e26df3559997961"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper for retrieving the input slot string for touch point x position with a given index. <br /></td></tr>
<tr class="separator:a26e33a8953f02c6e2e26df3559997961"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dfcc5e8407b194280f0b1239adff306"><td class="memItemLeft" align="right" valign="top"><a id="a4dfcc5e8407b194280f0b1239adff306"></a>
static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a4dfcc5e8407b194280f0b1239adff306">GetInputSlotTouchPointPositionY</a> (unsigned int index)</td></tr>
<tr class="memdesc:a4dfcc5e8407b194280f0b1239adff306"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper for retrieving the input slot string for touch point y position with a given index. <br /></td></tr>
<tr class="separator:a4dfcc5e8407b194280f0b1239adff306"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23c52d3ed14d300efe5d98dfda46822e"><td class="memItemLeft" align="right" valign="top"><a id="a23c52d3ed14d300efe5d98dfda46822e"></a>
static ezEventSubscriptionID&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#a23c52d3ed14d300efe5d98dfda46822e">AddEventHandler</a> (<a class="el" href="../../dd/de2/classez_event_base.htm#a15db4b9552ac331db5b96c866d745f6b">ezEventInput::Handler</a> handler)</td></tr>
<tr class="memdesc:a23c52d3ed14d300efe5d98dfda46822e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an event handler that is called for input events. <br /></td></tr>
<tr class="separator:a23c52d3ed14d300efe5d98dfda46822e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4861b3eb987defbc4c3d91ef2926de3"><td class="memItemLeft" align="right" valign="top"><a id="ac4861b3eb987defbc4c3d91ef2926de3"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d45/classez_input_manager.htm#ac4861b3eb987defbc4c3d91ef2926de3">RemoveEventHandler</a> (<a class="el" href="../../dd/de2/classez_event_base.htm#a15db4b9552ac331db5b96c866d745f6b">ezEventInput::Handler</a> handler)</td></tr>
<tr class="memdesc:ac4861b3eb987defbc4c3d91ef2926de3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes a previously added event handler. <br /></td></tr>
<tr class="separator:ac4861b3eb987defbc4c3d91ef2926de3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a470c4dad2a55ad126eeb27a2a94e0e62"><td class="memItemLeft" align="right" valign="top"><a id="a470c4dad2a55ad126eeb27a2a94e0e62"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>RemoveEventHandler</b> (ezEventSubscriptionID id)</td></tr>
<tr class="separator:a470c4dad2a55ad126eeb27a2a94e0e62"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:ac8af8a99e2f15d40de80b274657dd58b"><td class="memItemLeft" align="right" valign="top"><a id="ac8af8a99e2f15d40de80b274657dd58b"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>ezInputDevice</b></td></tr>
<tr class="separator:ac8af8a99e2f15d40de80b274657dd58b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The central class to set up and query the state of all input. </p>
<p>The <a class="el" href="../../d8/d45/classez_input_manager.htm" title="The central class to set up and query the state of all input.">ezInputManager</a> is the central hub through which you can configure which keys will trigger which actions. You can query in which state an action is (inactive (up), active (down), just recently activated (pressed) or just recently deactivated (released)). You can query their values (e.g. how much a thumb-stick or the mouse was moved). Additionally you can localize buttons and actions. The internal data will always use English names and the US keyboard layout, but what with which names those keys are presented to the user can be changed. Although the input manager allows to query the state of each key, button, axis, etc. directly, this is not advised. Instead the user should set up 'actions' and define which keys will trigger those actions. At runtime the user should only query the state of actions. In the best case, an application allows the player to change the mapping which keys are used to trigger which actions. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a4eae60ac11a8c9978141d6a24ff75687"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4eae60ac11a8c9978141d6a24ff75687">&#9670;&nbsp;</a></span>ClearInputMapping()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezInputManager::ClearInputMapping </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szInputSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szInputSlot</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>If <em>szInputSlot</em> is used in any action in <em>szInputSet</em>, it will be removed from all of them. </p>
<p>This should be used to reset the usage of an input slot before it is bound to another input action. </p>

</div>
</div>
<a id="a7b5bd19450532c9c468f5700be890efd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b5bd19450532c9c468f5700be890efd">&#9670;&nbsp;</a></span>GetInputActionState()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d99/structez_key_state.htm#ae137489e8c29bbebaf694daa5cfe874f">ezKeyState::Enum</a> ezInputManager::GetInputActionState </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szInputSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szAction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>pValue</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezInt8 *&#160;</td>
          <td class="paramname"><em>iTriggeredSlot</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the current state and value of the given input action. </p>
<p>This is the one function that is called repeatedly at runtime to figure out which actions are active and thus which game-play functions to execute. You can (and should) use the /a pValue to scale game play features (e.g. how fast to drive). </p>

</div>
</div>
<a id="aadab2f0160b138aee910a5ff4d759de6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aadab2f0160b138aee910a5ff4d759de6">&#9670;&nbsp;</a></span>GetInputSlotDisplayName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * ezInputManager::GetInputSlotDisplayName </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szInputSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szAction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ezInt32&#160;</td>
          <td class="paramname"><em>iTrigger</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A shortcut to get the display name of the input slot bound to a given action. </p>
<p>If iTrigger is set, the name of that trigger (0 .. ezInputActionConfig::MaxInputSlotAlternatives) will be used. If iTrigger is less than 0, the first valid trigger is used. If iTrigger is outside the valid range or no valid trigger is bound, nullptr is returned. </p>
<dl class="test"><dt><b><a class="el" href="../../d4/df6/test.htm#_test000001">Test:</a></b></dt><dd>This is new </dd></dl>

</div>
</div>
<a id="a7f1ae016bd1b09e8c489c87d8cc2a8f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f1ae016bd1b09e8c489c87d8cc2a8f8">&#9670;&nbsp;</a></span>GetInputSlotState()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d99/structez_key_state.htm#ae137489e8c29bbebaf694daa5cfe874f">ezKeyState::Enum</a> ezInputManager::GetInputSlotState </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szInputSlot</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>pValue</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the current key state of the given input slot and optionally also returns its full value. </p>
<p>Do not use this function, unless you really, really need the value of exactly this key. Prefer to map your key to an action and then use <a class="el" href="../../d8/d45/classez_input_manager.htm#a7b5bd19450532c9c468f5700be890efd" title="Returns the current state and value of the given input action.">GetInputActionState()</a>. That method is more robust and extensible. </p>

</div>
</div>
<a id="aa4274b2c7498c1bfe7e46a3702498247"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4274b2c7498c1bfe7e46a3702498247">&#9670;&nbsp;</a></span>GetPressedInputSlot()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * ezInputManager::GetPressedInputSlot </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d72/structez_input_slot_flags.htm#a48934806cc8163cb09b11179db8c3808">ezInputSlotFlags::Enum</a>&#160;</td>
          <td class="paramname"><em>MustHaveFlags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d72/structez_input_slot_flags.htm#a48934806cc8163cb09b11179db8c3808">ezInputSlotFlags::Enum</a>&#160;</td>
          <td class="paramname"><em>MustNotHaveFlags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks whether any input slot has been triggered in this frame, which has all <em>MustHaveFlags</em> and has none of the <em>MustNotHaveFlags</em>. </p>
<p>This function can be used in a UI to wait for user input and then assign that input to a certain action. </p>

</div>
</div>
<a id="a9a31f149158af36741ac389134a87542"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a31f149158af36741ac389134a87542">&#9670;&nbsp;</a></span>InjectInputSlotValue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezInputManager::InjectInputSlotValue </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szInputSlot</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fValue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This function allows to 'inject' input state for one frame. </p>
<p>This can be useful to emulate certain keys, e.g. for virtual devices. Note that it usually makes more sense to actually have another input device, however this can be used to get data into the system quickly for when a full blown input device might be overkill. The injected input state is cleared immediately after it has been processed, so to keep a virtual input slot active, the input needs to be injected every frame.</p>
<p>Note that when the input is injected after <a class="el" href="../../d8/d45/classez_input_manager.htm#aeabab35c354ecb105150be7a40339ba0" title="Updates the state of the input manager. This should be called exactly once each frame.">ezInputManager::Update</a> was called, its effect will be delayed by one frame. </p>

</div>
</div>
<a id="a5da4de03391ce691ec6aa07514f01b99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5da4de03391ce691ec6aa07514f01b99">&#9670;&nbsp;</a></span>PollHardware()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezInputManager::PollHardware </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Makes sure that hardware input is processed at this moment, which allows to do this more often than <a class="el" href="../../d8/d45/classez_input_manager.htm#aeabab35c354ecb105150be7a40339ba0" title="Updates the state of the input manager. This should be called exactly once each frame.">Update()</a> is called. </p>
<p>When you have a game where you are doing relatively few game updates (including processing input), for example only 20 times per second, it is possible to 'miss' input. <a class="el" href="../../d8/d45/classez_input_manager.htm#a5da4de03391ce691ec6aa07514f01b99" title="Makes sure that hardware input is processed at this moment, which allows to do this more often than U...">PollHardware()</a> allows to introduce sampling the hardware state more often to prevent this. E.g. when your renderer renders at 60 Hz, you can poll input also at 60 Hz, even though you really only process it at 20 Hz. In typical usage scenarios this is not required to do and can be ignored. Note that you can call <a class="el" href="../../d8/d45/classez_input_manager.htm#a5da4de03391ce691ec6aa07514f01b99" title="Makes sure that hardware input is processed at this moment, which allows to do this more often than U...">PollHardware()</a> as often as you like and at irregular intervals, it will not have a negative effect on the input states. </p>

</div>
</div>
<a id="a552f59505e133a242f812ee46202ea25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a552f59505e133a242f812ee46202ea25">&#9670;&nbsp;</a></span>RemoveInputAction()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezInputManager::RemoveInputAction </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szInputSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szAction</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Deletes all state associated with the given input action. </p>
<p>It is not necessary to call this function for cleanup. </p>

</div>
</div>
<a id="a12f8944bb110173b7b3c152e1bbe4978"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12f8944bb110173b7b3c152e1bbe4978">&#9670;&nbsp;</a></span>RetrieveLastCharacter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ezUInt32 ezInputManager::RetrieveLastCharacter </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bResetCurrent</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the last typed character as the OS has reported it. Thus supports Unicode etc. </p>
<p>If <em>bResetCurrent</em> is true, the internal last character will be reset to '\0'. If it is false, the internal state will not be changed. This should only be used, if the calling code does not do anything meaningful with the value. </p>

</div>
</div>
<a id="a802384c0a53ad9d972795a8b02178287"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a802384c0a53ad9d972795a8b02178287">&#9670;&nbsp;</a></span>SetExclusiveInputSet()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ezInputManager::SetExclusiveInputSet </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szExclusiveSet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This can be used to pass input exclusively to this input set and no others. </p>
<p>Querying input from other input sets will always return 'key up'. </p>

</div>
</div>
<a id="a7aa9cd4190b9a313152fb2a7ae1b7620"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7aa9cd4190b9a313152fb2a7ae1b7620">&#9670;&nbsp;</a></span>SetInputActionConfig()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezInputManager::SetInputActionConfig </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szInputSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szAction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d2/dee/structez_input_action_config.htm">ezInputActionConfig</a> &amp;&#160;</td>
          <td class="paramname"><em>Config</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bClearPreviousInputMappings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This is the one function to set up which input actions are available and by which input slots (keys) they are triggered. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">szInputSet</td><td>'Input Sets' are sets of actions that are disjunct from each other. That means the same input slot (key, mouse button, etc.) can trigger multiple different actions from different input sets. For example In the input set 'Game' the left mouse button may trigger the action 'Shoot', but in the input set 'UI' the left mouse button may trigger the action 'Click'. All input sets are always evaluated and update their state simultaneously. The user only has to decide which actions to react to, ie. whether the game is currently running and thus the 'Game' input set is queried or whether a menu is shown and thus the 'UI' input set is queried. </td></tr>
    <tr><td class="paramname">szAction</td><td>The action that is supposed to be triggered. The same action name may be reused in multiple input sets, they will have nothing in common. The action name should describe WHAT is to be done, not which key the user pressed. For example an action could be 'player_forwards'. Which key is set to trigger that action should be irrelevant at run-time. </td></tr>
    <tr><td class="paramname">Config</td><td>This struct defines exactly which input slots (keys, buttons etc.) will trigger this action. The configuration allows to scale key values by the frame time, to get smooth movement when the frame-rate varies. It allows to only accept input from a slot if two other slots have certain values. This makes it possible to react to mouse or touch input only if that input is done inside a certain input area. The action can be triggered by multiple keys, if desired. In the most common cases, one will only set one or two input slots as triggers (Config.m_sInputSlotTrigger) and possibly decide whether frame time scaling is required. It makes sense to let the <a class="el" href="../../d8/d45/classez_input_manager.htm" title="The central class to set up and query the state of all input.">ezInputManager</a> do the frame time scaling, because it should not be applied to all input, e.g. mouse delta values should never be scaled by the frame time. </td></tr>
    <tr><td class="paramname">bClearPreviousInputMappings</td><td>If set to true it is ensured that all the input slots that are used by this action are not mapped to any other action. That means no other action can be triggered by this key within this input set. For most actions this should be set to true. However, if you have several actions that can be triggered by the same slot (for example touch input) but only in different areas of the screen, this should be set to false. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aeabab35c354ecb105150be7a40339ba0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeabab35c354ecb105150be7a40339ba0">&#9670;&nbsp;</a></span>Update()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ezInputManager::Update </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d3/d90/structez_time.htm">ezTime</a>&#160;</td>
          <td class="paramname"><em>tTimeDifference</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Updates the state of the input manager. This should be called exactly once each frame. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tTimeDifference</td><td>The time elapsed since the last update. This will affect the value scaling of actions that use frame time scaling and is necessary to update controller vibration tracks. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Core/Input/<a class="el" href="../../da/d09/_input_manager_8h_source.htm">InputManager.h</a></li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Core/Input/Implementation/Action.cpp</li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Core/Input/Implementation/InputManager.cpp</li>
<li>/home/runner/work/ezEngine/ezEngine/Code/Engine/Core/Input/Implementation/ScancodeTable.cpp</li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d8/d45/classez_input_manager.htm">ezInputManager</a></li>
    <li class="footer">Generated on Mon Oct 18 2021 15:33:37 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
