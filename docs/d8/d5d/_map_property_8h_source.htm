<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Reflection/Implementation/MapProperty.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.10</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d8/d5d/_map_property_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">MapProperty.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/AbstractProperty.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160; </div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keyword">class </span><a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00010"></a><span class="lineno"><a class="line" href="../../d6/d97/classez_typed_map_property.htm">   10</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d6/d97/classez_typed_map_property.htm">ezTypedMapProperty</a> : <span class="keyword">public</span> <a class="code" href="../../d3/d48/classez_abstract_map_property.htm">ezAbstractMapProperty</a></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;{</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <a class="code" href="../../d6/d97/classez_typed_map_property.htm">ezTypedMapProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName)</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    : <a class="code" href="../../d3/d48/classez_abstract_map_property.htm#a417cc414770a81ba1e4b4318af6b8dbc">ezAbstractMapProperty</a>(szPropertyName)</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  {</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    m_Flags = ezPropertyFlags::GetParameterFlags&lt;Type&gt;();</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    EZ_CHECK_AT_COMPILETIME_MSG(</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;      !std::is_pointer&lt;Type&gt;::value ||</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        <a class="code" href="../../df/da8/structez_variant_type_deduction.htm">ezVariant::TypeDeduction</a>&lt;<span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#a9dcee6bb8dad253cbdc804cd45ce22f1">ezTypeTraits&lt;Type&gt;::NonConstReferencePointerType</a>&gt;::value == <a class="code" href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612">ezVariantType::Invalid</a>,</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;      <span class="stringliteral">&quot;Pointer to standard types are not supported.&quot;</span>);</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  }</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../d6/d97/classez_typed_map_property.htm#a82cc01139461de84987829e3a092fb23">   23</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* <a class="code" href="../../d6/d97/classez_typed_map_property.htm#a82cc01139461de84987829e3a092fb23">GetSpecificType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> ezGetStaticRTTI&lt;typename ezTypeTraits&lt;Type&gt;::NonConstReferencePointerType&gt;(); }</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;};</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type, <span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="../../de/d17/classez_accessor_map_property.htm">   28</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../de/d17/classez_accessor_map_property.htm">ezAccessorMapProperty</a> : <span class="keyword">public</span> <a class="code" href="../../d6/d97/classez_typed_map_property.htm">ezTypedMapProperty</a>&lt;Type&gt;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  <span class="keyword">using</span> ContainerType = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  <span class="keyword">using</span> RealType = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keyword">using</span> InsertFunc = void (Class::*)(<span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, Type value);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  <span class="keyword">using</span> RemoveFunc = void (Class::*)(<span class="keyword">const</span> <span class="keywordtype">char</span>* szKey);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keyword">using</span> GetValueFunc = bool (Class::*)(<span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, RealType&amp; value) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <span class="keyword">using</span> GetKeyRangeFunc = Container (Class::*)() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <a class="code" href="../../de/d17/classez_accessor_map_property.htm">ezAccessorMapProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetKeyRangeFunc getKeys, GetValueFunc getValue, InsertFunc insert, RemoveFunc remove)</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    : <a class="code" href="../../d6/d97/classez_typed_map_property.htm">ezTypedMapProperty&lt;Type&gt;</a>(szPropertyName)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    EZ_ASSERT_DEBUG(getKeys != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The getKeys function of a map property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    EZ_ASSERT_DEBUG(getValue != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The GetValueFunc function of a map property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    m_GetKeyRange = getKeys;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    m_GetValue = getValue;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    m_Insert = insert;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    m_Remove = remove;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">if</span> (m_Insert == <span class="keyword">nullptr</span> || remove == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      ezAbstractMapProperty::m_Flags.<a class="code" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<a class="code" href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  }</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="../../de/d17/classez_accessor_map_property.htm#acb30d02d11ed15a05a17deb44b7633f8">   54</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../de/d17/classez_accessor_map_property.htm#acb30d02d11ed15a05a17deb44b7633f8">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// this should be decltype(auto) c = ...; but MSVC 16 is too dumb for that (MSVC 15 works fine)</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    decltype((<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)()) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)();</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">return</span> begin(c) == end(c);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  }</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="../../de/d17/classez_accessor_map_property.htm#a93c6e3f39d36e42c9722efa686d5bed8">   62</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../de/d17/classez_accessor_map_property.htm#a93c6e3f39d36e42c9722efa686d5bed8">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> override</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      <span class="comment">// this should be decltype(auto) c = ...; but MSVC 16 is too dumb for that (MSVC 15 works fine)</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      decltype((<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)()) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)();</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      <span class="keyword">auto</span> it = begin(c);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      <span class="keywordflow">if</span> (it != end(c))</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="../../de/d17/classez_accessor_map_property.htm#a089ce435b8f1198297b7490cd23df74c">Remove</a>(pInstance, *it);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  }</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="../../de/d17/classez_accessor_map_property.htm#acff3d06999c86db9c9e526b20b4ee950">   77</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../de/d17/classez_accessor_map_property.htm#acff3d06999c86db9c9e526b20b4ee950">Insert</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    EZ_ASSERT_DEBUG(m_Insert != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no insert function, thus it is read-only.&quot;</span>, <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Insert)(szKey, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="../../de/d17/classez_accessor_map_property.htm#a089ce435b8f1198297b7490cd23df74c">   83</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../de/d17/classez_accessor_map_property.htm#a089ce435b8f1198297b7490cd23df74c">Remove</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey)<span class="keyword"> override</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    EZ_ASSERT_DEBUG(m_Remove != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no remove function, thus it is read-only.&quot;</span>, <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Remove)(szKey);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="../../de/d17/classez_accessor_map_property.htm#a727cba1f1b58c92cc4b8ba2a39f2b2ef">   89</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../de/d17/classez_accessor_map_property.htm#a727cba1f1b58c92cc4b8ba2a39f2b2ef">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    RealType value;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValue)(szKey, value);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="../../de/d17/classez_accessor_map_property.htm#a9e05a594b88152f3ef87726dd4c6eea1">   95</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../de/d17/classez_accessor_map_property.htm#a9e05a594b88152f3ef87726dd4c6eea1">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValue)(szKey, *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="../../de/d17/classez_accessor_map_property.htm#a3a67bdb9a43ca0802e05f21ea956b473">  100</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../de/d17/classez_accessor_map_property.htm#a3a67bdb9a43ca0802e05f21ea956b473">GetKeys</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../d8/deb/classez_hybrid_array.htm">ezHybridArray&lt;ezString, 16&gt;</a>&amp; out_keys)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    out_keys.<a class="code" href="../../dc/d59/classez_array_base.htm#a74099c2d7681df345aedf8cfe24f0bc4">Clear</a>();</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    decltype(<span class="keyword">auto</span>) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)();</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; key : c)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;      out_keys.<a class="code" href="../../dc/d59/classez_array_base.htm#abc514bdf8b2de7b5b220ffdbd862e830">PushBack</a>(key);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  GetKeyRangeFunc m_GetKeyRange;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  GetValueFunc m_GetValue;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  InsertFunc m_Insert;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  RemoveFunc m_Remove;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;};</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type, <span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="../../df/d8a/classez_write_accessor_map_property.htm">  119</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../df/d8a/classez_write_accessor_map_property.htm">ezWriteAccessorMapProperty</a> : <span class="keyword">public</span> <a class="code" href="../../d6/d97/classez_typed_map_property.htm">ezTypedMapProperty</a>&lt;Type&gt;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keyword">using</span> ContainerType = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keyword">using</span> ContainerSubType = <span class="keyword">typename</span> <a class="code" href="../../d7/db6/structez_container_sub_type_resolver.htm">ezContainerSubTypeResolver&lt;ContainerType&gt;::Type</a>;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  <span class="keyword">using</span> RealType = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <span class="keyword">using</span> InsertFunc = void (Class::*)(<span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, Type value);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keyword">using</span> RemoveFunc = void (Class::*)(<span class="keyword">const</span> <span class="keywordtype">char</span>* szKey);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keyword">using</span> GetContainerFunc = Container (Class::*)() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <a class="code" href="../../df/d8a/classez_write_accessor_map_property.htm">ezWriteAccessorMapProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetContainerFunc getContainer, InsertFunc insert, RemoveFunc remove)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    : <a class="code" href="../../d6/d97/classez_typed_map_property.htm">ezTypedMapProperty&lt;Type&gt;</a>(szPropertyName)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    EZ_ASSERT_DEBUG(getContainer != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The get count function of a map property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    m_GetContainer = getContainer;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    m_Insert = insert;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    m_Remove = remove;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">if</span> (m_Insert == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      ezAbstractMapProperty::m_Flags.<a class="code" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<a class="code" href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno"><a class="line" href="../../df/d8a/classez_write_accessor_map_property.htm#ae3e8f2bcec0b771811486f125c3e5aa5">  143</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d8a/classez_write_accessor_map_property.htm#ae3e8f2bcec0b771811486f125c3e5aa5">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)().<a class="code" href="../../df/d8a/classez_write_accessor_map_property.htm#ae3e8f2bcec0b771811486f125c3e5aa5">IsEmpty</a>(); }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="../../df/d8a/classez_write_accessor_map_property.htm#a50a150156110561dc42b71ad8bd9660a">  145</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d8a/classez_write_accessor_map_property.htm#a50a150156110561dc42b71ad8bd9660a">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> override</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    decltype(<span class="keyword">auto</span>) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)();</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">while</span> (!<a class="code" href="../../df/d8a/classez_write_accessor_map_property.htm#ae3e8f2bcec0b771811486f125c3e5aa5">IsEmpty</a>(pInstance))</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;      <span class="keyword">auto</span> it = c.GetIterator();</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      <a class="code" href="../../df/d8a/classez_write_accessor_map_property.htm#ac5cf19d7d76425b6484e007e20071a68">Remove</a>(pInstance, it.Key());</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="../../df/d8a/classez_write_accessor_map_property.htm#a7e113716b9577354dcd2306f25d5dd78">  155</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d8a/classez_write_accessor_map_property.htm#a7e113716b9577354dcd2306f25d5dd78">Insert</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    EZ_ASSERT_DEBUG(m_Insert != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no insert function, thus it is read-only.&quot;</span>, <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Insert)(szKey, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="../../df/d8a/classez_write_accessor_map_property.htm#ac5cf19d7d76425b6484e007e20071a68">  161</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d8a/classez_write_accessor_map_property.htm#ac5cf19d7d76425b6484e007e20071a68">Remove</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey)<span class="keyword"> override</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    EZ_ASSERT_DEBUG(m_Remove != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no remove function, thus it is read-only.&quot;</span>, <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Remove)(szKey);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="../../df/d8a/classez_write_accessor_map_property.htm#a33b84b17ba163875618179bd01d1e43c">  167</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d8a/classez_write_accessor_map_property.htm#a33b84b17ba163875618179bd01d1e43c">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)().<a class="code" href="../../df/d8a/classez_write_accessor_map_property.htm#a33b84b17ba163875618179bd01d1e43c">Contains</a>(szKey);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="../../df/d8a/classez_write_accessor_map_property.htm#ab72e7da97977b8a622c8d0e5975d69eb">  172</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d8a/classez_write_accessor_map_property.htm#ab72e7da97977b8a622c8d0e5975d69eb">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    decltype(<span class="keyword">auto</span>) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)();</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">const</span> RealType* value = c.GetValue(szKey);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">if</span> (value)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;      *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject) = *value;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> value != <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="../../df/d8a/classez_write_accessor_map_property.htm#a731baa53c3a0e6015138ae2e30be0276">  183</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d8a/classez_write_accessor_map_property.htm#a731baa53c3a0e6015138ae2e30be0276">GetKeys</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../d8/deb/classez_hybrid_array.htm">ezHybridArray&lt;ezString, 16&gt;</a>&amp; out_keys)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    decltype(<span class="keyword">auto</span>) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)();</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    out_keys.<a class="code" href="../../dc/d59/classez_array_base.htm#a74099c2d7681df345aedf8cfe24f0bc4">Clear</a>();</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = c.GetIterator(); it.IsValid(); ++it)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      out_keys.<a class="code" href="../../dc/d59/classez_array_base.htm#abc514bdf8b2de7b5b220ffdbd862e830">PushBack</a>(it.Key());</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  GetContainerFunc m_GetContainer;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  InsertFunc m_Insert;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  RemoveFunc m_Remove;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;};</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, Container Class::*Member&gt;</div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="../../d4/d98/structez_map_property_accessor.htm">  202</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d4/d98/structez_map_property_accessor.htm">ezMapPropertyAccessor</a></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keyword">using</span> ContainerType = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keyword">using</span> Type = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm">ezTypeTraits&lt;typename ezContainerSubTypeResolver&lt;ContainerType&gt;::Type</a>&gt;::NonConstReferenceType;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> ContainerType&amp; GetConstContainer(<span class="keyword">const</span> Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  <span class="keyword">static</span> ContainerType&amp; GetContainer(Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;};</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, <span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="../../dc/d36/classez_member_map_property.htm">  214</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../dc/d36/classez_member_map_property.htm">ezMemberMapProperty</a> : <span class="keyword">public</span> <a class="code" href="../../d6/d97/classez_typed_map_property.htm">ezTypedMapProperty</a>&lt;typename ezTypeTraits&lt;Type&gt;::NonConstReferenceType&gt;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  <span class="keyword">using</span> RealType = <span class="keyword">typename</span> <a class="code" href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <span class="keyword">using</span> GetConstContainerFunc = <span class="keyword">const</span> Container&amp; (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <span class="keyword">using</span> GetContainerFunc = Container&amp; (*)(Class* pInstance);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <a class="code" href="../../dc/d36/classez_member_map_property.htm">ezMemberMapProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetConstContainerFunc constGetter, GetContainerFunc getter)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    : <a class="code" href="../../d6/d97/classez_typed_map_property.htm">ezTypedMapProperty&lt;RealType&gt;</a>(szPropertyName)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    EZ_ASSERT_DEBUG(constGetter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The const get count function of an array property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    m_ConstGetter = constGetter;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    m_Getter = getter;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">if</span> (m_Getter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      ezAbstractMapProperty::m_Flags.<a class="code" href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">Add</a>(<a class="code" href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="../../dc/d36/classez_member_map_property.htm#a05b6d861bdd757a2bd9f61559834a1b8">  233</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../dc/d36/classez_member_map_property.htm#a05b6d861bdd757a2bd9f61559834a1b8">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).IsEmpty(); }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="../../dc/d36/classez_member_map_property.htm#aadf934965a4946c8e8765d9de675e949">  235</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d36/classez_member_map_property.htm#aadf934965a4946c8e8765d9de675e949">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> override</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    EZ_ASSERT_DEBUG(</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;      m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Clear();</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  }</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; </div>
<div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="../../dc/d36/classez_member_map_property.htm#a1185c348252d177d46e7a97c72be037e">  242</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d36/classez_member_map_property.htm#a1185c348252d177d46e7a97c72be037e">Insert</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    EZ_ASSERT_DEBUG(</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;      m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Insert(szKey, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="../../dc/d36/classez_member_map_property.htm#a22472415b7bf99f347d1bcfb91dcb77e">  249</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d36/classez_member_map_property.htm#a22472415b7bf99f347d1bcfb91dcb77e">Remove</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey)<span class="keyword"> override</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    EZ_ASSERT_DEBUG(</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;      m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code" href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Remove(szKey);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  }</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno"><a class="line" href="../../dc/d36/classez_member_map_property.htm#aeabfd0191a101d323bcdf266d8c2179d">  256</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../dc/d36/classez_member_map_property.htm#aeabfd0191a101d323bcdf266d8c2179d">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">return</span> m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).Contains(szKey);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="../../dc/d36/classez_member_map_property.htm#af2d26427b3700afefcaba8a410fada53">  261</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../dc/d36/classez_member_map_property.htm#af2d26427b3700afefcaba8a410fada53">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keyword">const</span> RealType* value = m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).GetValue(szKey);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordflow">if</span> (value)</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;      *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject) = *value;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">return</span> value != <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno"><a class="line" href="../../dc/d36/classez_member_map_property.htm#a7443df578a6137c0f4d19adf1f192778">  271</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d36/classez_member_map_property.htm#a7443df578a6137c0f4d19adf1f192778">GetKeys</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../d8/deb/classez_hybrid_array.htm">ezHybridArray&lt;ezString, 16&gt;</a>&amp; out_keys)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    decltype(<span class="keyword">auto</span>) c = m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance));</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    out_keys.<a class="code" href="../../dc/d59/classez_array_base.htm#a74099c2d7681df345aedf8cfe24f0bc4">Clear</a>();</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = c.GetIterator(); it.IsValid(); ++it)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    {</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;      out_keys.<a class="code" href="../../dc/d59/classez_array_base.htm#abc514bdf8b2de7b5b220ffdbd862e830">PushBack</a>(it.Key());</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  GetConstContainerFunc m_ConstGetter;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  GetContainerFunc m_Getter;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;};</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassez_write_accessor_map_property_htm_a731baa53c3a0e6015138ae2e30be0276"><div class="ttname"><a href="../../df/d8a/classez_write_accessor_map_property.htm#a731baa53c3a0e6015138ae2e30be0276">ezWriteAccessorMapProperty::GetKeys</a></div><div class="ttdeci">virtual void GetKeys(const void *pInstance, ezHybridArray&lt; ezString, 16 &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:183</div></div>
<div class="ttc" id="aclassez_accessor_map_property_htm_a9e05a594b88152f3ef87726dd4c6eea1"><div class="ttname"><a href="../../de/d17/classez_accessor_map_property.htm#a9e05a594b88152f3ef87726dd4c6eea1">ezAccessorMapProperty::GetValue</a></div><div class="ttdeci">virtual bool GetValue(const void *pInstance, const char *szKey, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:95</div></div>
<div class="ttc" id="astructez_type_traits_htm_af2051eb05a731b9618b107540f8f46f8"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#af2051eb05a731b9618b107540f8f46f8">ezTypeTraits::NonConstReferenceType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type NonConstReferenceType</div><div class="ttdoc">removes reference and const qualifier</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:220</div></div>
<div class="ttc" id="astructez_type_traits_htm"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm">ezTypeTraits</a></div><div class="ttdef"><b>Definition:</b> TypeTraits.h:208</div></div>
<div class="ttc" id="aclassez_write_accessor_map_property_htm_ac5cf19d7d76425b6484e007e20071a68"><div class="ttname"><a href="../../df/d8a/classez_write_accessor_map_property.htm#ac5cf19d7d76425b6484e007e20071a68">ezWriteAccessorMapProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, const char *szKey) override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:161</div></div>
<div class="ttc" id="aclassez_accessor_map_property_htm_a089ce435b8f1198297b7490cd23df74c"><div class="ttname"><a href="../../de/d17/classez_accessor_map_property.htm#a089ce435b8f1198297b7490cd23df74c">ezAccessorMapProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, const char *szKey) override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:83</div></div>
<div class="ttc" id="aclassez_abstract_map_property_htm"><div class="ttname"><a href="../../d3/d48/classez_abstract_map_property.htm">ezAbstractMapProperty</a></div><div class="ttdoc">The base class for a property that represents a set of values.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:347</div></div>
<div class="ttc" id="aclassez_accessor_map_property_htm_acff3d06999c86db9c9e526b20b4ee950"><div class="ttname"><a href="../../de/d17/classez_accessor_map_property.htm#acff3d06999c86db9c9e526b20b4ee950">ezAccessorMapProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, const char *szKey, const void *pObject) override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:77</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a></div><div class="ttdoc">This enumerable class holds information about reflected types. Each instance represents one type that...</div><div class="ttdef"><b>Definition:</b> RTTI.h:30</div></div>
<div class="ttc" id="aclassez_write_accessor_map_property_htm_a50a150156110561dc42b71ad8bd9660a"><div class="ttname"><a href="../../df/d8a/classez_write_accessor_map_property.htm#a50a150156110561dc42b71ad8bd9660a">ezWriteAccessorMapProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:145</div></div>
<div class="ttc" id="astructez_bitflags_htm_aaa83c1e77b70d0b549604a64c20f8a83"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm#aaa83c1e77b70d0b549604a64c20f8a83">ezBitflags::Add</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void Add(const ezBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Sets the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:148</div></div>
<div class="ttc" id="aclassez_array_base_htm_abc514bdf8b2de7b5b220ffdbd862e830"><div class="ttname"><a href="../../dc/d59/classez_array_base.htm#abc514bdf8b2de7b5b220ffdbd862e830">ezArrayBase&lt; T, ezDynamicArrayBase&lt; T &gt; &gt;::PushBack</a></div><div class="ttdeci">void PushBack(const T &amp;value)</div><div class="ttdoc">Pushes value at the end of the array.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:321</div></div>
<div class="ttc" id="aclassez_accessor_map_property_htm_acb30d02d11ed15a05a17deb44b7633f8"><div class="ttname"><a href="../../de/d17/classez_accessor_map_property.htm#acb30d02d11ed15a05a17deb44b7633f8">ezAccessorMapProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:54</div></div>
<div class="ttc" id="astructez_container_sub_type_resolver_htm"><div class="ttname"><a href="../../d7/db6/structez_container_sub_type_resolver.htm">ezContainerSubTypeResolver</a></div><div class="ttdoc">Template that allows to probe a container for its element type.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:454</div></div>
<div class="ttc" id="aclassez_member_map_property_htm_a05b6d861bdd757a2bd9f61559834a1b8"><div class="ttname"><a href="../../dc/d36/classez_member_map_property.htm#a05b6d861bdd757a2bd9f61559834a1b8">ezMemberMapProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:233</div></div>
<div class="ttc" id="aclassez_member_map_property_htm_a1185c348252d177d46e7a97c72be037e"><div class="ttname"><a href="../../dc/d36/classez_member_map_property.htm#a1185c348252d177d46e7a97c72be037e">ezMemberMapProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, const char *szKey, const void *pObject) override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:242</div></div>
<div class="ttc" id="aclassez_accessor_map_property_htm_a93c6e3f39d36e42c9722efa686d5bed8"><div class="ttname"><a href="../../de/d17/classez_accessor_map_property.htm#a93c6e3f39d36e42c9722efa686d5bed8">ezAccessorMapProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:62</div></div>
<div class="ttc" id="astructez_variant_type_deduction_htm"><div class="ttname"><a href="../../df/da8/structez_variant_type_deduction.htm">ezVariantTypeDeduction</a></div><div class="ttdoc">A helper struct to convert the C++ type, which is passed as the template argument,...</div><div class="ttdef"><b>Definition:</b> VariantType.h:94</div></div>
<div class="ttc" id="aclassez_abstract_property_htm_a978bb805adf38827ef6485801fb25341"><div class="ttname"><a href="../../d6/d81/classez_abstract_property.htm#a978bb805adf38827ef6485801fb25341">ezAbstractProperty::GetPropertyName</a></div><div class="ttdeci">const char * GetPropertyName() const</div><div class="ttdoc">Returns the name of the property.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:160</div></div>
<div class="ttc" id="aclassez_typed_map_property_htm"><div class="ttname"><a href="../../d6/d97/classez_typed_map_property.htm">ezTypedMapProperty</a></div><div class="ttdef"><b>Definition:</b> MapProperty.h:10</div></div>
<div class="ttc" id="astructez_map_property_accessor_htm"><div class="ttname"><a href="../../d4/d98/structez_map_property_accessor.htm">ezMapPropertyAccessor</a></div><div class="ttdef"><b>Definition:</b> MapProperty.h:202</div></div>
<div class="ttc" id="aclassez_write_accessor_map_property_htm_a7e113716b9577354dcd2306f25d5dd78"><div class="ttname"><a href="../../df/d8a/classez_write_accessor_map_property.htm#a7e113716b9577354dcd2306f25d5dd78">ezWriteAccessorMapProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, const char *szKey, const void *pObject) override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:155</div></div>
<div class="ttc" id="aclassez_abstract_map_property_htm_a417cc414770a81ba1e4b4318af6b8dbc"><div class="ttname"><a href="../../d3/d48/classez_abstract_map_property.htm#a417cc414770a81ba1e4b4318af6b8dbc">ezAbstractMapProperty::ezAbstractMapProperty</a></div><div class="ttdeci">ezAbstractMapProperty(const char *szPropertyName)</div><div class="ttdoc">Passes the property name through to ezAbstractProperty.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:351</div></div>
<div class="ttc" id="aclassez_member_map_property_htm_aeabfd0191a101d323bcdf266d8c2179d"><div class="ttname"><a href="../../dc/d36/classez_member_map_property.htm#aeabfd0191a101d323bcdf266d8c2179d">ezMemberMapProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, const char *szKey) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:256</div></div>
<div class="ttc" id="astructez_type_traits_htm_a9dcee6bb8dad253cbdc804cd45ce22f1"><div class="ttname"><a href="../../d1/d32/structez_type_traits.htm#a9dcee6bb8dad253cbdc804cd45ce22f1">ezTypeTraits::NonConstReferencePointerType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; typename std::remove_pointer&lt; T &gt;::type &gt;::type &gt;::type NonConstReferencePointerType</div><div class="ttdoc">removes reference, const and pointer qualifier Note that this removes the const and reference of the ...</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:227</div></div>
<div class="ttc" id="aclassez_accessor_map_property_htm_a727cba1f1b58c92cc4b8ba2a39f2b2ef"><div class="ttname"><a href="../../de/d17/classez_accessor_map_property.htm#a727cba1f1b58c92cc4b8ba2a39f2b2ef">ezAccessorMapProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, const char *szKey) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:89</div></div>
<div class="ttc" id="aclassez_write_accessor_map_property_htm_a33b84b17ba163875618179bd01d1e43c"><div class="ttname"><a href="../../df/d8a/classez_write_accessor_map_property.htm#a33b84b17ba163875618179bd01d1e43c">ezWriteAccessorMapProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, const char *szKey) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:167</div></div>
<div class="ttc" id="aclassez_member_map_property_htm"><div class="ttname"><a href="../../dc/d36/classez_member_map_property.htm">ezMemberMapProperty</a></div><div class="ttdef"><b>Definition:</b> MapProperty.h:214</div></div>
<div class="ttc" id="aclassez_member_map_property_htm_af2d26427b3700afefcaba8a410fada53"><div class="ttname"><a href="../../dc/d36/classez_member_map_property.htm#af2d26427b3700afefcaba8a410fada53">ezMemberMapProperty::GetValue</a></div><div class="ttdeci">virtual bool GetValue(const void *pInstance, const char *szKey, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:261</div></div>
<div class="ttc" id="aclassez_typed_map_property_htm_a82cc01139461de84987829e3a092fb23"><div class="ttname"><a href="../../d6/d97/classez_typed_map_property.htm#a82cc01139461de84987829e3a092fb23">ezTypedMapProperty::GetSpecificType</a></div><div class="ttdeci">virtual const ezRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition:</b> MapProperty.h:23</div></div>
<div class="ttc" id="aclassez_write_accessor_map_property_htm"><div class="ttname"><a href="../../df/d8a/classez_write_accessor_map_property.htm">ezWriteAccessorMapProperty</a></div><div class="ttdef"><b>Definition:</b> MapProperty.h:119</div></div>
<div class="ttc" id="aclassez_member_map_property_htm_a7443df578a6137c0f4d19adf1f192778"><div class="ttname"><a href="../../dc/d36/classez_member_map_property.htm#a7443df578a6137c0f4d19adf1f192778">ezMemberMapProperty::GetKeys</a></div><div class="ttdeci">virtual void GetKeys(const void *pInstance, ezHybridArray&lt; ezString, 16 &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:271</div></div>
<div class="ttc" id="astructez_property_flags_htm_a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a"><div class="ttname"><a href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa2a82793a685c6bbcabb465e870c36c8a">ezPropertyFlags::ReadOnly</a></div><div class="ttdeci">@ ReadOnly</div><div class="ttdoc">Can only be read but not modified.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:62</div></div>
<div class="ttc" id="aclassez_member_map_property_htm_aadf934965a4946c8e8765d9de675e949"><div class="ttname"><a href="../../dc/d36/classez_member_map_property.htm#aadf934965a4946c8e8765d9de675e949">ezMemberMapProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:235</div></div>
<div class="ttc" id="aclassez_accessor_map_property_htm"><div class="ttname"><a href="../../de/d17/classez_accessor_map_property.htm">ezAccessorMapProperty</a></div><div class="ttdef"><b>Definition:</b> MapProperty.h:28</div></div>
<div class="ttc" id="astructez_variant_type_htm_a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612"><div class="ttname"><a href="../../da/d6c/structez_variant_type.htm#a91ecf53decb31d57981c71043fa30299a4584fcc346fd11c86028e40233016612">ezVariantType::Invalid</a></div><div class="ttdeci">@ Invalid</div><div class="ttdoc">The variant stores no (valid) data at the moment.</div><div class="ttdef"><b>Definition:</b> VariantType.h:27</div></div>
<div class="ttc" id="aclassez_hybrid_array_htm"><div class="ttname"><a href="../../d8/deb/classez_hybrid_array.htm">ezHybridArray</a></div><div class="ttdoc">A hybrid array uses in-place storage to handle the first few elements without any allocation....</div><div class="ttdef"><b>Definition:</b> HybridArray.h:11</div></div>
<div class="ttc" id="aclassez_array_base_htm_a74099c2d7681df345aedf8cfe24f0bc4"><div class="ttname"><a href="../../dc/d59/classez_array_base.htm#a74099c2d7681df345aedf8cfe24f0bc4">ezArrayBase&lt; T, ezDynamicArrayBase&lt; T &gt; &gt;::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:170</div></div>
<div class="ttc" id="aclassez_write_accessor_map_property_htm_ae3e8f2bcec0b771811486f125c3e5aa5"><div class="ttname"><a href="../../df/d8a/classez_write_accessor_map_property.htm#ae3e8f2bcec0b771811486f125c3e5aa5">ezWriteAccessorMapProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:143</div></div>
<div class="ttc" id="aclassez_accessor_map_property_htm_a3a67bdb9a43ca0802e05f21ea956b473"><div class="ttname"><a href="../../de/d17/classez_accessor_map_property.htm#a3a67bdb9a43ca0802e05f21ea956b473">ezAccessorMapProperty::GetKeys</a></div><div class="ttdeci">virtual void GetKeys(const void *pInstance, ezHybridArray&lt; ezString, 16 &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:100</div></div>
<div class="ttc" id="aclassez_write_accessor_map_property_htm_ab72e7da97977b8a622c8d0e5975d69eb"><div class="ttname"><a href="../../df/d8a/classez_write_accessor_map_property.htm#ab72e7da97977b8a622c8d0e5975d69eb">ezWriteAccessorMapProperty::GetValue</a></div><div class="ttdeci">virtual bool GetValue(const void *pInstance, const char *szKey, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:172</div></div>
<div class="ttc" id="aclassez_member_map_property_htm_a22472415b7bf99f347d1bcfb91dcb77e"><div class="ttname"><a href="../../dc/d36/classez_member_map_property.htm#a22472415b7bf99f347d1bcfb91dcb77e">ezMemberMapProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, const char *szKey) override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:249</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_217b90e143c3d27cf4319fb9e916f4ad.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_4d499b0494fc84c22e280b98d7f4832b.htm">Implementation</a></li><li class="navelem"><b>MapProperty.h</b></li>
    <li class="footer">Generated on Sun Oct 9 2022 14:44:54 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
