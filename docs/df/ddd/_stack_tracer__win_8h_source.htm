<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/System/Implementation/Win/StackTracer_win.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('df/ddd/_stack_tracer__win_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">StackTracer_win.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#ifdef EZ_STACKTRACER_WIN_INL_H_INCLUDED</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#  error &quot;This file must not be included twice.&quot;</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#define EZ_STACKTRACER_WIN_INL_H_INCLUDED</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160; </div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;Foundation/FoundationInternal.h&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;EZ_FOUNDATION_INTERNAL_HEADER</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#define EZ_MSVC_WARNING_NUMBER 4091</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;Foundation/Basics/Compiler/MSVC/DisableWarning_MSVC.h&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;DbgHelp.h&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160; </div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;Foundation/Basics/Compiler/MSVC/RestoreWarning_MSVC.h&gt;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;Foundation/IO/OSFile.h&gt;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;Foundation/Logging/Log.h&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;Foundation/Math/Math.h&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">// Deactivate Doxygen document generation for the following block.</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  <span class="keyword">using</span> CaptureStackBackTraceFunc = WORD(__stdcall*)(DWORD FramesToSkip, DWORD FramesToCapture, PVOID* BackTrace, PDWORD BackTraceHash);</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  <span class="keyword">using</span> SymbolInitializeFunc = BOOL(__stdcall*)(HANDLE hProcess, PCWSTR UserSearchPath, BOOL fInvadeProcess);</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  <span class="keyword">using</span> SymbolLoadModuleFunc = DWORD64(__stdcall*)(HANDLE hProcess, HANDLE hFile, PCWSTR ImageName, PCWSTR ModuleName, DWORD64 BaseOfDll, DWORD DllSize, PMODLOAD_DATA Data, DWORD Flags);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keyword">using</span> SymbolGetModuleInfoFunc = BOOL(__stdcall*)(HANDLE hProcess, DWORD64 qwAddr, PIMAGEHLP_MODULEW64 ModuleInfo);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keyword">using</span> SymbolFunctionTableAccess = PVOID(__stdcall*)(HANDLE hProcess, DWORD64 AddrBase);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keyword">using</span> SymbolGetModuleBaseFunc = DWORD64(__stdcall*)(HANDLE hProcess, DWORD64 qwAddr);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="keyword">using</span> StackWalk = BOOL(__stdcall*)(DWORD MachineType, HANDLE hProcess, HANDLE hThread, LPSTACKFRAME64 StackFrame, PVOID ContextRecord, PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine, PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine, PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine, PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keyword">using</span> SymbolFromAddressFunc = BOOL(__stdcall*)(HANDLE hProcess, DWORD64 Address, PDWORD64 Displacement, PSYMBOL_INFOW Symbol);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keyword">using</span> LineFromAddressFunc = BOOL(__stdcall*)(HANDLE hProcess, DWORD64 Address, PDWORD64 Displacement, PIMAGEHLP_LINEW64 Line);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keyword">using</span> SymSetSearchPathFunc = BOOL(__stdcall*)(HANDLE hProcess, PCWSTR SearchPath);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keyword">struct </span>StackTracerImplementation</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    HMODULE kernel32Dll;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    HMODULE dbgHelpDll;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    CaptureStackBackTraceFunc captureStackBackTrace;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    SymbolInitializeFunc symbolInitialize;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    SymbolLoadModuleFunc symbolLoadModule;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    SymbolGetModuleInfoFunc getModuleInfo;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    SymbolFunctionTableAccess getFunctionTableAccess;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    SymbolGetModuleBaseFunc getModuleBase;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    StackWalk stackWalk;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    SymbolFromAddressFunc symbolFromAddress;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    LineFromAddressFunc lineFromAdress;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    SymSetSearchPathFunc symSetSearchPath;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordtype">bool</span> m_bInitDbgHelp = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    StackTracerImplementation()</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a0df3a6403e0c7ab2a65997e1e6f6bc14">ezMemoryUtils::ZeroFill</a>(<span class="keyword">this</span>, 1);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      kernel32Dll = LoadLibraryW(L<span class="stringliteral">&quot;kernel32.dll&quot;</span>);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      EZ_ASSERT_DEV(kernel32Dll != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;StackTracer could not load kernel32.dll&quot;</span>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      <span class="keywordflow">if</span> (kernel32Dll != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        captureStackBackTrace = (CaptureStackBackTraceFunc)GetProcAddress(kernel32Dll, <span class="stringliteral">&quot;RtlCaptureStackBackTrace&quot;</span>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      dbgHelpDll = LoadLibraryW(L<span class="stringliteral">&quot;dbghelp.dll&quot;</span>);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      EZ_ASSERT_DEV(dbgHelpDll != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;StackTracer could not load dbghelp.dll&quot;</span>);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      <span class="keywordflow">if</span> (dbgHelpDll != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        symSetSearchPath = (SymSetSearchPathFunc)GetProcAddress(dbgHelpDll, <span class="stringliteral">&quot;SymSetSearchPathW&quot;</span>);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        symbolInitialize = (SymbolInitializeFunc)GetProcAddress(dbgHelpDll, <span class="stringliteral">&quot;SymInitializeW&quot;</span>);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        symbolLoadModule = (SymbolLoadModuleFunc)GetProcAddress(dbgHelpDll, <span class="stringliteral">&quot;SymLoadModuleExW&quot;</span>);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        getModuleInfo = (SymbolGetModuleInfoFunc)GetProcAddress(dbgHelpDll, <span class="stringliteral">&quot;SymGetModuleInfoW64&quot;</span>);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        getFunctionTableAccess = (SymbolFunctionTableAccess)GetProcAddress(dbgHelpDll, <span class="stringliteral">&quot;SymFunctionTableAccess64&quot;</span>);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        getModuleBase = (SymbolGetModuleBaseFunc)GetProcAddress(dbgHelpDll, <span class="stringliteral">&quot;SymGetModuleBase64&quot;</span>);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        stackWalk = (StackWalk)GetProcAddress(dbgHelpDll, <span class="stringliteral">&quot;StackWalk64&quot;</span>);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">if</span> (symbolInitialize == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            symbolLoadModule == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            getModuleInfo == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            getFunctionTableAccess == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            getModuleBase == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            stackWalk == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            symSetSearchPath == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;          <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        symbolFromAddress = (SymbolFromAddressFunc)GetProcAddress(dbgHelpDll, <span class="stringliteral">&quot;SymFromAddrW&quot;</span>);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        lineFromAdress = (LineFromAddressFunc)GetProcAddress(dbgHelpDll, <span class="stringliteral">&quot;SymGetLineFromAddrW64&quot;</span>);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  };</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keyword">static</span> StackTracerImplementation* s_pImplementation;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> Initialize()</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">if</span> (s_pImplementation == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      <span class="keyword">alignas</span>(EZ_ALIGNMENT_OF(StackTracerImplementation)) <span class="keyword">static</span> ezUInt8 ImplementationBuffer[<span class="keyword">sizeof</span>(StackTracerImplementation)];</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      s_pImplementation = <span class="keyword">new</span> (ImplementationBuffer) StackTracerImplementation();</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      EZ_ASSERT_DEV(s_pImplementation != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;StackTracer initialization failed&quot;</span>);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> SymbolInitialize()</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">if</span> (!s_pImplementation-&gt;m_bInitDbgHelp)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      s_pImplementation-&gt;m_bInitDbgHelp = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      <span class="keywordflow">if</span> (!(*s_pImplementation-&gt;symbolInitialize)(GetCurrentProcess(), <span class="keyword">nullptr</span>, TRUE))</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <a class="code" href="../../dc/d9e/classez_log.htm#ae5b1ee0c969668bdac113be5f4b15fa3">ezLog::Error</a>(<span class="stringliteral">&quot;StackTracer could not initialize symbols. Error-Code {0}&quot;</span>, ezArgErrorCode(::GetLastError()));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;      <span class="comment">// we want to seach for the PDBs in the same directory where the EXE is located, no matter what the current working directory is</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      <span class="keywordflow">if</span> (!(*s_pImplementation-&gt;symSetSearchPath)(GetCurrentProcess(), <a class="code" href="../../df/d6c/classez_string_w_char.htm">ezStringWChar</a>(<a class="code" href="../../db/d00/classez_o_s_file.htm#a8f2fc75cc87e5c9007129325e6cebbf5">ezOSFile::GetApplicationDirectory</a>())))</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <a class="code" href="../../dc/d9e/classez_log.htm#ae5b1ee0c969668bdac113be5f4b15fa3">ezLog::Error</a>(<span class="stringliteral">&quot;StackTracer could not set symbol search path. Error-Code {0}&quot;</span>, ezArgErrorCode(::GetLastError()));</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keywordtype">void</span> ezStackTracer::OnPluginEvent(<span class="keyword">const</span> <a class="code" href="../../d4/d72/structez_plugin_event.htm">ezPluginEvent</a>&amp; e)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;{</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  Initialize();</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="keywordflow">if</span> (s_pImplementation-&gt;symbolLoadModule == <span class="keyword">nullptr</span> || s_pImplementation-&gt;getModuleInfo == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="comment">// Can&#39;t get dbghelp functions to work correctly. SymLoadModuleEx will fail on every dll after the first call.</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="comment">// However, SymInitialize works to load dynamic dlls if we postpone it until all dlls are loaded.</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  <span class="comment">// So we defer init until the first DLL is un-loaded or the first callstack is to be resolved.</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../db/d78/namespaceez_math.htm#a70fa9a79fb67ea653462d2cdbbfd675d">e</a>.m_EventType == <a class="code" href="../../d4/d72/structez_plugin_event.htm#a82391f05eef90af4c7196a447983fc26a73f5344c0850f12d7d844c53fa445a55">ezPluginEvent::BeforeUnloading</a>)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    SymbolInitialize();</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">false</span>) <span class="comment">// e.m_EventType == ezPluginEvent::AfterLoading)</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a> tmp;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordtype">char</span> buffer[1024];</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    strcpy_s(buffer, <a class="code" href="../../db/d00/classez_o_s_file.htm#a8f2fc75cc87e5c9007129325e6cebbf5">ezOSFile::GetApplicationDirectory</a>().GetStartPointer());</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    strcat_s(buffer, <a class="code" href="../../db/d78/namespaceez_math.htm#a70fa9a79fb67ea653462d2cdbbfd675d">e</a>.m_sPluginBinary.GetData(tmp));</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    strcat_s(buffer, <span class="stringliteral">&quot;.dll&quot;</span>);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordtype">wchar_t</span> szPluginPath[1024];</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    mbstowcs(szPluginPath, buffer, EZ_ARRAY_SIZE(szPluginPath));</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordtype">wchar_t</span> szPluginName[256];</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    mbstowcs(szPluginName, <a class="code" href="../../db/d78/namespaceez_math.htm#a70fa9a79fb67ea653462d2cdbbfd675d">e</a>.m_sPluginBinary.GetData(tmp), EZ_ARRAY_SIZE(szPluginName));</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    HANDLE currentProcess = GetCurrentProcess();</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    DWORD64 moduleAddress = (*s_pImplementation-&gt;symbolLoadModule)(currentProcess, <span class="keyword">nullptr</span>, szPluginPath, szPluginName, 0, 0, <span class="keyword">nullptr</span>, 0);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">if</span> (moduleAddress == 0)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      DWORD err = GetLastError();</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;      <span class="keywordflow">if</span> (err != ERROR_SUCCESS)</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;      {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <a class="code" href="../../dc/d9e/classez_log.htm#ae5b1ee0c969668bdac113be5f4b15fa3">ezLog::Error</a>(<span class="stringliteral">&quot;StackTracer could not load symbols for &#39;{0}&#39;. Error-Code {1}&quot;</span>, <a class="code" href="../../db/d78/namespaceez_math.htm#a70fa9a79fb67ea653462d2cdbbfd675d">e</a>.m_sPluginBinary, ezArgErrorCode(err));</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;      }</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    IMAGEHLP_MODULEW64 moduleInfo;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a0df3a6403e0c7ab2a65997e1e6f6bc14">ezMemoryUtils::ZeroFill</a>(&amp;moduleInfo, 1);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    moduleInfo.SizeOfStruct = <span class="keyword">sizeof</span>(IMAGEHLP_MODULEW64);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">if</span> (!(*s_pImplementation-&gt;getModuleInfo)(currentProcess, moduleAddress, &amp;moduleInfo))</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      DWORD err = GetLastError();</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;      LPVOID lpMsgBuf = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;      FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS, <span class="keyword">nullptr</span>, err,</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US), (LPTSTR)&amp;lpMsgBuf, 0, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      <span class="keywordtype">char</span> errStr[1024];</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      sprintf_s(errStr, <span class="stringliteral">&quot;StackTracer could not get module info for &#39;%s&#39;. Error-Code %u (\&quot;%s\&quot;)\n&quot;</span>, <a class="code" href="../../db/d78/namespaceez_math.htm#a70fa9a79fb67ea653462d2cdbbfd675d">e</a>.m_sPluginBinary.GetData(tmp), err, <span class="keyword">static_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(lpMsgBuf));</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      <a class="code" href="../../dc/d9e/classez_log.htm#a8d2e6d4f705b4a0cd78abce74d97f84f">ezLog::Print</a>(errStr);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;      LocalFree(lpMsgBuf);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">// static</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;ezUInt32 <a class="code" href="../../d3/d42/classez_stack_tracer.htm#aee255882e5055806075bc3b59b01048c">ezStackTracer::GetStackTrace</a>(<a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;void*&gt;</a>&amp; ref_trace, <span class="keywordtype">void</span>* pContext)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;{</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  Initialize();</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  <span class="keywordflow">if</span> (pContext &amp;&amp; s_pImplementation-&gt;stackWalk)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment">// We need dbghelp init for stackWalk call.</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    SymbolInitialize();</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">// in order not to destroy the pContext handed in we need to make a copy of it</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment">// see StackWalk/StackWalk64 docs https://docs.microsoft.com/windows/win32/api/dbghelp/nf-dbghelp-stackwalk</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    PCONTEXT originalContext = <span class="keyword">static_cast&lt;</span>PCONTEXT<span class="keyword">&gt;</span>(pContext);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    PCONTEXT copiedContext = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    DWORD contextSize = 0;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="comment">// get size needed for buffer and allocate buffer of that size</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    InitializeContext(<span class="keyword">nullptr</span>, originalContext-&gt;ContextFlags, &amp;copiedContext, &amp;contextSize);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* rawBuffer = <span class="keyword">new</span> (std::nothrow) <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>[contextSize];</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">if</span> (rawBuffer == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">auto</span> pBuffer = std::unique_ptr&lt;unsigned char[]&gt;(rawBuffer);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    BOOL contextInitalized = InitializeContext(<span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span>*<span class="keyword">&gt;</span>(pBuffer.get()), originalContext-&gt;ContextFlags, &amp;copiedContext, &amp;contextSize);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">if</span> (!contextInitalized)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    BOOL contextCopied = CopyContext(copiedContext, originalContext-&gt;ContextFlags, originalContext);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">if</span> (!contextCopied)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    {</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    CONTEXT&amp; context = *<span class="keyword">static_cast&lt;</span>PCONTEXT<span class="keyword">&gt;</span>(copiedContext);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    DWORD machine_type;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    STACKFRAME64 frame;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    ZeroMemory(&amp;frame, <span class="keyword">sizeof</span>(frame));</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    frame.AddrPC.Mode = AddrModeFlat;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    frame.AddrFrame.Mode = AddrModeFlat;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    frame.AddrStack.Mode = AddrModeFlat;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="preprocessor">#if defined(_M_X64)</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    frame.AddrPC.Offset = context.Rip;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    frame.AddrFrame.Offset = context.Rbp;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    frame.AddrStack.Offset = context.Rsp;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    machine_type = IMAGE_FILE_MACHINE_AMD64;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="preprocessor">#elif defined(_ARM64_)</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    frame.AddrPC.Offset = context.Pc;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    frame.AddrFrame.Offset = context.Fp;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    frame.AddrStack.Offset = context.Sp;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    machine_type = IMAGE_FILE_MACHINE_ARM64;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="preprocessor">#elif defined(_X86_)</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    frame.AddrPC.Offset = context.Eip;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    frame.AddrFrame.Offset = context.Ebp;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    frame.AddrStack.Offset = context.Esp;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    machine_type = IMAGE_FILE_MACHINE_I386;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="preprocessor">#  error Unsupported platform</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordflow">for</span> (ezInt32 i = 0; i &lt; (ezInt32)ref_trace.<a class="code" href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">GetCount</a>(); i++)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;      <span class="keywordflow">if</span> (s_pImplementation-&gt;stackWalk(machine_type, GetCurrentProcess(), GetCurrentThread(), &amp;frame, &amp;context, NULL,</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            s_pImplementation-&gt;getFunctionTableAccess, s_pImplementation-&gt;getModuleBase, NULL))</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;      {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        ref_trace[i] = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">void</span>*<span class="keyword">&gt;</span>(frame.AddrPC.Offset);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;      }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;      {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="comment">// skip the last three stack-frames since they are useless</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a>(i - 4, 0);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;      }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (s_pImplementation-&gt;captureStackBackTrace != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  {</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keyword">const</span> ezUInt32 uiSkip = 1;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keyword">const</span> ezUInt32 uiMaxNumTrace = <a class="code" href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">ezMath::Min</a>(62U, ref_trace.<a class="code" href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">GetCount</a>());</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    ezInt32 iNumTraces = (*s_pImplementation-&gt;captureStackBackTrace)(uiSkip, uiMaxNumTrace, ref_trace.<a class="code" href="../../dc/dae/classez_array_ptr.htm#aba4e7585190f337c6428f2fe25828b8a">GetPtr</a>(), <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="comment">// skip the last three stack-frames since they are useless</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a>(iNumTraces - 3, 0);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  }</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;}</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">// static</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d3/d42/classez_stack_tracer.htm#a198faaf655ef637ce094c0dc3d282def">ezStackTracer::ResolveStackTrace</a>(<span class="keyword">const</span> <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;void*&gt;</a>&amp; trace, PrintFunc printFunc)</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;{</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  Initialize();</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  SymbolInitialize();</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160; </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  <span class="keywordflow">if</span> (s_pImplementation-&gt;symbolFromAddress != <span class="keyword">nullptr</span> &amp;&amp; s_pImplementation-&gt;lineFromAdress != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  {</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keyword">alignas</span>(_SYMBOL_INFOW) <span class="keywordtype">char</span> buffer[1024];</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    HANDLE currentProcess = GetCurrentProcess();</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keyword">const</span> ezUInt32 uiNumTraceEntries = trace.<a class="code" href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">GetCount</a>();</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">for</span> (ezUInt32 i = 0; i &lt; uiNumTraceEntries; i++)</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    {</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;      DWORD64 pSymbolAddress = <span class="keyword">reinterpret_cast&lt;</span>UINT_PTR<span class="keyword">&gt;</span>(trace[i]);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;      _SYMBOL_INFOW&amp; symbolInfo = *(_SYMBOL_INFOW*)buffer;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;      <a class="code" href="../../dc/d4d/classez_memory_utils.htm#a0df3a6403e0c7ab2a65997e1e6f6bc14">ezMemoryUtils::ZeroFill</a>(&amp;symbolInfo, 1);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;      symbolInfo.SizeOfStruct = <span class="keyword">sizeof</span>(_SYMBOL_INFOW);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;      symbolInfo.MaxNameLen = (EZ_ARRAY_SIZE(buffer) - symbolInfo.SizeOfStruct) / <span class="keyword">sizeof</span>(WCHAR);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;      DWORD64 displacement = 0;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;      BOOL result = (*s_pImplementation-&gt;symbolFromAddress)(currentProcess, pSymbolAddress, &amp;displacement, &amp;symbolInfo);</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;      <span class="keywordflow">if</span> (!result)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;      {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        wcscpy_s(symbolInfo.Name, symbolInfo.MaxNameLen, L<span class="stringliteral">&quot;&lt;Unknown&gt;&quot;</span>);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;      }</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160; </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;      IMAGEHLP_LINEW64 lineInfo;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;      memset(&amp;lineInfo, 0, <span class="keyword">sizeof</span>(lineInfo));</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;      lineInfo.SizeOfStruct = <span class="keyword">sizeof</span>(lineInfo);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;      (*s_pImplementation-&gt;lineFromAdress)(currentProcess, pSymbolAddress, &amp;displacement, &amp;lineInfo);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;      <span class="keywordtype">wchar_t</span> str[1024];</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;      swprintf_s(str, L<span class="stringliteral">&quot;%s(%u):&#39;%s&#39;\n&quot;</span>, lineInfo.FileName, lineInfo.LineNumber, symbolInfo.Name);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;      <span class="keywordtype">char</span> finalStr[1024];</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;      wcstombs(finalStr, str, EZ_ARRAY_SIZE(finalStr));</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;      printFunc(finalStr);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  }</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;}</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160; </div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassez_log_htm_ae5b1ee0c969668bdac113be5f4b15fa3"><div class="ttname"><a href="../../dc/d9e/classez_log.htm#ae5b1ee0c969668bdac113be5f4b15fa3">ezLog::Error</a></div><div class="ttdeci">static void Error(ezLogInterface *pInterface, const ezFormatString &amp;string)</div><div class="ttdoc">An error that needs to be fixed as soon as possible.</div><div class="ttdef"><b>Definition:</b> Log.cpp:362</div></div>
<div class="ttc" id="aclassez_array_ptr_htm_aba4e7585190f337c6428f2fe25828b8a"><div class="ttname"><a href="../../dc/dae/classez_array_ptr.htm#aba4e7585190f337c6428f2fe25828b8a">ezArrayPtr::GetPtr</a></div><div class="ttdeci">EZ_ALWAYS_INLINE PointerType GetPtr() const</div><div class="ttdoc">Returns the pointer to the array.</div><div class="ttdef"><b>Definition:</b> ArrayPtr.h:118</div></div>
<div class="ttc" id="aclassez_stack_tracer_htm_aee255882e5055806075bc3b59b01048c"><div class="ttname"><a href="../../d3/d42/classez_stack_tracer.htm#aee255882e5055806075bc3b59b01048c">ezStackTracer::GetStackTrace</a></div><div class="ttdeci">static ezUInt32 GetStackTrace(ezArrayPtr&lt; void * &gt; &amp;ref_trace, void *pContext=nullptr)</div><div class="ttdoc">Captures the current stack trace.</div><div class="ttdef"><b>Definition:</b> StackTracer_android.h:37</div></div>
<div class="ttc" id="anamespaceez_math_htm_a70fa9a79fb67ea653462d2cdbbfd675d"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a70fa9a79fb67ea653462d2cdbbfd675d">ezMath::e</a></div><div class="ttdeci">constexpr TYPE e()</div><div class="ttdoc">Returns the natural constant e.</div><div class="ttdef"><b>Definition:</b> Constants_inl.h:24</div></div>
<div class="ttc" id="astructez_plugin_event_htm_a82391f05eef90af4c7196a447983fc26a73f5344c0850f12d7d844c53fa445a55"><div class="ttname"><a href="../../d4/d72/structez_plugin_event.htm#a82391f05eef90af4c7196a447983fc26a73f5344c0850f12d7d844c53fa445a55">ezPluginEvent::BeforeUnloading</a></div><div class="ttdeci">@ BeforeUnloading</div><div class="ttdoc">Sent before a plugin is going to be unloaded.</div><div class="ttdef"><b>Definition:</b> Plugin.h:17</div></div>
<div class="ttc" id="aclassez_array_ptr_htm"><div class="ttname"><a href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt; void * &gt;</a></div></div>
<div class="ttc" id="anamespaceez_math_htm_a6f7ee19d0f8e81ff6ae5f394075e3a56"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#a6f7ee19d0f8e81ff6ae5f394075e3a56">ezMath::Max</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:38</div></div>
<div class="ttc" id="astructez_plugin_event_htm"><div class="ttname"><a href="../../d4/d72/structez_plugin_event.htm">ezPluginEvent</a></div><div class="ttdoc">The data that is broadcast whenever a plugin is (un-) loaded.</div><div class="ttdef"><b>Definition:</b> Plugin.h:10</div></div>
<div class="ttc" id="aclassez_log_htm_a8d2e6d4f705b4a0cd78abce74d97f84f"><div class="ttname"><a href="../../dc/d9e/classez_log.htm#a8d2e6d4f705b4a0cd78abce74d97f84f">ezLog::Print</a></div><div class="ttdeci">static void Print(const char *szText)</div><div class="ttdoc">Calls low-level OS functionality to print a string to the typical outputs, e.g. printf and OutputDebu...</div><div class="ttdef"><b>Definition:</b> Log.cpp:235</div></div>
<div class="ttc" id="aclassez_string_w_char_htm"><div class="ttname"><a href="../../df/d6c/classez_string_w_char.htm">ezStringWChar</a></div><div class="ttdoc">A very simple string class that should only be used to temporarily convert text to the OSes native wc...</div><div class="ttdef"><b>Definition:</b> StringConversion.h:19</div></div>
<div class="ttc" id="aclassez_array_ptr_htm_a9f222695f57e4cf200e07135dbbd7edd"><div class="ttname"><a href="../../dc/dae/classez_array_ptr.htm#a9f222695f57e4cf200e07135dbbd7edd">ezArrayPtr::GetCount</a></div><div class="ttdeci">EZ_ALWAYS_INLINE ezUInt32 GetCount() const</div><div class="ttdoc">Returns the number of elements in the array.</div><div class="ttdef"><b>Definition:</b> ArrayPtr.h:142</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_a0df3a6403e0c7ab2a65997e1e6f6bc14"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#a0df3a6403e0c7ab2a65997e1e6f6bc14">ezMemoryUtils::ZeroFill</a></div><div class="ttdeci">static void ZeroFill(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Zeros every byte in the provided memory buffer.</div></div>
<div class="ttc" id="anamespaceez_math_htm_ad8009b4da9cb427658d71e30576f209e"><div class="ttname"><a href="../../db/d78/namespaceez_math.htm#ad8009b4da9cb427658d71e30576f209e">ezMath::Min</a></div><div class="ttdeci">constexpr EZ_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:26</div></div>
<div class="ttc" id="aclassez_stack_tracer_htm_a198faaf655ef637ce094c0dc3d282def"><div class="ttname"><a href="../../d3/d42/classez_stack_tracer.htm#a198faaf655ef637ce094c0dc3d282def">ezStackTracer::ResolveStackTrace</a></div><div class="ttdeci">static void ResolveStackTrace(const ezArrayPtr&lt; void * &gt; &amp;trace, PrintFunc printFunc)</div><div class="ttdoc">Print a stack trace.</div><div class="ttdef"><b>Definition:</b> StackTracer_android.h:46</div></div>
<div class="ttc" id="aclassez_o_s_file_htm_a8f2fc75cc87e5c9007129325e6cebbf5"><div class="ttname"><a href="../../db/d00/classez_o_s_file.htm#a8f2fc75cc87e5c9007129325e6cebbf5">ezOSFile::GetApplicationDirectory</a></div><div class="ttdeci">static ezStringView GetApplicationDirectory()</div><div class="ttdoc">Returns the path in which the applications binary file is located.</div><div class="ttdef"><b>Definition:</b> OSFile_win.h:522</div></div>
<div class="ttc" id="aclassez_string_builder_htm"><div class="ttname"><a href="../../d3/d88/classez_string_builder.htm">ezStringBuilder</a></div><div class="ttdoc">ezStringBuilder is a class that is meant for creating and modifying strings.</div><div class="ttdef"><b>Definition:</b> StringBuilder.h:34</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_755fdcfb6b850fe41cc906fd4ef666a8.htm">System</a></li><li class="navelem"><a class="el" href="../../dir_8580235f0f8f387a258dcf4b47a3ab70.htm">Implementation</a></li><li class="navelem"><a class="el" href="../../dir_10157c49fda0276b550836e7c5b9a31b.htm">Win</a></li><li class="navelem"><b>StackTracer_win.h</b></li>
    <li class="footer">Generated on Sat Nov 11 2023 17:04:21 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
