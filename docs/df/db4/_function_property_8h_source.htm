<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Reflection/Implementation/FunctionProperty.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 25.03</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('df/db4/_function_property_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">FunctionProperty.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/AbstractProperty.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/VariantAdapter.h&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class </span>R, <span class="keyword">class</span>... Args&gt;</div>
<div class="line"><a name="l00010"></a><span class="lineno"><a class="line" href="../../db/d3b/classez_typed_function_property.htm">   10</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../db/d3b/classez_typed_function_property.htm">ezTypedFunctionProperty</a> : <span class="keyword">public</span> <a class="code" href="../../d3/d4c/classez_abstract_function_property.htm">ezAbstractFunctionProperty</a></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;{</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <a class="code" href="../../db/d3b/classez_typed_function_property.htm">ezTypedFunctionProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName)</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    : <a class="code" href="../../d3/d4c/classez_abstract_function_property.htm#a2e7ca0bbfce4b60e6a346769ddbd2ea0">ezAbstractFunctionProperty</a>(szPropertyName)</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  {</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  }</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="../../db/d3b/classez_typed_function_property.htm#a4b58dd5826b93879e946dfdf73428c72">   18</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* <a class="code" href="../../db/d3b/classez_typed_function_property.htm#a4b58dd5826b93879e946dfdf73428c72">GetReturnType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> ezGetStaticRTTI&lt;typename ezCleanType&lt;R&gt;::RttiType&gt;(); }</div>
<div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="../../db/d3b/classez_typed_function_property.htm#a17fde8bc0536ee6d683f182881cae38f">   19</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ezPropertyFlags&gt;</a> <a class="code" href="../../db/d3b/classez_typed_function_property.htm#a17fde8bc0536ee6d683f182881cae38f">GetReturnFlags</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> ezPropertyFlags::GetParameterFlags&lt;R&gt;(); }</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="../../db/d3b/classez_typed_function_property.htm#aa9ebf64aa4f1cf6580392e40220a2e7f">   21</a></span>&#160;  <span class="keyword">virtual</span> ezUInt32 <a class="code" href="../../db/d3b/classez_typed_function_property.htm#aa9ebf64aa4f1cf6580392e40220a2e7f">GetArgumentCount</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <span class="keyword">sizeof</span>...(Args); }</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  <span class="keyword">template</span> &lt;std::size_t... I&gt;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* GetParameterTypeImpl(ezUInt32 uiParamIndex, std::index_sequence&lt;I...&gt;)<span class="keyword"> const</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="comment">// There is a dummy entry at the end to support zero parameter functions (can&#39;t have zero-size arrays).</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* params[] = {ezGetStaticRTTI&lt;<span class="keyword">typename</span> <a class="code" href="../../d6/dcc/structez_clean_type.htm">ezCleanType</a>&lt;<span class="keyword">typename</span> <a class="code" href="../../d5/daf/structget_argument.htm">getArgument</a>&lt;I, Args...&gt;::Type&gt;::RttiType&gt;()..., <span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">return</span> params[uiParamIndex];</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  }</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="../../db/d3b/classez_typed_function_property.htm#a80e3dbf2354ebfba59a432e367a41a0e">   31</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a>* <a class="code" href="../../db/d3b/classez_typed_function_property.htm#a80e3dbf2354ebfba59a432e367a41a0e">GetArgumentType</a>(ezUInt32 uiParamIndex)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">return</span> GetParameterTypeImpl(uiParamIndex, std::make_index_sequence&lt;<span class="keyword">sizeof</span>...(Args)&gt;{});</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  }</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keyword">template</span> &lt;std::size_t... I&gt;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ezPropertyFlags&gt;</a> GetParameterFlagsImpl(ezUInt32 uiParamIndex, std::index_sequence&lt;I...&gt;)<span class="keyword"> const</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="comment">// There is a dummy entry at the end to support zero parameter functions (can&#39;t have zero-size arrays).</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">static</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ezPropertyFlags&gt;</a> params[] = {</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      ezPropertyFlags::GetParameterFlags&lt;<span class="keyword">typename</span> <a class="code" href="../../d5/daf/structget_argument.htm">getArgument</a>&lt;I, Args...&gt;::Type&gt;()..., ezPropertyFlags::Void};</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> params[uiParamIndex];</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  }</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="../../db/d3b/classez_typed_function_property.htm#ad055ca9edc7ff77a5ecf7c42b224aa2d">   45</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt;ezPropertyFlags&gt;</a> <a class="code" href="../../db/d3b/classez_typed_function_property.htm#ad055ca9edc7ff77a5ecf7c42b224aa2d">GetArgumentFlags</a>(ezUInt32 uiParamIndex)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> GetParameterFlagsImpl(uiParamIndex, std::make_index_sequence&lt;<span class="keyword">sizeof</span>...(Args)&gt;{});</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  }</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;};</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> FUNC&gt;</div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="../../dc/d1f/classez_function_property.htm">   52</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../dc/d1f/classez_function_property.htm">ezFunctionProperty</a></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;};</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class </span>CLASS, <span class="keyword">class </span>R, <span class="keyword">class</span>... Args&gt;</div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="../../dc/df5/classez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_4.htm">   57</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../dc/d1f/classez_function_property.htm">ezFunctionProperty</a>&lt;R (CLASS::*)(Args...)&gt; : <span class="keyword">public</span> <a class="code" href="../../db/d3b/classez_typed_function_property.htm">ezTypedFunctionProperty</a>&lt;R, Args...&gt;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keyword">using</span> TargetFunction = R (CLASS::*)(Args...);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <a class="code" href="../../dc/d1f/classez_function_property.htm">ezFunctionProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, TargetFunction func)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    : <a class="code" href="../../db/d3b/classez_typed_function_property.htm">ezTypedFunctionProperty</a>&lt;R, Args...&gt;(szPropertyName)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    m_Function = func;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="../../dc/df5/classez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_4.htm#a9cbca5905bc1dd416eb5f6ae216de0b9">   68</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../d6/dbb/structez_function_type.htm#a13bed06180e1a399e5d28f38d33a3f36">ezFunctionType::Enum</a> <a class="code" href="../../dc/df5/classez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_4.htm#a9cbca5905bc1dd416eb5f6ae216de0b9">GetFunctionType</a>()<span class="keyword"> const override</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d6/dbb/structez_function_type.htm#a13bed06180e1a399e5d28f38d33a3f36aaf3aadc0978b473c98c2fa799b8fd43a">ezFunctionType::Member</a>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keyword">template</span> &lt;std::size_t... I&gt;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> ExecuteImpl(<span class="keywordtype">void</span>* pInstance, <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; out_returnValue, <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezVariant&gt;</a> arguments, std::index_sequence&lt;I...&gt;)<span class="keyword"> const</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    CLASS* pTargetInstance = <span class="keyword">static_cast&lt;</span>CLASS*<span class="keyword">&gt;</span>(pInstance);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">if</span> constexpr (std::is_same&lt;R, void&gt;::value)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      (pTargetInstance-&gt;*m_Function)(<a class="code" href="../../d0/d0c/structez_variant_adapter.htm">ezVariantAdapter</a>&lt;<span class="keyword">typename</span> <a class="code" href="../../d5/daf/structget_argument.htm">getArgument&lt;I, Args...&gt;::Type</a>&gt;(arguments[I])...);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      out_returnValue = <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>();</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      <a class="code" href="../../d9/d06/structez_variant_assignment_adapter.htm">ezVariantAssignmentAdapter&lt;R&gt;</a> returnWrapper(out_returnValue);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      returnWrapper = (pTargetInstance-&gt;*m_Function)(<a class="code" href="../../d0/d0c/structez_variant_adapter.htm">ezVariantAdapter</a>&lt;<span class="keyword">typename</span> <a class="code" href="../../d5/daf/structget_argument.htm">getArgument&lt;I, Args...&gt;::Type</a>&gt;(arguments[I])...);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="../../dc/df5/classez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_4.htm#acb5aa6335d1bf403f95e57d3844f0df3">   89</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/df5/classez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_4.htm#acb5aa6335d1bf403f95e57d3844f0df3">Execute</a>(<span class="keywordtype">void</span>* pInstance, <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezVariant&gt;</a> arguments, <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; out_returnValue)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    ExecuteImpl(pInstance, out_returnValue, arguments, std::make_index_sequence&lt;<span class="keyword">sizeof</span>...(Args)&gt;{});</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  TargetFunction m_Function;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;};</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class </span>CLASS, <span class="keyword">class </span>R, <span class="keyword">class</span>... Args&gt;</div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="../../da/d80/classez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_01const_01_4.htm">   99</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../dc/d1f/classez_function_property.htm">ezFunctionProperty</a>&lt;R (CLASS::*)(Args...) const&gt; : <span class="keyword">public</span> <a class="code" href="../../db/d3b/classez_typed_function_property.htm">ezTypedFunctionProperty</a>&lt;R, Args...&gt;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keyword">using</span> TargetFunction = R (CLASS::*)(Args...) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <a class="code" href="../../dc/d1f/classez_function_property.htm">ezFunctionProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, TargetFunction func)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    : <a class="code" href="../../db/d3b/classez_typed_function_property.htm">ezTypedFunctionProperty</a>&lt;R, Args...&gt;(szPropertyName)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    m_Function = func;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    this-&gt;AddFlags(<a class="code" href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa61c7217b17359e552ea1ddc3d75fec11">ezPropertyFlags::Const</a>);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="../../da/d80/classez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_01const_01_4.htm#aeb7a8195b1d18b0607bda6b05bf8f8e6">  111</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../d6/dbb/structez_function_type.htm#a13bed06180e1a399e5d28f38d33a3f36">ezFunctionType::Enum</a> <a class="code" href="../../da/d80/classez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_01const_01_4.htm#aeb7a8195b1d18b0607bda6b05bf8f8e6">GetFunctionType</a>()<span class="keyword"> const override</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d6/dbb/structez_function_type.htm#a13bed06180e1a399e5d28f38d33a3f36aaf3aadc0978b473c98c2fa799b8fd43a">ezFunctionType::Member</a>;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  }</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <span class="keyword">template</span> &lt;std::size_t... I&gt;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> ExecuteImpl(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; out_returnValue, <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezVariant&gt;</a> arguments, std::index_sequence&lt;I...&gt;)<span class="keyword"> const</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keyword">const</span> CLASS* pTargetInstance = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>CLASS*<span class="keyword">&gt;</span>(pInstance);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">if</span> constexpr (std::is_same&lt;R, void&gt;::value)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      (pTargetInstance-&gt;*m_Function)(<a class="code" href="../../d0/d0c/structez_variant_adapter.htm">ezVariantAdapter</a>&lt;<span class="keyword">typename</span> <a class="code" href="../../d5/daf/structget_argument.htm">getArgument&lt;I, Args...&gt;::Type</a>&gt;(arguments[I])...);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      out_returnValue = <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>();</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      <a class="code" href="../../d9/d06/structez_variant_assignment_adapter.htm">ezVariantAssignmentAdapter&lt;R&gt;</a> returnWrapper(out_returnValue);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;      returnWrapper = (pTargetInstance-&gt;*m_Function)(<a class="code" href="../../d0/d0c/structez_variant_adapter.htm">ezVariantAdapter</a>&lt;<span class="keyword">typename</span> <a class="code" href="../../d5/daf/structget_argument.htm">getArgument&lt;I, Args...&gt;::Type</a>&gt;(arguments[I])...);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  }</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="../../da/d80/classez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_01const_01_4.htm#ac90d3f16382553918822b69dac7e467b">  132</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../da/d80/classez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_01const_01_4.htm#ac90d3f16382553918822b69dac7e467b">Execute</a>(<span class="keywordtype">void</span>* pInstance, <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezVariant&gt;</a> arguments, <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; out_returnValue)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    ExecuteImpl(pInstance, out_returnValue, arguments, std::make_index_sequence&lt;<span class="keyword">sizeof</span>...(Args)&gt;{});</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  TargetFunction m_Function;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;};</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class </span>R, <span class="keyword">class</span>... Args&gt;</div>
<div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_function_property_3_01_r_07_5_08_07_args_8_8_8_08_4.htm">  142</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../dc/d1f/classez_function_property.htm">ezFunctionProperty</a>&lt;R (*)(Args...)&gt; : <span class="keyword">public</span> <a class="code" href="../../db/d3b/classez_typed_function_property.htm">ezTypedFunctionProperty</a>&lt;R, Args...&gt;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  <span class="keyword">using</span> TargetFunction = R (*)(Args...);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <a class="code" href="../../dc/d1f/classez_function_property.htm">ezFunctionProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, TargetFunction func)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    : <a class="code" href="../../db/d3b/classez_typed_function_property.htm">ezTypedFunctionProperty</a>&lt;R, Args...&gt;(szPropertyName)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    m_Function = func;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_function_property_3_01_r_07_5_08_07_args_8_8_8_08_4.htm#a26898d4020b9cec731641e6f32c59ab7">  153</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../d6/dbb/structez_function_type.htm#a13bed06180e1a399e5d28f38d33a3f36">ezFunctionType::Enum</a> <a class="code" href="../../d9/d18/classez_function_property_3_01_r_07_5_08_07_args_8_8_8_08_4.htm#a26898d4020b9cec731641e6f32c59ab7">GetFunctionType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <a class="code" href="../../d6/dbb/structez_function_type.htm#a13bed06180e1a399e5d28f38d33a3f36a70487f04e61182c5f523c053645e8e3f">ezFunctionType::StaticMember</a>; }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keyword">template</span> &lt;std::size_t... I&gt;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="keywordtype">void</span> ExecuteImpl(<a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt&lt;1&gt;</a>, <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; out_returnValue, <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezVariant&gt;</a> arguments, std::index_sequence&lt;I...&gt;)<span class="keyword"> const</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    (*m_Function)(<a class="code" href="../../d0/d0c/structez_variant_adapter.htm">ezVariantAdapter</a>&lt;<span class="keyword">typename</span> <a class="code" href="../../d5/daf/structget_argument.htm">getArgument</a>&lt;I, Args...&gt;::Type&gt;(arguments[I])...);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    out_returnValue = <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>();</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  <span class="keyword">template</span> &lt;std::size_t... I&gt;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keywordtype">void</span> ExecuteImpl(<a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt&lt;0&gt;</a>, <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; out_returnValue, <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezVariant&gt;</a> arguments, std::index_sequence&lt;I...&gt;)<span class="keyword"> const</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="../../d9/d06/structez_variant_assignment_adapter.htm">ezVariantAssignmentAdapter&lt;R&gt;</a> returnWrapper(out_returnValue);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    returnWrapper = (*m_Function)(<a class="code" href="../../d0/d0c/structez_variant_adapter.htm">ezVariantAdapter</a>&lt;<span class="keyword">typename</span> <a class="code" href="../../d5/daf/structget_argument.htm">getArgument</a>&lt;I, Args...&gt;::Type&gt;(arguments[I])...);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="../../d9/d18/classez_function_property_3_01_r_07_5_08_07_args_8_8_8_08_4.htm#ac6d8fe2265fdb95329740efac3578fcf">  169</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d9/d18/classez_function_property_3_01_r_07_5_08_07_args_8_8_8_08_4.htm#ac6d8fe2265fdb95329740efac3578fcf">Execute</a>(<span class="keywordtype">void</span>* pInstance, <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezVariant&gt;</a> arguments, <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; out_returnValue)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    EZ_IGNORE_UNUSED(pInstance);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    ExecuteImpl(<a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a>&lt;std::is_same&lt;R, void&gt;::value&gt;(), out_returnValue, arguments, std::make_index_sequence&lt;<span class="keyword">sizeof</span>...(Args)&gt;{});</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  TargetFunction m_Function;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;};</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class </span>CLASS, <span class="keyword">class</span>... Args&gt;</div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="../../d7/dc4/classez_constructor_function_property.htm">  181</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d7/dc4/classez_constructor_function_property.htm">ezConstructorFunctionProperty</a> : <span class="keyword">public</span> <a class="code" href="../../db/d3b/classez_typed_function_property.htm">ezTypedFunctionProperty</a>&lt;CLASS*, Args...&gt;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <a class="code" href="../../d7/dc4/classez_constructor_function_property.htm">ezConstructorFunctionProperty</a>()</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    : <a class="code" href="../../db/d3b/classez_typed_function_property.htm">ezTypedFunctionProperty</a>&lt;CLASS*, Args...&gt;(<span class="stringliteral">&quot;Constructor&quot;</span>)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  }</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="../../d7/dc4/classez_constructor_function_property.htm#a0b4db9d889a90bea1f8ce8fd0f01d5a7">  189</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../d6/dbb/structez_function_type.htm#a13bed06180e1a399e5d28f38d33a3f36">ezFunctionType::Enum</a> <a class="code" href="../../d7/dc4/classez_constructor_function_property.htm#a0b4db9d889a90bea1f8ce8fd0f01d5a7">GetFunctionType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <a class="code" href="../../d6/dbb/structez_function_type.htm#a13bed06180e1a399e5d28f38d33a3f36a31850807ecb6a3b574625a4c7a7d1d1a">ezFunctionType::Constructor</a>; }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  <span class="keyword">template</span> &lt;std::size_t... I&gt;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keywordtype">void</span> ExecuteImpl(<a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt&lt;1&gt;</a>, <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; out_returnValue, <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezVariant&gt;</a> arguments, std::index_sequence&lt;I...&gt;)<span class="keyword"> const</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    out_returnValue = CLASS(<a class="code" href="../../d0/d0c/structez_variant_adapter.htm">ezVariantAdapter</a>&lt;<span class="keyword">typename</span> <a class="code" href="../../d5/daf/structget_argument.htm">getArgument&lt;I, Args...&gt;::Type</a>&gt;(arguments[I])...);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="comment">// returnValue = CLASS(static_cast&lt;typename getArgument&lt;I, Args...&gt;::Type&gt;(ezVariantAdapter&lt;typename getArgument&lt;I,</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// Args...&gt;::Type&gt;(arguments[I]))...);</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <span class="keyword">template</span> &lt;std::size_t... I&gt;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  <span class="keywordtype">void</span> ExecuteImpl(<a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt&lt;0&gt;</a>, <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; out_returnValue, <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezVariant&gt;</a> arguments, std::index_sequence&lt;I...&gt;)<span class="keyword"> const</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    CLASS* pInstance = EZ_DEFAULT_NEW(CLASS, <a class="code" href="../../d0/d0c/structez_variant_adapter.htm">ezVariantAdapter</a>&lt;<span class="keyword">typename</span> <a class="code" href="../../d5/daf/structget_argument.htm">getArgument&lt;I, Args...&gt;::Type</a>&gt;(arguments[I])...);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">// CLASS* pInstance = EZ_DEFAULT_NEW(CLASS, static_cast&lt;typename getArgument&lt;I, Args...&gt;::Type&gt;(ezVariantAdapter&lt;typename getArgument&lt;I,</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// Args...&gt;::Type&gt;(arguments[I]))...);</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    out_returnValue = pInstance;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="../../d7/dc4/classez_constructor_function_property.htm#ae482f7210b73f2bb7ae87325eac52808">  208</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d7/dc4/classez_constructor_function_property.htm#ae482f7210b73f2bb7ae87325eac52808">Execute</a>(<span class="keywordtype">void</span>* pInstance, <a class="code" href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr&lt;ezVariant&gt;</a> arguments, <a class="code" href="../../de/de6/classez_variant.htm">ezVariant</a>&amp; out_returnValue)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    EZ_IGNORE_UNUSED(pInstance);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    ExecuteImpl(<a class="code" href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a>&lt;<a class="code" href="../../d1/dbe/structez_is_standard_type.htm">ezIsStandardType&lt;CLASS&gt;::value</a>&gt;(), out_returnValue, arguments, std::make_index_sequence&lt;<span class="keyword">sizeof</span>...(Args)&gt;{});</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;};</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassez_typed_function_property_htm_a4b58dd5826b93879e946dfdf73428c72"><div class="ttname"><a href="../../db/d3b/classez_typed_function_property.htm#a4b58dd5826b93879e946dfdf73428c72">ezTypedFunctionProperty::GetReturnType</a></div><div class="ttdeci">virtual const ezRTTI * GetReturnType() const override</div><div class="ttdoc">Returns the type of the return value.</div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:18</div></div>
<div class="ttc" id="astructez_bitflags_htm"><div class="ttname"><a href="../../d1/dec/structez_bitflags.htm">ezBitflags&lt; ezPropertyFlags &gt;</a></div></div>
<div class="ttc" id="aclassez_constructor_function_property_htm_ae482f7210b73f2bb7ae87325eac52808"><div class="ttname"><a href="../../d7/dc4/classez_constructor_function_property.htm#ae482f7210b73f2bb7ae87325eac52808">ezConstructorFunctionProperty::Execute</a></div><div class="ttdeci">virtual void Execute(void *pInstance, ezArrayPtr&lt; ezVariant &gt; arguments, ezVariant &amp;out_returnValue) const override</div><div class="ttdoc">Calls the function. Provide the instance on which the function is supposed to be called.</div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:208</div></div>
<div class="ttc" id="astructez_function_type_htm_a13bed06180e1a399e5d28f38d33a3f36a70487f04e61182c5f523c053645e8e3f"><div class="ttname"><a href="../../d6/dbb/structez_function_type.htm#a13bed06180e1a399e5d28f38d33a3f36a70487f04e61182c5f523c053645e8e3f">ezFunctionType::StaticMember</a></div><div class="ttdeci">@ StaticMember</div><div class="ttdoc">A static member function, instance pointer will be ignored.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:532</div></div>
<div class="ttc" id="aclassez_r_t_t_i_htm"><div class="ttname"><a href="../../dd/d19/classez_r_t_t_i.htm">ezRTTI</a></div><div class="ttdoc">This class holds information about reflected types. Each instance represents one type that is known t...</div><div class="ttdef"><b>Definition:</b> RTTI.h:29</div></div>
<div class="ttc" id="aclassez_abstract_function_property_htm_a2e7ca0bbfce4b60e6a346769ddbd2ea0"><div class="ttname"><a href="../../d3/d4c/classez_abstract_function_property.htm#a2e7ca0bbfce4b60e6a346769ddbd2ea0">ezAbstractFunctionProperty::ezAbstractFunctionProperty</a></div><div class="ttdeci">ezAbstractFunctionProperty(const char *szPropertyName)</div><div class="ttdoc">Passes the property name through to ezAbstractProperty.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:543</div></div>
<div class="ttc" id="astructez_is_standard_type_htm"><div class="ttname"><a href="../../d1/dbe/structez_is_standard_type.htm">ezIsStandardType</a></div><div class="ttdoc">Used to determine if the given type is a build-in standard variant type.</div><div class="ttdef"><b>Definition:</b> VariantAdapter.h:73</div></div>
<div class="ttc" id="aclassez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_01const_01_4_htm_aeb7a8195b1d18b0607bda6b05bf8f8e6"><div class="ttname"><a href="../../da/d80/classez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_01const_01_4.htm#aeb7a8195b1d18b0607bda6b05bf8f8e6">ezFunctionProperty&lt; R(CLASS::*)(Args...) const &gt;::GetFunctionType</a></div><div class="ttdeci">virtual ezFunctionType::Enum GetFunctionType() const override</div><div class="ttdoc">Returns the type of function, see ezFunctionPropertyType::Enum.</div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:111</div></div>
<div class="ttc" id="astructez_function_type_htm_a13bed06180e1a399e5d28f38d33a3f36"><div class="ttname"><a href="../../d6/dbb/structez_function_type.htm#a13bed06180e1a399e5d28f38d33a3f36">ezFunctionType::Enum</a></div><div class="ttdeci">Enum</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:529</div></div>
<div class="ttc" id="aclassez_constructor_function_property_htm_a0b4db9d889a90bea1f8ce8fd0f01d5a7"><div class="ttname"><a href="../../d7/dc4/classez_constructor_function_property.htm#a0b4db9d889a90bea1f8ce8fd0f01d5a7">ezConstructorFunctionProperty::GetFunctionType</a></div><div class="ttdeci">virtual ezFunctionType::Enum GetFunctionType() const override</div><div class="ttdoc">Returns the type of function, see ezFunctionPropertyType::Enum.</div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:189</div></div>
<div class="ttc" id="astructget_argument_htm"><div class="ttname"><a href="../../d5/daf/structget_argument.htm">getArgument</a></div><div class="ttdoc">Use getArgument&lt;N, Args...&gt;::Type to get the type of the Nth argument in Args.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:388</div></div>
<div class="ttc" id="aclassez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_4_htm_acb5aa6335d1bf403f95e57d3844f0df3"><div class="ttname"><a href="../../dc/df5/classez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_4.htm#acb5aa6335d1bf403f95e57d3844f0df3">ezFunctionProperty&lt; R(CLASS::*)(Args...)&gt;::Execute</a></div><div class="ttdeci">virtual void Execute(void *pInstance, ezArrayPtr&lt; ezVariant &gt; arguments, ezVariant &amp;out_returnValue) const override</div><div class="ttdoc">Calls the function. Provide the instance on which the function is supposed to be called.</div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:89</div></div>
<div class="ttc" id="aclassez_function_property_htm"><div class="ttname"><a href="../../dc/d1f/classez_function_property.htm">ezFunctionProperty</a></div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:52</div></div>
<div class="ttc" id="aclassez_array_ptr_htm"><div class="ttname"><a href="../../dc/dae/classez_array_ptr.htm">ezArrayPtr</a></div><div class="ttdoc">This class encapsulates an array and it's size. It is recommended to use this class instead of plain ...</div><div class="ttdef"><b>Definition:</b> ArrayPtr.h:40</div></div>
<div class="ttc" id="aclassez_typed_function_property_htm"><div class="ttname"><a href="../../db/d3b/classez_typed_function_property.htm">ezTypedFunctionProperty</a></div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:10</div></div>
<div class="ttc" id="astructez_clean_type_htm"><div class="ttname"><a href="../../d6/dcc/structez_clean_type.htm">ezCleanType</a></div><div class="ttdef"><b>Definition:</b> VariantAdapter.h:27</div></div>
<div class="ttc" id="astructez_function_type_htm_a13bed06180e1a399e5d28f38d33a3f36aaf3aadc0978b473c98c2fa799b8fd43a"><div class="ttname"><a href="../../d6/dbb/structez_function_type.htm#a13bed06180e1a399e5d28f38d33a3f36aaf3aadc0978b473c98c2fa799b8fd43a">ezFunctionType::Member</a></div><div class="ttdeci">@ Member</div><div class="ttdoc">A normal member function, a valid instance pointer must be provided to call.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:531</div></div>
<div class="ttc" id="aclassez_typed_function_property_htm_aa9ebf64aa4f1cf6580392e40220a2e7f"><div class="ttname"><a href="../../db/d3b/classez_typed_function_property.htm#aa9ebf64aa4f1cf6580392e40220a2e7f">ezTypedFunctionProperty::GetArgumentCount</a></div><div class="ttdeci">virtual ezUInt32 GetArgumentCount() const override</div><div class="ttdoc">Returns the number of arguments.</div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:21</div></div>
<div class="ttc" id="aclassez_function_property_3_01_r_07_5_08_07_args_8_8_8_08_4_htm_a26898d4020b9cec731641e6f32c59ab7"><div class="ttname"><a href="../../d9/d18/classez_function_property_3_01_r_07_5_08_07_args_8_8_8_08_4.htm#a26898d4020b9cec731641e6f32c59ab7">ezFunctionProperty&lt; R(*)(Args...)&gt;::GetFunctionType</a></div><div class="ttdeci">virtual ezFunctionType::Enum GetFunctionType() const override</div><div class="ttdoc">Returns the type of function, see ezFunctionPropertyType::Enum.</div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:153</div></div>
<div class="ttc" id="aclassez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_4_htm_a9cbca5905bc1dd416eb5f6ae216de0b9"><div class="ttname"><a href="../../dc/df5/classez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_4.htm#a9cbca5905bc1dd416eb5f6ae216de0b9">ezFunctionProperty&lt; R(CLASS::*)(Args...)&gt;::GetFunctionType</a></div><div class="ttdeci">virtual ezFunctionType::Enum GetFunctionType() const override</div><div class="ttdoc">Returns the type of function, see ezFunctionPropertyType::Enum.</div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:68</div></div>
<div class="ttc" id="aclassez_typed_function_property_htm_a80e3dbf2354ebfba59a432e367a41a0e"><div class="ttname"><a href="../../db/d3b/classez_typed_function_property.htm#a80e3dbf2354ebfba59a432e367a41a0e">ezTypedFunctionProperty::GetArgumentType</a></div><div class="ttdeci">virtual const ezRTTI * GetArgumentType(ezUInt32 uiParamIndex) const override</div><div class="ttdoc">Returns the type of the given argument.</div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:31</div></div>
<div class="ttc" id="astructez_variant_adapter_htm"><div class="ttname"><a href="../../d0/d0c/structez_variant_adapter.htm">ezVariantAdapter</a></div><div class="ttdoc">Used to implicitly retrieve any value from an ezVariant to be used as a function argument using the a...</div><div class="ttdef"><b>Definition:</b> VariantAdapter.h:210</div></div>
<div class="ttc" id="aclassez_typed_function_property_htm_a17fde8bc0536ee6d683f182881cae38f"><div class="ttname"><a href="../../db/d3b/classez_typed_function_property.htm#a17fde8bc0536ee6d683f182881cae38f">ezTypedFunctionProperty::GetReturnFlags</a></div><div class="ttdeci">virtual ezBitflags&lt; ezPropertyFlags &gt; GetReturnFlags() const override</div><div class="ttdoc">Returns property flags of the return value.</div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:19</div></div>
<div class="ttc" id="aclassez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_01const_01_4_htm_ac90d3f16382553918822b69dac7e467b"><div class="ttname"><a href="../../da/d80/classez_function_property_3_01_r_07_c_l_a_s_s_1_1_5_08_07_args_8_8_8_08_01const_01_4.htm#ac90d3f16382553918822b69dac7e467b">ezFunctionProperty&lt; R(CLASS::*)(Args...) const &gt;::Execute</a></div><div class="ttdeci">virtual void Execute(void *pInstance, ezArrayPtr&lt; ezVariant &gt; arguments, ezVariant &amp;out_returnValue) const override</div><div class="ttdoc">Calls the function. Provide the instance on which the function is supposed to be called.</div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:132</div></div>
<div class="ttc" id="astructez_variant_assignment_adapter_htm"><div class="ttname"><a href="../../d9/d06/structez_variant_assignment_adapter.htm">ezVariantAssignmentAdapter</a></div><div class="ttdoc">Used to automatically assign any value to an ezVariant using the assignment rules outlined in ezAbstr...</div><div class="ttdef"><b>Definition:</b> VariantAdapter.h:117</div></div>
<div class="ttc" id="aclassez_variant_htm"><div class="ttname"><a href="../../de/de6/classez_variant.htm">ezVariant</a></div><div class="ttdoc">ezVariant is a class that can store different types of variables, which is useful in situations where...</div><div class="ttdef"><b>Definition:</b> Variant.h:43</div></div>
<div class="ttc" id="aclassez_constructor_function_property_htm"><div class="ttname"><a href="../../d7/dc4/classez_constructor_function_property.htm">ezConstructorFunctionProperty</a></div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:181</div></div>
<div class="ttc" id="astructez_function_type_htm_a13bed06180e1a399e5d28f38d33a3f36a31850807ecb6a3b574625a4c7a7d1d1a"><div class="ttname"><a href="../../d6/dbb/structez_function_type.htm#a13bed06180e1a399e5d28f38d33a3f36a31850807ecb6a3b574625a4c7a7d1d1a">ezFunctionType::Constructor</a></div><div class="ttdeci">@ Constructor</div><div class="ttdoc">A constructor. Return value is a void* pointing to the new instance allocated with the default alloca...</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:533</div></div>
<div class="ttc" id="aclassez_typed_function_property_htm_ad055ca9edc7ff77a5ecf7c42b224aa2d"><div class="ttname"><a href="../../db/d3b/classez_typed_function_property.htm#ad055ca9edc7ff77a5ecf7c42b224aa2d">ezTypedFunctionProperty::GetArgumentFlags</a></div><div class="ttdeci">virtual ezBitflags&lt; ezPropertyFlags &gt; GetArgumentFlags(ezUInt32 uiParamIndex) const override</div><div class="ttdoc">Returns the property flags of the given argument.</div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:45</div></div>
<div class="ttc" id="astructez_trait_int_htm"><div class="ttname"><a href="../../d6/d09/structez_trait_int.htm">ezTraitInt</a></div><div class="ttdoc">Type traits.</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:11</div></div>
<div class="ttc" id="astructez_property_flags_htm_a3c2cffe365eb84e9e31c93491fcf852fa61c7217b17359e552ea1ddc3d75fec11"><div class="ttname"><a href="../../d2/da3/structez_property_flags.htm#a3c2cffe365eb84e9e31c93491fcf852fa61c7217b17359e552ea1ddc3d75fec11">ezPropertyFlags::Const</a></div><div class="ttdeci">@ Const</div><div class="ttdoc">Property value is const.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:58</div></div>
<div class="ttc" id="aclassez_abstract_function_property_htm"><div class="ttname"><a href="../../d3/d4c/classez_abstract_function_property.htm">ezAbstractFunctionProperty</a></div><div class="ttdoc">The base class for a property that represents a function.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:539</div></div>
<div class="ttc" id="aclassez_function_property_3_01_r_07_5_08_07_args_8_8_8_08_4_htm_ac6d8fe2265fdb95329740efac3578fcf"><div class="ttname"><a href="../../d9/d18/classez_function_property_3_01_r_07_5_08_07_args_8_8_8_08_4.htm#ac6d8fe2265fdb95329740efac3578fcf">ezFunctionProperty&lt; R(*)(Args...)&gt;::Execute</a></div><div class="ttdeci">virtual void Execute(void *pInstance, ezArrayPtr&lt; ezVariant &gt; arguments, ezVariant &amp;out_returnValue) const override</div><div class="ttdoc">Calls the function. Provide the instance on which the function is supposed to be called.</div><div class="ttdef"><b>Definition:</b> FunctionProperty.h:169</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_217b90e143c3d27cf4319fb9e916f4ad.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_4d499b0494fc84c22e280b98d7f4832b.htm">Implementation</a></li><li class="navelem"><b>FunctionProperty.h</b></li>
    <li class="footer">Generated on Mon Mar 3 2025 17:23:44 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
