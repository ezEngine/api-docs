<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ezEngine: /home/runner/work/ezEngine/ezEngine/Code/Engine/Foundation/Types/Implementation/DelegateHelper_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../EZ-logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ezEngine
   &#160;<span id="projectnumber">Release 21.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('df/d4b/_delegate_helper__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DelegateHelper_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno"><a class="line" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">    3</a></span>&#160;<span class="keyword">struct </span>EZ_FOUNDATION_DLL <a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;{</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;  <a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>* Clone(<a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator) <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> InplaceCopy(ezUInt8* pBuffer) <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> InplaceMove(ezUInt8* pBuffer) = 0;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>(<span class="keyword">const</span> <a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>&amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>&amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  <a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>(<a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>&amp;&amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  <a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>&amp; operator=(<a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>&amp;&amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;};</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Function&gt;</div>
<div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="../../dd/dcc/structez_lambda_delegate_storage.htm">   19</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../dd/dcc/structez_lambda_delegate_storage.htm">ezLambdaDelegateStorage</a> : <span class="keyword">public</span> <a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  <a class="code" href="../../dd/dcc/structez_lambda_delegate_storage.htm">ezLambdaDelegateStorage</a>(Function&amp;&amp; func)</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    : m_func(std::move(func))</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  {</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  }</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  template &lt;typename = typename std::enable_if&lt;std::is_copy_constructible&lt;Function&gt;::value&gt;&gt;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  <a class="code" href="../../dd/dcc/structez_lambda_delegate_storage.htm">ezLambdaDelegateStorage</a>(<span class="keyword">const</span> Function&amp; func)</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    : m_func(func)</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  {</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  }</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>* Clone(<a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">if</span> constexpr (std::is_copy_constructible&lt;Function&gt;::value)</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;      <span class="keywordflow">return</span> EZ_NEW(pAllocator, <a class="code" href="../../dd/dcc/structez_lambda_delegate_storage.htm">ezLambdaDelegateStorage&lt;Function&gt;</a>, m_func);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    }</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;      EZ_REPORT_FAILURE(<span class="stringliteral">&quot;The ezDelegate stores a lambda that is not copyable. Copying this ezDelegate is not supported.&quot;</span>);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  }</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> InplaceCopy(ezUInt8* pBuffer)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span> constexpr (std::is_copy_constructible&lt;Function&gt;::value)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      <span class="keyword">new</span> (pBuffer) <a class="code" href="../../dd/dcc/structez_lambda_delegate_storage.htm">ezLambdaDelegateStorage&lt;Function&gt;</a>(m_func);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      EZ_REPORT_FAILURE(<span class="stringliteral">&quot;The ezDelegate stores a lambda that is not copyable. Copying this ezDelegate is not supported.&quot;</span>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  }</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> InplaceMove(ezUInt8* pBuffer)<span class="keyword"> override</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">if</span> constexpr (std::is_move_constructible&lt;Function&gt;::value)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      <span class="keyword">new</span> (pBuffer) <a class="code" href="../../dd/dcc/structez_lambda_delegate_storage.htm">ezLambdaDelegateStorage&lt;Function&gt;</a>(std::move(m_func));</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      EZ_REPORT_FAILURE(<span class="stringliteral">&quot;The ezDelegate stores a lambda that is not movable. Moving this ezDelegate is not supported.&quot;</span>);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  Function m_func;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;};</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">class</span>... Args, ezUInt32 DataSize&gt;</div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm">   76</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>&lt;R(Args...), DataSize&gt; : <span class="keyword">public</span> <a class="code" href="../../d5/dc3/classez_delegate_base.htm">ezDelegateBase</a></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm">SelfType</a> = <a class="code" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>&lt;R(Args...), DataSize&gt;;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  constexpr <span class="keyword">const</span> <span class="keywordtype">void</span>* HeapLambda()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">void</span>*<span class="keyword">&gt;</span>((size_t)-1); }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  constexpr <span class="keyword">const</span> <span class="keywordtype">void</span>* InplaceLambda()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">void</span>*<span class="keyword">&gt;</span>((size_t)-2); }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>()</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    : m_pDispatchFunction(<span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>(<span class="keyword">const</span> <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm">SelfType</a>&amp; other) { *<span class="keyword">this</span> = other; }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  EZ_ALWAYS_INLINE <a class="code" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>(<a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm">SelfType</a>&amp;&amp; other) { *<span class="keyword">this</span> = std::move(other); }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Method, <span class="keyword">typename</span> Class&gt;</div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a09c2dfcd182add6f1246f509910cd3b0">   95</a></span>&#160;  EZ_FORCE_INLINE <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a09c2dfcd182add6f1246f509910cd3b0">ezDelegate</a>(Method method, Class* pInstance)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    CopyMemberFunctionToInplaceStorage(method);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    m_pInstance.m_Ptr = pInstance;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    m_pDispatchFunction = &amp;DispatchToMethod&lt;Method, Class&gt;;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Method, <span class="keyword">typename</span> Class&gt;</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#ac62c84935e8322dee3c0958187ca096b">  105</a></span>&#160;  EZ_FORCE_INLINE <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#ac62c84935e8322dee3c0958187ca096b">ezDelegate</a>(Method method, <span class="keyword">const</span> Class* pInstance)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    CopyMemberFunctionToInplaceStorage(method);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    m_pInstance.m_ConstPtr = pInstance;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    m_pDispatchFunction = &amp;DispatchToConstMethod&lt;Method, Class&gt;;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Function&gt;</div>
<div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a1fda1119b12c6c5c89497d23c3e4fd8a">  115</a></span>&#160;  EZ_FORCE_INLINE <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a1fda1119b12c6c5c89497d23c3e4fd8a">ezDelegate</a>(Function <span class="keyword">function</span>, <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* pAllocator = <a class="code" href="../../d0/d49/classez_foundation.htm#a54836d4a247f8ea89b716701f1f1a4a7">ezFoundation::GetDefaultAllocator</a>())</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    EZ_CHECK_AT_COMPILETIME_MSG(DataSize &gt;= 16, <span class="stringliteral">&quot;DataSize must be at least 16 bytes&quot;</span>);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">// Pure function pointers or lambdas that can be cast into pure functions (no captures) can be</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// copied directly into the inplace storage of the delegate.</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// Lambdas with captures need to be wrapped into an ezLambdaDelegateStorage object as they can</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// capture non-pod or non-memmoveable data. This wrapper can also be stored inplace if it is small enough,</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="comment">// otherwise it will be heap allocated with the specified allocator.</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    constexpr <span class="keywordtype">size_t</span> functionSize = <span class="keyword">sizeof</span>(Function);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">using</span> signature = R(Args...);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">if</span> constexpr (functionSize &lt;= DataSize &amp;&amp; std::is_assignable&lt;signature*&amp;, Function&gt;::value)</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;      CopyFunctionToInplaceStorage(<span class="keyword">function</span>);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      m_pInstance.m_ConstPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      m_pDispatchFunction = &amp;DispatchToFunction&lt;Function&gt;;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      constexpr <span class="keywordtype">size_t</span> storageSize = <span class="keyword">sizeof</span>(<a class="code" href="../../dd/dcc/structez_lambda_delegate_storage.htm">ezLambdaDelegateStorage&lt;Function&gt;</a>);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      <span class="keywordflow">if</span> constexpr (storageSize &lt;= DataSize)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        m_pInstance.m_ConstPtr = InplaceLambda();</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keyword">new</span> (m_Data) <a class="code" href="../../dd/dcc/structez_lambda_delegate_storage.htm">ezLambdaDelegateStorage&lt;Function&gt;</a>(std::move(<span class="keyword">function</span>));</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        memset(m_Data + storageSize, 0, DataSize - storageSize);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        m_pDispatchFunction = &amp;DispatchToInplaceLambda&lt;Function&gt;;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        m_pInstance.m_ConstPtr = HeapLambda();</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        m_pLambdaStorage = EZ_NEW(pAllocator, <a class="code" href="../../dd/dcc/structez_lambda_delegate_storage.htm">ezLambdaDelegateStorage&lt;Function&gt;</a>, std::move(<span class="keyword">function</span>));</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        m_pAllocator = pAllocator;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        memset(m_Data + 2 * <span class="keyword">sizeof</span>(<span class="keywordtype">void</span>*), 0, DataSize - 2 * <span class="keyword">sizeof</span>(<span class="keywordtype">void</span>*));</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        m_pDispatchFunction = &amp;DispatchToHeapLambda&lt;Function&gt;;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;      }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  EZ_ALWAYS_INLINE ~<a class="code" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>() { Invalidate(); }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#aa2072d015f3ca5de31ef15eb0b22efe2">  157</a></span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#aa2072d015f3ca5de31ef15eb0b22efe2">operator=</a>(<span class="keyword">const</span> <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm">SelfType</a>&amp; other)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    Invalidate();</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">if</span> (other.IsHeapLambda())</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      m_pAllocator = other.m_pAllocator;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      m_pLambdaStorage = other.m_pLambdaStorage-&gt;Clone(m_pAllocator);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (other.IsInplaceLambda())</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      <span class="keyword">auto</span> pOtherLambdaStorage = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>*<span class="keyword">&gt;</span>(&amp;other.m_Data);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      pOtherLambdaStorage-&gt;InplaceCopy(m_Data);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      memcpy(m_Data, other.m_Data, DataSize);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    m_pInstance = other.m_pInstance;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    m_pDispatchFunction = other.m_pDispatchFunction;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  }</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a78101b7ac9cfebfd49d0aeb6ace4d3ea">  181</a></span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a78101b7ac9cfebfd49d0aeb6ace4d3ea">operator=</a>(<a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm">SelfType</a>&amp;&amp; other)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    Invalidate();</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    m_pInstance = other.m_pInstance;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    m_pDispatchFunction = other.m_pDispatchFunction;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">if</span> (other.IsInplaceLambda())</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      <span class="keyword">auto</span> pOtherLambdaStorage = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>*<span class="keyword">&gt;</span>(&amp;other.m_Data);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;      pOtherLambdaStorage-&gt;InplaceMove(m_Data);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;      memcpy(m_Data, other.m_Data, DataSize);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    other.m_pInstance.m_Ptr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    other.m_pDispatchFunction = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    memset(other.m_Data, 0, DataSize);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno"><a class="line" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#ac7af4563a8fd6bb7ba078628d152910e">  203</a></span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#ac7af4563a8fd6bb7ba078628d152910e">operator=</a>(std::nullptr_t) { Invalidate(); }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a55e3f0023ec6eca84017c99eea37a9ce">  206</a></span>&#160;  EZ_FORCE_INLINE R <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a55e3f0023ec6eca84017c99eea37a9ce">operator()</a>(Args... params)<span class="keyword"> const</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    EZ_ASSERT_DEBUG(m_pDispatchFunction != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Delegate is not bound.&quot;</span>);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">return</span> (*m_pDispatchFunction)(*<span class="keyword">this</span>, params...);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#abc4b48199e61fa712c56d1c7539549ce">  213</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#abc4b48199e61fa712c56d1c7539549ce">operator==</a>(<span class="keyword">const</span> <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm">SelfType</a>&amp; other)<span class="keyword"> const</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    EZ_REPORT_FAILURE(<span class="stringliteral">&quot;operator== for ezDelegate must not be used. Use IsEqualIfNotHeapAllocated() and read its documentation!&quot;</span>);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a32e64026e8d0b4bb645c0a7a61f12ba9">  223</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a32e64026e8d0b4bb645c0a7a61f12ba9">IsEqualIfComparable</a>(<span class="keyword">const</span> <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm">SelfType</a>&amp; other)<span class="keyword"> const</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">return</span> m_pInstance.m_Ptr == other.m_pInstance.m_Ptr &amp;&amp; m_pDispatchFunction == other.m_pDispatchFunction &amp;&amp;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;           memcmp(m_Data, other.m_Data, DataSize) == 0;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#aa797a42a45ab2ff8d71732b08deedca2">  230</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#aa797a42a45ab2ff8d71732b08deedca2">IsValid</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pDispatchFunction != <span class="keyword">nullptr</span>; }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#aedb7b2318091b1969e595a7467fc9943">  233</a></span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#aedb7b2318091b1969e595a7467fc9943">Invalidate</a>()</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    m_pDispatchFunction = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordflow">if</span> (IsHeapLambda())</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    {</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;      EZ_DELETE(m_pAllocator, m_pLambdaStorage);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IsInplaceLambda())</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;      <span class="keyword">auto</span> pLambdaStorage = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>*<span class="keyword">&gt;</span>(&amp;m_Data);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;      pLambdaStorage-&gt;~ezLambdaDelegateStorageBase();</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    m_pInstance.m_Ptr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    memset(m_Data, 0, DataSize);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno"><a class="line" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a1c38ac09b677cf13b3aa3f294bd1b9ef">  251</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">void</span>* <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a1c38ac09b677cf13b3aa3f294bd1b9ef">GetClassInstance</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> IsComparable() ? m_pInstance.m_Ptr : <span class="keyword">nullptr</span>; }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno"><a class="line" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#ad104ff4a5657cbbe27b957ea8489b568">  254</a></span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#ad104ff4a5657cbbe27b957ea8489b568">IsComparable</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pInstance.m_ConstPtr &lt; InplaceLambda(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Function&gt;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> CopyFunctionToInplaceStorage(Function <span class="keyword">function</span>)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    EZ_ASSERT_DEBUG(</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;      <a class="code" href="../../dc/d4d/classez_memory_utils.htm#aa7c2521406e21cf4c64519a4a460dffe">ezMemoryUtils::IsAligned</a>(&amp;m_Data, EZ_ALIGNMENT_OF(Function)), <span class="stringliteral">&quot;Wrong alignment. Expected {0} bytes alignment&quot;</span>, EZ_ALIGNMENT_OF(Function));</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    memcpy(m_Data, &amp;<span class="keyword">function</span>, <span class="keyword">sizeof</span>(Function));</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    memset(m_Data + <span class="keyword">sizeof</span>(Function), 0, DataSize - <span class="keyword">sizeof</span>(Function));</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Method&gt;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  EZ_FORCE_INLINE <span class="keywordtype">void</span> CopyMemberFunctionToInplaceStorage(Method method)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    EZ_CHECK_AT_COMPILETIME_MSG(DataSize &gt;= 16, <span class="stringliteral">&quot;DataSize must be at least 16 bytes&quot;</span>);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    EZ_CHECK_AT_COMPILETIME_MSG(<span class="keyword">sizeof</span>(Method) &lt;= DataSize, <span class="stringliteral">&quot;Member function pointer must not be bigger than 16 bytes&quot;</span>);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    CopyFunctionToInplaceStorage(method);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160; </div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="comment">// Member Function Pointers in MSVC are 12 bytes in size and have 4 byte padding</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="comment">// MSVC builds a member function pointer on the stack writing only 12 bytes and then copies it</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="comment">// to the final location by copying 16 bytes. Thus the 4 byte padding get a random value (whatever is on the stack at that time).</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="comment">// To make the delegate comparable by memcmp we zero out those 4 byte padding.</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="preprocessor">#if EZ_ENABLED(EZ_COMPILER_MSVC)</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    *<span class="keyword">reinterpret_cast&lt;</span>ezUInt32*<span class="keyword">&gt;</span>(m_Data + 12) = 0;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  }</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> IsInplaceLambda()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pInstance.m_ConstPtr == InplaceLambda(); }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  EZ_ALWAYS_INLINE <span class="keywordtype">bool</span> IsHeapLambda()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pInstance.m_ConstPtr == HeapLambda(); }</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Method, <span class="keyword">typename</span> Class&gt;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  <span class="keyword">static</span> EZ_FORCE_INLINE R DispatchToMethod(<span class="keyword">const</span> SelfType&amp; <span class="keyword">self</span>, Args... params)</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  {</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    EZ_ASSERT_DEBUG(<span class="keyword">self</span>.m_pInstance.m_Ptr != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Instance must not be null.&quot;</span>);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    Method method = *<span class="keyword">reinterpret_cast&lt;</span>Method*<span class="keyword">&gt;</span>(&amp;<span class="keyword">self</span>.m_Data);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(<span class="keyword">self</span>.m_pInstance.m_Ptr)-&gt;*method)(params...);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Method, <span class="keyword">typename</span> Class&gt;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <span class="keyword">static</span> EZ_FORCE_INLINE R DispatchToConstMethod(<span class="keyword">const</span> SelfType&amp; <span class="keyword">self</span>, Args... params)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    EZ_ASSERT_DEBUG(<span class="keyword">self</span>.m_pInstance.m_ConstPtr != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Instance must not be null.&quot;</span>);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    Method method = *<span class="keyword">reinterpret_cast&lt;</span>Method*<span class="keyword">&gt;</span>(&amp;<span class="keyword">self</span>.m_Data);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(<span class="keyword">self</span>.m_pInstance.m_ConstPtr)-&gt;*method)(params...);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Function&gt;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  <span class="keyword">static</span> EZ_ALWAYS_INLINE R DispatchToFunction(<span class="keyword">const</span> SelfType&amp; <span class="keyword">self</span>, Args... params)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordflow">return</span> (*<span class="keyword">reinterpret_cast&lt;</span>Function*<span class="keyword">&gt;</span>(&amp;<span class="keyword">self</span>.m_Data))(params...);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  }</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Function&gt;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  <span class="keyword">static</span> EZ_ALWAYS_INLINE R DispatchToHeapLambda(<span class="keyword">const</span> SelfType&amp; <span class="keyword">self</span>, Args... params)</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="../../dd/dcc/structez_lambda_delegate_storage.htm">ezLambdaDelegateStorage&lt;Function&gt;</a>*<span class="keyword">&gt;</span>(<span class="keyword">self</span>.m_pLambdaStorage)-&gt;m_func(params...);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  }</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160; </div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Function&gt;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  <span class="keyword">static</span> EZ_ALWAYS_INLINE R DispatchToInplaceLambda(<span class="keyword">const</span> SelfType&amp; <span class="keyword">self</span>, Args... params)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../dd/dcc/structez_lambda_delegate_storage.htm">ezLambdaDelegateStorage&lt;Function&gt;</a>*<span class="keyword">&gt;</span>(&amp;<span class="keyword">self</span>.m_Data)-&gt;m_func(params...);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  }</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160; </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  <span class="keyword">using</span> DispatchFunction = R (*)(<span class="keyword">const</span> SelfType&amp;, Args...);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  DispatchFunction m_pDispatchFunction;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160; </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keyword">union</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keyword">mutable</span> ezUInt8 m_Data[DataSize];</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keyword">struct</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;      <a class="code" href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a>* m_pLambdaStorage;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;      <a class="code" href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a>* m_pAllocator;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    };</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  };</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;};</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160; </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="keyword">struct </span><a class="code" href="../../d1/dbd/structez_make_delegate_helper.htm">ezMakeDelegateHelper</a></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;{</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;};</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160; </div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> R, <span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00341"></a><span class="lineno"><a class="line" href="../../d8/d63/structez_make_delegate_helper_3_01_r_07_class_1_1_5_08_07_args_8_8_8_08_4.htm">  341</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d1/dbd/structez_make_delegate_helper.htm">ezMakeDelegateHelper</a>&lt;R (Class::*)(Args...)&gt;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;{</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../d5/d68/structez_delegate.htm">DelegateType</a> = <a class="code" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>&lt;R(Args...)&gt;;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;};</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160; </div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> R, <span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00347"></a><span class="lineno"><a class="line" href="../../da/d07/structez_make_delegate_helper_3_01_r_07_class_1_1_5_08_07_args_8_8_8_08_01const_01_4.htm">  347</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d1/dbd/structez_make_delegate_helper.htm">ezMakeDelegateHelper</a>&lt;R (Class::*)(Args...) const&gt;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;{</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../d5/d68/structez_delegate.htm">DelegateType</a> = <a class="code" href="../../d5/d68/structez_delegate.htm">ezDelegate</a>&lt;R(Args...)&gt;;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;};</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructez_lambda_delegate_storage_htm"><div class="ttname"><a href="../../dd/dcc/structez_lambda_delegate_storage.htm">ezLambdaDelegateStorage</a></div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:19</div></div>
<div class="ttc" id="astructez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4_htm_ac62c84935e8322dee3c0958187ca096b"><div class="ttname"><a href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#ac62c84935e8322dee3c0958187ca096b">ezDelegate&lt; R(Args...), DataSize &gt;::ezDelegate</a></div><div class="ttdeci">EZ_FORCE_INLINE ezDelegate(Method method, const Class *pInstance)</div><div class="ttdoc">Constructs the delegate from a member function type and takes the (const) class instance on which to ...</div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:105</div></div>
<div class="ttc" id="aclassez_delegate_base_htm"><div class="ttname"><a href="../../d5/dc3/classez_delegate_base.htm">ezDelegateBase</a></div><div class="ttdoc">Base class for ezDelegate.</div><div class="ttdef"><b>Definition:</b> Delegate.h:6</div></div>
<div class="ttc" id="astructez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4_htm_a09c2dfcd182add6f1246f509910cd3b0"><div class="ttname"><a href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a09c2dfcd182add6f1246f509910cd3b0">ezDelegate&lt; R(Args...), DataSize &gt;::ezDelegate</a></div><div class="ttdeci">EZ_FORCE_INLINE ezDelegate(Method method, Class *pInstance)</div><div class="ttdoc">Constructs the delegate from a member function type and takes the class instance on which to call the...</div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:95</div></div>
<div class="ttc" id="aclassez_foundation_htm_a54836d4a247f8ea89b716701f1f1a4a7"><div class="ttname"><a href="../../d0/d49/classez_foundation.htm#a54836d4a247f8ea89b716701f1f1a4a7">ezFoundation::GetDefaultAllocator</a></div><div class="ttdeci">static EZ_ALWAYS_INLINE ezAllocatorBase * GetDefaultAllocator()</div><div class="ttdoc">The default allocator can be used for any kind of allocation if no alignment is required.</div><div class="ttdef"><b>Definition:</b> Basics.h:77</div></div>
<div class="ttc" id="astructez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4_htm_aedb7b2318091b1969e595a7467fc9943"><div class="ttname"><a href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#aedb7b2318091b1969e595a7467fc9943">ezDelegate&lt; R(Args...), DataSize &gt;::Invalidate</a></div><div class="ttdeci">EZ_FORCE_INLINE void Invalidate()</div><div class="ttdoc">Resets a delegate to an invalid state.</div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:233</div></div>
<div class="ttc" id="astructez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4_htm_a1c38ac09b677cf13b3aa3f294bd1b9ef"><div class="ttname"><a href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a1c38ac09b677cf13b3aa3f294bd1b9ef">ezDelegate&lt; R(Args...), DataSize &gt;::GetClassInstance</a></div><div class="ttdeci">EZ_ALWAYS_INLINE void * GetClassInstance() const</div><div class="ttdoc">Returns the class instance that is used to call a member function pointer on.</div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:251</div></div>
<div class="ttc" id="astructez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4_htm_ac7af4563a8fd6bb7ba078628d152910e"><div class="ttname"><a href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#ac7af4563a8fd6bb7ba078628d152910e">ezDelegate&lt; R(Args...), DataSize &gt;::operator=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator=(std::nullptr_t)</div><div class="ttdoc">Resets a delegate to an invalid state.</div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:203</div></div>
<div class="ttc" id="astructez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4_htm_a55e3f0023ec6eca84017c99eea37a9ce"><div class="ttname"><a href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a55e3f0023ec6eca84017c99eea37a9ce">ezDelegate&lt; R(Args...), DataSize &gt;::operator()</a></div><div class="ttdeci">EZ_FORCE_INLINE R operator()(Args... params) const</div><div class="ttdoc">Function call operator. This will call the function that is bound to the delegate,...</div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:206</div></div>
<div class="ttc" id="astructez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4_htm_a78101b7ac9cfebfd49d0aeb6ace4d3ea"><div class="ttname"><a href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a78101b7ac9cfebfd49d0aeb6ace4d3ea">ezDelegate&lt; R(Args...), DataSize &gt;::operator=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator=(SelfType &amp;&amp;other)</div><div class="ttdoc">Moves the data from another delegate.</div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:181</div></div>
<div class="ttc" id="astructez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4_htm_abc4b48199e61fa712c56d1c7539549ce"><div class="ttname"><a href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#abc4b48199e61fa712c56d1c7539549ce">ezDelegate&lt; R(Args...), DataSize &gt;::operator==</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool operator==(const SelfType &amp;other) const</div><div class="ttdoc">This function only exists to make code compile, but it will assert when used. Use IsEqualIfNotHeapAll...</div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:213</div></div>
<div class="ttc" id="aclassez_memory_utils_htm_aa7c2521406e21cf4c64519a4a460dffe"><div class="ttname"><a href="../../dc/d4d/classez_memory_utils.htm#aa7c2521406e21cf4c64519a4a460dffe">ezMemoryUtils::IsAligned</a></div><div class="ttdeci">static bool IsAligned(const T *ptr, size_t uiAlignment)</div><div class="ttdoc">Checks whether ptr is aligned to a memory address that is a multiple of uiAlignment.</div></div>
<div class="ttc" id="aclassez_allocator_base_htm"><div class="ttname"><a href="../../d1/d4c/classez_allocator_base.htm">ezAllocatorBase</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> AllocatorBase.h:22</div></div>
<div class="ttc" id="astructez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4_htm_aa2072d015f3ca5de31ef15eb0b22efe2"><div class="ttname"><a href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#aa2072d015f3ca5de31ef15eb0b22efe2">ezDelegate&lt; R(Args...), DataSize &gt;::operator=</a></div><div class="ttdeci">EZ_FORCE_INLINE void operator=(const SelfType &amp;other)</div><div class="ttdoc">Copies the data from another delegate.</div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:157</div></div>
<div class="ttc" id="astructez_delegate_htm"><div class="ttname"><a href="../../d5/d68/structez_delegate.htm">ezDelegate</a></div><div class="ttdoc">A generic delegate class which supports static functions and member functions.</div><div class="ttdef"><b>Definition:</b> Delegate.h:75</div></div>
<div class="ttc" id="astructez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4_htm_ad104ff4a5657cbbe27b957ea8489b568"><div class="ttname"><a href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#ad104ff4a5657cbbe27b957ea8489b568">ezDelegate&lt; R(Args...), DataSize &gt;::IsComparable</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsComparable() const</div><div class="ttdoc">Returns whether the delegate is comparable with other delegates of the same type. This is not the cas...</div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:254</div></div>
<div class="ttc" id="astructez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4_htm_a32e64026e8d0b4bb645c0a7a61f12ba9"><div class="ttname"><a href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a32e64026e8d0b4bb645c0a7a61f12ba9">ezDelegate&lt; R(Args...), DataSize &gt;::IsEqualIfComparable</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsEqualIfComparable(const SelfType &amp;other) const</div><div class="ttdoc">Checks whether two delegates are bound to the exact same function, including the class instance.</div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:223</div></div>
<div class="ttc" id="astructez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4_htm_a1fda1119b12c6c5c89497d23c3e4fd8a"><div class="ttname"><a href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#a1fda1119b12c6c5c89497d23c3e4fd8a">ezDelegate&lt; R(Args...), DataSize &gt;::ezDelegate</a></div><div class="ttdeci">EZ_FORCE_INLINE ezDelegate(Function function, ezAllocatorBase *pAllocator=ezFoundation::GetDefaultAllocator())</div><div class="ttdoc">Constructs the delegate from a regular C function type.</div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:115</div></div>
<div class="ttc" id="astructez_make_delegate_helper_htm"><div class="ttname"><a href="../../d1/dbd/structez_make_delegate_helper.htm">ezMakeDelegateHelper</a></div><div class="ttdef"><b>Definition:</b> Delegate.h:80</div></div>
<div class="ttc" id="astructez_lambda_delegate_storage_base_htm"><div class="ttname"><a href="../../d0/d58/structez_lambda_delegate_storage_base.htm">ezLambdaDelegateStorageBase</a></div><div class="ttdoc">[Internal] Storage for lambdas with captures in ezDelegate.</div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:3</div></div>
<div class="ttc" id="astructez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4_htm"><div class="ttname"><a href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm">ezDelegate&lt; R(Args...), DataSize &gt;</a></div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:76</div></div>
<div class="ttc" id="astructez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4_htm_aa797a42a45ab2ff8d71732b08deedca2"><div class="ttname"><a href="../../de/df7/structez_delegate_3_01_r_07_args_8_8_8_08_00_01_data_size_01_4.htm#aa797a42a45ab2ff8d71732b08deedca2">ezDelegate&lt; R(Args...), DataSize &gt;::IsValid</a></div><div class="ttdeci">EZ_ALWAYS_INLINE bool IsValid() const</div><div class="ttdoc">Returns true when the delegate is bound to a valid non-nullptr function.</div><div class="ttdef"><b>Definition:</b> DelegateHelper_inl.h:230</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_915904df4e2c9d6aaec5e4f68658d2dd.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_5c4c7e4a15e643c7da040f906f2ba5c5.htm">ezEngine</a></li><li class="navelem"><a class="el" href="../../dir_d9e5f712eee30f228fb2a3d56da53e33.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_5471e92246f162412d7d0c81097fb3f4.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_a38a3ced8161f20ff6bf34f1243b8348.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_f95f7c440efc771b227d40e9293549bd.htm">Types</a></li><li class="navelem"><a class="el" href="../../dir_81708b2bf5e0f7f3d10c3c7a8700c5a1.htm">Implementation</a></li><li class="navelem"><b>DelegateHelper_inl.h</b></li>
    <li class="footer">Generated on Tue Jun 8 2021 21:43:12 for ezEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
